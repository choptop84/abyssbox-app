var beepbox = (function (exports) {
    'use strict';

    /*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */
    var __awaiter$1 = (exports && exports.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const TypePresets = ["chip", "FM", "noise", "spectrum", "drumset", "harmonics", "pulse width", "picked string", "supersaw", "chip (custom)", "mod", "FM (6-op)"];
    function getSampleLoadingStatusName(status) {
        switch (status) {
            case 0: return "loading";
            case 1: return "loaded";
            case 2: return "error";
        }
    }
    class SampleLoadingState {
        constructor() {
            this.statusTable = {};
            this.urlTable = {};
            this.totalSamples = 0;
            this.samplesLoaded = 0;
        }
    }
    const sampleLoadingState = new SampleLoadingState();
    class SampleLoadedEvent extends Event {
        constructor(totalSamples, samplesLoaded) {
            super("sampleloaded");
            this.totalSamples = totalSamples;
            this.samplesLoaded = samplesLoaded;
        }
    }
    class SampleLoadEvents extends EventTarget {
        constructor() {
            super();
        }
    }
    const sampleLoadEvents = new SampleLoadEvents();
    function startLoadingSample(url, chipWaveIndex, presetSettings, rawLoopOptions, customSampleRate) {
        return __awaiter$1(this, void 0, void 0, function* () {
            const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });
            let closedSampleLoaderAudioContext = false;
            const chipWave = Config.chipWaves[chipWaveIndex];
            const rawChipWave = Config.rawChipWaves[chipWaveIndex];
            const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];
            fetch(url).then((response) => {
                if (!response.ok) {
                    sampleLoadingState.statusTable[chipWaveIndex] = 2;
                    return Promise.reject(new Error("Couldn't load sample"));
                }
                return response.arrayBuffer();
            }).then((arrayBuffer) => {
                return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);
            }).then((audioBuffer) => {
                const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));
                const integratedSamples = performIntegral(samples);
                chipWave.samples = integratedSamples;
                rawChipWave.samples = samples;
                rawRawChipWave.samples = samples;
                if (rawLoopOptions["isUsingAdvancedLoopControls"]) {
                    presetSettings["chipWaveLoopStart"] = rawLoopOptions["chipWaveLoopStart"] != null ? rawLoopOptions["chipWaveLoopStart"] : 0;
                    presetSettings["chipWaveLoopEnd"] = rawLoopOptions["chipWaveLoopEnd"] != null ? rawLoopOptions["chipWaveLoopEnd"] : samples.length - 1;
                    presetSettings["chipWaveLoopMode"] = rawLoopOptions["chipWaveLoopMode"] != null ? rawLoopOptions["chipWaveLoopMode"] : 0;
                    presetSettings["chipWavePlayBackwards"] = rawLoopOptions["chipWavePlayBackwards"];
                    presetSettings["chipWaveStartOffset"] = rawLoopOptions["chipWaveStartOffset"] != null ? rawLoopOptions["chipWaveStartOffset"] : 0;
                }
                sampleLoadingState.samplesLoaded++;
                sampleLoadingState.statusTable[chipWaveIndex] = 1;
                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
                if (!closedSampleLoaderAudioContext) {
                    closedSampleLoaderAudioContext = true;
                    sampleLoaderAudioContext.close();
                }
            }).catch((error) => {
                sampleLoadingState.statusTable[chipWaveIndex] = 2;
                alert("Failed to load " + url + ":\n" + error);
                if (!closedSampleLoaderAudioContext) {
                    closedSampleLoaderAudioContext = true;
                    sampleLoaderAudioContext.close();
                }
            });
        });
    }
    function getLocalStorageItem(key, defaultValue) {
        let value = localStorage.getItem(key);
        if (value == null || value === "null" || value === "undefined") {
            value = defaultValue;
        }
        return value;
    }
    function loadScript(url) {
        const result = new Promise((resolve, reject) => {
            if (!Config.willReloadForCustomSamples) {
                const script = document.createElement("script");
                script.src = url;
                document.head.appendChild(script);
                script.addEventListener("load", (event) => {
                    resolve();
                });
            }
        });
        return result;
    }
    function loadBuiltInSamples(set) {
        const defaultIndex = 0;
        const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;
        const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;
        if (set == 0) {
            const chipWaves = [
                { name: "paandorasbox kick", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "paandorasbox snare", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "paandorasbox piano1", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },
                { name: "paandorasbox WOW", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },
                { name: "paandorasbox overdrive", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },
                { name: "paandorasbox trumpet", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },
                { name: "paandorasbox saxophone", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },
                { name: "paandorasbox orchestrahit", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },
                { name: "paandorasbox detatched violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },
                { name: "paandorasbox synth", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },
                { name: "paandorasbox sonic3snare", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "paandorasbox come on", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },
                { name: "paandorasbox choir", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },
                { name: "paandorasbox overdriveguitar", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },
                { name: "paandorasbox flute", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },
                { name: "paandorasbox legato violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },
                { name: "paandorasbox tremolo violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },
                { name: "paandorasbox amen break", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },
                { name: "paandorasbox pizzicato violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },
                { name: "paandorasbox tim allen grunt", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },
                { name: "paandorasbox tuba", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },
                { name: "paandorasbox loopingcymbal", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },
                { name: "paandorasbox standardkick", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },
                { name: "paandorasbox standardsnare", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "paandorasbox closedhihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },
                { name: "paandorasbox foothihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },
                { name: "paandorasbox openhihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },
                { name: "paandorasbox crashcymbal", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },
                { name: "paandorasbox pianoC4", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },
                { name: "paandorasbox liver pad", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },
                { name: "paandorasbox marimba", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },
                { name: "paandorasbox susdotwav", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },
                { name: "paandorasbox wackyboxtts", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },
                { name: "paandorasbox peppersteak_1", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },
                { name: "paandorasbox peppersteak_2", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },
                { name: "paandorasbox vinyl_noise", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },
                { name: "paandorasbeta slap bass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },
                { name: "paandorasbeta HD EB overdrive guitar", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },
                { name: "paandorasbeta sunsoft bass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },
                { name: "paandorasbeta masculine choir", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },
                { name: "paandorasbeta feminine choir", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },
                { name: "paandorasbeta tololoche", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },
                { name: "paandorasbeta harp", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },
                { name: "paandorasbeta pan flute", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },
                { name: "paandorasbeta krumhorn", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },
                { name: "paandorasbeta timpani", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },
                { name: "paandorasbeta crowd hey", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },
                { name: "paandorasbeta wario land 4 brass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },
                { name: "paandorasbeta wario land 4 rock organ", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },
                { name: "paandorasbeta wario land 4 DAOW", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },
                { name: "paandorasbeta wario land 4 hour chime", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },
                { name: "paandorasbeta wario land 4 tick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },
                { name: "paandorasbeta kirby kick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },
                { name: "paandorasbeta kirby snare", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },
                { name: "paandorasbeta kirby bongo", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },
                { name: "paandorasbeta kirby click", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },
                { name: "paandorasbeta sonor kick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },
                { name: "paandorasbeta sonor snare", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },
                { name: "paandorasbeta sonor snare (left hand)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },
                { name: "paandorasbeta sonor snare (right hand)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },
                { name: "paandorasbeta sonor high tom", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },
                { name: "paandorasbeta sonor low tom", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },
                { name: "paandorasbeta sonor hihat (closed)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },
                { name: "paandorasbeta sonor hihat (half opened)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },
                { name: "paandorasbeta sonor hihat (open)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },
                { name: "paandorasbeta sonor hihat (open tip)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },
                { name: "paandorasbeta sonor hihat (pedal)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },
                { name: "paandorasbeta sonor crash", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },
                { name: "paandorasbeta sonor crash (tip)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },
                { name: "paandorasbeta sonor ride", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }
            ];
            sampleLoadingState.totalSamples += chipWaves.length;
            const startIndex = Config.rawRawChipWaves.length;
            for (const chipWave of chipWaves) {
                const chipWaveIndex = Config.rawRawChipWaves.length;
                const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };
                Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;
                Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;
                Config.rawChipWaves[chipWaveIndex] = rawChipWave;
                Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;
                Config.chipWaves[chipWaveIndex] = integratedChipWave;
                Config.chipWaves.dictionary[chipWave.name] = rawChipWave;
                sampleLoadingState.statusTable[chipWaveIndex] = 0;
                sampleLoadingState.urlTable[chipWaveIndex] = "legacySamples";
            }
            loadScript("samples.js")
                .then(() => loadScript("samples2.js"))
                .then(() => loadScript("samples3.js"))
                .then(() => loadScript("drumsamples.js"))
                .then(() => loadScript("wario_samples.js"))
                .then(() => loadScript("kirby_samples.js"))
                .then(() => {
                const chipWaveSamples = [
                    centerWave(kicksample),
                    centerWave(snaresample),
                    centerWave(pianosample),
                    centerWave(WOWsample),
                    centerWave(overdrivesample),
                    centerWave(trumpetsample),
                    centerWave(saxophonesample),
                    centerWave(orchhitsample),
                    centerWave(detatchedviolinsample),
                    centerWave(synthsample),
                    centerWave(sonic3snaresample),
                    centerWave(comeonsample),
                    centerWave(choirsample),
                    centerWave(overdrivensample),
                    centerWave(flutesample),
                    centerWave(legatoviolinsample),
                    centerWave(tremoloviolinsample),
                    centerWave(amenbreaksample),
                    centerWave(pizzicatoviolinsample),
                    centerWave(timallengruntsample),
                    centerWave(tubasample),
                    centerWave(loopingcymbalsample),
                    centerWave(kickdrumsample),
                    centerWave(snaredrumsample),
                    centerWave(closedhihatsample),
                    centerWave(foothihatsample),
                    centerWave(openhihatsample),
                    centerWave(crashsample),
                    centerWave(pianoC4sample),
                    centerWave(liverpadsample),
                    centerWave(marimbasample),
                    centerWave(susdotwavsample),
                    centerWave(wackyboxttssample),
                    centerWave(peppersteak1),
                    centerWave(peppersteak2),
                    centerWave(vinyl),
                    centerWave(slapbass),
                    centerWave(hdeboverdrive),
                    centerWave(sunsoftbass),
                    centerWave(masculinechoir),
                    centerWave(femininechoir),
                    centerWave(southtololoche),
                    centerWave(harp),
                    centerWave(panflute),
                    centerWave(krumhorn),
                    centerWave(timpani),
                    centerWave(crowdhey),
                    centerWave(warioland4brass),
                    centerWave(warioland4organ),
                    centerWave(warioland4daow),
                    centerWave(warioland4hourchime),
                    centerWave(warioland4tick),
                    centerWave(kirbykick),
                    centerWave(kirbysnare),
                    centerWave(kirbybongo),
                    centerWave(kirbyclick),
                    centerWave(funkkick),
                    centerWave(funksnare),
                    centerWave(funksnareleft),
                    centerWave(funksnareright),
                    centerWave(funktomhigh),
                    centerWave(funktomlow),
                    centerWave(funkhihatclosed),
                    centerWave(funkhihathalfopen),
                    centerWave(funkhihatopen),
                    centerWave(funkhihatopentip),
                    centerWave(funkhihatfoot),
                    centerWave(funkcrash),
                    centerWave(funkcrashtip),
                    centerWave(funkride)
                ];
                let chipWaveIndexOffset = 0;
                for (const chipWaveSample of chipWaveSamples) {
                    const chipWaveIndex = startIndex + chipWaveIndexOffset;
                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);
                    sampleLoadingState.statusTable[chipWaveIndex] = 1;
                    sampleLoadingState.samplesLoaded++;
                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
                    chipWaveIndexOffset++;
                }
            });
        }
        else if (set == 1) {
            const chipWaves = [
                { name: "chronoperc1final", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "synthkickfm", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "mcwoodclick1", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },
                { name: "acoustic snare", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }
            ];
            sampleLoadingState.totalSamples += chipWaves.length;
            const startIndex = Config.rawRawChipWaves.length;
            for (const chipWave of chipWaves) {
                const chipWaveIndex = Config.rawRawChipWaves.length;
                const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };
                Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;
                Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;
                Config.rawChipWaves[chipWaveIndex] = rawChipWave;
                Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;
                Config.chipWaves[chipWaveIndex] = integratedChipWave;
                Config.chipWaves.dictionary[chipWave.name] = rawChipWave;
                sampleLoadingState.statusTable[chipWaveIndex] = 0;
                sampleLoadingState.urlTable[chipWaveIndex] = "nintariboxSamples";
            }
            loadScript("nintaribox_samples.js")
                .then(() => {
                const chipWaveSamples = [
                    centerWave(chronoperc1finalsample),
                    centerWave(synthkickfmsample),
                    centerWave(woodclicksample),
                    centerWave(acousticsnaresample)
                ];
                let chipWaveIndexOffset = 0;
                for (const chipWaveSample of chipWaveSamples) {
                    const chipWaveIndex = startIndex + chipWaveIndexOffset;
                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);
                    sampleLoadingState.statusTable[chipWaveIndex] = 1;
                    sampleLoadingState.samplesLoaded++;
                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
                    chipWaveIndexOffset++;
                }
            });
        }
        else if (set == 2) {
            const chipWaves = [
                { name: "cat", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },
                { name: "gameboy", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },
                { name: "mario", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },
                { name: "drum", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },
                { name: "yoshi", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },
                { name: "star", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },
                { name: "fire flower", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },
                { name: "dog", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },
                { name: "oink", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },
                { name: "swan", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },
                { name: "face", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }
            ];
            sampleLoadingState.totalSamples += chipWaves.length;
            const startIndex = Config.rawRawChipWaves.length;
            for (const chipWave of chipWaves) {
                const chipWaveIndex = Config.rawRawChipWaves.length;
                const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };
                const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };
                Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;
                Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;
                Config.rawChipWaves[chipWaveIndex] = rawChipWave;
                Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;
                Config.chipWaves[chipWaveIndex] = integratedChipWave;
                Config.chipWaves.dictionary[chipWave.name] = rawChipWave;
                sampleLoadingState.statusTable[chipWaveIndex] = 0;
                sampleLoadingState.urlTable[chipWaveIndex] = "marioPaintboxSamples";
            }
            loadScript("mario_paintbox_samples.js")
                .then(() => {
                const chipWaveSamples = [
                    centerWave(catpaintboxsample),
                    centerWave(gameboypaintboxsample),
                    centerWave(mariopaintboxsample),
                    centerWave(drumpaintboxsample),
                    centerWave(yoshipaintboxsample),
                    centerWave(starpaintboxsample),
                    centerWave(fireflowerpaintboxsample),
                    centerWave(dogpaintbox),
                    centerWave(oinkpaintbox),
                    centerWave(swanpaintboxsample),
                    centerWave(facepaintboxsample)
                ];
                let chipWaveIndexOffset = 0;
                for (const chipWaveSample of chipWaveSamples) {
                    const chipWaveIndex = startIndex + chipWaveIndexOffset;
                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;
                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);
                    sampleLoadingState.statusTable[chipWaveIndex] = 1;
                    sampleLoadingState.samplesLoaded++;
                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
                    chipWaveIndexOffset++;
                }
            });
        }
        else {
            console.log("invalid set of built-in samples");
        }
    }
    class Config {
    }
    Config.thresholdVal = -10;
    Config.kneeVal = 40;
    Config.ratioVal = 12;
    Config.attackVal = 0;
    Config.releaseVal = 0.25;
    Config.willReloadForCustomSamples = false;
    Config.jsonFormat = "UltraBox";
    Config.scales = toNameMap([
        { name: "Free", realName: "chromatic", flags: [true, true, true, true, true, true, true, true, true, true, true, true] },
        { name: "Major", realName: "ionian", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },
        { name: "Minor", realName: "aeolian", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },
        { name: "Mixolydian", realName: "mixolydian", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },
        { name: "Lydian", realName: "lydian", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },
        { name: "Dorian", realName: "dorian", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },
        { name: "Phrygian", realName: "phrygian", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },
        { name: "Locrian", realName: "locrian", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },
        { name: "Lydian Dominant", realName: "lydian dominant", flags: [true, false, true, false, true, false, true, true, false, true, true, false] },
        { name: "Phrygian Dominant", realName: "phrygian dominant", flags: [true, true, false, false, true, true, false, true, true, false, true, false] },
        { name: "Harmonic Major", realName: "harmonic major", flags: [true, false, true, false, true, true, false, true, true, false, false, true] },
        { name: "Harmonic Minor", realName: "harmonic minor", flags: [true, false, true, true, false, true, false, true, true, false, false, true] },
        { name: "Melodic Minor", realName: "melodic minor", flags: [true, false, true, true, false, true, false, true, false, true, false, true] },
        { name: "Blues", realName: "blues", flags: [true, false, false, true, false, true, true, true, false, false, true, false] },
        { name: "Altered", realName: "altered", flags: [true, true, false, true, true, false, true, false, true, false, true, false] },
        { name: "Major Pentatonic", realName: "major pentatonic", flags: [true, false, true, false, true, false, false, true, false, true, false, false] },
        { name: "Minor Pentatonic", realName: "minor pentatonic", flags: [true, false, false, true, false, true, false, true, false, false, true, false] },
        { name: "Whole Tone", realName: "whole tone", flags: [true, false, true, false, true, false, true, false, true, false, true, false] },
        { name: "Octatonic", realName: "octatonic", flags: [true, false, true, true, false, true, true, false, true, true, false, true] },
        { name: "Hexatonic", realName: "hexatonic", flags: [true, false, false, true, true, false, false, true, true, false, false, true] },
        { name: "No Dabbing", realName: "no dabbing", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },
        { name: "Jacked Toad", realName: "jacked toad", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },
        { name: "Dumb", realName: "Originally named, currently named, and will always be named 'dumb.'", flags: [true, false, false, false, false, true, true, true, true, false, false, true] },
        { name: "Test Scale", realName: "**t", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },
        { name: "die", realName: "death", flags: [true, false, false, false, false, false, false, false, true, false, false, false] },
        { name: "Custom", realName: "custom", flags: [true, false, true, true, false, false, false, true, true, false, true, true] },
    ]);
    Config.keys = toNameMap([
        { name: "C", isWhiteKey: true, basePitch: 12 },
        { name: "C♯", isWhiteKey: false, basePitch: 13 },
        { name: "D", isWhiteKey: true, basePitch: 14 },
        { name: "D♯", isWhiteKey: false, basePitch: 15 },
        { name: "E", isWhiteKey: true, basePitch: 16 },
        { name: "F", isWhiteKey: true, basePitch: 17 },
        { name: "F♯", isWhiteKey: false, basePitch: 18 },
        { name: "G", isWhiteKey: true, basePitch: 19 },
        { name: "G♯", isWhiteKey: false, basePitch: 20 },
        { name: "A", isWhiteKey: true, basePitch: 21 },
        { name: "A♯", isWhiteKey: false, basePitch: 22 },
        { name: "B", isWhiteKey: true, basePitch: 23 },
    ]);
    Config.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];
    Config.tempoMin = 1;
    Config.tempoMax = 500;
    Config.octaveMin = -2;
    Config.octaveMax = 2;
    Config.echoDelayRange = 24;
    Config.echoDelayStepTicks = 4;
    Config.echoSustainRange = 8;
    Config.echoShelfHz = 4000.0;
    Config.echoShelfGain = Math.pow(2.0, -0.5);
    Config.reverbShelfHz = 8000.0;
    Config.reverbShelfGain = Math.pow(2.0, -1.5);
    Config.reverbRange = 32;
    Config.reverbDelayBufferSize = 16384;
    Config.reverbDelayBufferMask = Config.reverbDelayBufferSize - 1;
    Config.phaserMixRange = 32;
    Config.phaserFeedbackRange = 32;
    Config.phaserFreqRange = 32;
    Config.phaserMinFreq = 8.0;
    Config.phaserMaxFreq = 20000.0;
    Config.phaserMinStages = 0;
    Config.phaserMaxStages = 32;
    Config.beatsPerBarMin = 1;
    Config.beatsPerBarMax = 64;
    Config.barCountMin = 1;
    Config.barCountMax = 1024;
    Config.instrumentCountMin = 1;
    Config.layeredInstrumentCountMax = 10;
    Config.patternInstrumentCountMax = 10;
    Config.partsPerBeat = 24;
    Config.ticksPerPart = 2;
    Config.ticksPerArpeggio = 3;
    Config.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];
    Config.rhythms = toNameMap([
        { name: "÷1 (whole notes)", stepsPerBeat: 1, roundUpThresholds: [3] },
        { name: "÷2 (half notes)", stepsPerBeat: 2, roundUpThresholds: [3, 9] },
        { name: "÷3 (triplets)", stepsPerBeat: 3, roundUpThresholds: [5, 12, 18] },
        { name: "÷4 (standard)", stepsPerBeat: 4, roundUpThresholds: [3, 9, 17, 21] },
        { name: "÷6 (sextuplets)", stepsPerBeat: 6, roundUpThresholds: null },
        { name: "÷8 (32nd notes)", stepsPerBeat: 8, roundUpThresholds: null },
        { name: "÷12 (doudectuplets)", stepsPerBeat: 12, roundUpThresholds: null },
        { name: "freehand", stepsPerBeat: 24, roundUpThresholds: null },
    ]);
    Config.instrumentTypeNames = ["chip", "FM", "noise", "spectrum", "drumset", "harmonics", "PWM", "Picked String", "supersaw", "custom chip", "mod", "FM6op"];
    Config.instrumentTypeHasSpecialInterval = [true, true, false, false, false, true, false, false, false, false, false];
    Config.chipBaseExpression = 0.03375;
    Config.fmBaseExpression = 0.03;
    Config.noiseBaseExpression = 0.19;
    Config.spectrumBaseExpression = 0.3;
    Config.drumsetBaseExpression = 0.45;
    Config.harmonicsBaseExpression = 0.025;
    Config.pwmBaseExpression = 0.04725;
    Config.supersawBaseExpression = 0.061425;
    Config.pickedStringBaseExpression = 0.025;
    Config.distortionBaseVolume = 0.011;
    Config.bitcrusherBaseVolume = 0.010;
    Config.rawChipWaves = toNameMap([
        { name: "rounded", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },
        { name: "triangle", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },
        { name: "square", expression: 0.5, samples: centerWave([1.0, -1.0]) },
        { name: "1/4 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },
        { name: "1/8 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "sawtooth", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },
        { name: "double saw", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },
        { name: "double pulse", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "spiky", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },
        { name: "sine", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },
        { name: "flute", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },
        { name: "harp", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },
        { name: "sharp clarinet", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },
        { name: "soft clarinet", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },
        { name: "alto sax", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },
        { name: "bassoon", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },
        { name: "trumpet", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },
        { name: "electric guitar", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },
        { name: "organ", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },
        { name: "pan flute", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },
        { name: "glitch", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },
        { name: "trapezoid", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },
        { name: "modbox 10% pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "modbox sunsoft bass", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },
        { name: "modbox loud pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },
        { name: "modbox sax", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },
        { name: "modbox guitar", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },
        { name: "modbox sine", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },
        { name: "modbox atari bass", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },
        { name: "modbox atari pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },
        { name: "modbox 1% pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "modbox curved sawtooth", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },
        { name: "modbox viola", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },
        { name: "modbox brass", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },
        { name: "modbox acoustic bass", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },
        { name: "modbox lyre", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },
        { name: "modbox ramp pulse", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },
        { name: "modbox piccolo", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },
        { name: "modbox squaretooth", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },
        { name: "modbox flatline", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },
        { name: "modbox pnryshk a (u5)", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },
        { name: "modbox pnryshk b (riff)", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },
        { name: "sandbox shrill lute", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },
        { name: "sandbox bassoon", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },
        { name: "sandbox shrill bass", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },
        { name: "sandbox nes pulse", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },
        { name: "sandbox saw bass", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },
        { name: "sandbox euphonium", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },
        { name: "sandbox shrill pulse", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },
        { name: "sandbox r-sawtooth", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },
        { name: "sandbox recorder", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },
        { name: "sandbox narrow saw", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },
        { name: "sandbox deep square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },
        { name: "sandbox ring pulse", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "sandbox double sine", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },
        { name: "sandbox contrabass", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },
        { name: "sandbox double bass", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },
        { name: "haileybox test1", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },
        { name: "brucebox pokey 4bit lfsr", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },
        { name: "brucebox pokey 5step bass", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },
        { name: "brucebox isolated spiky", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },
        { name: "nerdbox unnamed 1", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },
        { name: "nerdbox unnamed 2", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },
        { name: "zefbox semi-square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },
        { name: "zefbox deep square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },
        { name: "zefbox squaretal", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },
        { name: "zefbox saw wide", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },
        { name: "zefbox saw narrow", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },
        { name: "zefbox deep sawtooth", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },
        { name: "zefbox sawtal", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },
        { name: "zefbox deep sawtal", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },
        { name: "zefbox pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },
        { name: "zefbox triple pulse", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },
        { name: "zefbox high pulse", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },
        { name: "zefbox deep pulse", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },
        { name: "wackybox guitar string", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },
        { name: "wackybox intense", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },
        { name: "wackybox buzz wave", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },
        { name: "todbox 1/3 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },
        { name: "todbox 1/5 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "todbox slap bass", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },
        { name: "todbox harsh wave", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "todbox accordian", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },
        { name: "todbox beta banana wave", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },
        { name: "todbox beta test wave", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },
        { name: "todbox beta real snare", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },
        { name: "ultrabox shortened od guitar", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },
    ]);
    Config.chipWaves = rawChipToIntegrated(Config.rawChipWaves);
    Config.rawRawChipWaves = Config.rawChipWaves;
    Config.firstIndexForSamplesInChipWaveList = Config.chipWaves.length;
    Config.chipNoises = toNameMap([
        { name: "retro", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "white", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
        { name: "clang", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "buzz", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "hollow", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },
        { name: "shine", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "deep", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },
        { name: "cutter", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "metallic", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "static", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "1-bit white", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "1-bit metallic", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "crackling", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "pink", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
        { name: "brownian", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
    ]);
    Config.filterFreqStep = 1.0 / 4.0;
    Config.filterFreqRange = 34;
    Config.filterFreqReferenceSetting = 28;
    Config.filterFreqReferenceHz = 8000.0;
    Config.filterFreqMaxHz = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting));
    Config.filterFreqMinHz = 8.0;
    Config.filterGainRange = 15;
    Config.filterGainCenter = 7;
    Config.filterGainStep = 1.0 / 2.0;
    Config.filterMaxPoints = 8;
    Config.filterTypeNames = ["low-pass", "high-pass", "peak"];
    Config.filterMorphCount = 10;
    Config.filterSimpleCutRange = 11;
    Config.filterSimplePeakRange = 8;
    Config.fadeInRange = 10;
    Config.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];
    Config.fadeOutNeutral = 4;
    Config.drumsetFadeOutTicks = 48;
    Config.transitions = toNameMap([
        { name: "normal", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },
        { name: "interrupt", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "continue", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "slide", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "slide in pattern", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }
    ]);
    Config.vibratos = toNameMap([
        { name: "none", amplitude: 0.0, type: 0, delayTicks: 0 },
        { name: "light", amplitude: 0.15, type: 0, delayTicks: 0 },
        { name: "delayed", amplitude: 0.3, type: 0, delayTicks: 37 },
        { name: "heavy", amplitude: 0.45, type: 0, delayTicks: 0 },
        { name: "shaky", amplitude: 0.1, type: 1, delayTicks: 0 },
    ]);
    Config.vibratoTypes = toNameMap([
        { name: "normal", periodsSeconds: [0.14], period: 0.14 },
        { name: "shaky", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 },
    ]);
    Config.arpSpeedScale = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];
    Config.unisons = toNameMap([
        { name: "none", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },
        { name: "shimmer", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },
        { name: "hum", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "honky tonk", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "dissonant", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },
        { name: "fifth", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },
        { name: "octave", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },
        { name: "bowed", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },
        { name: "piano", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },
        { name: "warbled", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },
        { name: "hecking gosh", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },
        { name: "spinner", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "detune", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },
        { name: "rising", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },
        { name: "vibrate", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },
        { name: "fourths", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },
        { name: "bass", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },
        { name: "dirty", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },
        { name: "stationary", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },
        { name: "recurve", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "voiced", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "fluctuate", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "thin", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },
        { name: "inject", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },
        { name: "askewed", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },
        { name: "resonance", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },
        { name: "FART", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },
    ]);
    Config.effectNames = ["reverb", "chorus", "panning", "distortion", "bitcrusher", "note filter", "echo", "pitch shift", "detune", "vibrato", "transition type", "chord type", "ring modulation", "phaser"];
    Config.effectOrder = [2, 10, 11, 7, 8, 9, 5, 3, 4, 1, 6, 0, 12, 13];
    Config.noteSizeMax = 6;
    Config.volumeRange = 50;
    Config.volumeLogScale = 0.1428;
    Config.panCenter = 50;
    Config.panMax = Config.panCenter * 2;
    Config.panDelaySecondsMax = 0.001;
    Config.chorusRange = 8;
    Config.ringModRange = 8;
    Config.ringModHzRange = 64;
    Config.chorusPeriodSeconds = 2.0;
    Config.chorusDelayRange = 0.0034;
    Config.chorusDelayOffsets = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];
    Config.chorusPhaseOffsets = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];
    Config.chorusMaxDelay = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));
    Config.chords = toNameMap([
        { name: "simultaneous", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },
        { name: "strum", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },
        { name: "arpeggio", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },
        { name: "custom interval", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },
    ]);
    Config.maxChordSize = 9;
    Config.operatorCount = 4;
    Config.maxPitchOrOperatorCount = Math.max(Config.maxChordSize, Config.operatorCount + 2);
    Config.algorithms = toNameMap([
        { name: "1←(2 3 4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },
        { name: "1←(2 3←4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },
        { name: "1←2←(3 4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },
        { name: "1←(2 3)←4", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },
        { name: "1←2←3←4", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },
        { name: "1←3 2←4", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },
        { name: "1 2←(3 4)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },
        { name: "1 2←3←4", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },
        { name: "(1 2)←3←4", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },
        { name: "(1 2)←(3 4)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },
        { name: "1 2 3←4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },
        { name: "(1 2 3)←4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },
        { name: "1 2 3 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },
        { name: "1←(2 3) 2←4", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },
        { name: "1←(2 (3 (4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },
    ]);
    Config.algorithms6Op = toNameMap([
        { name: "Custom", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1←2←3←4←5←6", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },
        { name: "1←3 2←4←5←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },
        { name: "1←3←4 2←5←6", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },
        { name: "1←4 2←5 3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },
        { name: "1←3 2←(4 5←6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },
        { name: "1←(3 4) 2←5←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },
        { name: "1←3 2←(4 5 6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },
        { name: "1←3 2←(4 5)←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },
        { name: "1←3 2←4←(5 6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },
        { name: "1←(2 3 4 5 6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1←(2 3←5 4←6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },
        { name: "1←(2 3 4←5←6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },
        { name: "1←4←5 (2 3)←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },
        { name: "1←(3 4)←5 2←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },
        { name: "(1 2)←4 3←(5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },
        { name: "(1 2)←5 (3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },
        { name: "(1 2 3)←(4 5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },
        { name: "1←5 (2 3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },
        { name: "1 2←5 (3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },
        { name: "1 2 (3 4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },
        { name: "1 2 3 (4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },
        { name: "1 2←4 3←(5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },
        { name: "1←4 2←(5 6) 3", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },
        { name: "1 2 3←5 4←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },
        { name: "1 (2 3)←5←6 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },
        { name: "1 2 3←5←6 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },
        { name: "(1 2 3 4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },
        { name: "1 2 3 4 5←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },
        { name: "1 2 3 4 5 6", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },
        { name: "1←(2 (3 (4 (5 (6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },
        { name: "1←(2(3(4(5(6", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },
        { name: "1←4(2←5(3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },
        { name: "1←4(2←5 3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },
    ]);
    Config.operatorCarrierInterval = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];
    Config.operatorAmplitudeMax = 15;
    Config.operatorFrequencies = toNameMap([
        { name: "0.12×", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.25×", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.5×", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.75×", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "1×", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~1×", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },
        { name: "2×", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~2×", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },
        { name: "3×", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "3.5×", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },
        { name: "4×", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~4×", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },
        { name: "5×", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "6×", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "7×", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "8×", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "9×", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "10×", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "11×", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "12×", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "13×", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "14×", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "15×", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "16×", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "17×", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "18×", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "19×", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "20×", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~20×", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },
        { name: "25×", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "50×", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "75×", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "100×", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }
    ]);
    Config.envelopes = toNameMap([
        { name: "none", type: 1, speed: 0.0 },
        { name: "note size", type: 0, speed: 0.0 },
        { name: "punch", type: 2, speed: 0.0 },
        { name: "flare -1", type: 3, speed: 128.0 },
        { name: "flare 1", type: 3, speed: 32.0 },
        { name: "flare 2", type: 3, speed: 8.0 },
        { name: "flare 3", type: 3, speed: 2.0 },
        { name: "twang -1", type: 4, speed: 128.0 },
        { name: "twang 1", type: 4, speed: 32.0 },
        { name: "twang 2", type: 4, speed: 8.0 },
        { name: "twang 3", type: 4, speed: 2.0 },
        { name: "swell -1", type: 5, speed: 128.0 },
        { name: "swell 1", type: 5, speed: 32.0 },
        { name: "swell 2", type: 5, speed: 8.0 },
        { name: "swell 3", type: 5, speed: 2.0 },
        { name: "tremolo0", type: 6, speed: 8.0 },
        { name: "tremolo1", type: 6, speed: 4.0 },
        { name: "tremolo2", type: 6, speed: 2.0 },
        { name: "tremolo3", type: 6, speed: 1.0 },
        { name: "tremolo4", type: 7, speed: 4.0 },
        { name: "tremolo5", type: 7, speed: 2.0 },
        { name: "tremolo6", type: 7, speed: 1.0 },
        { name: "decay -1", type: 8, speed: 40.0 },
        { name: "decay 1", type: 8, speed: 10.0 },
        { name: "decay 2", type: 8, speed: 7.0 },
        { name: "decay 3", type: 8, speed: 4.0 },
        { name: "wibble-1", type: 9, speed: 96.0 },
        { name: "wibble 1", type: 9, speed: 24.0 },
        { name: "wibble 2", type: 9, speed: 12.0 },
        { name: "wibble 3", type: 9, speed: 4.0 },
        { name: "linear-2", type: 11, speed: 256.0 },
        { name: "linear-1", type: 11, speed: 128.0 },
        { name: "linear 1", type: 11, speed: 32.0 },
        { name: "linear 2", type: 11, speed: 8.0 },
        { name: "linear 3", type: 11, speed: 2.0 },
        { name: "rise -2", type: 12, speed: 256.0 },
        { name: "rise -1", type: 12, speed: 128.0 },
        { name: "rise 1", type: 12, speed: 32.0 },
        { name: "rise 2", type: 12, speed: 8.0 },
        { name: "rise 3", type: 12, speed: 2.0 },
        { name: "flute 1", type: 9, speed: 16.0 },
        { name: "flute 2", type: 9, speed: 8.0 },
        { name: "flute 3", type: 9, speed: 4.0 },
        { name: "tripolo1", type: 6, speed: 9.0 },
        { name: "tripolo2", type: 6, speed: 6.0 },
        { name: "tripolo3", type: 6, speed: 3.0 },
        { name: "tripolo4", type: 7, speed: 9.0 },
        { name: "tripolo5", type: 7, speed: 6.0 },
        { name: "tripolo6", type: 7, speed: 3.0 },
        { name: "pentolo1", type: 6, speed: 10.0 },
        { name: "pentolo2", type: 6, speed: 5.0 },
        { name: "pentolo3", type: 6, speed: 2.5 },
        { name: "pentolo4", type: 7, speed: 10.0 },
        { name: "pentolo5", type: 7, speed: 5.0 },
        { name: "pentolo6", type: 7, speed: 2.5 },
        { name: "flutter 1", type: 6, speed: 14.0 },
        { name: "flutter 2", type: 7, speed: 11.0 },
        { name: "water-y flutter", type: 6, speed: 9.0 },
        { name: "blip 1", type: 13, speed: 6.0 },
        { name: "blip 2", type: 13, speed: 16.0 },
        { name: "blip 3", type: 13, speed: 32.0 },
    ]);
    Config.feedbacks = toNameMap([
        { name: "1⟲", indices: [[1], [], [], []] },
        { name: "2⟲", indices: [[], [2], [], []] },
        { name: "3⟲", indices: [[], [], [3], []] },
        { name: "4⟲", indices: [[], [], [], [4]] },
        { name: "1⟲ 2⟲", indices: [[1], [2], [], []] },
        { name: "3⟲ 4⟲", indices: [[], [], [3], [4]] },
        { name: "1⟲ 2⟲ 3⟲", indices: [[1], [2], [3], []] },
        { name: "2⟲ 3⟲ 4⟲", indices: [[], [2], [3], [4]] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲", indices: [[1], [2], [3], [4]] },
        { name: "1→2", indices: [[], [1], [], []] },
        { name: "1→3", indices: [[], [], [1], []] },
        { name: "1→4", indices: [[], [], [], [1]] },
        { name: "2→3", indices: [[], [], [2], []] },
        { name: "2→4", indices: [[], [], [], [2]] },
        { name: "3→4", indices: [[], [], [], [3]] },
        { name: "1→3 2→4", indices: [[], [], [1], [2]] },
        { name: "1→4 2→3", indices: [[], [], [2], [1]] },
        { name: "1→2→3→4", indices: [[], [1], [2], [3]] },
        { name: "1↔2 3↔4", indices: [[2], [1], [4], [3]] },
        { name: "1↔4 2↔3", indices: [[4], [3], [2], [1]] },
        { name: "2→1→4→3→2", indices: [[2], [3], [4], [1]] },
        { name: "1→2→3→4→1", indices: [[4], [1], [2], [3]] },
        { name: "(1 2 3)→4", indices: [[], [], [], [1, 2, 3]] },
        { name: "ALL", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },
    ]);
    Config.feedbacks6Op = toNameMap([
        { name: "Custom", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1⟲", indices: [[1], [], [], [], [], []] },
        { name: "2⟲", indices: [[], [2], [], [], [], []] },
        { name: "3⟲", indices: [[], [], [3], [], [], []] },
        { name: "4⟲", indices: [[], [], [], [4], [], []] },
        { name: "5⟲", indices: [[], [], [], [], [5], []] },
        { name: "6⟲", indices: [[], [], [], [], [], [6]] },
        { name: "1⟲ 2⟲", indices: [[1], [2], [], [], [], []] },
        { name: "3⟲ 4⟲", indices: [[], [], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲", indices: [[1], [2], [3], [], [], []] },
        { name: "2⟲ 3⟲ 4⟲", indices: [[], [2], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲", indices: [[1], [2], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲", indices: [[1], [2], [3], [4], [5], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲", indices: [[1], [2], [3], [4], [5], [6]] },
        { name: "1→2", indices: [[], [1], [], [], [], []] },
        { name: "1→3", indices: [[], [], [1], [], [], []] },
        { name: "1→4", indices: [[], [], [], [1], [], []] },
        { name: "1→5", indices: [[], [], [], [], [1], []] },
        { name: "1→6", indices: [[], [], [], [], [], [1]] },
        { name: "2→3", indices: [[], [], [2], [], [], []] },
        { name: "2→4", indices: [[], [], [], [2], [], []] },
        { name: "3→4", indices: [[], [], [], [3], [], []] },
        { name: "4→5", indices: [[], [], [], [], [4], []] },
        { name: "1→4 2→5 3→6", indices: [[], [], [], [1], [2], [3]] },
        { name: "1→5 2→6 3→4", indices: [[], [], [], [3], [1], [2]] },
        { name: "1→2→3→4→5→6", indices: [[], [1], [2], [3], [4], [5]] },
        { name: "2→1→6→5→4→3→2", indices: [[2], [3], [4], [5], [6], [1]] },
        { name: "1→2→3→4→5→6→1", indices: [[6], [1], [2], [3], [4], [5]] },
        { name: "1↔2 3↔4 5↔6", indices: [[2], [1], [4], [3], [6], [5]] },
        { name: "1↔4 2↔5 3↔6", indices: [[4], [5], [6], [1], [2], [3]] },
        { name: "(1,2,3,4,5)→6", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },
        { name: "ALL", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },
    ]);
    Config.chipNoiseLength = 1 << 15;
    Config.spectrumNoiseLength = 1 << 15;
    Config.spectrumBasePitch = 24;
    Config.spectrumControlPoints = 30;
    Config.spectrumControlPointsPerOctave = 7;
    Config.spectrumControlPointBits = 3;
    Config.spectrumMax = (1 << Config.spectrumControlPointBits) - 1;
    Config.harmonicsControlPoints = 28;
    Config.harmonicsRendered = 64;
    Config.harmonicsRenderedForPickedString = 1 << 8;
    Config.harmonicsControlPointBits = 3;
    Config.harmonicsMax = (1 << Config.harmonicsControlPointBits) - 1;
    Config.harmonicsWavelength = 1 << 11;
    Config.pulseWidthRange = 50;
    Config.pulseWidthStepPower = 0.5;
    Config.supersawVoiceCount = 7;
    Config.supersawDynamismMax = 6;
    Config.supersawSpreadMax = 12;
    Config.supersawShapeMax = 6;
    Config.pitchChannelCountMin = 1;
    Config.pitchChannelCountMax = 60;
    Config.noiseChannelCountMin = 0;
    Config.noiseChannelCountMax = 32;
    Config.modChannelCountMin = 0;
    Config.modChannelCountMax = 24;
    Config.noiseInterval = 6;
    Config.pitchesPerOctave = 12;
    Config.drumCount = 12;
    Config.pitchOctaves = 8;
    Config.modCount = 6;
    Config.maxPitch = Config.pitchOctaves * Config.pitchesPerOctave;
    Config.maximumTonesPerChannel = Config.maxChordSize * 2;
    Config.justIntonationSemitones = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);
    Config.pitchShiftRange = Config.justIntonationSemitones.length;
    Config.pitchShiftCenter = Config.pitchShiftRange >> 1;
    Config.detuneCenter = 200;
    Config.detuneMax = 400;
    Config.detuneMin = 0;
    Config.songDetuneMin = 0;
    Config.songDetuneMax = 500;
    Config.unisonVoicesMin = 1;
    Config.unisonVoicesMax = 2;
    Config.unisonSpreadMin = -96;
    Config.unisonSpreadMax = 96;
    Config.unisonOffsetMin = -96;
    Config.unisonOffsetMax = 96;
    Config.unisonExpressionMin = -2;
    Config.unisonExpressionMax = 2;
    Config.unisonSignMin = -2;
    Config.unisonSignMax = 2;
    Config.sineWaveLength = 1 << 8;
    Config.sineWaveMask = Config.sineWaveLength - 1;
    Config.sineWave = generateSineWave();
    Config.pickedStringDispersionCenterFreq = 6000.0;
    Config.pickedStringDispersionFreqScale = 0.3;
    Config.pickedStringDispersionFreqMult = 4.0;
    Config.pickedStringShelfHz = 4000.0;
    Config.distortionRange = 8;
    Config.stringSustainRange = 15;
    Config.stringDecayRate = 0.12;
    Config.enableAcousticSustain = false;
    Config.sustainTypeNames = ["bright", "acoustic"];
    Config.bitcrusherFreqRange = 14;
    Config.bitcrusherOctaveStep = 0.5;
    Config.bitcrusherQuantizationRange = 8;
    Config.maxEnvelopeCount = 12;
    Config.defaultAutomationRange = 13;
    Config.instrumentAutomationTargets = toNameMap([
        { name: "none", computeIndex: null, displayName: "none", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },
        { name: "noteVolume", computeIndex: 0, displayName: "note volume", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },
        { name: "pulseWidth", computeIndex: 2, displayName: "pulse width", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },
        { name: "stringSustain", computeIndex: 3, displayName: "sustain", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [7] },
        { name: "unison", computeIndex: 4, displayName: "unison", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [0, 5, 7, 9, 6, 2, 3] },
        { name: "operatorFrequency", computeIndex: 5, displayName: "fm# freq", interleave: true, isFilter: false, maxCount: Config.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },
        { name: "operatorAmplitude", computeIndex: 11, displayName: "fm# volume", interleave: false, isFilter: false, maxCount: Config.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },
        { name: "feedbackAmplitude", computeIndex: 17, displayName: "fm feedback", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [1, 11] },
        { name: "pitchShift", computeIndex: 18, displayName: "pitch shift", interleave: false, isFilter: false, maxCount: 1, effect: 7, compatibleInstruments: null },
        { name: "detune", computeIndex: 19, displayName: "detune", interleave: false, isFilter: false, maxCount: 1, effect: 8, compatibleInstruments: null },
        { name: "vibratoDepth", computeIndex: 20, displayName: "vibrato range", interleave: false, isFilter: false, maxCount: 1, effect: 9, compatibleInstruments: null },
        { name: "noteFilterAllFreqs", computeIndex: 1, displayName: "n. filter freqs", interleave: false, isFilter: true, maxCount: 1, effect: 5, compatibleInstruments: null },
        { name: "noteFilterFreq", computeIndex: 21, displayName: "n. filter # freq", interleave: false, isFilter: true, maxCount: Config.filterMaxPoints, effect: 5, compatibleInstruments: null },
        { name: "decimalOffset", computeIndex: 37, displayName: "decimal offset", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },
        { name: "supersawDynamism", computeIndex: 38, displayName: "dynamism", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },
        { name: "supersawSpread", computeIndex: 39, displayName: "spread", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },
        { name: "supersawShape", computeIndex: 40, displayName: "saw↔pulse", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },
        { name: "phaserFreq", computeIndex: 41, displayName: "phaser freq", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },
        { name: "phaserMix", computeIndex: 42, displayName: "phaser", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },
        { name: "phaserFeedback", computeIndex: 43, displayName: "phaser feedback", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },
        { name: "phaserStages", computeIndex: 44, displayName: "phaser stages", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },
    ]);
    Config.operatorWaves = toNameMap([
        { name: "sine", samples: Config.sineWave },
        { name: "triangle", samples: generateTriWave() },
        { name: "pulse width", samples: generateSquareWave() },
        { name: "sawtooth", samples: generateSawWave() },
        { name: "ramp", samples: generateSawWave(true) },
        { name: "trapezoid", samples: generateTrapezoidWave(2) },
        { name: "rounded", samples: generateRoundedSineWave() },
    ]);
    Config.pwmOperatorWaves = toNameMap([
        { name: "1%", samples: generateSquareWave(0.01) },
        { name: "5%", samples: generateSquareWave(0.05) },
        { name: "12.5%", samples: generateSquareWave(0.125) },
        { name: "25%", samples: generateSquareWave(0.25) },
        { name: "33%", samples: generateSquareWave(1 / 3) },
        { name: "50%", samples: generateSquareWave(0.5) },
        { name: "66%", samples: generateSquareWave(2 / 3) },
        { name: "75%", samples: generateSquareWave(0.75) },
        { name: "87.5%", samples: generateSquareWave(0.875) },
        { name: "95%", samples: generateSquareWave(0.95) },
        { name: "99%", samples: generateSquareWave(0.99) },
    ]);
    Config.barEditorHeight = 10;
    Config.modulators = toNameMap([
        { name: "none",
            pianoName: "None",
            maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: 14,
            promptName: "No Mod Setting",
            promptDesc: ["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.", "[$LO - $HI]"] },
        { name: "song volume",
            pianoName: "Volume",
            maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Song Volume",
            promptDesc: ["This setting affects the overall volume of the song, just like the main volume slider.", "At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "tempo",
            pianoName: "Tempo",
            maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: 14,
            promptName: "Song Tempo",
            promptDesc: ["This setting controls the speed your song plays at, just like the tempo slider.", "When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.", "Note that you can make a 'swing' effect by rapidly changing between two tempo values.", "[OVERWRITING] [$LO - $HI] [BPM]"] },
        { name: "song reverb",
            pianoName: "Reverb",
            maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: 14,
            promptName: "Song Reverb",
            promptDesc: ["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.", "At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "next bar",
            pianoName: "Next Bar",
            maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Go To Next Bar",
            promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.", "This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.", "You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.", "[$LO - $HI]"] },
        { name: "note volume",
            pianoName: "Note Vol.",
            maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: 14,
            promptName: "Note Volume",
            promptDesc: ["This setting affects the volume of your instrument as if its note size had been scaled.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.", "For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "pan",
            pianoName: "Pan",
            maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: 2,
            promptName: "Instrument Panning",
            promptDesc: ["This setting controls the panning of your instrument, just like the panning slider.", "At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.", "[OVERWRITING] [$LO - $HI] [L-R]"] },
        { name: "reverb",
            pianoName: "Reverb",
            maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 0,
            promptName: "Instrument Reverb",
            promptDesc: ["This setting controls the reverb of your insturment, just like the reverb slider.", "At $LO, your instrument will have no reverb. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "distortion",
            pianoName: "Distortion",
            maxRawVol: Config.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 3,
            promptName: "Instrument Distortion",
            promptDesc: ["This setting controls the amount of distortion for your instrument, just like the distortion slider.", "At $LO, your instrument will have no distortion. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "fm slider 1",
            pianoName: "FM 1",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 1",
            promptDesc: ["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 2",
            pianoName: "FM 2",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 2",
            promptDesc: ["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 3",
            pianoName: "FM 3",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 3",
            promptDesc: ["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 4",
            pianoName: "FM 4",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 4",
            promptDesc: ["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm feedback",
            pianoName: "FM Feedback",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Feedback",
            promptDesc: ["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "pulse width",
            pianoName: "Pulse Width",
            maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Pulse Width",
            promptDesc: ["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.", "At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).", "Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.", "[OVERWRITING] [$LO - $HI] [%Duty]"] },
        { name: "detune",
            pianoName: "Detune",
            maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: 8,
            promptName: "Instrument Detune",
            promptDesc: ["This setting controls the detune for this instrument, just like the detune slider.", "At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.", "[OVERWRITING] [$LO - $HI] [cents]"] },
        { name: "vibrato depth",
            pianoName: "Vibrato Depth",
            maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Depth",
            promptDesc: ["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.", "At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.", "[OVERWRITING] [$LO - $HI] [pitch ÷25]"] },
        { name: "song detune",
            pianoName: "Detune",
            maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: 14,
            promptName: "Song Detune",
            promptDesc: ["This setting controls the overall detune of the entire song. There is no associated slider.", "At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.", "[MULTIPLICATIVE] [$LO - $HI] [cents x4]"] },
        { name: "vibrato speed",
            pianoName: "Vibrato Speed",
            maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Speed",
            promptDesc: ["This setting controls the speed your instrument will vibrato at, just like the slider.", "A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "vibrato delay",
            pianoName: "Vibrato Delay",
            maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Delay",
            promptDesc: ["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.", "A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).", "[OVERWRITING] [$LO - $HI] [beats ÷24]"] },
        { name: "arp speed",
            pianoName: "Arp Speed",
            maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 11,
            promptName: "Arpeggio Speed",
            promptDesc: ["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.", "Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.",
                "[0-4]: x0, x1/16, x⅛, x⅕, x¼,", "[5-9]: x⅓, x⅖, x½, x⅔, x¾,", "[10-14]: x⅘, x0.9, x1, x1.1, x1.2,", "[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,", "[20-24]: x1.8, x1.9, x2, x2.1, x2.2,", "[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,", "[30-34]: x2.8, x2.9, x3, x3.1, x3.2,", "[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,", "[40-44]: x3.8, x3.9, x4, x4.15, x4.3,", "[45-50]: x4.5, x4.8, x5, x5.5, x6, x8", "[OVERWRITING] [$LO - $HI]"] },
        { name: "pan delay",
            pianoName: "Pan Delay",
            maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 2,
            promptName: "Panning Delay",
            promptDesc: ["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.", "With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "reset arp",
            pianoName: "Reset Arp",
            maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11,
            promptName: "Reset Arpeggio",
            promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.", "This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.", "[$LO - $HI]"] },
        { name: "eq filter",
            pianoName: "EQFlt",
            maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "EQ Filter",
            promptDesc: ["This setting controls a few separate things for your instrument's EQ filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filter",
            pianoName: "N.Flt",
            maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter",
            promptDesc: ["This setting controls a few separate things for your instrument's note filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "bit crush",
            pianoName: "Bitcrush",
            maxRawVol: Config.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4,
            promptName: "Instrument Bit Crush",
            promptDesc: ["This setting controls the bit crush of your instrument, just like the bit crush slider.", "At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "freq crush",
            pianoName: "Freq Crush",
            maxRawVol: Config.bitcrusherFreqRange - 1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4,
            promptName: "Instrument Frequency Crush",
            promptDesc: ["This setting controls the frequency crush of your instrument, just like the freq crush slider.", "At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "echo",
            pianoName: "Echo",
            maxRawVol: Config.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6,
            promptName: "Instrument Echo Sustain",
            promptDesc: ["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.", "At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "echo delay",
            pianoName: "Echo Delay",
            maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Instrument Echo Delay",
            promptDesc: ["This setting controls the echo delay of your instrument, just like the echo delay slider.", "At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.", "[OVERWRITING] [$LO - $HI] [~beats ÷12]"]
        },
        { name: "chorus",
            pianoName: "Chorus",
            maxRawVol: Config.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 1,
            promptName: "Instrument Chorus",
            promptDesc: ["This setting controls the chorus strength of your instrument, just like the chorus slider.", "At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "eq filt cut",
            pianoName: "EQFlt Cut",
            maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "EQ Filter Cutoff Frequency",
            promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "eq filt peak",
            pianoName: "EQFlt Peak",
            maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "EQ Filter Peak Gain",
            promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filt cut",
            pianoName: "N.Flt Cut",
            maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter Cutoff Frequency",
            promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filt peak",
            pianoName: "N.Flt Peak",
            maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter Peak Gain",
            promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "pitch shift",
            pianoName: "Pitch Shift",
            maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: 7,
            promptName: "Pitch Shift",
            promptDesc: ["This setting controls the pitch offset of your instrument, just like the pitch shift slider.", "At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.", "[OVERWRITING] [$LO - $HI] [pitch]"] },
        { name: "sustain",
            pianoName: "Sustain",
            maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Picked String Sustain",
            promptDesc: ["This setting controls the sustain of your picked string instrument, just like the sustain slider.", "At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "mix volume",
            pianoName: "Mix Vol.",
            maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: 14,
            promptName: "Mix Volume",
            promptDesc: ["This setting affects the volume of your instrument as if its volume slider had been moved.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "fm slider 5",
            pianoName: "FM 5",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 5",
            promptDesc: ["This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 6",
            pianoName: "FM 6",
            maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "FM Slider 6",
            promptDesc: ["This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "decimal offset",
            pianoName: "Decimal Offset",
            maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: 14,
            promptName: "Decimal Offset",
            promptDesc: ["This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.", "[$LO - $HI]"] },
        { name: "envelope speed",
            pianoName: "EnvelopeSpd",
            maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Envelope Speed",
            promptDesc: ["This setting controls how fast all of the envelopes for the instrument play.", "At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:",
                "[0-4]: x0, x1/16, x⅛, x⅕, x¼,", "[5-9]: x⅓, x⅖, x½, x⅔, x¾,", "[10-14]: x⅘, x0.9, x1, x1.1, x1.2,", "[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,", "[20-24]: x1.8, x1.9, x2, x2.1, x2.2,", "[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,", "[30-34]: x2.8, x2.9, x3, x3.1, x3.2,", "[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,", "[40-44]: x3.8, x3.9, x4, x4.15, x4.3,", "[45-50]: x4.5, x4.8, x5, x5.5, x6, x8", "[OVERWRITING] [$LO - $HI]"] },
        { name: "dynamism",
            pianoName: "Dynamism",
            maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Supersaw Dynamism",
            promptDesc: ["This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.", "At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "spread",
            pianoName: "Spread",
            maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Supersaw Spread",
            promptDesc: ["This setting controls the supersaw spread of your instrument, just like the spread slider.", "At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "saw shape",
            pianoName: "Saw Shape",
            maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Supersaw Shape",
            promptDesc: ["This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.", "As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.", "[OVERWRITING] [$LO - $HI] [%]"] },
        { name: "song bitcrush",
            pianoName: "Song Bit crush",
            maxRawVol: Config.bitcrusherQuantizationRange * 2, newNoteVol: Config.bitcrusherQuantizationRange, forSong: true, convertRealFactor: -Config.bitcrusherQuantizationRange, associatedEffect: 14,
            promptName: "Song Bit crush",
            promptDesc: ["This setting affects the overall bitcrush of your song. It works by multiplying existing bitcrush for instruments, so those with no bitcrush set will be unaffected.", "At $MID, all instruments' bitcrush will be unchanged from default. This increases up to double the set bitcrush value at $HI, or down to no bitcrush at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "song freqcrush",
            pianoName: "Song freqcrush",
            maxRawVol: Config.bitcrusherFreqRange * 2, newNoteVol: Config.bitcrusherFreqRange, forSong: true, convertRealFactor: -Config.bitcrusherFreqRange, associatedEffect: 14,
            promptName: "Song Freq crush",
            promptDesc: ["This setting affects the overall frequency crush of your song. It works by multiplying existing freq crush for instruments, so those with no bitcrush or freq crush set will be unaffected.", "At $MID, all instruments' bitcrush will be unchanged from default. This increases up to double the set bitcrush value at $HI, or down to no bitcrush at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "song panning",
            pianoName: "Song Panning",
            maxRawVol: Config.panMax * 2, newNoteVol: Config.panMax, forSong: true, convertRealFactor: -Config.panMax, associatedEffect: 2,
            promptName: "Song Panning",
            promptDesc: ["This setting affects the overall panning of your song. It works by adding to existing pan for instruments, so those with no panning set will be unaffected.", "At $MID, nothing will be added to the songs panning. At $HI, all instruments will have 100+ panning added, which would max out the panning. At $LO, -100+ panning added to it, which would make the panning as low as possible.", "[ADDITIVE] [$LO - $HI]"] },
        { name: "song chorus",
            pianoName: "Song Chorus",
            maxRawVol: Config.chorusRange * 2, newNoteVol: Config.chorusRange, forSong: true, convertRealFactor: -Config.chorusRange, associatedEffect: 14,
            promptName: "Song Chorus",
            promptDesc: ["This setting affects the overall chorus of your song. It works by multiplying existing chorus for instruments, so those with no chorus set will be unaffected.", "At $MID, all instruments' chorus will be unchanged from default. This increases up to double the set chorus value at $HI, or down to no chorus at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "song distortion",
            pianoName: "Song Distortion",
            maxRawVol: Config.distortionRange * 2, newNoteVol: Config.distortionRange, forSong: true, convertRealFactor: -Config.distortionRange, associatedEffect: 14,
            promptName: "Song Distortion",
            promptDesc: ["This setting affects the overall distortion of your song. It works by multiplying existing distortion for instruments, so those with no distortion set will be unaffected.", "At $MID, all instruments' distortion will be unchanged from default. This increases up to double the set distortion value at $HI, or down to no distortion at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "ring modulation",
            pianoName: "Ring Modulation",
            maxRawVol: Config.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Ring Modulation",
            promptDesc: ["This setting controls the Ring Modulation effect in your instrument.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "song ring modulation",
            pianoName: "Songwide Ring Modulation",
            maxRawVol: Config.ringModRange * 2, newNoteVol: Config.ringModRange, forSong: true, convertRealFactor: -Config.ringModRange, associatedEffect: 14,
            promptName: "Songwide Ring Modulation",
            promptDesc: ["This setting multiplies the Ring Modulation effect across all instruments.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "ring mod hertz",
            pianoName: "Ring Modulation (Hertz)",
            maxRawVol: Config.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14,
            promptName: "Ring Modulation (Hertz)",
            promptDesc: ["This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "phaser",
            pianoName: "Phaser",
            maxRawVol: Config.phaserMixRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13,
            promptName: "Instrument Phaser",
            promptDesc: ["This setting controls the Phaser Mix of your insturment, just like the Phaser slider.", "At $LO, your instrument will have no phaser. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "phaser frequency",
            pianoName: "Phaser Frequency",
            maxRawVol: Config.phaserFreqRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13,
            promptName: "Phaser Frequency",
            promptDesc: ["This setting controls the phaser frequency of your insturment, just like the phaser freq slider.", "At $LO, your instrument will have no phaser freq. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "phaser feedback",
            pianoName: "Phaser Feedback",
            maxRawVol: Config.phaserFeedbackRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13,
            promptName: "Phaser Feedback",
            promptDesc: ["This setting controls the phaser feedback of your insturment, just like the phaser feedback slider.", "At $LO, your instrument will have no phaser feedback. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "phaser stages",
            pianoName: "Phaser Stages",
            maxRawVol: Config.phaserMaxStages, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13,
            promptName: "Phaser Stages",
            promptDesc: ["This setting controls the number of phaser stages in your insturment, just like the phaser stages slider.", "At $LO, your instrument will have no phaser stages. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
    ]);
    function centerWave(wave) {
        let sum = 0.0;
        for (let i = 0; i < wave.length; i++)
            sum += wave[i];
        const average = sum / wave.length;
        for (let i = 0; i < wave.length; i++)
            wave[i] -= average;
        performIntegral(wave);
        wave.push(0);
        return new Float32Array(wave);
    }
    function centerAndNormalizeWave(wave) {
        let magn = 0.0;
        centerWave(wave);
        for (let i = 0; i < wave.length - 1; i++) {
            magn += Math.abs(wave[i]);
        }
        const magnAvg = magn / (wave.length - 1);
        for (let i = 0; i < wave.length - 1; i++) {
            wave[i] = wave[i] / magnAvg;
        }
        return new Float32Array(wave);
    }
    function performIntegral(wave) {
        let cumulative = 0.0;
        let newWave = new Float32Array(wave.length);
        for (let i = 0; i < wave.length; i++) {
            newWave[i] = cumulative;
            cumulative += wave[i];
        }
        return newWave;
    }
    function performIntegralOld(wave) {
        let cumulative = 0.0;
        for (let i = 0; i < wave.length; i++) {
            const temp = wave[i];
            wave[i] = cumulative;
            cumulative += temp;
        }
    }
    function getPulseWidthRatio(pulseWidth) {
        return pulseWidth / (Config.pulseWidthRange * 2);
    }
    function getDrumWave(index, inverseRealFourierTransform, scaleElementsByFactor) {
        let wave = Config.chipNoises[index].samples;
        if (wave == null) {
            wave = new Float32Array(Config.chipNoiseLength + 1);
            Config.chipNoises[index].samples = wave;
            if (index == 0) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 1 << 14;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 1) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = Math.random() * 2.0 - 1.0;
                }
            }
            else if (index == 2) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 2 << 14;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 3) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 4) {
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);
                inverseRealFourierTransform(wave, Config.chipNoiseLength);
                scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));
            }
            else if (index == 5) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 6) {
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);
                inverseRealFourierTransform(wave, Config.chipNoiseLength);
                scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));
            }
            else if (index == 7) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 15 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 8) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) / 2.0 - 0.5;
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer -= 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 9) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.1;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 8 ^ 2 << 16;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 10) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = Math.round(Math.random());
                }
            }
            else if (index == 11) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = Math.round((drumBuffer & 1));
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer -= 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 12) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    var ultraboxnewchipnoiserand = Math.random();
                    wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));
                }
            }
            else if (index == 13) {
                var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;
                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    var white = Math.random() * 2 - 1;
                    b0 = 0.99886 * b0 + white * 0.0555179;
                    b1 = 0.99332 * b1 + white * 0.0750759;
                    b2 = 0.96900 * b2 + white * 0.1538520;
                    b3 = 0.86650 * b3 + white * 0.3104856;
                    b4 = 0.55000 * b4 + white * 0.5329522;
                    b5 = -0.7616 * b5 - white * 0.0168980;
                    wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                    wave[i] *= 0.44;
                    b6 = white * 0.115926;
                }
            }
            else if (index == 14) {
                var lastOut = 0.0;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    var white = Math.random() * 2 - 1;
                    wave[i] = (lastOut + (0.02 * white)) / 1.02;
                    lastOut = wave[i];
                    wave[i] *= 14;
                }
            }
            else {
                throw new Error("Unrecognized drum index: " + index);
            }
            wave[Config.chipNoiseLength] = wave[0];
        }
        return wave;
    }
    function drawNoiseSpectrum(wave, waveLength, lowOctave, highOctave, lowPower, highPower, overallSlope) {
        const referenceOctave = 11;
        const referenceIndex = 1 << referenceOctave;
        const lowIndex = Math.pow(2, lowOctave) | 0;
        const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);
        const retroWave = getDrumWave(0, null, null);
        let combinedAmplitude = 0.0;
        for (let i = lowIndex; i < highIndex; i++) {
            let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);
            let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;
            amplitude *= Math.pow(i / referenceIndex, overallSlope);
            combinedAmplitude += amplitude;
            amplitude *= retroWave[i];
            const radians = 0.61803398875 * i * i * Math.PI * 2.0;
            wave[i] = Math.cos(radians) * amplitude;
            wave[waveLength - i] = Math.sin(radians) * amplitude;
        }
        return combinedAmplitude;
    }
    function generateSineWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);
        }
        return wave;
    }
    function generateTriWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);
        }
        return wave;
    }
    function generateTrapezoidWave(drive = 2) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));
        }
        return wave;
    }
    function generateSquareWave(phaseWidth = 0) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        const centerPoint = Config.sineWaveLength / 4;
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)
                || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;
        }
        return wave;
    }
    function generateSawWave(inverse = false) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;
            wave[i] = inverse ? -wave[i] : wave[i];
        }
        return wave;
    }
    function generateRoundedSineWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));
        }
        return wave;
    }
    function getArpeggioPitchIndex(pitchCount, useFastTwoNoteArp, arpeggio) {
        let arpeggioPattern = Config.arpeggioPatterns[pitchCount - 1];
        if (arpeggioPattern != null) {
            if (pitchCount == 2 && useFastTwoNoteArp == false) {
                arpeggioPattern = [0, 0, 1, 1];
            }
            return arpeggioPattern[arpeggio % arpeggioPattern.length];
        }
        else {
            return arpeggio % pitchCount;
        }
    }
    function toNameMap(array) {
        const dictionary = {};
        for (let i = 0; i < array.length; i++) {
            const value = array[i];
            value.index = i;
            dictionary[value.name] = value;
        }
        const result = array;
        result.dictionary = dictionary;
        return result;
    }
    function effectsIncludeTransition(effects) {
        return (effects & (1 << 10)) != 0;
    }
    function effectsIncludeChord(effects) {
        return (effects & (1 << 11)) != 0;
    }
    function effectsIncludePitchShift(effects) {
        return (effects & (1 << 7)) != 0;
    }
    function effectsIncludeDetune(effects) {
        return (effects & (1 << 8)) != 0;
    }
    function effectsIncludeVibrato(effects) {
        return (effects & (1 << 9)) != 0;
    }
    function effectsIncludeNoteFilter(effects) {
        return (effects & (1 << 5)) != 0;
    }
    function effectsIncludeDistortion(effects) {
        return (effects & (1 << 3)) != 0;
    }
    function effectsIncludeBitcrusher(effects) {
        return (effects & (1 << 4)) != 0;
    }
    function effectsIncludePanning(effects) {
        return (effects & (1 << 2)) != 0;
    }
    function effectsIncludeChorus(effects) {
        return (effects & (1 << 1)) != 0;
    }
    function effectsIncludeEcho(effects) {
        return (effects & (1 << 6)) != 0;
    }
    function effectsIncludeReverb(effects) {
        return (effects & (1 << 0)) != 0;
    }
    function effectsIncludeRM(effects) {
        return (effects & (1 << 12)) != 0;
    }
    function effectsIncludePhaser(effects) {
        return (effects & (1 << 13)) != 0;
    }
    function rawChipToIntegrated(raw) {
        const newArray = new Array(raw.length);
        const dictionary = {};
        for (let i = 0; i < newArray.length; i++) {
            newArray[i] = Object.assign([], raw[i]);
            const value = newArray[i];
            value.index = i;
            dictionary[value.name] = value;
        }
        for (let key in dictionary) {
            dictionary[key].samples = performIntegral(dictionary[key].samples);
        }
        const result = newArray;
        result.dictionary = dictionary;
        return result;
    }

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);
    function prettyNumber(value) {
        return value.toFixed(2).replace(/\.?0*$/, "");
    }
    class EditorConfig {
        static valueToPreset(presetValue) {
            const categoryIndex = presetValue >> 6;
            const presetIndex = presetValue & 0x3F;
            return EditorConfig === null || EditorConfig === void 0 ? void 0 : EditorConfig.presetCategories[categoryIndex].presets[presetIndex];
        }
        static midiProgramToPresetValue(program) {
            for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
                const category = EditorConfig.presetCategories[categoryIndex];
                for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                    const preset = category.presets[presetIndex];
                    if (preset.generalMidi && preset.midiProgram == program)
                        return (categoryIndex << 6) + presetIndex;
                }
            }
            return null;
        }
        static nameToPresetValue(presetName) {
            for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
                const category = EditorConfig.presetCategories[categoryIndex];
                for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                    const preset = category.presets[presetIndex];
                    if (preset.name == presetName)
                        return (categoryIndex << 6) + presetIndex;
                }
            }
            return null;
        }
        static instrumentToPreset(instrument) {
            var _a;
            return (_a = EditorConfig.presetCategories[0].presets.dictionary) === null || _a === void 0 ? void 0 : _a[TypePresets === null || TypePresets === void 0 ? void 0 : TypePresets[instrument]];
        }
    }
    EditorConfig.version = "1.5.1";
    EditorConfig.versionDisplayName = "AbyssBox " + EditorConfig.version;
    EditorConfig.releaseNotesURL = "./patch_notes.html";
    EditorConfig.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);
    EditorConfig.ctrlSymbol = EditorConfig.isOnMac ? "⌘" : "Ctrl+";
    EditorConfig.ctrlName = EditorConfig.isOnMac ? "command" : "control";
    EditorConfig.presetCategories = toNameMap([
        {
            name: "Custom Instruments", presets: toNameMap([
                { name: TypePresets[0], customType: 0 },
                { name: TypePresets[1], customType: 1 },
                { name: TypePresets[2], customType: 2 },
                { name: TypePresets[3], customType: 3 },
                { name: TypePresets[4], customType: 4 },
                { name: TypePresets[5], customType: 5 },
                { name: TypePresets[6], customType: 6 },
                { name: TypePresets[7], customType: 7 },
                { name: TypePresets[8], customType: 8 },
                { name: TypePresets[9], customType: 9 },
                { name: TypePresets[11], customType: 11 },
            ])
        },
        {
            name: "Retro Presets", presets: toNameMap([
                { name: "square wave", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "square", "unison": "none", "envelopes": [] } },
                { name: "triangle wave", midiProgram: 71, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "triangle", "unison": "none", "envelopes": [] } },
                { name: "square lead", midiProgram: 80, generalMidi: true, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.3536 }], "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "square", "unison": "hum", "envelopes": [] } },
                { name: "sawtooth lead 1", midiProgram: 81, generalMidi: true, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "sawtooth", "unison": "shimmer", "envelopes": [] } },
                { name: "sawtooth lead 2", midiProgram: 81, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }], "effects": ["vibrato", "aliasing"], "vibrato": "light", "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "hum", "envelopes": [] } },
                { name: "chip noise", midiProgram: 116, isNoise: true, settings: { "type": "noise", "transition": "hard", "effects": ["aliasing"], "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "wave": "retro" } },
                { name: "FM twang", midiProgram: 32, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }] } },
                { name: "FM bass", midiProgram: 36, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "2×", "amplitude": 11 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "20×", "amplitude": 3 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 3 }] } },
                { name: "FM flute", midiProgram: 73, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }] } },
                { name: "FM organ", midiProgram: 16, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato"], "vibrato": "delayed", "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "2×", "amplitude": 14 }, { "frequency": "1×", "amplitude": 11 }, { "frequency": "2×", "amplitude": 11 }], "envelopes": [] } },
                { name: "NES Pulse", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "vibrato": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },
                { name: "Gameboy Pulse", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },
                { name: "VRC6 Sawtooth", midiProgram: 81, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },
                { name: "Atari Square", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },
                { name: "Atari Bass", midiProgram: 36, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },
                { name: "Sunsoft Bass", midiProgram: 36, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },
                { name: "FM sine", midiProgram: 55, settings: { "type": "FM", "transition": "seemless", "effects": "none", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
            ]),
        },
        {
            name: "Keyboard Presets", presets: toNameMap([
                { name: "grand piano 1", midiProgram: 0, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "effects": ["note filter", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.125 }], "panDelay": 10, "reverb": 68, "fadeInSeconds": 0, "fadeOutTicks": 48, "harmonics": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], "unison": "piano", "stringSustain": 79, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }] } },
                { name: "grand piano 2", midiProgram: 0, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.125 }], "reverb": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], "unison": "piano", "stringSustain": 79, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }] } },
                { name: "grand piano 3", midiProgram: 0, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 4 }, { "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 4 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 0.25 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.0884 }], "reverb": 67, "fadeInSeconds": 0, "fadeOutTicks": 48, "harmonics": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], "unison": "piano", "stringSustain": 86, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 0 }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 1 }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 1 }] } },
                { name: "bright piano", midiProgram: 1, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 1.4142 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "harmonics": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], "unison": "piano", "stringSustain": 86, "envelopes": [] } },
                { name: "electric grand", midiProgram: 2, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "1/8 pulse", "unison": "shimmer", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "honky-tonk piano", midiProgram: 3, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], "unison": "honky tonk", "stringSustain": 71, "envelopes": [] } },
                { name: "electric piano 1", midiProgram: 4, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "harmonics": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], "unison": "none", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
                { name: "electric piano 2", midiProgram: 5, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "16×", "amplitude": 6 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 3 }] } },
                { name: "harpsichord", midiProgram: 6, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 11313.71, "linearGain": 2.8284 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "harmonics": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], "unison": "none", "stringSustain": 79, "envelopes": [] } },
                { name: "clavinet", midiProgram: 7, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.3536 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "3⟲", "feedbackAmplitude": 6, "operators": [{ "frequency": "3×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 6 }, { "frequency": "8×", "amplitude": 4 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }, { "target": "feedbackAmplitude", "envelope": "twang 2" }] } },
                { name: "dulcimer", midiProgram: 15, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], "unison": "piano", "stringSustain": 79, "envelopes": [] } },
            ])
        },
        {
            name: "Idiophone Presets", presets: toNameMap([
                { name: "celesta", midiProgram: 8, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~1×", "amplitude": 11, "envelope": "custom" }, { "frequency": "8×", "amplitude": 6, "envelope": "custom" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "3×", "amplitude": 1, "envelope": "twang 2" }] } },
                { name: "glockenspiel", midiProgram: 9, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "5×", "amplitude": 11, "envelope": "custom" }, { "frequency": "8×", "amplitude": 7, "envelope": "custom" }, { "frequency": "20×", "amplitude": 2, "envelope": "twang 1" }] } },
                { name: "music box 1", midiProgram: 10, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.5 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], "unison": "none", "stringSustain": 64, "envelopes": [] } },
                { name: "music box 2", midiProgram: 10, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 0.7071 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "stringSustain": 29, "envelopes": [] } },
                { name: "vibraphone", midiProgram: 11, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 3, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "9×", "amplitude": 3, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }] } },
                { name: "marimba", midiProgram: 12, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "4×", "amplitude": 6, "envelope": "custom" }, { "frequency": "13×", "amplitude": 6, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "kalimba", midiProgram: 108, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 11, "envelope": "custom" }, { "frequency": "5×", "amplitude": 3, "envelope": "twang 2" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "xylophone", midiProgram: 13, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "11×", "amplitude": 9, "envelope": "custom" }, { "frequency": "20×", "amplitude": 6, "envelope": "twang 1" }] } },
                { name: "tubular bell", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 96, "chord": "strum", "harmonics": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], "unison": "shimmer", "stringSustain": 86, "envelopes": [] } },
                { name: "bell synth", midiProgram: 14, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "twang 3", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "7×", "amplitude": 6, "envelope": "twang 3" }, { "frequency": "20×", "amplitude": 1, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "rain drop", midiProgram: 96, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "6×", "amplitude": 4, "envelope": "custom" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 6, "envelope": "tremolo1" }] } },
                { name: "crystal", midiProgram: 98, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "delayed", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 7, "envelope": "custom" }, { "frequency": "6×", "amplitude": 4, "envelope": "custom" }, { "frequency": "13×", "amplitude": 4, "envelope": "custom" }] } },
                { name: "tinkle bell", midiProgram: 112, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "~2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "5×", "amplitude": 7, "envelope": "custom" }, { "frequency": "7×", "amplitude": 7, "envelope": "custom" }, { "frequency": "16×", "amplitude": 7, "envelope": "custom" }] } },
                { name: "agogo", midiProgram: 113, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→4", "feedbackAmplitude": 15, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "2×", "amplitude": 9, "envelope": "custom" }, { "frequency": "5×", "amplitude": 6, "envelope": "custom" }, { "frequency": "8×", "amplitude": 9, "envelope": "custom" }, { "frequency": "13×", "amplitude": 11, "envelope": "custom" }] } },
            ])
        },
        {
            name: "Guitar Presets", presets: toNameMap([
                { name: "nylon guitar", midiProgram: 24, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "3⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "5×", "amplitude": 2, "envelope": "steady" }, { "frequency": "7×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "steel guitar", midiProgram: 25, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], "unison": "none", "stringSustain": 71, "envelopes": [] } },
                { name: "jazz guitar", midiProgram: 26, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "clean guitar", midiProgram: 27, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },
                { name: "muted guitar", midiProgram: 28, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 4, "envelope": "twang 3" }, { "frequency": "4×", "amplitude": 4, "envelope": "twang 2" }, { "frequency": "16×", "amplitude": 4, "envelope": "twang 1" }] } },
            ])
        },
        {
            name: "Picked Bass Presets", presets: toNameMap([
                { name: "acoustic bass", midiProgram: 32, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },
                { name: "fingered bass", midiProgram: 33, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "picked bass", midiProgram: 34, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "11×", "amplitude": 1, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 9, "envelope": "steady" }] } },
                { name: "fretless bass", midiProgram: 35, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 1000, "filterResonance": 14, "filterEnvelope": "flare 2", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },
                { name: "slap bass 1", midiProgram: 36, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },
                { name: "slap bass 2", midiProgram: 37, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "3⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "3×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }, { "frequency": "13×", "amplitude": 3, "envelope": "steady" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "bass synth 1", midiProgram: 38, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "twang 1" }, { "frequency": "~1×", "amplitude": 13, "envelope": "twang 2" }] } },
                { name: "bass synth 2", midiProgram: 39, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 1000, "filterResonance": 57, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1→2", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "1×", "amplitude": 9, "envelope": "steady" }, { "frequency": "3×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "bass & lead", midiProgram: 87, generalMidi: true, settings: { "type": "chip", "transition": "hard", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 86, "filterEnvelope": "twang 2", "wave": "sawtooth", "interval": "shimmer", "vibrato": "none" } },
                { name: "dubstep yoi yoi", midiProgram: 87, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.7071 }], "effects": ["note filter", "bitcrusher"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 594.6, "linearGain": 11.3137 }], "bitcrusherOctave": 1.5, "bitcrusherQuantization": 0, "transition": "slide", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "arpeggio", "wave": "sawtooth", "unison": "none", "envelopes": [{ "target": "noteFilterFreq", "envelope": "flare 2", "index": 0 }] } },
            ])
        },
        {
            name: "Picked String Presets", presets: toNameMap([
                { name: "pizzicato strings", midiProgram: 45, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 1000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "3×", "amplitude": 11, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 10, "envelope": "steady" }] } },
                { name: "harp", midiProgram: 46, generalMidi: true, settings: { "type": "FM", "transition": "hard fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "3⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "4×", "amplitude": 6, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 3, "envelope": "steady" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }] } },
                { name: "sitar", midiProgram: 104, generalMidi: true, settings: { "type": "FM", "transition": "hard fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 57, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "twang 3" }, { "frequency": "9×", "amplitude": 3, "envelope": "twang 3" }, { "frequency": "16×", "amplitude": 9, "envelope": "swell 3" }] } },
                { name: "banjo", midiProgram: 105, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "2⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "steady" }, { "frequency": "11×", "amplitude": 3, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "ukulele", midiProgram: 105, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "9×", "amplitude": 4, "envelope": "twang 2" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "shamisen", midiProgram: 106, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "steady" }, { "frequency": "16×", "amplitude": 4, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }] } },
                { name: "koto", midiProgram: 107, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "~1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "6×", "amplitude": 10, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "twang 3" }, { "frequency": "~2×", "amplitude": 8, "envelope": "twang 3" }] } },
            ])
        },
        {
            name: "Distortion Presets", presets: toNameMap([
                { name: "overdrive guitar", midiProgram: 29, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.5 }], "effects": ["note filter", "distortion"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 297.3, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.7071 }], "distortion": 71, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 12, "chord": "strum", "harmonics": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "distortion guitar", midiProgram: 30, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.25 }], "effects": ["note filter", "distortion", "reverb"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 353.55, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 2000, "linearGain": 1 }], "distortion": 86, "reverb": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 12, "chord": "strum", "harmonics": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "charango synth", midiProgram: 84, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 1 }], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2→3→4", "feedbackAmplitude": 8, "operators": [{ "frequency": "3×", "amplitude": 13 }, { "frequency": "~1×", "amplitude": 5 }, { "frequency": "4×", "amplitude": 6 }, { "frequency": "3×", "amplitude": 7 }], "envelopes": [{ "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "guitar harmonics", midiProgram: 31, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 2 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3)←4", "feedbackType": "1⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "4×", "amplitude": 12 }, { "frequency": "16×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 2 }, { "frequency": "~1×", "amplitude": 12 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 1 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 3 }] } },
                { name: "PWM overdrive", midiProgram: 29, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1.4142 }], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "pulseWidth": 17.67767, "envelopes": [{ "target": "pulseWidth", "envelope": "punch" }] } },
                { name: "PWM distortion", midiProgram: 30, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 2 }], "effects": ["vibrato"], "vibrato": "delayed", "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "pulseWidth": 50, "envelopes": [{ "target": "pulseWidth", "envelope": "swell 1" }] } },
                { name: "FM overdrive", midiProgram: 29, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2", "feedbackAmplitude": 2, "operators": [{ "frequency": "~1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 12 }, { "frequency": "~2×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 12 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "punch" }] } },
                { name: "FM distortion", midiProgram: 30, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 2 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2", "feedbackAmplitude": 4, "operators": [{ "frequency": "~1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 11 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "~2×", "amplitude": 4 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 3 }] } },
            ])
        },
        {
            name: "Bellows Presets", presets: toNameMap([
                { name: "drawbar organ 1", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "drawbar organ 2", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },
                { name: "percussive organ", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "transition": "hard", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "light", "algorithm": "1 2 3 4", "feedbackType": "1→3 2→4", "feedbackAmplitude": 7, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "3×", "amplitude": 8, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "rock organ", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "delayed", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "flare 1", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "2×", "amplitude": 5, "envelope": "steady" }] } },
                { name: "pipe organ", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "transition": "cross fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "2×", "amplitude": 9, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "8×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "reed organ", midiProgram: 20, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },
                { name: "accordion", midiProgram: 21, generalMidi: true, settings: { "type": "chip", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "swell 1", "wave": "double saw", "interval": "honky tonk", "vibrato": "none" } },
                { name: "bandoneon", midiProgram: 23, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "interval": "hum", "vibrato": "none", "harmonics": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },
                { name: "bagpipe", midiProgram: 109, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "punch", "interval": "hum", "vibrato": "none", "harmonics": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },
            ])
        },
        {
            name: "String Presets", presets: toNameMap([
                { name: "violin 1", midiProgram: 40, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["vibrato", "reverb"], "vibrato": "delayed", "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 6, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "1→2", "feedbackAmplitude": 5, "operators": [{ "frequency": "4×", "amplitude": 9 }, { "frequency": "3×", "amplitude": 9 }, { "frequency": "2×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "viola", midiProgram: 41, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 8, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "7×", "amplitude": 7, "envelope": "custom" }, { "frequency": "13×", "amplitude": 4, "envelope": "custom" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }] } },
                { name: "cello", midiProgram: 42, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.1768 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 4756.83, "linearGain": 5.6569 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.0884 }], "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 12, "chord": "simultaneous", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "16×", "amplitude": 5 }, { "frequency": "~1×", "amplitude": 10 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "6×", "amplitude": 3 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }] } },
                { name: "contrabass", midiProgram: 43, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "16×", "amplitude": 5, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "steady" }, { "frequency": "6×", "amplitude": 3, "envelope": "swell 1" }] } },
                { name: "fiddle", midiProgram: 110, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2)←(3 4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "8×", "amplitude": 8, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "16×", "amplitude": 3, "envelope": "steady" }] } },
                { name: "tremolo strings", midiProgram: 44, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "tremolo4", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 12, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 8, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "custom" }, { "frequency": "7×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "strings", midiProgram: 48, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "3×", "amplitude": 9, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 3, "envelope": "swell 1" }] } },
                { name: "slow strings", midiProgram: 49, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 0, "filterEnvelope": "swell 2", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "flare 3", "operators": [{ "frequency": "4×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 10, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 4, "envelope": "swell 1" }] } },
                { name: "strings synth 1", midiProgram: 50, generalMidi: true, settings: { "type": "chip", "transition": "soft fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 43, "filterEnvelope": "steady", "wave": "sawtooth", "interval": "hum", "vibrato": "delayed" } },
                { name: "strings synth 2", midiProgram: 51, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 12, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "3×", "amplitude": 6, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "1×", "amplitude": 9, "envelope": "custom" }] } },
                { name: "orchestra hit 1", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "custom", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 14, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "twang 3" }, { "frequency": "2×", "amplitude": 15, "envelope": "flare 3" }, { "frequency": "4×", "amplitude": 15, "envelope": "flare 2" }, { "frequency": "8×", "amplitude": 15, "envelope": "flare 1" }] } },
                { name: "violin 2", midiProgram: 40, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["vibrato", "reverb"], "vibrato": "light", "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 6, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "3×", "amplitude": 13, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 8, "envelope": "swell 1" }] } },
                { name: "orchestra hit 2", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "decay 1", "vibrato": "delayed", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 14, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "3×", "amplitude": 12, "envelope": "custom" }, { "frequency": "4×", "amplitude": 14, "envelope": "custom" }] } },
                { name: "supersaw string", midiProgram: 41, settings: { "type": "supersaw", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1.4142 }, { "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.1768 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 500, "linearGain": 0.1768 }], "reverb": 33, "fadeInSeconds": 0.0263, "fadeOutTicks": 6, "pulseWidth": 35.35534, "dynamism": 83, "spread": 8, "shape": 50, "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }] } },
                { name: "supersaw string 2", midiProgram: 41, settings: { "type": "supersaw", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 594.6, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 4756.83, "linearGain": 2 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 594.6, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 4756.83, "linearGain": 2 }], "effects": ["note filter", "chorus", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 1 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 1 }], "chorus": 57, "reverb": 42, "fadeInSeconds": 0.0575, "fadeOutTicks": -6, "pulseWidth": 50, "dynamism": 67, "spread": 58, "shape": 0, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "punch" }, { "target": "pulseWidth", "envelope": "flare 2" }] } },
            ])
        },
        {
            name: "Vocal Presets", presets: toNameMap([
                { name: "choir soprano", midiProgram: 94, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 5.6569 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.25 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 24, "harmonics": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "choir tenor", midiProgram: 52, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "peak", "cutoffHz": 1000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "choir bass", midiProgram: 52, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "solo soprano", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 5.6569 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.25 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "harmonics": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "solo tenor", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "peak", "cutoffHz": 1000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "harmonics": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "solo bass", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 8 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 8 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1.4142 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": 12, "chord": "simultaneous", "harmonics": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "voice ooh", midiProgram: 53, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 57, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "voice synth", midiProgram: 54, generalMidi: true, settings: { "type": "chip", "transition": "medium fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 57, "filterEnvelope": "steady", "wave": "rounded", "interval": "union", "vibrato": "light" } },
                { name: "vox synth lead", midiProgram: 85, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "(1 2 3)←4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 2, "feedbackEnvelope": "punch", "operators": [{ "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "9×", "amplitude": 5, "envelope": "custom" }, { "frequency": "20×", "amplitude": 1, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "tiny robot", midiProgram: 85, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "reverb"], "vibrato": "delayed", "reverb": 33, "transition": "slide", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "2×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "~1×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "punch", "index": 1 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "yowie", midiProgram: 85, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 86, "filterEnvelope": "tremolo5", "vibrato": "none", "algorithm": "1←2←(3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 12, "feedbackEnvelope": "tremolo3", "operators": [{ "frequency": "2×", "amplitude": 12, "envelope": "custom" }, { "frequency": "16×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "mouse", midiProgram: 85, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "reverb"], "vibrato": "light", "reverb": 33, "transition": "slide in pattern", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "2×", "amplitude": 13 }, { "frequency": "5×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteVolume", "envelope": "note size" }, { "target": "feedbackAmplitude", "envelope": "flare 2" }] } },
                { name: "gumdrop", midiProgram: 85, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "2×", "amplitude": 15, "envelope": "punch" }, { "frequency": "4×", "amplitude": 15, "envelope": "punch" }, { "frequency": "7×", "amplitude": 15, "envelope": "punch" }, { "frequency": "1×", "amplitude": 10, "envelope": "twang 1" }] } },
                { name: "echo drop", midiProgram: 102, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "11×", "amplitude": 2, "envelope": "steady" }, { "frequency": "16×", "amplitude": 5, "envelope": "swell 3" }] } },
                { name: "dark choir", midiProgram: 85, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "spectrum": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },
            ])
        },
        {
            name: "Brass Presets", presets: toNameMap([
                { name: "trumpet", midiProgram: 56, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 5, "envelope": "flare 2" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "trombone", midiProgram: 57, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "tuba", midiProgram: 58, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 8, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "muted trumpet", midiProgram: 59, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 2.8284 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 1 }], "reverb": 33, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "1×", "amplitude": 13 }, { "frequency": "1×", "amplitude": 5 }, { "frequency": "9×", "amplitude": 5 }, { "frequency": "13×", "amplitude": 7 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 2" }] } },
                { name: "french horn", midiProgram: 60, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 1 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 2.8284 }], "effects": ["reverb"], "reverb": 33, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "~1×", "amplitude": 8 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "swell 1" }] } },
                { name: "brass section", midiProgram: 61, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "swell 1" }, { "frequency": "~1×", "amplitude": 10, "envelope": "swell 1" }] } },
                { name: "brass synth 1", midiProgram: 62, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 11, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "flare 1" }, { "frequency": "~1×", "amplitude": 8, "envelope": "flare 2" }] } },
                { name: "brass synth 2", midiProgram: 63, generalMidi: true, settings: { "type": "FM", "transition": "soft", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "twang 3", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "flare 1" }, { "frequency": "~1×", "amplitude": 7, "envelope": "flare 1" }] } },
                { name: "pulse brass", midiProgram: 62, settings: { "type": "PWM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "pulseWidth": 50, "pulseEnvelope": "flare 3", "vibrato": "none" } },
            ])
        },
        {
            name: "Reed Presets", presets: toNameMap([
                { name: "soprano sax", midiProgram: 64, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "4×", "amplitude": 4, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }, { "frequency": "5×", "amplitude": 4, "envelope": "punch" }] } },
                { name: "alto sax", midiProgram: 65, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "punch", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "4×", "amplitude": 6, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 12, "envelope": "steady" }] } },
                { name: "tenor sax", midiProgram: 66, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "2×", "amplitude": 12, "envelope": "custom" }, { "frequency": "3×", "amplitude": 7, "envelope": "steady" }, { "frequency": "1×", "amplitude": 3, "envelope": "steady" }, { "frequency": "8×", "amplitude": 3, "envelope": "steady" }] } },
                { name: "baritone sax", midiProgram: 67, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "swell 2", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "8×", "amplitude": 4, "envelope": "steady" }, { "frequency": "4×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 4, "envelope": "punch" }] } },
                { name: "sax synth", midiProgram: 64, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "shehnai", midiProgram: 111, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 3, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "oboe", midiProgram: 68, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "swell 1", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "tremolo5", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "4×", "amplitude": 12, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "6×", "amplitude": 2, "envelope": "steady" }] } },
                { name: "english horn", midiProgram: 69, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 12, "envelope": "custom" }, { "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "punch" }, { "frequency": "8×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "bassoon", midiProgram: 70, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 707, "filterResonance": 57, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "6×", "amplitude": 6, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "clarinet", midiProgram: 71, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },
                { name: "harmonica", midiProgram: 22, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 29, "filterEnvelope": "swell 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "tremolo5", "operators": [{ "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "~2×", "amplitude": 2, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
            ])
        },
        {
            name: "Flute Presets", presets: toNameMap([
                { name: "flute 1", midiProgram: 73, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 4, "envelope": "steady" }, { "frequency": "1×", "amplitude": 3, "envelope": "steady" }, { "frequency": "~1×", "amplitude": 1, "envelope": "punch" }] } },
                { name: "recorder", midiProgram: 74, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 2", "interval": "union", "vibrato": "none", "harmonics": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "whistle", midiProgram: 78, generalMidi: true, settings: { "type": "harmonics", "effects": "chorus & reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "interval": "union", "vibrato": "delayed", "harmonics": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "ocarina", midiProgram: 79, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "piccolo", midiProgram: 72, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "4⟲", "feedbackAmplitude": 15, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 3, "envelope": "punch" }, { "frequency": "~1×", "amplitude": 5, "envelope": "punch" }] } },
                { name: "shakuhachi", midiProgram: 77, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "1←(2 3←4)", "feedbackType": "3→4", "feedbackAmplitude": 15, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 3, "envelope": "punch" }, { "frequency": "~1×", "amplitude": 4, "envelope": "twang 1" }, { "frequency": "20×", "amplitude": 15, "envelope": "steady" }] } },
                { name: "pan flute", midiProgram: 75, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 5.6569 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }], "reverb": 33, "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "spectrum": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "punch" }] } },
                { name: "blown bottle", midiProgram: 76, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 57, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "3×", "amplitude": 4, "envelope": "custom" }, { "frequency": "6×", "amplitude": 2, "envelope": "custom" }, { "frequency": "11×", "amplitude": 2, "envelope": "custom" }] } },
                { name: "calliope", midiProgram: 82, generalMidi: true, settings: { "type": "spectrum", "transition": "cross fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "steady", "spectrum": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },
                { name: "chiffer", midiProgram: 83, generalMidi: true, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "punch", "spectrum": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },
                { name: "breath noise", midiProgram: 121, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [], "effects": ["chord type", "note filter", "reverb"], "chord": "strum", "noteFilter": [{ "type": "high-pass", "cutoffHz": 840.9, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "spectrum": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }] } },
                { name: "flute 2", midiProgram: 73, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "delayed", "harmonics": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },
            ])
        },
        {
            name: "Pad Presets", presets: toNameMap([
                { name: "new age pad", midiProgram: 88, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "2×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 4 }, { "frequency": "6×", "amplitude": 3 }, { "frequency": "13×", "amplitude": 3 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "swell 3" }] } },
                { name: "warm pad", midiProgram: 89, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 1 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 7, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 3" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 1 }] } },
                { name: "polysynth pad", midiProgram: 90, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["vibrato", "note filter", "chorus"], "vibrato": "delayed", "noteFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "sawtooth", "unison": "honky tonk", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "space voice pad", midiProgram: 91, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 2828.43, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.1768 }], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "1×", "amplitude": 10 }, { "frequency": "2×", "amplitude": 8 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "11×", "amplitude": 2 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "punch", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "swell 2" }] } },
                { name: "bowed glass pad", midiProgram: 92, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 10 }, { "frequency": "2×", "amplitude": 12 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 4 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 3", "index": 3 }] } },
                { name: "metallic pad", midiProgram: 93, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 13, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 9 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "11×", "amplitude": 7 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "sweep pad", midiProgram: 95, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 4 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "wave": "sawtooth", "unison": "hum", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 3" }] } },
                { name: "atmosphere", midiProgram: 99, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 }], "effects": ["chorus", "reverb"], "chorus": 100, "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "algorithm": "1←(2 3 4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 10 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 7 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 3", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 3 }] } },
                { name: "brightness", midiProgram: 100, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 2 }], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "harmonics": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], "unison": "octave", "stringSustain": 86, "envelopes": [] } },
                { name: "goblins", midiProgram: 101, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.5 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 10, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "4×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 2" }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 1 }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "flare 3" }] } },
                { name: "sci-fi", midiProgram: 103, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 9513.66, "linearGain": 2.8284 }], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.5 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 8, "operators": [{ "frequency": "~1×", "amplitude": 13 }, { "frequency": "2×", "amplitude": 10 }, { "frequency": "5×", "amplitude": 5 }, { "frequency": "11×", "amplitude": 8 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "tremolo5", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "flutter pad", midiProgram: 90, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "note filter", "chorus"], "vibrato": "delayed", "noteFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 4 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 9, "operators": [{ "frequency": "1×", "amplitude": 13 }, { "frequency": "5×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 5 }, { "frequency": "~1×", "amplitude": 6 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 3 }] } },
                { name: "feedback pad", midiProgram: 89, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 2378.41, "linearGain": 8 }], "effects": [], "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "custom interval", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 8, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 15 }], "envelopes": [{ "target": "feedbackAmplitude", "envelope": "swell 2" }] } },
                { name: "supersaw pad", midiProgram: 93, settings: { "type": "supersaw", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.1768 }], "effects": ["reverb"], "reverb": 100, "fadeInSeconds": 0.0263, "fadeOutTicks": 24, "pulseWidth": 50, "dynamism": 100, "spread": 58, "shape": 0, "envelopes": [] } },
            ])
        },
        {
            name: "Drum Presets", presets: toNameMap([
                { name: "standard drumset", midiProgram: 116, isNoise: true, settings: { "type": "drumset", "effects": "reverb", "drums": [{ "filterEnvelope": "twang 1", "spectrum": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { "filterEnvelope": "decay 2", "spectrum": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { "filterEnvelope": "decay 1", "spectrum": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { "filterEnvelope": "twang 3", "spectrum": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { "filterEnvelope": "decay 3", "spectrum": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { "filterEnvelope": "twang 3", "spectrum": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { "filterEnvelope": "decay 3", "spectrum": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { "filterEnvelope": "flare 1", "spectrum": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { "filterEnvelope": "decay 2", "spectrum": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },
                { name: "steel pan", midiProgram: 114, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.1768 }], "effects": ["note filter", "chorus", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "chorus": 67, "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "~1×", "amplitude": 14 }, { "frequency": "7×", "amplitude": 3 }, { "frequency": "3×", "amplitude": 5 }, { "frequency": "4×", "amplitude": 4 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "decay 2" }, { "target": "operatorAmplitude", "envelope": "flare 1", "index": 1 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 3 }] } },
                { name: "steel pan synth", midiProgram: 114, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1 2 3←4", "feedbackType": "1⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "~1×", "amplitude": 12 }, { "frequency": "2×", "amplitude": 15 }, { "frequency": "4×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 3 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }, { "target": "operatorAmplitude", "envelope": "note size", "index": 0 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 1 }, { "target": "operatorAmplitude", "envelope": "flare 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 1" }] } },
                { name: "timpani", midiProgram: 47, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "peak", "cutoffHz": 6727.17, "linearGain": 5.6569 }], "effects": ["pitch shift", "note filter", "reverb"], "pitchShiftSemitones": 15, "noteFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.5 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "spectrum": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }] } },
                { name: "dark strike", midiProgram: 47, settings: { "type": "spectrum", "eqFilter": [], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "spectrum": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
                { name: "woodblock", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 1", "spectrum": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },
                { name: "taiko drum", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "twang 1", "spectrum": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },
                { name: "melodic drum", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "twang 1", "spectrum": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },
                { name: "drum synth", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "decay 1", "spectrum": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },
                { name: "tom-tom", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "spectrum": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },
                { name: "metal pipe", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "twang 2", "spectrum": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },
                { name: "synth kick", midiProgram: 47, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -6, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "8×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "twang 2" }] } },
            ])
        },
        {
            name: "Novelty Presets", presets: toNameMap([
                { name: "guitar fret noise", midiProgram: 120, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "high-pass", "cutoffHz": 1000, "linearGain": 0.1768 }], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 5.6569 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "simultaneous", "spectrum": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 1" }, { "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "fifth saw lead", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1.4142 }], "chorus": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "fifth swell", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2000, "linearGain": 2 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 3" }] } },
                { name: "soundtrack", midiProgram: 97, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }], "chorus": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 3" }] } },
                { name: "reverse cymbal", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "effects": "none", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "swell 3", "spectrum": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },
                { name: "seashore", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "transition": "soft fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "swell 3", "spectrum": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },
                { name: "bird tweet", midiProgram: 123, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [], "effects": ["chord type", "vibrato", "reverb"], "chord": "strum", "vibrato": "heavy", "reverb": 67, "fadeInSeconds": 0.0575, "fadeOutTicks": -6, "harmonics": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "hum", "envelopes": [{ "target": "noteVolume", "envelope": "decay 1" }] } },
                { name: "telephone ring", midiProgram: 124, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "arpeggio", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "2×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 4 }, { "frequency": "20×", "amplitude": 1 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "tremolo4" }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 1 }] } },
                { name: "helicopter", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "seamless", "chord": "arpeggio", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "tremolo4", "spectrum": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },
                { name: "applause", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "swell 3", "spectrum": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },
                { name: "gunshot", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 1414, "filterResonance": 29, "filterEnvelope": "twang 1", "spectrum": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },
                { name: "scoot", midiProgram: 92, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 707.11, "linearGain": 4 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "double saw", "unison": "shimmer", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 1" }] } },
                { name: "buzz saw", midiProgram: 30, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.5 }], "effects": [], "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 4, "operators": [{ "frequency": "5×", "amplitude": 13 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "~1×", "amplitude": 6 }, { "frequency": "11×", "amplitude": 12 }], "envelopes": [] } },
                { name: "mosquito", midiProgram: 93, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }], "effects": ["vibrato"], "vibrato": "shaky", "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": -6, "chord": "simultaneous", "pulseWidth": 4.41942, "envelopes": [{ "target": "pulseWidth", "envelope": "tremolo6" }] } },
                { name: "breathing", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "swell 2", "spectrum": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },
                { name: "klaxon synth", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "noise", "effects": "reverb", "transition": "slide", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 86, "filterEnvelope": "steady", "wave": "buzz" } },
                { name: "theremin", midiProgram: 40, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.7071 }], "effects": ["vibrato", "reverb"], "vibrato": "heavy", "reverb": 33, "transition": "slide in pattern", "fadeInSeconds": 0.0263, "fadeOutTicks": -6, "chord": "simultaneous", "harmonics": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "sonar ping", midiProgram: 121, settings: { "type": "spectrum", "eqFilter": [], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.5 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "spectrum": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
            ])
        },
        { name: "Modbox Presets", presets: toNameMap([
                { name: "modbox theepsynth", settings: { "type": "FM", "effects": "none", "transition": "hard", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "custom", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 11, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
            ]) },
        { name: "Sandbox Presets", presets: toNameMap([
                { name: "sandbox netsky hollow", generalMidi: false, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard", "chord": "arpeggio", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "spectrum": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45] } },
                { name: "sandbox abnormality", generalMidi: false, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "none", "transition": "seamless", "chord": "arpeggio", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "wave": "spiky", "interval": "fifth", "vibrato": "none" } },
                { name: "sandbox playstation", generalMidi: false, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "chorus", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 29, "filterEnvelope": "steady", "wave": "glitch", "interval": "shimmer", "vibrato": "none" } },
                { name: "sandbox harmony pulse", generalMidi: false, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "chorus", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "punch", "wave": "double pulse", "interval": "union", "vibrato": "none" } },
                { name: "sandbox pink ping", generalMidi: false, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 3000, "filterResonance": 0, "filterEnvelope": "tripolo6", "spectrum": [0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "sandbox tv static", generalMidi: false, isNoise: true, midiSubharmonicOctaves: 1, settings: { "type": "noise", "effects": "reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 40, "filterEnvelope": "steady", "wave": "static" } },
                { name: "sandbox clean pulse", generalMidi: false, settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] } },
                { name: "sandbox snp chorus", generalMidi: false, settings: { "type": "FM", "transition": "hard", "effects": "chorus & reverb", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1→2→3→4", "feedbackAmplitude": 1, "feedbackEnvelope": "flare 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 15, "envelope": "custom" }, { "frequency": "4×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 6, "envelope": "custom" }] } },
                { name: "sandbox snp echo", generalMidi: false, settings: { "type": "FM", "transition": "hard fade", "effects": "chorus", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 15, "envelope": "custom" }, { "frequency": "20×", "amplitude": 9, "envelope": "twang 1" }, { "frequency": "20×", "amplitude": 5, "envelope": "twang 2" }] } },
                { name: "sandbox tori synth lead", generalMidi: false, settings: { "type": "harmonics", "effects": "chorus", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 100, 100, 71, 71, 43, 43, 43, 29, 29, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 29, 14, 0, 0, 0, 86] } },
                { name: "sandbox glorious piano 1", generalMidi: false, settings: { "type": "custom chip", "transition": "hard fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, -16, -15, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 14, 13, 12, 12, 11, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -14, -11, -8, -5, -2, -23, -24, -24] } },
                { name: "sandbox glorious piano 2", generalMidi: false, settings: { "type": "custom chip", "transition": "hard fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "interval": "shimmer", "vibrato": "light", "customChipWave": [24, 24, -16, -15, -15, -14, -13, -13, -12, 12, 9, 5, 2, -3, -7, -10, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 0, 4, 8, 15, 21, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -2, -2, -8, 2, -2, -5, -24, -24] } },
                { name: "sandbox muffled katrumpet", generalMidi: false, settings: { "type": "custom chip", "transition": "cross fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 29, "filterEnvelope": "steady", "interval": "union", "vibrato": "light", "customChipWave": [24, 23, 22, 22, 22, 22, 22, 21, 21, 19, 19, 15, 11, 7, 5, -2, -5, -11, -13, -14, -16, -17, -17, -17, -17, -17, -17, -17, -17, -13, -10, -1, 4, 6, 8, 10, 11, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 11, 8, 4, 2, -4, -7, -11, -12, -13, -14, -15, -15, -15] } },
                { name: "sandbox ehruthing", generalMidi: false, settings: { "type": "custom chip", "hard fade": "seamless", "effects": "reverb", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, 23, 22, 21, 21, 20, 19, 18, 18, 17, 16, 15, -22, -20, -18, -16, -14, -13, -11, -10, -7, -6, -4, -3, -2, 0, 2, 4, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 2, 1, -1, -1, -2, -3, -4, -6, -6, -7, -8, -8, -9, -10, -10, -11, -13, -15, -16, -17, -3, -4, -5] } },
                { name: "sandbox wurtz organ", generalMidi: false, settings: { "type": "FM", "transition": "seamless", "effects": "chorus", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 0, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 3, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "tremolo6" }, { "frequency": "2×", "amplitude": 9, "envelope": "tripolo3" }, { "frequency": "4×", "amplitude": 5, "envelope": "pentolo3" }, { "frequency": "8×", "amplitude": 2, "envelope": "pentolo6" }] } },
            ]) },
        { name: "Blackbox Presets", presets: toNameMap([
                { name: "blackbox deep key", midiProgram: 9, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 32, "filterEnvelope": "twang 1", "interval": "shimmer", "vibrato": "light", "harmonics": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 30] } },
                { name: "blackbox ring ding", midiProgram: 78, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 1500, "filterResonance": 16, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "custom" }, { "frequency": "12×", "amplitude": 9, "envelope": "custom" }, { "frequency": "22×", "amplitude": 4, "envelope": "twang 2" }] } },
            ]) },
        { name: "Todbox Presets", presets: toNameMap([
                { name: "todbox accordion", midiProgram: 21, generalMidi: true, settings: { "type": "chip", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "swell 1", "wave": "todbox accordian", "interval": "honky tonk", "vibrato": "none" } },
                { name: "todbox wind", generalMidi: false, settings: { "type": "FM", "effects": "reverb", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 200, "filterResonance": 2950, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1→3 2→4", "feedbackType": "1→3 2→4", "feedbackAmplitude": 15, "feedbackEnvelope": "steady", "operators": [{ "frequency": "16×", "amplitude": 15, "envelope": "steady" }, { "frequency": "16×", "amplitude": 0, "envelope": "custom" }, { "frequency": "16×", "amplitude": 15, "envelope": "steady" }, { "frequency": "16×", "amplitude": 0, "envelope": "flare 2" }] } },
            ]) },
        { name: "Midbox Misc Presets", presets: toNameMap([
                { name: "Broken Music Box", midiProgram: 21, generalMidi: true, settings: { "type": "chip", "eqFilter": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 500, "linearGain": 1.4142 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 500, "linearGain": 1.4142 }], "effects": ["transition type", "chord type", "vibrato", "note filter", "bitcrusher", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "chord": "strum", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "vibrato": "custom", "vibratoDepth": 0.72, "vibratoDelay": 19, "vibratoSpeed": 30, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.0884 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.0884 }], "bitcrusherOctave": 3, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 29, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 23, "fadeInSeconds": 0, "fadeOutTicks": 12, "wave": "rounded", "unison": "none", "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 64, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }] } },
                { name: "Enhanced Synth Kick", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 594.6, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 19027.31, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.25 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 594.6, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 19027.31, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.25 }], "effects": ["pitch shift", "vibrato", "note filter", "distortion", "bitcrusher", "chorus"], "pitchShiftSemitones": 24, "vibrato": "custom", "vibratoDepth": 2, "vibratoDelay": 0, "vibratoSpeed": 30, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "peak", "cutoffHz": 148.65, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "peak", "cutoffHz": 148.65, "linearGain": 11.3137 }], "distortion": 71, "aliases": false, "bitcrusherOctave": 4, "bitcrusherQuantization": 57, "panDelay": 10, "chorus": 29, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1 2←(3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 13, "operators": [{ "frequency": "20×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "16×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "twang 3" }, { "target": "feedbackAmplitude", "envelope": "twang 1" }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 1 }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 2" }] } },
                { name: "Scratch String", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.1768 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.25 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.1768 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.25 }], "effects": ["transition type", "vibrato", "note filter", "distortion", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "vibrato": "light", "vibratoDepth": 0.15, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 1189.21, "linearGain": 0.3536 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 1189.21, "linearGain": 0.3536 }], "distortion": 100, "aliases": false, "panDelay": 10, "echoSustain": 29, "echoDelayBeats": 0.75, "reverb": 29, "fadeInSeconds": 0, "fadeOutTicks": 12, "algorithm": "1←2←(3 4)", "feedbackType": "1→4", "feedbackAmplitude": 3, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 8, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 3, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 1 }] } },
                { name: "Xylophone Saw", generalMidi: false, settings: { "type": "custom chip", "eqFilter": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.1768 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.1768 }], "effects": ["chord type", "pitch shift", "vibrato", "bitcrusher", "chorus", "echo"], "chord": "simultaneous", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "pitchShiftSemitones": 24, "vibrato": "light", "vibratoDepth": 0.15, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "bitcrusherOctave": 5.5, "bitcrusherQuantization": 14, "panDelay": 10, "chorus": 29, "echoSustain": 43, "echoDelayBeats": 0.75, "fadeInSeconds": 0, "fadeOutTicks": 12, "wave": "square", "unison": "none", "customChipWave": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 24, "7": 24, "8": 24, "9": 24, "10": 24, "11": -12, "12": -12, "13": -12, "14": -12, "15": -12, "16": 24, "17": 24, "18": 24, "19": 24, "20": 24, "21": 24, "22": 12, "23": 12, "24": 12, "25": 12, "26": 12, "27": -24, "28": -24, "29": -24, "30": -24, "31": -24, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 24, "39": 24, "40": 24, "41": 24, "42": 24, "43": -11, "44": -11, "45": -11, "46": -11, "47": -11, "48": 24, "49": 24, "50": 24, "51": 24, "52": 24, "53": 24, "54": 12, "55": 12, "56": 12, "57": 12, "58": 12, "59": 12, "60": 12, "61": 12, "62": 12, "63": 12 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [{ "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "Bow Bass", generalMidi: false, settings: { "type": "custom chip", "eqFilter": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.1768 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.1768 }], "effects": ["chord type", "pitch shift", "vibrato", "note filter", "bitcrusher", "chorus", "echo"], "chord": "simultaneous", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "pitchShiftSemitones": 19, "vibrato": "custom", "vibratoDepth": 0.36, "vibratoDelay": 0, "vibratoSpeed": 30, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 2.8284 }], "bitcrusherOctave": 6, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 29, "echoSustain": 43, "echoDelayBeats": 0.75, "fadeInSeconds": 0, "fadeOutTicks": 6, "wave": "square", "unison": "custom", "unisonVoices": 2, "unisonSpread": 12, "unisonOffset": -12, "unisonExpression": 1, "unisonSign": 1, "customChipWave": { "0": -24, "1": -24, "2": -24, "3": -24, "4": -24, "5": -24, "6": 24, "7": 24, "8": 24, "9": 24, "10": 24, "11": 24, "12": 24, "13": 24, "14": 24, "15": 24, "16": 24, "17": 24, "18": 24, "19": 24, "20": 24, "21": 24, "22": 24, "23": 24, "24": 24, "25": 24, "26": 24, "27": 24, "28": 24, "29": 24, "30": 24, "31": 24, "32": 24, "33": 24, "34": 24, "35": 24, "36": 24, "37": 24, "38": 24, "39": 24, "40": 24, "41": 24, "42": 24, "43": 24, "44": 24, "45": 24, "46": 24, "47": 24, "48": 24, "49": 24, "50": 24, "51": 24, "52": 24, "53": 24, "54": 24, "55": 24, "56": 24, "57": 24, "58": 24, "59": 24, "60": 24, "61": 24, "62": 24, "63": 24 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 2", "index": 0 }, { "target": "noteFilterFreq", "envelope": "twang 2", "index": 1 }] } },
                { name: "Depths", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 2 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 2 }], "effects": ["transition type", "chord type", "pitch shift", "detune", "vibrato", "note filter", "bitcrusher", "chorus", "reverb"], "transition": "normal", "clicklessTransition": false, "chord": "strum", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pitchShiftSemitones": 0, "detuneCents": -52, "vibrato": "custom", "vibratoDepth": 0.56, "vibratoDelay": 0, "vibratoSpeed": 1, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }], "bitcrusherOctave": 3, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 100, "reverb": 71, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "pulse width", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 3, "waveform": "ramp", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterFreq", "envelope": "tremolo4", "index": 0 }] } },
                { name: "Disco Vocal Lead", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["transition type", "pitch shift", "note filter", "distortion", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.0884 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 4 }], "noteSubFilters0": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.0884 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 4 }], "distortion": 100, "aliases": false, "panDelay": 10, "chorus": 100, "echoSustain": 29, "echoDelayBeats": 1, "reverb": 19, "fadeInSeconds": 0, "fadeOutTicks": 6, "harmonics": [43, 71, 100, 0, 0, 100, 0, 57, 0, 0, 0, 86, 29, 0, 0, 0, 0, 14, 0, 14, 14, 0, 0, 0, 0, 43, 0, 0], "unison": "piano", "stringSustain": 93, "envelopes": [] } },
                { name: "Blessed Piano", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "peak", "cutoffHz": 707.11, "linearGain": 4 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 707.11, "linearGain": 4 }], "effects": ["chord type", "pitch shift", "vibrato", "note filter", "distortion", "bitcrusher", "chorus"], "chord": "strum", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pitchShiftSemitones": 12, "vibrato": "custom", "vibratoDepth": 0.48, "vibratoDelay": 11, "vibratoSpeed": 16, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.0884 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.0884 }], "distortion": 14, "aliases": false, "bitcrusherOctave": 4, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 86, "fadeInSeconds": 0, "fadeOutTicks": 24, "wave": "triangle", "unison": "custom", "unisonVoices": 2, "unisonSpread": 6, "unisonOffset": 6.5, "unisonExpression": 0.8, "unisonSign": 1, "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "punch" }] } },
                { name: "Sawtooth Pluck", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.25 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.25 }], "effects": ["transition type", "chord type", "pitch shift", "vibrato", "note filter"], "transition": "normal", "clicklessTransition": false, "chord": "arpeggio", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "pitchShiftSemitones": 24, "vibrato": "light", "vibratoDepth": 0.15, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 8000, "linearGain": 4 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 8000, "linearGain": 4 }], "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 12, "wave": "sawtooth", "unison": "none", "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 1 }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "noteFilterFreq", "envelope": "swell 1", "index": 2 }] } },
                { name: "Desolated Piano", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.5 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.5 }], "effects": ["pitch shift", "vibrato", "bitcrusher", "chorus", "reverb"], "pitchShiftSemitones": 24, "vibrato": "custom", "vibratoDepth": 0.6, "vibratoDelay": 1, "vibratoSpeed": 18, "vibratoType": 0, "bitcrusherOctave": 3.5, "bitcrusherQuantization": 0, "panDelay": 10, "chorus": 29, "reverb": 26, "fadeInSeconds": 0, "fadeOutTicks": 48, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 7, "operators": [{ "frequency": "~1×", "amplitude": 15, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "3×", "amplitude": 3, "waveform": "trapezoid", "pulseWidth": 5 }, { "frequency": "8×", "amplitude": 4, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "vibratoDepth", "envelope": "twang 2" }, { "target": "feedbackAmplitude", "envelope": "twang 2" }, { "target": "operatorAmplitude", "envelope": "decay 1", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 2 }] } },
                { name: "Distorted Guitar 1", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "effects": ["note filter", "distortion", "chorus", "echo", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "high-pass", "cutoffHz": 297.3, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 2 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.1768 }], "noteSubFilters0": [{ "type": "high-pass", "cutoffHz": 297.3, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 2 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.1768 }], "distortion": 71, "aliases": false, "panDelay": 10, "chorus": 14, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 39, "fadeInSeconds": 0, "fadeOutTicks": 6, "harmonics": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "Distorted Guitar 2", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "high-pass", "cutoffHz": 353.55, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.125 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 0.5 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 353.55, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.125 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 0.5 }], "effects": ["note filter", "bitcrusher", "chorus", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "peak", "cutoffHz": 210.22, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 2000, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "peak", "cutoffHz": 210.22, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 2000, "linearGain": 2.8284 }], "bitcrusherOctave": 6.5, "bitcrusherQuantization": 71, "panDelay": 10, "chorus": 43, "reverb": 52, "fadeInSeconds": 0, "fadeOutTicks": 24, "algorithm": "(1 2 3)←4", "feedbackType": "1⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "2×", "amplitude": 14, "waveform": "trapezoid", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 10, "waveform": "pulse width", "pulseWidth": 5 }, { "frequency": "8×", "amplitude": 3, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [] } },
                { name: "Distorted Guitar 3", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 500, "linearGain": 4 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 500, "linearGain": 4 }], "effects": ["pitch shift", "note filter", "distortion", "chorus", "reverb"], "pitchShiftSemitones": 24, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 840.9, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.3536 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 840.9, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.3536 }], "distortion": 100, "aliases": false, "panDelay": 10, "chorus": 14, "reverb": 6, "fadeInSeconds": 0, "fadeOutTicks": 24, "harmonics": [100, 0, 86, 0, 43, 0, 100, 43, 0, 29, 0, 100, 0, 0, 0, 71, 43, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 29], "unison": "none", "stringSustain": 0, "envelopes": [{ "target": "noteVolume", "envelope": "twang 1" }] } },
                { name: "High Pad", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 8 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 8 }], "effects": ["pitch shift", "vibrato", "note filter", "chorus"], "pitchShiftSemitones": 12, "vibrato": "custom", "vibratoDepth": 0.28, "vibratoDelay": 19, "vibratoSpeed": 30, "vibratoType": 0, "noteFilterType": true, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 }], "panDelay": 10, "chorus": 86, "fadeInSeconds": 0.0125, "fadeOutTicks": 24, "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 11, "operators": [{ "frequency": "4×", "amplitude": 13, "waveform": "pulse width", "pulseWidth": 3 }, { "frequency": "0.12×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "3×", "amplitude": 1, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "feedbackAmplitude", "envelope": "twang 1" }, { "target": "feedbackAmplitude", "envelope": "twang 1" }, { "target": "feedbackAmplitude", "envelope": "twang 1" }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 1 }, { "target": "noteFilterAllFreqs", "envelope": "swell 1" }] } },
                { name: "Magical Pulse", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.0884 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.0884 }], "effects": ["transition type", "pitch shift", "vibrato", "chorus"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 24, "vibrato": "custom", "vibratoDepth": 0.56, "vibratoDelay": 27, "vibratoSpeed": 14, "vibratoType": 0, "panDelay": 10, "chorus": 57, "fadeInSeconds": 0, "fadeOutTicks": 6, "wave": "sawtooth", "unison": "custom", "unisonVoices": 2, "unisonSpread": 0.03, "unisonOffset": -0.02, "unisonExpression": 0.85, "unisonSign": 0.7, "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "noteVolume", "envelope": "swell 3" }] } },
                { name: "Distorted Lead", generalMidi: false, settings: { "type": "FM", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["transition type", "distortion", "bitcrusher", "chorus"], "transition": "normal", "clicklessTransition": false, "distortion": 29, "aliases": false, "bitcrusherOctave": 2, "bitcrusherQuantization": 0, "panDelay": 10, "chorus": 100, "fadeInSeconds": 0, "fadeOutTicks": 6, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 11, "waveform": "trapezoid", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 7, "waveform": "pulse width", "pulseWidth": 7 }, { "frequency": "1×", "amplitude": 8, "waveform": "ramp", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 5, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [] } },
                { name: "FM Punch Bass", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "effects": ["note filter"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 4, "operators": [{ "frequency": "1×", "amplitude": 7, "waveform": "pulse width", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 4, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "ramp", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "feedbackAmplitude", "envelope": "punch" }, { "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "Rough Glistening Piano", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "peak", "cutoffHz": 210.22, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.1768 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 210.22, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.1768 }], "effects": ["chord type", "note filter", "chorus", "echo", "reverb"], "chord": "strum", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.5 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.5 }], "panDelay": 10, "chorus": 29, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 23, "fadeInSeconds": 0, "fadeOutTicks": 48, "harmonics": [100, 71, 43, 29, 29, 14, 14, 43, 0, 43, 0, 57, 71, 0, 71, 43, 0, 0, 57, 0, 57, 0, 71, 0, 71, 0, 57, 0], "unison": "honky tonk", "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 2", "index": 0 }] } },
                { name: "Soft Glistening Piano", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 210.22, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }], "effects": ["chord type", "detune", "note filter", "chorus", "reverb"], "chord": "simultaneous", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "detuneCents": -20, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.5 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.5 }], "panDelay": 10, "chorus": 29, "reverb": 97, "fadeInSeconds": 0.135, "fadeOutTicks": 48, "harmonics": [100, 0, 0, 29, 29, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 43, 14, 0, 0, 0, 0], "unison": "honky tonk", "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 2", "index": 0 }] } },
                { name: "Jingle Bells", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2 }], "effects": ["chord type", "pitch shift", "detune", "note filter", "bitcrusher", "chorus", "echo", "reverb"], "chord": "simultaneous", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pitchShiftSemitones": 24, "detuneCents": 8, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 2 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 2 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 2.8284 }], "bitcrusherOctave": 5, "bitcrusherQuantization": 0, "panDelay": 10, "chorus": 29, "echoSustain": 57, "echoDelayBeats": 1.667, "reverb": 77, "fadeInSeconds": 0, "fadeOutTicks": 12, "harmonics": [100, 29, 57, 71, 0, 0, 0, 0, 0, 0, 0, 14, 43, 14, 0, 0, 0, 0, 0, 0, 14, 0, 14, 14, 0, 0, 0, 0], "unison": "none", "envelopes": [{ "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "Odd Snare", generalMidi: false, settings: { "type": "FM", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["pitch shift", "detune", "note filter", "distortion", "bitcrusher", "chorus", "echo", "reverb"], "pitchShiftSemitones": 24, "detuneCents": 200, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 2.8284 }], "distortion": 29, "aliases": false, "bitcrusherOctave": 4.5, "bitcrusherQuantization": 43, "panDelay": 10, "chorus": 29, "echoSustain": 43, "echoDelayBeats": 0.083, "reverb": 3, "fadeInSeconds": 0, "fadeOutTicks": 12, "algorithm": "(1 2)←3←4", "feedbackType": "2⟲ 3⟲ 4⟲", "feedbackAmplitude": 15, "operators": [{ "frequency": "16×", "amplitude": 15, "waveform": "pulse width", "pulseWidth": 5 }, { "frequency": "0.12×", "amplitude": 12, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "2×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "13×", "amplitude": 6, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 3", "index": 0 }, { "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "pitchShift", "envelope": "twang 3" }, { "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "noteFilterFreq", "envelope": "swell 1", "index": 1 }, { "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }] } },
                { name: "Otherworldly Kick", generalMidi: false, settings: { "type": "FM", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["pitch shift", "vibrato", "distortion", "bitcrusher", "chorus"], "pitchShiftSemitones": 12, "vibrato": "custom", "vibratoDepth": 0.92, "vibratoDelay": 18, "vibratoSpeed": 30, "vibratoType": 0, "distortion": 29, "aliases": false, "bitcrusherOctave": 6, "bitcrusherQuantization": 57, "panDelay": 10, "chorus": 14, "fadeInSeconds": 0, "fadeOutTicks": 24, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "20×", "amplitude": 15, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "twang 3" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }, { "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }] } },
                { name: "Bitcrushed Piano", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "high-pass", "cutoffHz": 594.6, "linearGain": 1.4142 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 500, "linearGain": 1.4142 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 594.6, "linearGain": 1.4142 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 500, "linearGain": 1.4142 }], "effects": ["transition type", "chord type", "pitch shift", "vibrato", "note filter", "bitcrusher", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "chord": "strum", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pitchShiftSemitones": 24, "vibrato": "custom", "vibratoDepth": 0.72, "vibratoDelay": 19, "vibratoSpeed": 30, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.0884 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.0884 }], "bitcrusherOctave": 3, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 29, "echoSustain": 29, "echoDelayBeats": 0.75, "reverb": 23, "fadeInSeconds": 0, "fadeOutTicks": 12, "wave": "triangle", "unison": "custom", "unisonVoices": 2, "unisonSpread": 0.000211, "unisonOffset": -0.3, "unisonExpression": 0.8, "unisonSign": 1, "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }] } },
                { name: "Boop Pad", generalMidi: false, settings: { "type": "custom chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.1768 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.1768 }], "effects": ["transition type", "note filter", "reverb"], "transition": "interrupt", "clicklessTransition": false, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.0884 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.0884 }], "panDelay": 10, "reverb": 48, "fadeInSeconds": 0, "fadeOutTicks": 96, "wave": "square", "unison": "custom", "unisonVoices": 2, "unisonSpread": 0.000211, "unisonOffset": -0.3, "unisonExpression": 0.8, "unisonSign": 1, "customChipWave": { "0": -1, "1": 1, "2": -1, "3": -4, "4": -6, "5": -8, "6": -11, "7": -12, "8": -15, "9": -16, "10": -18, "11": -19, "12": -21, "13": -22, "14": -24, "15": -24, "16": -24, "17": -24, "18": -23, "19": -22, "20": -21, "21": -19, "22": -17, "23": -16, "24": -14, "25": -13, "26": -10, "27": -8, "28": -6, "29": -4, "30": -2, "31": -1, "32": 2, "33": 3, "34": 5, "35": 7, "36": 10, "37": 12, "38": 14, "39": 16, "40": 18, "41": 19, "42": 20, "43": 21, "44": 23, "45": 23, "46": 24, "47": 24, "48": 24, "49": 24, "50": 24, "51": 24, "52": 24, "53": 24, "54": 24, "55": 24, "56": 24, "57": 24, "58": 23, "59": 22, "60": 21, "61": 19, "62": 16, "63": 14 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [{ "target": "noteVolume", "envelope": "twang 2" }, { "target": "noteFilterFreq", "envelope": "twang 2", "index": 0 }] } },
                { name: "Spectrum Pad", generalMidi: false, settings: { "type": "spectrum", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2196.8, "linearGain": 1 }], "eqFilterType": true, "eqSimpleCut": 6, "eqSimplePeak": 2, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters1": [], "effects": ["vibrato", "distortion", "bitcrusher", "reverb"], "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "distortion": 29, "aliases": false, "bitcrusherOctave": 4.5, "bitcrusherQuantization": 43, "panDelay": 10, "reverb": 26, "fadeInSeconds": 0, "fadeOutTicks": -1, "spectrum": [100, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], "envelopes": [] } },
                { name: "Countdown Pulse", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "peak", "cutoffHz": 2828.43, "linearGain": 2 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 2828.43, "linearGain": 2 }], "effects": ["transition type", "pitch shift", "detune", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 16, "detuneCents": 196, "panDelay": 10, "chorus": 14, "echoSustain": 29, "echoDelayBeats": 0.5, "reverb": 13, "fadeInSeconds": 0, "fadeOutTicks": 48, "pulseWidth": 42, "decimalOffset": 0, "unison": "none", "envelopes": [{ "target": "pitchShift", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }] } },
                { name: "Ambient Pulse 1", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.25 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.25 }], "effects": ["note filter", "echo", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 2.8284 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 2.8284 }], "panDelay": 10, "echoSustain": 29, "echoDelayBeats": 1.333, "reverb": 35, "fadeInSeconds": 0, "fadeOutTicks": 96, "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 9, "operators": [{ "frequency": "1×", "amplitude": 13, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 13, "waveform": "pulse width", "pulseWidth": 6 }, { "frequency": "3×", "amplitude": 0, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "flare 1", "index": 2 }] } },
                { name: "Saturn Pad", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 1.4142 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 1.4142 }], "effects": ["note filter", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 0.5 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 0.5 }], "panDelay": 10, "reverb": 26, "fadeInSeconds": 0, "fadeOutTicks": 24, "harmonics": [0, 100, 100, 100, 0, 0, 0, 0, 43, 43, 0, 86, 0, 100, 0, 29, 0, 0, 0, 0, 71, 57, 0, 0, 86, 0, 0, 43], "unison": "shimmer", "stringSustain": 93, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "tremolo3" }, { "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "Build-Up Pad", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }], "effects": ["note filter", "reverb"], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "panDelay": 10, "reverb": 32, "fadeInSeconds": 0, "fadeOutTicks": 96, "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 9, "operators": [{ "frequency": "1×", "amplitude": 13, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 13, "waveform": "pulse width", "pulseWidth": 6 }, { "frequency": "3×", "amplitude": 0, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "flare 1", "index": 2 }] } },
                { name: "Ambient Pulse 2", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 1189.21, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 594.6, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 8 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 1189.21, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 594.6, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 8 }], "effects": ["chord type", "note filter", "reverb"], "chord": "simultaneous", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 1 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 1 }], "panDelay": 10, "reverb": 32, "fadeInSeconds": 0, "fadeOutTicks": 72, "harmonics": [57, 57, 71, 57, 43, 43, 43, 71, 43, 43, 43, 57, 71, 86, 100, 86, 57, 57, 43, 43, 43, 57, 43, 29, 43, 57, 57, 43], "unison": "custom", "unisonVoices": 2, "unisonSpread": 0.0018, "unisonOffset": 0, "unisonExpression": 0.85, "unisonSign": 1.6, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "tremolo5" }] } },
                { name: "Hyper Synth Saw", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "peak", "cutoffHz": 19027.31, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 1.4142 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 19027.31, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 1.4142 }], "effects": ["chord type", "detune", "vibrato", "distortion", "chorus", "echo", "reverb"], "chord": "arpeggio", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "detuneCents": 16, "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "distortion": 14, "aliases": false, "panDelay": 10, "chorus": 86, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 58, "fadeInSeconds": 0, "fadeOutTicks": 96, "wave": "sawtooth", "unison": "custom", "unisonVoices": 2, "unisonSpread": 0.0018, "unisonOffset": 0, "unisonExpression": 0.85, "unisonSign": 1.6, "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [] } },
                { name: "Mechanical Blip", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.3536 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 0.3536 }], "effects": ["transition type", "detune", "note filter", "bitcrusher", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "detuneCents": 16, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 500, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 500, "linearGain": 4 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 11.3137 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 }], "bitcrusherOctave": 4.5, "bitcrusherQuantization": 43, "panDelay": 10, "chorus": 43, "echoSustain": 57, "echoDelayBeats": 1.5, "reverb": 23, "fadeInSeconds": 0, "fadeOutTicks": -1, "wave": "rounded", "unison": "none", "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 64, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [] } },
                { name: "Another Piano", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 2 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 9513.66, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 2 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }], "effects": ["detune", "note filter", "reverb"], "detuneCents": 16, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.125 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.125 }], "panDelay": 10, "reverb": 26, "fadeInSeconds": 0, "fadeOutTicks": 24, "pulseWidth": 44, "decimalOffset": 0, "unison": "none", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "punch" }, { "target": "noteVolume", "envelope": "twang 2" }, { "target": "unison", "envelope": "twang 1" }, { "target": "unison", "envelope": "twang 1" }, { "target": "unison", "envelope": "twang 1" }, { "target": "unison", "envelope": "twang 1" }, { "target": "unison", "envelope": "twang 1" }] } },
            ]) },
        { name: "Midbox Dubstep Presets", presets: toNameMap([
                { name: "Dubstep Bwayyyy", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.5 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.5 }], "effects": ["transition type", "vibrato", "note filter", "distortion", "chorus", "reverb"], "transition": "continue", "clicklessTransition": false, "vibrato": "custom", "vibratoDepth": 0.44, "vibratoDelay": 23, "vibratoSpeed": 26, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 2000, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 2000, "linearGain": 11.3137 }], "distortion": 100, "aliases": false, "panDelay": 10, "chorus": 71, "reverb": 32, "fadeInSeconds": 0, "fadeOutTicks": 12, "pulseWidth": 30, "decimalOffset": 0, "unison": "none", "envelopes": [{ "target": "noteFilterFreq", "envelope": "swell 3", "index": 0 }, { "target": "noteFilterFreq", "envelope": "swell 2", "index": 0 }] } },
                { name: "Dubstep Bass Hum", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 2 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 16000, "linearGain": 2 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 2 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 16000, "linearGain": 2 }], "effects": ["transition type", "pitch shift", "vibrato", "note filter", "distortion", "bitcrusher", "chorus", "reverb"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "vibrato": "custom", "vibratoDepth": 0.44, "vibratoDelay": 23, "vibratoSpeed": 26, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "distortion": 29, "aliases": false, "bitcrusherOctave": 2, "bitcrusherQuantization": 14, "panDelay": 10, "chorus": 43, "reverb": 32, "fadeInSeconds": 0, "fadeOutTicks": 24, "pulseWidth": 10, "envelopes": [{ "target": "noteFilterFreq", "envelope": "flare 1", "index": 0 }, { "target": "noteFilterFreq", "envelope": "flare 3", "index": 0 }] } },
                { name: "Dubstep Yaa", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["transition type", "pitch shift", "vibrato", "note filter", "bitcrusher", "chorus", "reverb"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "vibrato": "custom", "vibratoDepth": 0.44, "vibratoDelay": 23, "vibratoSpeed": 26, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "bitcrusherOctave": 2.5, "bitcrusherQuantization": 29, "panDelay": 10, "chorus": 86, "reverb": 10, "fadeInSeconds": 0, "fadeOutTicks": 24, "pulseWidth": 8, "decimalOffset": 0, "unison": "none", "envelopes": [{ "target": "noteFilterFreq", "envelope": "swell 1", "index": 0 }] } },
                { name: "Dubstep Yeoww", generalMidi: false, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 297.3, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["transition type", "chord type", "vibrato", "note filter", "distortion", "bitcrusher", "chorus", "reverb"], "transition": "normal", "clicklessTransition": false, "chord": "simultaneous", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "vibrato": "custom", "vibratoDepth": 0.44, "vibratoDelay": 23, "vibratoSpeed": 26, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 11.3137 }], "distortion": 100, "aliases": false, "bitcrusherOctave": 4, "bitcrusherQuantization": 0, "panDelay": 10, "chorus": 86, "reverb": 35, "fadeInSeconds": 0, "fadeOutTicks": 24, "pulseWidth": 40, "decimalOffset": 0, "unison": "none", "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 3", "index": 0 }, { "target": "pulseWidth", "envelope": "tremolo6" }] } },
                { name: "Dubstep Lead", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.0884 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.0884 }], "effects": ["transition type", "pitch shift", "note filter", "distortion", "bitcrusher"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "peak", "cutoffHz": 594.6, "linearGain": 5.6569 }, { "type": "low-pass", "cutoffHz": 1000, "linearGain": 2 }], "noteSubFilters0": [{ "type": "peak", "cutoffHz": 594.6, "linearGain": 5.6569 }, { "type": "low-pass", "cutoffHz": 1000, "linearGain": 2 }], "distortion": 29, "aliases": false, "bitcrusherOctave": 6.5, "bitcrusherQuantization": 86, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 15, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 0 }, { "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "Dubstep Dyaii", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 11313.71, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.0884 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 11313.71, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.0884 }], "effects": ["transition type", "vibrato", "note filter", "distortion", "bitcrusher", "chorus", "reverb"], "transition": "slide", "clicklessTransition": false, "vibrato": "custom", "vibratoDepth": 0.44, "vibratoDelay": 23, "vibratoSpeed": 26, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 707.11, "linearGain": 8 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 707.11, "linearGain": 8 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "distortion": 29, "aliases": false, "bitcrusherOctave": 3, "bitcrusherQuantization": 71, "panDelay": 10, "chorus": 71, "reverb": 32, "fadeInSeconds": 0, "fadeOutTicks": 12, "harmonics": [100, 0, 71, 86, 0, 0, 100, 86, 86, 71, 57, 57, 29, 14, 57, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "stringSustain": 100, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }, { "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "Dubstep Alarm", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.5 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.5 }], "effects": ["transition type", "pitch shift", "note filter", "distortion", "bitcrusher"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "high-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "high-pass", "cutoffHz": 1414.21, "linearGain": 11.3137 }], "distortion": 29, "aliases": false, "bitcrusherOctave": 6.5, "bitcrusherQuantization": 100, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 6, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 0 }] } },
            ]) },
        { name: "Midbox Noise Presets", presets: toNameMap([
                { name: "Hollow Retro Riser", isNoise: true, generalMidi: false, settings: { "type": "noise", "eqFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "eqFilterType": true, "eqSimpleCut": 8, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters1": [], "effects": ["bitcrusher", "chorus", "echo", "reverb"], "bitcrusherOctave": 4, "bitcrusherQuantization": 43, "panDelay": 10, "chorus": 29, "echoSustain": 57, "echoDelayBeats": 0.5, "reverb": 29, "fadeInSeconds": 0, "fadeOutTicks": -3, "wave": "hollow", "unison": "none", "envelopes": [] } },
            ]) },
        { name: "UltraBox Presets", presets: toNameMap([
                { name: "nes white", midiProgram: 116, generalMidi: true, isNoise: true, settings: { "type": "noise", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 8, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": ["panning"], "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 0, "wave": "1-bit white", "envelopes": [] } },
                { name: "nes ping", midiProgram: 116, generalMidi: true, isNoise: true, settings: { "type": "noise", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 8, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": ["panning"], "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 0, "wave": "1-bit metallic", "envelopes": [] } },
                { name: "distorted pulse vocal", generalMidi: false, settings: { "type": "chip", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.0884 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.0884 }], "effects": ["panning", "transition type", "pitch shift", "vibrato", "note filter", "bitcrusher", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "high-pass", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 297.3, "linearGain": 8 }, { "type": "peak", "cutoffHz": 500, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 250, "linearGain": 11.3137 }], "noteSubFilters0": [{ "type": "high-pass", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 297.3, "linearGain": 8 }, { "type": "peak", "cutoffHz": 500, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 250, "linearGain": 11.3137 }], "bitcrusherOctave": 6.5, "bitcrusherQuantization": 71, "pan": 0, "panDelay": 10, "echoSustain": 14, "echoDelayBeats": 0.167, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -3, "wave": "1/8 pulse", "unison": "none", "envelopes": [] } },
                { name: "dubsteb bwah", generalMidi: false, settings: { "type": "FM", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 }], "eqFilterType": true, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": ["panning", "transition type", "chord type"], "transition": "interrupt", "clicklessTransition": false, "chord": "custom interval", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 10, "operators": [{ "frequency": "2×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteVolume", "envelope": "note size" }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 2 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 3 }] } },
                { name: "FM cool bass", generalMidi: false, settings: { "type": "FM", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.7071 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.7071 }], "effects": ["panning", "transition type", "note filter", "reverb"], "transition": "interrupt", "clicklessTransition": false, "noteFilterType": true, "noteSimpleCut": 9, "noteSimplePeak": 2, "noteFilter": [{ "type": "low-pass", "cutoffHz": 7231.23, "linearGain": 1 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 7231.23, "linearGain": 1 }], "pan": 0, "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "2×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "13×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "punch" }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 3 }] } },
                { name: "FM funky bass", generalMidi: false, settings: { "type": "FM", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 }], "eqFilterType": true, "eqSimpleCut": 5, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": ["panning", "transition type", "reverb"], "transition": "normal", "clicklessTransition": false, "pan": 0, "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -3, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~1×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteVolume", "envelope": "punch" }, { "target": "noteVolume", "envelope": "note size" }] } },
                { name: "mrow", generalMidi: false, settings: { "type": "FM", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [], "effects": ["panning", "chord type", "reverb"], "chord": "custom interval", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pan": 0, "panDelay": 10, "reverb": 35, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "4×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 9, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "flare 1", "index": 0 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 1 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 3", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 1" }] } },
                { name: "talking bass", generalMidi: false, settings: { "type": "FM", "volume": 0, "eqFilter": [], "effects": ["chord type"], "chord": "custom interval", "fadeInSeconds": 0, "fadeOutTicks": -3, "algorithm": "1←(2 3)←4", "feedbackType": "1⟲", "feedbackAmplitude": 15, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "2×", "amplitude": 8 }, { "frequency": "2×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 12 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "note size", "index": 2 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "note size" }] } },
                { name: "synth marimba", generalMidi: false, settings: { "type": "Picked String", "volume": 0, "eqFilter": [{ "type": "high-pass", "cutoffHz": 176.78, "linearGain": 1 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 0.5 }], "effects": ["note filter", "echo"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1.4142 }], "echoSustain": 71, "echoDelayBeats": 0.5, "fadeInSeconds": 0, "fadeOutTicks": -1, "harmonics": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], "unison": "fifth", "stringSustain": 7, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "punch" }] } },
                { name: "italian accordian", generalMidi: false, settings: { "type": "custom chip", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 6000, "linearGain": 0.5 }], "eqFilterType": true, "eqSimpleCut": 8, "eqSimplePeak": 1, "eqSubFilters1": [], "effects": ["panning", "chorus", "reverb"], "pan": 0, "panDelay": 10, "chorus": 71, "reverb": 45, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "wave": "square", "unison": "honky tonk", "customChipWave": { "0": -24, "1": -24, "2": -24, "3": -24, "4": -24, "5": -24, "6": -24, "7": -24, "8": -24, "9": -24, "10": -24, "11": -24, "12": -24, "13": -24, "14": -24, "15": -24, "16": 24, "17": 24, "18": 24, "19": 24, "20": 24, "21": 24, "22": 24, "23": 24, "24": -24, "25": -24, "26": -24, "27": -24, "28": -24, "29": -24, "30": -24, "31": -24, "32": -24, "33": -24, "34": -24, "35": -24, "36": -24, "37": -24, "38": -24, "39": -24, "40": 24, "41": 24, "42": 24, "43": 24, "44": 24, "45": 24, "46": 24, "47": 24, "48": -24, "49": -24, "50": -24, "51": -24, "52": -24, "53": -24, "54": -24, "55": -24, "56": -24, "57": -24, "58": -24, "59": -24, "60": -24, "61": -24, "62": -24, "63": -24 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },
                { name: "chip supersaw", generalMidi: false, settings: { "type": "custom chip", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 }], "eqFilterType": true, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": ["panning", "transition type", "vibrato", "chorus", "reverb"], "transition": "interrupt", "clicklessTransition": false, "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "pan": 0, "panDelay": 10, "chorus": 29, "reverb": 29, "fadeInSeconds": 0, "fadeOutTicks": -1, "wave": "square", "unison": "dissonant", "customChipWave": { "0": 22, "1": 22, "2": 16, "3": 6, "4": 0, "5": -3, "6": -8, "7": -10, "8": -13, "9": -16, "10": -19, "11": -19, "12": -20, "13": -22, "14": -22, "15": -24, "16": -24, "17": -24, "18": -24, "19": -24, "20": -24, "21": -24, "22": -24, "23": -24, "24": -24, "25": -24, "26": -24, "27": -24, "28": -24, "29": -24, "30": -24, "31": 24, "32": 24, "33": 16, "34": 9, "35": 6, "36": 4, "37": 2, "38": 0, "39": -1, "40": -3, "41": -4, "42": -4, "43": -6, "44": -6, "45": -6, "46": -6, "47": -5, "48": -5, "49": -4, "50": -2, "51": -2, "52": 1, "53": 4, "54": 6, "55": 8, "56": 10, "57": 12, "58": 14, "59": 16, "60": 18, "61": 19, "62": 22, "63": 24 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },
                { name: "fm supersaw", generalMidi: false, settings: { "type": "FM6op", "volume": 0, "eqFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }], "effects": ["panning", "transition type", "pitch shift", "note filter", "chorus", "reverb"], "transition": "continue", "clicklessTransition": false, "pitchShiftSemitones": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [], "noteSubFilters0": [], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 }], "pan": 0, "panDelay": 10, "chorus": 71, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1 2 3 4 5 6", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 13, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "~1×", "amplitude": 15, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "2×", "amplitude": 10, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "3×", "amplitude": 7, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 9, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "8×", "amplitude": 6, "waveform": "sawtooth", "pulseWidth": 5 }], "envelopes": [] } },
                { name: "obama why", generalMidi: false, settings: { "type": "harmonics", "volume": 0, "eqFilter": [], "effects": ["note filter", "panning", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 840.9, "linearGain": 11.3137 }], "pan": 0, "reverb": 0, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "harmonics": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], "unison": "octave", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }] } },
            ]) },
        { name: "AbyssBox 0.8 to 1.2 Presets", presets: toNameMap([
                { name: "Demonic Bell", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 353.55, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.0884 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 353.55, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.0884 }], "effects": ["detune", "distortion", "bitcrusher", "echo", "reverb"], "detuneCents": -52, "distortion": 29, "aliases": false, "bitcrusherOctave": 4.5, "bitcrusherQuantization": 29, "panDelay": 10, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 68, "fadeInSeconds": 0, "fadeOutTicks": 96, "harmonics": [43, 71, 71, 100, 86, 100, 43, 86, 71, 57, 86, 29, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], "unison": "shimmer", "stringSustain": 64, "envelopes": [] } },
                { name: "Spacey Triangle", generalMidi: false, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 4 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 4 }], "effects": ["transition type", "vibrato", "distortion", "bitcrusher", "chorus", "echo", "reverb"], "transition": "normal", "clicklessTransition": false, "vibrato": "shaky", "vibratoDepth": 0.1, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 1, "distortion": 29, "aliases": false, "bitcrusherOctave": 5.5, "bitcrusherQuantization": 14, "panDelay": 10, "chorus": 86, "echoSustain": 43, "echoDelayBeats": 1, "reverb": 26, "fadeInSeconds": 0, "fadeOutTicks": 96, "wave": "triangle", "unison": "dirty", "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 32, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [] } },
                { name: "Harmonic Piano", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.125 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 353.55, "linearGain": 0.125 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }], "effects": ["transition type"], "transition": "interrupt", "clicklessTransition": false, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "harmonics": [100, 57, 57, 57, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "Organic Synth", generalMidi: false, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.1768 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.1768 }], "effects": ["chord type", "reverb"], "chord": "simultaneous", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "panDelay": 10, "reverb": 71, "fadeInSeconds": 0.0263, "fadeOutTicks": 96, "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "5×", "amplitude": 3, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "8×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 1", "index": 3 }, { "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "Nokia Ringtone", generalMidi: false, settings: { "type": "FM", "eqFilter": [], "effects": ["transition type", "chord type"], "transition": "interrupt", "chord": "custom interval", "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "(1 2)←(3 4)", "feedbackType": "1→2", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 2 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }], "envelopes": [] } },
            ]) },
        { name: "AbyssBox 1.3+ Presets", presets: toNameMap([
                { name: "Ghost House", generalMidi: false, settings: { "type": "FM", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["transition type", "vibrato", "bitcrusher"], "transition": "normal", "clicklessTransition": false, "vibrato": "heavy", "vibratoDepth": 0.45, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "bitcrusherOctave": 3.5, "bitcrusherQuantization": 43, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -3, "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 4, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 6, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteVolume", "envelope": "punch" }] } },
                { name: "Supersaw Pluck", generalMidi: false, settings: { "type": "supersaw", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 9, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "eqSubFilters1": [], "effects": ["chord type", "note filter", "chorus", "echo", "reverb"], "chord": "simultaneous", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "noteFilterType": true, "noteSimpleCut": 7, "noteSimplePeak": 1, "noteFilter": [{ "type": "low-pass", "cutoffHz": 3828.43, "linearGain": 0.5 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 3828.43, "linearGain": 0.5 }], "panDelay": 10, "chorus": 14, "echoSustain": 29, "echoDelayBeats": 1, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": 48, "pulseWidth": 40, "decimalOffset": 0, "dynamism": 67, "spread": 50, "shape": 0, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }] } },
                { name: "Credits Bass", generalMidi: false, settings: { "type": "chip", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 8, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "effects": ["transition type", "chord type", "note filter"], "transition": "interrupt", "clicklessTransition": false, "chord": "arpeggio", "fastTwoNoteArp": true, "arpeggioSpeed": 9, "noteFilterType": true, "noteSimpleCut": 8, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "wave": "alto sax", "unison": "none", "isUsingAdvancedLoopControls": false, "chipWaveLoopStart": 0, "chipWaveLoopEnd": 2, "chipWaveLoopMode": 0, "chipWavePlayBackwards": false, "chipWaveStartOffset": 0, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "decay 1" }] } },
                { name: "FM Violin", generalMidi: false, settings: { "type": "FM6op", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["transition type", "vibrato", "distortion", "chorus", "echo"], "transition": "normal", "clicklessTransition": false, "vibrato": "light", "vibratoDepth": 0.15, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "distortion": 43, "aliases": false, "panDelay": 10, "chorus": 14, "echoSustain": 14, "echoDelayBeats": 1, "fadeInSeconds": 0, "fadeOutTicks": 6, "algorithm": "Custom", "feedbackType": "Custom", "feedbackAmplitude": 4, "customAlgorithm": { "mods": [[6, 2, 3, 4, 5], [], [], [], [], []], "carrierCount": 2 }, "customFeedback": { "mods": [[1], [], [], [], [], []] }, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "2×", "amplitude": 12, "waveform": "rounded", "pulseWidth": 5 }, { "frequency": "6×", "amplitude": 6, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "0.5×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "16×", "amplitude": 5, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteVolume", "envelope": "twang 3" }, { "target": "noteVolume", "envelope": "swell 2" }] } },
                { name: "Shamisen 2", generalMidi: false, settings: { "type": "FM6op", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["chord type", "note filter", "reverb"], "chord": "strum", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "noteFilterType": true, "noteSimpleCut": 8, "noteSimplePeak": 1, "noteFilter": [{ "type": "low-pass", "cutoffHz": 6000, "linearGain": 0.5 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 6000, "linearGain": 0.5 }], "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": 48, "algorithm": "Custom", "feedbackType": "Custom", "feedbackAmplitude": 4, "customAlgorithm": { "mods": [[6, 2, 3, 4, 5], [], [], [], [], []], "carrierCount": 2 }, "customFeedback": { "mods": [[1], [], [], [], [], []] }, "operators": [{ "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "2×", "amplitude": 12, "waveform": "rounded", "pulseWidth": 5 }, { "frequency": "6×", "amplitude": 6, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "0.5×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "16×", "amplitude": 5, "waveform": "triangle", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }] } },
                { name: "Picked Dist Guitar", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["vibrato", "note filter", "distortion", "bitcrusher"], "vibrato": "custom", "vibratoDepth": 0.32, "vibratoDelay": 19, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.5 }], "noteSubFilters0": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.5 }], "distortion": 43, "aliases": false, "bitcrusherOctave": 5.5, "bitcrusherQuantization": 14, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 12, "harmonics": [86, 86, 86, 86, 71, 57, 71, 71, 14, 14, 14, 29, 57, 43, 43, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 0, 71], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "noteVolume", "envelope": "punch" }] } },
                { name: "Heavy Knock", generalMidi: false, isNoise: true, settings: { "type": "noise", "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "eqSubFilters0": [], "effects": ["vibrato", "note filter", "reverb"], "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": true, "noteSimpleCut": 7, "noteSimplePeak": 1, "noteFilter": [{ "type": "low-pass", "cutoffHz": 3828.43, "linearGain": 0.5 }], "noteSubFilters1": [{ "type": "low-pass", "cutoffHz": 3828.43, "linearGain": 0.5 }], "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": 48, "wave": "white", "unison": "none", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
                { name: "Future Keys", generalMidi: false, settings: { "type": "harmonics", "eqFilter": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.25 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 1, "discreteEnvelope": false, "eqSubFilters0": [{ "type": "high-pass", "cutoffHz": 125, "linearGain": 0.25 }], "effects": ["chorus", "echo", "reverb", "phaser"], "phaserMix": 100, "phaserFreq": 94, "phaserFeedback": 42, "phaserStages": 97, "panDelay": 10, "chorus": 43, "echoSustain": 43, "echoDelayBeats": 0.75, "reverb": 19, "fadeInSeconds": 0, "fadeOutTicks": -1, "harmonics": [100, 100, 100, 86, 86, 86, 71, 71, 57, 29, 14, 14, 14, 0, 29, 57, 29, 0, 29, 43, 57, 57, 29, 14, 14, 29, 43, 29], "unison": "none", "envelopes": [{ "target": "phaserFreq", "envelope": "tremolo6" }, { "target": "noteVolume", "envelope": "twang -1" }] } },
                { name: "Light Bell", generalMidi: false, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "envelopeSpeed": 12, "discreteEnvelope": false, "effects": ["reverb", "ring modulation"], "ringMod": 71, "ringModHz": 90, "rmWaveformIndex": 0, "rmPulseWidth": 0, "panDelay": 10, "reverb": 39, "fadeInSeconds": 0, "fadeOutTicks": 24, "harmonics": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 43], "unison": "shimmer", "stringSustain": 71, "envelopes": [{ "target": "noteVolume", "envelope": "twang 3" }] } },
            ]) },
    ]);

    var __values$1 = (exports && exports.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = (exports && exports.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (exports && exports.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    function applyElementArgs(element, args) {
        var e_1, _a, e_2, _b, e_3, _c;
        try {
            for (var args_1 = __values$1(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var arg = args_1_1.value;
                if (arg instanceof Node) {
                    element.appendChild(arg);
                }
                else if (typeof arg === "string") {
                    element.appendChild(document.createTextNode(arg));
                }
                else if (typeof arg === "function") {
                    applyElementArgs(element, [arg()]);
                }
                else if (Array.isArray(arg)) {
                    applyElementArgs(element, arg);
                }
                else if (arg && typeof Symbol !== "undefined" && typeof arg[Symbol.iterator] === "function") {
                    applyElementArgs(element, __spread(arg));
                }
                else if (arg && arg.constructor === Object && element instanceof Element) {
                    try {
                        for (var _d = (e_2 = void 0, __values$1(Object.keys(arg))), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var key = _e.value;
                            var value = arg[key];
                            if (key === "class") {
                                if (typeof value === "string") {
                                    element.setAttribute("class", value);
                                }
                                else if (Array.isArray(arg) || (value && typeof Symbol !== "undefined" && typeof value[Symbol.iterator] === "function")) {
                                    element.setAttribute("class", __spread(value).join(" "));
                                }
                                else {
                                    console.warn("Invalid " + key + " value \"" + value + "\" on " + element.tagName + " element.");
                                }
                            }
                            else if (key === "style") {
                                if (value && value.constructor === Object) {
                                    try {
                                        for (var _f = (e_3 = void 0, __values$1(Object.keys(value))), _g = _f.next(); !_g.done; _g = _f.next()) {
                                            var styleKey = _g.value;
                                            if (styleKey in element.style) {
                                                element.style[styleKey] = value[styleKey];
                                            }
                                            else {
                                                element.style.setProperty(styleKey, value[styleKey]);
                                            }
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                }
                                else {
                                    element.setAttribute(key, value);
                                }
                            }
                            else if (typeof (value) === "function") {
                                element[key] = value;
                            }
                            else if (typeof (value) === "boolean") {
                                if (value)
                                    element.setAttribute(key, "");
                                else
                                    element.removeAttribute(key);
                            }
                            else {
                                element.setAttribute(key, value);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else {
                    element.appendChild(document.createTextNode(arg));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return element;
    }
    var svgNS = "http://www.w3.org/2000/svg";
    function parseHTML() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return document.createRange().createContextualFragment(args.join());
    }
    function parseSVG() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fragment = document.createDocumentFragment();
        var svgParser = new DOMParser().parseFromString("<svg xmlns=\"http://www.w3.org/2000/svg\">" + args.join() + "</svg>", "image/svg+xml").documentElement;
        while (svgParser.firstChild !== null) {
            document.importNode(svgParser.firstChild, true);
            fragment.appendChild(svgParser.firstChild);
        }
        return fragment;
    }

    var __values = (exports && exports.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var e_1, _a, e_2, _b;
    var HTML = parseHTML;
    var SVG = parseSVG;
    var _loop_1 = function (name_1) {
        HTML[name_1] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyElementArgs(document.createElement(name_1), args);
        };
    };
    try {
        for (var _c = __values("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")), _d = _c.next(); !_d.done; _d = _c.next()) {
            var name_1 = _d.value;
            _loop_1(name_1);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var _loop_2 = function (name_2) {
        SVG[name_2] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyElementArgs(document.createElementNS(svgNS, name_2), args);
        };
        if (/-/.test(name_2)) {
            var snakeCaseName = name_2.replace(/-/g, "_");
            SVG[snakeCaseName] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return applyElementArgs(document.createElementNS(svgNS, name_2), args);
            };
        }
    };
    try {
        for (var _e = __values("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")), _f = _e.next(); !_f.done; _f = _e.next()) {
            var name_2 = _f.value;
            _loop_2(name_2);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }

    class ColorConfig {
        static resetColors() {
            this.colorLookup.clear();
        }
        static getArbitaryChannelColor(type, channel) {
            if (!this.usesColorFormula) {
                let base;
                switch (type) {
                    case ("noise"): {
                        base = ColorConfig.getComputed("--noise-channel-limit") == ""
                            ? ColorConfig.noiseChannels[channel % ColorConfig.noiseChannels.length]
                            : ColorConfig.noiseChannels[channel % (Number(ColorConfig.getComputed("--noise-channel-limit")) % ColorConfig.noiseChannels.length)];
                        break;
                    }
                    case ("mod"): {
                        base = ColorConfig.getComputed("--mod-channel-limit") == ""
                            ? ColorConfig.modChannels[channel % ColorConfig.modChannels.length]
                            : ColorConfig.modChannels[channel % (Number(ColorConfig.getComputed("--mod-channel-limit")) % ColorConfig.modChannels.length)];
                        break;
                    }
                    case ("pitch"):
                    default: {
                        base = ColorConfig.getComputed("--pitch-channel-limit") == ""
                            ? ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length]
                            : ColorConfig.pitchChannels[channel % (Number(ColorConfig.getComputed("--pitch-channel-limit")) % ColorConfig.pitchChannels.length)];
                        break;
                    }
                }
                var regex = /\(([^)]+)\)/;
                let newChannelSecondary = ColorConfig.getComputed(regex.exec(base.secondaryChannel)[1]);
                let newChannelPrimary = ColorConfig.getComputed(regex.exec(base.primaryChannel)[1]);
                let newNoteSecondary = ColorConfig.getComputed(regex.exec(base.secondaryNote)[1]);
                let newNotePrimary = ColorConfig.getComputed(regex.exec(base.primaryNote)[1]);
                return { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
            }
            switch (type) {
                case ("noise"): {
                    const noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue");
                    const noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue-scale");
                    const noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat");
                    const noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat-scale");
                    const noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum");
                    const noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum-scale");
                    const noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue");
                    const noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue-scale");
                    const noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat");
                    const noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat-scale");
                    const noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum");
                    const noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum-scale");
                    const noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue");
                    const noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue-scale");
                    const noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat");
                    const noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat-scale");
                    const noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum");
                    const noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum-scale");
                    const noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue");
                    const noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue-scale");
                    const noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat");
                    const noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat-scale");
                    const noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum");
                    const noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+noiseSecondaryChannelHue + ((channel * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + "%,"
                        + (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + "%)";
                    let newChannelPrimary = "hsl(" + ((+noisePrimaryChannelHue + ((channel * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + "%,"
                        + (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + "%)";
                    let newNoteSecondary = "hsl(" + ((+noiseSecondaryNoteHue + ((channel * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + "%,"
                        + (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + "%)";
                    let newNotePrimary = "hsl(" + ((+noisePrimaryNoteHue + ((channel * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + "%,"
                        + (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
                case ("mod"): {
                    const modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue");
                    const modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue-scale");
                    const modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat");
                    const modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat-scale");
                    const modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum");
                    const modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum-scale");
                    const modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue");
                    const modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue-scale");
                    const modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat");
                    const modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat-scale");
                    const modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum");
                    const modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum-scale");
                    const modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue");
                    const modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue-scale");
                    const modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat");
                    const modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat-scale");
                    const modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum");
                    const modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum-scale");
                    const modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue");
                    const modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue-scale");
                    const modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat");
                    const modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat-scale");
                    const modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum");
                    const modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+modSecondaryChannelHue + ((channel * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + "%,"
                        + (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + "%)";
                    let newChannelPrimary = "hsl(" + ((+modPrimaryChannelHue + ((channel * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + "%,"
                        + (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + "%)";
                    let newNoteSecondary = "hsl(" + ((+modSecondaryNoteHue + ((channel * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + "%,"
                        + (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + "%)";
                    let newNotePrimary = "hsl(" + ((+modPrimaryNoteHue + ((channel * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + "%,"
                        + (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
                case ("pitch"):
                default: {
                    const pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue");
                    const pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue-scale");
                    const pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat");
                    const pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat-scale");
                    const pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum");
                    const pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum-scale");
                    const pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue");
                    const pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue-scale");
                    const pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat");
                    const pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat-scale");
                    const pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum");
                    const pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum-scale");
                    const pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue");
                    const pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue-scale");
                    const pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat");
                    const pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat-scale");
                    const pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum");
                    const pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum-scale");
                    const pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue");
                    const pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue-scale");
                    const pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat");
                    const pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat-scale");
                    const pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum");
                    const pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                    let newChannelPrimary = "hsl(" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                    let newNoteSecondary = "hsl(" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                    let newNotePrimary = "hsl(" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
            }
        }
        static getComputedChannelColor(song, channel) {
            if (!this.usesColorFormula) {
                let base = ColorConfig.getChannelColor(song, channel);
                var regex = /\(([^)]+)\)/;
                let newChannelSecondary = ColorConfig.getComputed(regex.exec(base.secondaryChannel)[1]);
                let newChannelPrimary = ColorConfig.getComputed(regex.exec(base.primaryChannel)[1]);
                let newNoteSecondary = ColorConfig.getComputed(regex.exec(base.secondaryNote)[1]);
                let newNotePrimary = ColorConfig.getComputed(regex.exec(base.primaryNote)[1]);
                return { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
            }
            else {
                return ColorConfig.getChannelColor(song, channel);
            }
        }
        ;
        static getChannelColor(song, channel) {
            if (!this.usesColorFormula) {
                if (channel < song.pitchChannelCount) {
                    return ColorConfig.getComputed("--pitch-channel-limit") == ""
                        ? ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length]
                        : ColorConfig.pitchChannels[(channel % Number(ColorConfig.getComputed("--pitch-channel-limit"))) % ColorConfig.pitchChannels.length];
                }
                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {
                    return ColorConfig.getComputed("--noise-channel-limit") == ""
                        ? ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length]
                        : ColorConfig.noiseChannels[((channel - song.pitchChannelCount) % Number(ColorConfig.getComputed("--noise-channel-limit"))) % ColorConfig.noiseChannels.length];
                }
                else {
                    return ColorConfig.getComputed("--mod-channel-limit") == ""
                        ? ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length]
                        : ColorConfig.modChannels[((channel - song.pitchChannelCount - song.noiseChannelCount) % Number(ColorConfig.getComputed("--mod-channel-limit"))) % ColorConfig.modChannels.length];
                }
            }
            else {
                if (ColorConfig.colorLookup.has(channel)) {
                    return ColorConfig.colorLookup.get(channel);
                }
                else {
                    if (channel < song.pitchChannelCount) {
                        let newChannelSecondary = "hsl(" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + ","
                            + (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 9)))) + "%,"
                            + (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 9)))) + "%)";
                        let newChannelPrimary = "hsl(" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + ","
                            + (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 9)))) + "%,"
                            + (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 9)))) + "%)";
                        let newNoteSecondary = "hsl(" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + ","
                            + (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 9)))) + "%,"
                            + (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 9)))) + "%)";
                        let newNotePrimary = "hsl(" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + ","
                            + (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 9)))) + "%,"
                            + (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 9)))) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                    else if (channel < song.pitchChannelCount + song.noiseChannelCount) {
                        let newChannelSecondary = "hsl(" + ((this.c_noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + ","
                            + (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + "%,"
                            + (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + "%)";
                        let newChannelPrimary = "hsl(" + ((this.c_noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + ","
                            + (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + "%,"
                            + (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + "%)";
                        let newNoteSecondary = "hsl(" + ((this.c_noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + ","
                            + (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + "%,"
                            + (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + "%)";
                        let newNotePrimary = "hsl(" + ((this.c_noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + ","
                            + (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + "%,"
                            + (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                    else {
                        let newChannelSecondary = "hsl(" + ((this.c_modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + ","
                            + (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + "%,"
                            + (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + "%)";
                        let newChannelPrimary = "hsl(" + ((this.c_modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + ","
                            + (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + "%,"
                            + (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + "%)";
                        let newNoteSecondary = "hsl(" + ((this.c_modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + ","
                            + (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + "%,"
                            + (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + "%)";
                        let newNotePrimary = "hsl(" + ((this.c_modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + ","
                            + (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + "%,"
                            + (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                }
            }
        }
        static setThemeProperty(name, value) {
            var _a;
            ((_a = this._styleElement.sheet) === null || _a === void 0 ? void 0 : _a.cssRules[0]).style.setProperty(name, value);
        }
        static getThemeProperties() {
            var _a;
            return (_a = this._styleElement.sheet) === null || _a === void 0 ? void 0 : _a.cssRules[0].cssText;
        }
        static getFullTheme() {
            return this._styleElement.textContent;
        }
        static setTheme(name) {
            let theme = this.themes[name];
            if (theme == undefined)
                theme = this.themes["AbyssBox Classic"];
            this._styleElement.textContent = theme;
            this.currentSetTheme = name;
            const themeColor = document.querySelector("meta[name='theme-color']");
            if (themeColor != null) {
                themeColor.setAttribute("content", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));
            }
            this.resetColors();
            this.usesColorFormula = (getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim() == "true");
            this.usesPianoScheme = (getComputedStyle(this._styleElement).getPropertyValue("--use-piano-scheme").trim() == "true");
            this.c_invertedText = getComputedStyle(this._styleElement).getPropertyValue("--inverted-text");
            this.c_trackEditorBgNoiseDim = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-noise-dim");
            this.c_trackEditorBgNoise = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-noise");
            this.c_trackEditorBgModDim = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-mod-dim");
            this.c_trackEditorBgMod = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-mod");
            this.c_trackEditorBgPitchDim = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-pitch-dim");
            this.c_trackEditorBgPitch = getComputedStyle(this._styleElement).getPropertyValue("--track-editor-bg-pitch");
            if (this.usesColorFormula) {
                this.c_pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue");
                this.c_pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue-scale");
                this.c_pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat");
                this.c_pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat-scale");
                this.c_pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum");
                this.c_pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum-scale");
                this.c_pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue");
                this.c_pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue-scale");
                this.c_pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat");
                this.c_pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat-scale");
                this.c_pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum");
                this.c_pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum-scale");
                this.c_pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue");
                this.c_pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue-scale");
                this.c_pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat");
                this.c_pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat-scale");
                this.c_pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum");
                this.c_pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum-scale");
                this.c_pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue");
                this.c_pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue-scale");
                this.c_pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat");
                this.c_pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat-scale");
                this.c_pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum");
                this.c_pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum-scale");
                this.c_noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue");
                this.c_noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue-scale");
                this.c_noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat");
                this.c_noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat-scale");
                this.c_noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum");
                this.c_noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum-scale");
                this.c_noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue");
                this.c_noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue-scale");
                this.c_noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat");
                this.c_noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat-scale");
                this.c_noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum");
                this.c_noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum-scale");
                this.c_noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue");
                this.c_noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue-scale");
                this.c_noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat");
                this.c_noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat-scale");
                this.c_noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum");
                this.c_noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum-scale");
                this.c_noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue");
                this.c_noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue-scale");
                this.c_noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat");
                this.c_noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat-scale");
                this.c_noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum");
                this.c_noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum-scale");
                this.c_modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue");
                this.c_modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue-scale");
                this.c_modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat");
                this.c_modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat-scale");
                this.c_modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum");
                this.c_modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum-scale");
                this.c_modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue");
                this.c_modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue-scale");
                this.c_modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat");
                this.c_modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat-scale");
                this.c_modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum");
                this.c_modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum-scale");
                this.c_modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue");
                this.c_modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue-scale");
                this.c_modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat");
                this.c_modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat-scale");
                this.c_modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum");
                this.c_modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum-scale");
                this.c_modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue");
                this.c_modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue-scale");
                this.c_modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat");
                this.c_modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat-scale");
                this.c_modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum");
                this.c_modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum-scale");
            }
        }
        static getComputed(name) {
            return getComputedStyle(this._styleElement).getPropertyValue(name);
        }
    }
    ColorConfig.colorLookup = new Map();
    ColorConfig.usesColorFormula = false;
    ColorConfig.usesPianoScheme = false;
    ColorConfig.currentSetTheme = "AbyssBox Classic";
    ColorConfig.themes = {
        "AbyssBox Classic": `
			:root {		
			--page-margin: #1e0915; 		
			--editor-background: #1e0915; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #873a51; 		
			--link-accent: #df88ff; 		
			--ui-widget-background: #581b3e; 		
			--ui-widget-focus: #762b4c; 		
			--pitch-background: #381d24; 		
			--tonic: #873a51; 		
			--fifth-note: #75001e; 	
			--third-note: #75002c;	
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;		 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #571c40; 		
			--track-editor-bg-pitch-dim: #290d0d; 		
			--track-editor-bg-noise: #571131; 		
			--track-editor-bg-noise-dim: #330a28; 		
			--track-editor-bg-mod: #54083c; 		
			--track-editor-bg-mod-dim: #360426; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--mod-title: #bf2c5d;
			--progress-bar: #bf2c5d;
			--empty-sample-bar: #260b1b;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 	

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

			--oscilloscope-line-R: var(--ui-widget-background);
			--oscilloscope-line-L: var(--secondary-text);

			--scrollbar-color: #bf2c5d;
				}
		* {
		cursor: url("abyssbox_cursor.png"), auto;
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
	--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		}
		
			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			/* sets background image */
			body {
			background-image: url("./image_assets/stripesbg.gif") !important;
			background-position: center;
			background-repeat: repeat;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
				}

			/*#Hotdog {
				content: url("https://choptop84.github.io/choptop84s-image-repository/abclassic_hotdog.png");
			} */

			#text-content {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}
			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton, 
			button.prevBarButton, 
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton, 
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
    				border-image-source: url("./image_assets/abyssbox_border.png") !important;
    				border-image-slice: 4 fill !important; 
   				border-image-width: 4px !important; 
				border-image-repeat: stretch !important;
    				padding: 4px !important; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */

					cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
				}

			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: #1e0915 !important;
				border-image-source:none !important;
			}

				select.trackSelectBox {
					border-image: none !important;
				}
				
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}

			@font-face {
		   font-family: "AbyssType_small";
		   src:
 		   url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}

			html {
 		   	font-family: 'AbyssType';
			}

			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}

			.beepboxEditor input[type="range"]::-webkit-slider-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="text"],
			.beepboxEditor input[type="number"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked:after
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			div.selectRow span {
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			`,
        "AbyssBox Competitive": `
			:root { 		
			--page-margin: #000000; 		
			--editor-background: #000000; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #bf2c5d; 		
			--loop-accent: #873a51; 		
			--link-accent: #df88ff; 		
			--ui-widget-background: #581b3e; 		
			--ui-widget-focus: #000000; 		
			--pitch-background: #240f15; 		
			--tonic: #a34b65; 		
			--fifth-note: #75001e; 	
			--third-note: #75002c;		
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;		 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #571c40; 		
			--track-editor-bg-pitch-dim: #290d0d; 		
			--track-editor-bg-noise: #571131; 		
			--track-editor-bg-noise-dim: #330a28; 		
			--track-editor-bg-mod: #54083c; 		
			--track-editor-bg-mod-dim: #360426; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--mod-title: #bf2c5d;
			--progress-bar: #bf2c5d;
			--empty-sample-bar: #0d0d0d;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

			--oscilloscope-line-R: var(--ui-widget-background);
			--oscilloscope-line-L: var(--secondary-text);

			--scrollbar-color: #bf2c5d;
				}		
		/* sets cursor */ 
		* {
		cursor: url("abyssbox_cursor.png"), auto !important;
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
		--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		}
		
			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			@font-face {
		   font-family: "AbyssType_small";
		   src:
 		   url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}

			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.cancelButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.insertChannelButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton,
			button.prevBarButton,
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton,
			button.okayButton, 
			button.songLoopButton,
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
					border-style: double !important;
					border-radius: 0px !important;
					--ui-widget-background: black;
			}

			button.add-envelope::before,
			button.notesDownButton::before,
			button.notesUpButton::before,
			button.copyPatternButton::before,
			button.pastePatternButton::before,
			button.insertChannelButton::before,
			button.undoButton::before,
			button.redoButton::before,
			button.loopBarButton::before,
			button.duplicateButton::before,
			button.selectAllButton::before,
			button.deleteChannelButton::before, 
			button.insertRowButton::before,
			button.okayButton::before, 
			button.songLoopButton::before,
			.delete-envelope::before {
				left: -3px !important;
				top: -3px !important;
			}

			button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: var(--editor-background) !important;
				border-image-source: none !important;
			}

			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: black !important;
				border-image-source:none !important;
				border-style: none !important;
			}

				select.trackSelectBox {
					border-image: none !important;
					border-style: none !important;
				}

			html {
 		   font-family: 'AbyssType';
			}
			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}

			.beepboxEditor input[type="range"]::-webkit-slider-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="text"],
			.beepboxEditor input[type="number"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked:after
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			div.selectRow span {
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			`,
        "AbyssBox Light": `
			:root { 		
			--page-margin: #e0adbc; 		
			--editor-background: #e0adbc; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: #6110d9; 		
			--secondary-text: #cc1338;		
			--inverted-text:  #e8bcc9;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #bf2c5d; 		
			--loop-accent: #8c346a; 		
			--link-accent: #8c346a; 		
			--ui-widget-background: #f5e9f0;		
			--ui-widget-focus: #f5e9f0; 		
			--pitch-background: #eddadf; 		
			--tonic: #f5f0f1; 		
			--fifth-note: #ffb5c9; 	
			--third-note: #ffa6f0;		
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;	 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #edbecc;	
			--track-editor-bg-pitch-dim: #e0adbc; 		
			--track-editor-bg-noise: #edbecc;		
			--track-editor-bg-noise-dim: #e0adbc;		
			--track-editor-bg-mod: #edbecc; 		
			--track-editor-bg-mod-dim: #e0adbc;		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--mod-title: #cc1338;
			--progress-bar: #cc1338;
			--empty-sample-bar: #d9a0b1;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 255; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 30; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 255; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 60; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 255; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 30; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 255; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 60; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 255; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 30; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 255; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 60; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 255; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 30; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 255; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 255; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 30; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 255; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 60; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 255; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 30; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 255; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 60; 		
			--mod-primary-note-lum-scale: 0; 	
			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

			--oscilloscope-line-R: var(--ui-widget-background);
			--oscilloscope-line-L: var(--secondary-text);

			--scrollbar-color: #bf2c5d;
			}

				.promptContainerBG::before {
					box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
				}

				/* sets background image */
				body {
				background-image: url("./image_assets/stripesbg_light.gif") !important;
				background-position: center;
				background-repeat: repeat;
	
				image-rendering: -moz-crisp-edges !important;         /* Firefox */
				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
				image-rendering: -o-crisp-edges !important;            /* Opera */
				image-rendering: pixelated !important;                 /* Future browsers */
				image-rendering: optimizeSpeed !important;             /* IE */
					}		
			#text-content {
    				border-image-source: url("./image_assets/abyssbox_border_light.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/abyssbox_border_light.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}
				.beepboxEditor button,
				button.mobilePatternButton,
				button.mobileTrackButton,
				button.mobileSettingsButton,
				button.mobilePlayButton,
				button.mobilePauseButton,
				button.mobileNextBarButton,
				button.mobilePrevBarButton,
				button.playButton,
				button.pauseButton, 
				button.recordButton, 
				button.stopButton,
				button.nextBarButton, 
				button.prevBarButton, 
				button.copyButton, 
				button.pasteButton, 
				button.exportInstrumentButton, 
				button.importInstrumentButton, 
				.beepboxEditor select, 
				.beepboxEditor .select2-selection__rendered {
						border-image-source: url("./image_assets/abyssbox_border_light.png") !important;
						border-image-slice: 4 fill !important; 
					   border-image-width: 4px !important; 
					border-image-repeat: stretch !important;
						padding: 4px !important; 
	
						image-rendering: -moz-crisp-edges !important;         /* Firefox */
						image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						image-rendering: -o-crisp-edges !important;            /* Opera */
						image-rendering: pixelated !important;                 /* Future browsers */
						image-rendering: optimizeSpeed !important;             /* IE */
	
						cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
					}
	
				div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source:none !important;
				}

				select.trackSelectBox {
					border-image: none !important;
				}

		/* sets cursor */ 
		* {
		cursor: url("abyssbox_cursor.png"), auto !important;
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
		--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		}
		
			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			@font-face {
		   font-family: "AbyssType_small";
		   src:
 		   url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}

			button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: var(--editor-background) !important;
				border-image-source: none !important;
			}

			html {
 		   font-family: 'AbyssType';
			}
			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}

			.beepboxEditor input[type="range"]::-webkit-slider-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="text"],
			.beepboxEditor input[type="number"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked:after
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			div.selectRow span {
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			`,
        "AbyssBox 0.8": `
			:root {		
			--page-margin: #1e0915; 		
			--editor-background: #1e0915; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #873a51; 		
			--link-accent: #df88ff; 		
			--ui-widget-background: #581b3e; 		
			--ui-widget-focus: #762b4c; 		
			--pitch-background: #381d24; 		
			--tonic: #873a51; 		
			--fifth-note: #75001e;
			--third-note: #75002c;	 		
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;		 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #571c40; 		
			--track-editor-bg-pitch-dim: #290d0d; 		
			--track-editor-bg-noise: #571131; 		
			--track-editor-bg-noise-dim: #330a28; 		
			--track-editor-bg-mod: #54083c; 		
			--track-editor-bg-mod-dim: #360426; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
		
			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 	

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;
			--empty-sample-bar: #260b1b;
				}
			`,
        "AbyssBox Piano": ` 
						:root {		
			--page-margin: #450320; 		
			--editor-background: #450320; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #873a51; 		
			--link-accent: #df88ff; 		
			--ui-widget-background: #581b3e; 		
			--ui-widget-focus: #762b4c;
            --pitch-background: #5e2233;  	
            --use-piano-scheme: true;	
            --pitch-black-key: #4d1a28; 				
            --pitch-white-key: #5e2233; 
            --tonic: #eb2859; 	
			--white-tonic: #873a51; 	
            --black-tonic: #410019;	
			--white-fifth-note: #aa002b; 	
            --fifth-note: #aa002b; 
            --black-fifth-note: #550015; 	
			--white-third-note: #a80644;	
            --third-note: #a80644;	
            --black-third-note: #4e0014; 	
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;		 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #57103c; 		
			--track-editor-bg-pitch-dim: #300404; 		
			--track-editor-bg-noise: #530729; 		
			--track-editor-bg-noise-dim: #3a042b; 		
			--track-editor-bg-mod: #740250; 		
			--track-editor-bg-mod-dim: #55023b; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--mod-title: #bf2c5d;
			--progress-bar: #bf2c5d;
			--empty-sample-bar: #38021a;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 	

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

			--oscilloscope-line-R: var(--ui-widget-background);
			--oscilloscope-line-L: var(--secondary-text);

			--scrollbar-color: #bf2c5d;
				}
		* {
		cursor: url("abyssbox_cursor.png"), auto;
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
		--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		}
		
			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			/* sets background image */
			body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/stripespianobg.gif") !important;
			background-position: center;
			background-repeat: repeat;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
				}

			/*#Hotdog {
				content: url("https://choptop84.github.io/choptop84s-image-repository/abclassic_hotdog.png");
			} */

			#text-content {
    				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/abyssbox_border_piano.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/abyssbox_border_piano.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}
			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton, 
			button.prevBarButton, 
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton, 
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
    				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/abyssbox_border_piano.png") !important;
    				border-image-slice: 4 fill !important; 
   				border-image-width: 4px !important; 
				border-image-repeat: stretch !important;
    				padding: 4px !important; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */

					cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
				}

			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: #450320 !important;
				border-image-source:none !important;
			}

				select.trackSelectBox {
					border-image: none !important;
				}
				
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}

			@font-face {
		   font-family: "AbyssType_small";
		   src:
 		   url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}

			html {
 		   	font-family: 'AbyssType';
			}

			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}

			.beepboxEditor input[type="range"]::-webkit-slider-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-ms-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-thumb
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="range"]:focus::-moz-range-track
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="text"],
			.beepboxEditor input[type="number"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			 
			.beepboxEditor input[type="checkbox"]:checked:after
			{
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}

			div.selectRow span {
				cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
			}
			`,
        "Frutiger Aero": `
			:root {		
			--page-margin: #fff; 		
			--editor-background: #2e538c;		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ceddff;		
			--inverted-text: white;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #0a091e; 		
			--loop-accent: #6fafe8; 		
			--link-accent: #a2b0ff; 		
			--ui-widget-background: #84aef0; 		
			--ui-widget-focus: #2b5376; 		
			--pitch-background: #4671b5; 		
			--tonic: #fff; 		
			--fifth-note: #620297; 
			--third-note: #bf2c78;		
			--white-piano-key: #dbe5ec;		
			--black-piano-key: #2f3a40;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;					
			--use-color-formula: true; 		
			--track-editor-bg-pitch: linear-gradient(#2782b0,#0c2b3e); 		
			--track-editor-bg-pitch-dim: linear-gradient(#0c2b3e70,#05151fc4); 		
			--track-editor-bg-noise: linear-gradient(#2d4aa1,#08204f); 		
			--track-editor-bg-noise-dim: linear-gradient(#08204f70, #031029c4); 		
			--track-editor-bg-mod: linear-gradient(#46299e, #26145e); 		
			--track-editor-bg-mod-dim: linear-gradient(#26145e70,#110630c4); 		
			--multiplicative-mod-slider: #60769f; 		
			--overwriting-mod-slider: #343b9e; 		
			--indicator-primary: #499ab3; 		
			--indicator-secondary: #9db9c4; 		
			--select2-opt-group: #185f8a; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #97d4f9; 		
			--mute-button-mod: #8a5fff;		
			--mod-label-primary: #341a7b; 		
			--mod-label-secondary-text: rgb(86, 93, 120);
			--mod-label-primary-text: gray; 
			--progress-bar: #84aef0;
			--empty-sample-bar: #26477a;

			--pitch-secondary-channel-hue: 110; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 63; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 50; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: 120; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: 110; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 63.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 55; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: 120; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 90; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 80; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 90; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 60; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 80; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 62; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 	

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

		}

		* {
		/*cursor: url("abyssbox_cursor.png"), auto !important;*/
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIconMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIcon.png");
		}
	

		/* Frutiger Aero Icons */

		div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0 !important;
		}

		div.mute-button::before {
			background: #fff0 !important;
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIcon.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px !important;
			color: #fff0;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		div.mute-button.muted::before {
			background: #fff0 !important;
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIconMuted.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px !important;
			color: #fff0;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		#text-content > section > h1 > font {
			display: none;
			}
			#text-content > section > h1 {
			margin: auto;
			content: url("https://choptop84.github.io/choptop84s-image-repository/AbyssBoxFrutigerAeroThemeLogo.png");
			}

		button.mobileEffectsButton.deactivated {
		box-shadow: none !important;
		}

		button.mobileInstButton.deactivated {
		box-shadow: none !important;
		}

		button.mobileEnvelopesButton.deactivated {
		box-shadow: none !important;
		}

		select.trackSelectBox {
			border-image: none !important;
		}

			@font-face {
		   font-family: "Frutiger";
		   src:
 		   url("https://choptop84.github.io/choptop84s-image-repository/FrutigerLight.ttf") format("truetype") tech(color-COLRv1),
			}

			canvas#oscilascopeAll {
				background: #2e538c !important; 
				border: 2px solid #84aef000 !important;
			}

			.beepboxEditor .play-pause-area div:last-child {
				position: relative;
				width: 144px;
				height: 32px;
			  }
			  .beepboxEditor .play-pause-area div:last-child::before {
				content: "";
				display: block;
				width: calc(144px + 4px);
				height: calc(32px + 4px);
				box-shadow: 0px -1px 1px 0px rgba(0, 0, 0, 0.5), inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5), inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
				position: absolute;
				z-index: 1;
			  }

			div.prompt.noSelection{
				background: linear-gradient(#84aef080, #2a3d6a80) !important; 
				opacity: 77;
				backdrop-filter: blur(14px);
			}  

			svg#firstImage {
				opacity: 50%;
				--editor-background: #84aef0;
			}

			/* sets background image */
			body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/frutigerbg3.jpg") !important;
			background-position: top;
			background-attachment: fixed;
			background-repeat: no-repeat;
			background-size: cover;
			image-rendering: optimizeQuality !important;             /* IE */ 
				}

			#beepboxEditorContainer {
				background: linear-gradient(#eef3ff80, #395eb380) !important;
				border-style: solid;
  				border-color: lightblue;
				padding-bottom: 5px;
				--inverted-text: black;
				backdrop-filter: blur(14px);
				box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}
			#text-content {
				background: linear-gradient(#395eb380, #03112f80);
				border-style: solid;
  				border-color: lightblue;
				  backdrop-filter: blur(14px);
				  box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}

				div.playback-bar-controls button.playButton, 
				div.playback-bar-controls button.pauseButton, 
				div.playback-bar-controls button.recordButton, 
				div.playback-bar-controls button.stopButton, 
				div.playback-bar-controls button.prevBarButton, 
				div.playback-bar-controls button.nextBarButton, 
				div.selectRow button.copyButton, 
				div.selectRow button.pasteButton, 
				div.editor-controls button.exportInstrumentButton, 
				div.editor-controls button.importInstrumentButton,
				div.editor-controls div button.add-envelope,
				div.editor-controls div button.delete-envelope, 
				.beepboxEditor .select2-selection__rendered,
				.beepboxEditor .instrument-bar button,
				.beepboxEditor .eq-filter-type-bar button .deactivated,
				.beepboxEditor .note-filter-type-bar button .deactivated,
				.beepboxEditor select  { 
					box-shadow: 0px 1px 3px 0px rgb(0, 0, 0), inset 0px -12px 14px 0px rgba(0, 0, 0, 0.3), inset 0px -7px 4px 0px rgba(79, 99, 204, 0.71), inset 0px -15px 0px 0px rgba(0, 0, 0, 0.2), inset 0px 1px 2px 1px #ffffff54;
					--ui-widget-background: linear-gradient(#b6cfffcc, #628ef2cc) !important;
				}

				.beepboxEditor select:focus
				{
					border-image-source: none;
					--ui-widget-background: linear-gradient(#2a3d6a, #2a3d6a) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px 10px 20px 1px rgba(0, 0, 0, 0.4),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}

				.beepboxEditor button, button
				{
					--ui-widget-background: linear-gradient(#84aef0, #2a3d6a) !important;
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				.beepboxEditor .select2-container--open .select2-selection__rendered,
				.beepboxEditor button:focus,
				button:focus,
				.beepboxEditor .instrument-bar .selected-instrument,
				.beepboxEditor .eq-filter-type-bar button:not(.deactivated),
				.beepboxEditor .note-filter-type-bar button:not(.deactivated)
				{
					--ui-widget-background: linear-gradient(#333, #444) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor .filterEditor svg,
				.beepboxEditor .fadeInOut svg,
				.beepboxEditor .harmonics svg,
				.beepboxEditor .spectrum svg
				{
					background: rgba(0, 0, 0, 0.3) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-webkit-slider-thumb
				{
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-ms-thumb
				{
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-ms-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-ms-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-thumb
				{
					height: 16px !important;
					width: 16px !important;
					border-radius: 40px !important;
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-moz-range-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="text"],
				.beepboxEditor input[type="number"]
				{
					border: none !important;
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="checkbox"]
				{
					appearance: none;
					background: rgba(0, 0, 0, 0.3);
					color: currentColor;
					border-radius: 1px;
					width: 1em !important;
					height: 1em !important;
					box-shadow:
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked
				{
					display: flex;
					justify-content: center;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked:after
				{
					width: 1em;
					height: 1em;
					text-align: center;
					font-size: 0.8em;
					content: "✓";
					color: currentColor;
					text-shadow: 0px 0px 2px rgba(255, 255, 255, 0.5);
				}

			html {
 		   	font-family: 'Frutiger';
			}

			div.channelBoxLabel {
				font-family: 'Frutiger' !important;
			}

				/* Use this code down here when you have transparent backgrounds!!! */

		   div.beepboxEditor.load {
			background: none !important;
		   }

		   div.noSelection {
			background: none !important;
		   }

		   .beepboxEditor .loopEditor {
			background: none !important;
		   }

		   .beepboxEditor .muteEditor {
			background: linear-gradient(#c4f0d1, #83c139) !important;
			border-radius: 5px;
			box-shadow: 0px 1px 1px 0px rgb(0, 0, 0), inset 0px 3px 14px 0px rgba(0, 0, 0, 0.1), inset 0px -4px 0px 0px rgba(0, 0, 0, 0.1);
			opacity: 65%;
		   }

		   div.muteEditor div {
			background: none !important;
			--track-editor-bg-pitch: #1b4079;
			--track-editor-bg-noise: #213779;
			--track-editor-bg-mod: #46299e;
	
			--track-editor-bg-pitch-dim: #0c2b3e; 		
			--track-editor-bg-noise-dim: #08204f; 			
			--track-editor-bg-mod-dim: #26145e; 

		   }

		   div.channelBox {
			border-radius: 5px;
		  }
		  div.curChannelBox {
			border-radius: 5px;
		  }

			`,
        "Skeuomorphic": `
		:root {
			--page-margin: #020202;
			--editor-background: #1e1e1e;
			--hover-preview: white;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: white;
			--secondary-text: #848484;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #044b94;
			--loop-accent: #74f;
			--link-accent: #98f;
			--ui-widget-background: #444;
			--ui-widget-focus: #555;
			--pitch-background: #393e4f;
			--tonic: #725491;
			--fifth-note: #54547a;
			--third-note: #3b4b71;
			--white-piano-key: #eee;
			--black-piano-key: #666;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: linear-gradient(#4b5164, #3e3f48);
			--track-editor-bg-pitch-dim: linear-gradient(#3e3f48, #212530);
			--track-editor-bg-noise: linear-gradient(#3d3535,#161313);
			--track-editor-bg-noise-dim: linear-gradient(#161313,#0e0c0c);
			--track-editor-bg-mod: linear-gradient(#283560,#0a101f);
			--track-editor-bg-mod-dim: linear-gradient(#05080f,#0a101f);
			--multiplicative-mod-slider: #606c9f;
			--overwriting-mod-slider: #6850b5;
			--indicator-primary: #9c64f7;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #333;
			--input-box-outline: #222;
			--mute-button-normal: #dda85d;
			--mute-button-mod: #886eae;
			--mod-label-primary: #282840;
			--mod-label-secondary-text: rgb(87, 86, 120);
			--mod-label-primary-text: white;

			--pitch1-secondary-channel: #bb1111;
			--pitch1-primary-channel:   #ff5959;
			--pitch1-secondary-note:    #7c0404;
			--pitch1-primary-note:      #ffb6b6;
		
			--pitch2-secondary-channel: #bb5b11;
			--pitch2-primary-channel:   #ffa159;
			--pitch2-secondary-note:    #7c3804;
			--pitch2-primary-note:      #ffd5b6;
		
			--pitch3-secondary-channel: #bba411;
			--pitch3-primary-channel:   #ffe959;
			--pitch3-secondary-note:    #7c6c04;
			--pitch3-primary-note:      #fff5b6;
		
			--pitch4-secondary-channel: #88bb11;
			--pitch4-primary-channel:   #cdff59;
			--pitch4-secondary-note:    #587c04;
			--pitch4-primary-note:      #e9ffb6;
		
			--pitch5-secondary-channel: #3ebb11;
			--pitch5-primary-channel:   #85ff59;
			--pitch5-secondary-note:    #247c04;
			--pitch5-primary-note:      #c9ffb6;
		
			--pitch6-secondary-channel: #11bb2e;
			--pitch6-primary-channel:   #59ff75;
			--pitch6-secondary-note:    #047c18;
			--pitch6-primary-note:      #b6ffc2;
		
			--pitch7-secondary-channel: #11bb77;
			--pitch7-primary-channel:   #59ffbd;
			--pitch7-secondary-note:    #047c4c;
			--pitch7-primary-note:      #b6ffe2;
		
			--pitch8-secondary-channel: #11b5bb;
			--pitch8-primary-channel:   #59f9ff;
			--pitch8-secondary-note:    #04777c;
			--pitch8-primary-note:      #b6fcff;
		
			--pitch9-secondary-channel: #116bbb;
			--pitch9-primary-channel:   #59b1ff;
			--pitch9-secondary-note:    #04437c;
			--pitch9-primary-note:      #b6dcff;
		
			--pitch10-secondary-channel:#1826aa;
			--pitch10-primary-channel:  #5161f6;
			--pitch10-secondary-note:   #091370;
			--pitch10-primary-note:     #adb4fd;
		
			--pitch11-secondary-channel:#4918aa;
			--pitch11-primary-channel:  #8951f6;
			--pitch11-secondary-note:   #2c0970;
			--pitch11-primary-note:     #c8adfd;
		
			--pitch12-secondary-channel:#8818aa;
			--pitch12-primary-channel:  #d051f6;
			--pitch12-secondary-note:   #580970;
			--pitch12-primary-note:     #ebadfd;
		
			--pitch13-secondary-channel:#aa188c;
			--pitch13-primary-channel:  #f651d4;
			--pitch13-secondary-note:   #70095b;
			--pitch13-primary-note:     #fdadec;
		
			--pitch14-secondary-channel:#aa184d;
			--pitch14-primary-channel:  #f6518d;
			--pitch14-secondary-note:   #70092e;
			--pitch14-primary-note:     #fdadca; 
		
			--noise1-secondary-channel: #6F6F6F;
			--noise1-primary-channel:   #AAAAAA;
			--noise1-secondary-note:    #A7A7A7;
			--noise1-primary-note:      #E0E0E0;
			--noise2-secondary-channel: #996633;
			--noise2-primary-channel:   #DDAA77;
			--noise2-secondary-note:    #CC9966;
			--noise2-primary-note:      #F0D0BB;
			--noise3-secondary-channel: #4A6D8F;
			--noise3-primary-channel:   #77AADD;
			--noise3-secondary-note:    #6F9FCF;
			--noise3-primary-note:      #BBD7FF;
			--noise4-secondary-channel: #7A4F9A;
			--noise4-primary-channel:   #AF82D2;
			--noise4-secondary-note:    #9E71C1;
			--noise4-primary-note:      #D4C1EA;
			--noise5-secondary-channel: #607837;
			--noise5-primary-channel:   #A2BB77;
			--noise5-secondary-note:    #91AA66;
			--noise5-primary-note:      #C5E2B2;
		--mod1-secondary-channel:   #339955;
				--mod1-primary-channel:     #77fc55;
				--mod1-secondary-note:      #77ff8a;
				--mod1-primary-note:        #cdffee;
				--mod2-secondary-channel:   #993355;
				--mod2-primary-channel:     #f04960;
				--mod2-secondary-note:      #f057a0;
				--mod2-primary-note:        #ffb8de;
				--mod3-secondary-channel:   #553399;
				--mod3-primary-channel:     #8855fc;
				--mod3-secondary-note:      #aa64ff;
				--mod3-primary-note:	    #f8ddff;
				--mod4-secondary-channel:   #a86436;
				--mod4-primary-channel:     #c8a825;
				--mod4-secondary-note:      #e8ba46;
				--mod4-primary-note:        #fff6d3;
			--disabled-note-primary:    #91879f;
			--disabled-note-secondary:  #6a677a;
		}
		 
		.curChannelBox {
			--pitch1-primary-channel:  linear-gradient(#ff7777, #ff5959);
			--pitch2-primary-channel:  linear-gradient(#ffaf71, #ffa159);
			--pitch3-primary-channel:  linear-gradient(#ffee7c, #ffe959);
			--pitch4-primary-channel:  linear-gradient(#d3fa7a, #cdff59);
			--pitch5-primary-channel:  linear-gradient(#a4ff83, #85ff59);
			--pitch6-primary-channel:  linear-gradient(#8aff9e, #59ff75);
			--pitch7-primary-channel:  linear-gradient(#81ffcc, #59ffbd);
			--pitch8-primary-channel:  linear-gradient(#59f9ff, #59f9ff);
			--pitch9-primary-channel:  linear-gradient(#87c7ff, #59b1ff);
			--pitch10-primary-channel: linear-gradient(#7a87ff, #5161f6);
			--pitch11-primary-channel: linear-gradient(#a476ff, #8951f6);
			--pitch12-primary-channel: linear-gradient(#df75ff, #d051f6);
			--pitch13-primary-channel: linear-gradient(#ff75e3, #f651d4);
			--pitch14-primary-channel: linear-gradient(#ff71a5, #f6518d);
		
			border-radius: 5px;
			box-shadow: 0px 2px 2px 1px rgba(0, 0, 0, 0.2), 0px 0px 1px 1px rgba(0, 0, 0, 0.7), inset 0px -10px 20px 1px rgba(0, 0, 0, 0.1), inset 0px 1px 0px 0px rgba(255, 255, 255, 0.1);
		}
		.channelBox {
			border-radius: 5px;
			box-shadow: 0px 2px 2px 1px rgba(0, 0, 0, 0.2), 0px 0px 1px 1px rgba(0, 0, 0, 0.7), inset 0px -10px 20px 1px rgba(0, 0, 0, 0.1), inset 0px 1px 0px 0px rgba(255, 255, 255, 0.1);
		}
		
		.channelBoxLabel {
			--pitch1-primary-channel:   #ff5959;
			--pitch2-primary-channel:   #ffa159;
			--pitch3-primary-channel:   #ffe959;
			--pitch4-primary-channel:   #cdff59;
			--pitch5-primary-channel:   #85ff59;
			--pitch6-primary-channel:   #59ff75;
			--pitch7-primary-channel:   #59ffbd;
			--pitch8-primary-channel:   #59f9ff;
			--pitch9-primary-channel:   #59b1ff;
			--pitch10-primary-channel:  #5161f6;
			--pitch11-primary-channel:  #8951f6;
			--pitch12-primary-channel:  #d051f6;
			--pitch13-primary-channel:  #f651d4;
			--pitch14-primary-channel:  #f6518d;
		}
		
		body {
			background-image: url('https://github.com/choptop84/choptop84s-image-repository/blob/main/skeuobg.png?raw=true') !important;
			background-repeat: no-repeat !important;
			background-size: contain;
			font-family: Arial, Helvetica, sans-serif;
		}
		
		#beepboxEditorContainer, .track-area, .beepboxEditor, #text-content, div.noSelection {
			background-color: #fff0 !important;
		} 
		
		#pitchEditorBackground {
			opacity: 0.5 !important;
			filter: brightness(150%);
		}
		
		svg#firstImage {
			background-image: url('https://github.com/choptop84/choptop84s-image-repository/blob/main/skeuobg2.png?raw=true') !important;
		}
		
		#oscilascopeAll {
			margin-left: auto;
			margin-right: auto;
			position: static;
		}
		 
		.beepboxEditor,
		.beepboxEditor select
		{
			text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.5);
		}
		 
		.beepboxEditor .piano-button {
			text-shadow: none;
		}
		 
		.beepboxEditor .prompt
		{
			background: radial-gradient(farthest-corner at 50% 0px, #2a2a2a, #1a1a1a) !important;
		}
		 
		#beepboxEditorContainer {
			background-color: rgba(0, 0, 0, 0) !important;
		}
		 
		.beepboxEditor .trackAndMuteContainer {
			text-shadow: none;
		}
		 
		.beepboxEditor .loopEditor
		{
			--editor-background: rgba(0, 0, 0, 0.0) !important;
		}
		 
		.beepboxEditor .muteEditor
		{
			--editor-background: #1e1e1e !important;
		}
		 
		.beepboxEditor .pattern-area
		{
			--editor-background: rgba(0, 0, 0, 1) !important;
		}
		 
		.beepboxEditor .trackContainer svg
		{
			--editor-background: #111 !important;
		}
		 
		.beepboxEditor .muteEditor > :last-child {
			--editor-background: rgba(0, 0, 0, 0) !important;
		}
		 
		.beepboxEditor #octaveScrollBarContainer {
			background-color: rgba(0, 0, 0, 0.3);
		}
		 
		.beepboxEditor {
			--track-editor-bg-pitch-dim: #1e1f28;
		}
		 
		.beepboxEditor .muteButtonText {
			transform: translate(0px, 1px) !important;
			color: #777 !important;
		}
		 
		.beepboxEditor .instrument-bar {
			--text-color-lit: #eee;
			--text-color-dim: #777;
		}
		 
		.beepboxEditor .instrument-bar .selected-instrument {
			color: rgba(255, 255, 255, 1) !important;
			text-shadow: 0px 0px 4px var(--text-color-lit);
		}
		 
		.beepboxEditor .instrument-bar .deactivated {
			color: rgba(0, 0, 0, 1) !important;
			text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		}
		 
		.beepboxEditor .instrument-bar > :not(.last-button) {
			border-color: var(--background-color-lit) !important;
		}
		 
		.beepboxEditor .instrument-bar .selected-instrument {
			border-color: rgba(255, 255, 255, 1) !important;
		}
		 
		.beepboxEditor select
		{
			background: #444 !important;
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px -10px 20px 1px rgba(0, 0, 0, 0.4),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor select:focus
		{
			background: #333 !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px 10px 20px 1px rgba(0, 0, 0, 0.4),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .select2-selection__rendered,
		.beepboxEditor button,
		.beepboxEditor .instrument-bar button,
		.beepboxEditor .eq-filter-type-bar button .deactivated,
		.beepboxEditor .note-filter-type-bar button .deactivated
		{
			background: linear-gradient(#444, #333) !important;
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .select2-container--open .select2-selection__rendered,
		.beepboxEditor button:focus,
		.beepboxEditor .instrument-bar .selected-instrument,
		.beepboxEditor .eq-filter-type-bar button:not(.deactivated),
		.beepboxEditor .note-filter-type-bar button:not(.deactivated)
		{
			background: linear-gradient(#333, #444) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .filterEditor svg,
		.beepboxEditor .fadeInOut svg,
		.beepboxEditor .harmonics svg,
		.beepboxEditor .spectrum svg
		{
			background: rgba(0, 0, 0, 0.3) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-webkit-slider-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-ms-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-ms-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-ms-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-moz-range-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-moz-range-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-moz-range-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="text"],
		.beepboxEditor input[type="number"]
		{
			border: none !important;
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="checkbox"]
		{
			appearance: none;
			background: rgba(0, 0, 0, 0.3);
			color: currentColor;
			border-radius: 1px;
			width: 1em !important;
			height: 1em !important;
			box-shadow:
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="checkbox"]:checked
		{
			display: flex;
			justify-content: center;
		}
		 
		.beepboxEditor input[type="checkbox"]:checked:after
		{
			width: 1em;
			height: 1em;
			text-align: center;
			font-size: 0.8em;
			content: "✓";
			color: currentColor;
			text-shadow: 0px 0px 2px rgba(255, 255, 255, 0.5);
		}
		`,
        "Glyde": `
	  :root { 
		--page-margin: #000000; 
		--song-player-margin: #000;
		--editor-background: #472434a8; 
		--hover-preview: white; 
		--playhead: rgba(255, 255, 255, 0.9); 
		--primary-text: #ffe5c2; 
		--secondary-text: #ffcedd; 
		--inverted-text: black; 
		--text-selection: rgba(119,68,255,0.99); 
		--box-selection-fill: #1e0915; 
		--loop-accent: #ffdeaf; 
		--link-accent: #df88ff; 
		--ui-widget-background: #8a516e9e; 
		--ui-widget-focus: #4f152b; 
		--pitch-background: #00000038; 
		--tonic: #ff9db9; 
		--fifth-note: #ffe1b88c; 
		--third-note: #8e2f9b8c;
		--white-piano-key: #ffb6ce; 
		--black-piano-key: #ff7ba7; 
		--use-color-formula: true; 
		--track-editor-bg-pitch: #751e40; 
		--track-editor-bg-pitch-dim: #4f152b; 
		--track-editor-bg-noise: #751e30; 
		--track-editor-bg-noise-dim: #4f152b; 
		--track-editor-bg-mod: #751e29; 
		--track-editor-bg-mod-dim: #4f152b; 
		--multiplicative-mod-slider: #ea7d7d; 
		--overwriting-mod-slider: #ffebd5; 
		--indicator-primary: #ffebd5; 
		--indicator-secondary: #4f152b; 
		--select2-opt-group: #ffebd5; 
		--input-box-outline: #a33e67; 
		--mute-button-normal: #b63448; 
		--mute-button-mod: #6d0f1d; 
		--mod-label-primary: #2b080d; 
		--mod-label-secondary-text: #421a20; 
		--mod-label-primary-text: #ffc6cf; 
		--progress-bar: #ffc9ff;
		--pitch-secondary-channel-hue: 60; 
		--pitch-secondary-channel-sat: 23; 
		--pitch-secondary-channel-sat-scale: 0.1; 
		--pitch-secondary-channel-lum: 50; 
		--pitch-secondary-channel-lum-scale: 0.05; 
		--pitch-primary-channel-hue: 60; 
		--pitch-primary-channel-hue-scale: 6.1; 
		--pitch-primary-channel-sat: 75; 
		--pitch-primary-channel-sat-scale: 0.1; 
		--pitch-primary-channel-lum: 87.5; 
		--pitch-primary-channel-lum-scale: 0.05; 
		--pitch-secondary-note-hue: 60; 
		--pitch-secondary-note-hue-scale: 6.1; 
		--pitch-secondary-note-sat: 53.9; 
		--pitch-secondary-note-sat-scale: 0.1; 
		--pitch-secondary-note-lum: 65; 
		--pitch-secondary-note-lum-scale: 0.05; 
		--pitch-primary-note-hue: 60; 
		--pitch-primary-note-hue-scale: 6.1; 
		--pitch-primary-note-sat: 100; 
		--pitch-primary-note-sat-scale: 0.05; 
		--pitch-primary-note-lum: 95.6; 
		--pitch-primary-note-lum-scale: 0.025; 
		--noise-secondary-channel-hue: 0; 
		--noise-secondary-channel-hue-scale: 2; 
		--noise-secondary-channel-sat: 65; 
		--noise-secondary-channel-sat-scale: 0; 
		--noise-secondary-channel-lum: 72; 
		--noise-secondary-channel-lum-scale: 0; 
		--noise-primary-channel-hue: 0; 
		--noise-primary-channel-hue-scale: 1; 
		--noise-primary-channel-sat: 100; 
		--noise-primary-channel-sat-scale: 1; 
		--noise-primary-channel-lum: 93.5; 
		--noise-primary-channel-lum-scale: 0; 
		--noise-secondary-note-hue: 24; 
		--noise-secondary-note-hue-scale: 2; 
		--noise-secondary-note-sat: 100; 
		--noise-secondary-note-sat-scale: 0; 
		--noise-secondary-note-lum: 75; 
		--noise-secondary-note-lum-scale: 0; 
		--noise-primary-note-hue: 24; 
		--noise-primary-note-hue-scale: 2; 
		--noise-primary-note-sat: 100; 
		--noise-primary-note-sat-scale: 1; 
		--noise-primary-note-lum: 90; 
		--noise-primary-note-lum-scale: 1; 
		--mod-secondary-channel-hue: 55; 
		--mod-secondary-channel-hue-scale: 1.5; 
		--mod-secondary-channel-sat: 100; 
		--mod-secondary-channel-sat-scale: 0; 
		--mod-secondary-channel-lum: 70; 
		--mod-secondary-channel-lum-scale: 0; 
		--mod-primary-channel-hue: 55; 
		--mod-primary-channel-hue-scale: 1.5; 
		--mod-primary-channel-sat: 96; 
		--mod-primary-channel-sat-scale: 0; 
		--mod-primary-channel-lum: 95; 
		--mod-primary-channel-lum-scale: 0; 
		--mod-secondary-note-hue: 55; 
		--mod-secondary-note-hue-scale: 1.5; 
		--mod-secondary-note-sat: 92; 
		--mod-secondary-note-sat-scale: 0; 
		--mod-secondary-note-lum: 75; 
		--mod-secondary-note-lum-scale: 0; 
		--mod-primary-note-hue: 55; 
		--mod-primary-note-hue-scale: 1.5; 
		--mod-primary-note-sat: 96; 
		--mod-primary-note-sat-scale: 0; 
		--mod-primary-note-lum: 95; 
		--mod-primary-note-lum-scale: 0; 
		--note-flash: #fff; 
		--note-flash-secondary: #ffffff54; }
		* {
		cursor: url("abyssbox_cursor.png"), auto !important;
		}
		
			@font-face {
		   font-family: "Varela";
		   src:
 		   url("./image_assets/Varela.ttf") format("truetype") tech(color-COLRv1),
			}

			/* sets background image */
			body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/glydebg.png") !important;
			background-position: top right;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
				}

			div#beepboxEditorContainer {
				border-style: solid;
				border-width: 8px;
				border-color: #4f152b;
				padding-bottom: 5px;
			}
				
			#text-content {
				border-style: solid;
				border-width: 8px;
				border-color: #4f152b;
			}

			html {
 		   	font-family: 'Varela';
			}

			div.channelBoxLabel {
				font-family: 'Varela' !important;
			}

			#firstImage {
				background-image: url("https://choptop84.github.io/choptop84s-image-repository/slushiepfp.PNG") !important;
				background-repeat: no-repeat !important;
				background-size: 100% 100% !important;
			}

			#text-content > section > h1 > font {
				display: none;
				}
				#text-content > section > h1 {
				margin: auto;
				content: url("https://choptop84.github.io/choptop84s-image-repository/AbyssBoxGlydeThemeLogo.png");
				}

				div.beepboxEditor.load {
					background: none !important;
				   }
		
				   div.noSelection {
					background: none !important;
				   }
		
				   .beepboxEditor .loopEditor {
					background: none !important;
				   }
		
				   .beepboxEditor .muteEditor {
					background: none !important;
				   }
		
				   div.muteEditor div {
					background: none !important;
				   }


			`,
        "starry studio": `
			:root {     
				--page-margin: black;     
				--editor-background: rgba(0, 0, 0, 0.65);     
				--hover-preview: #f8f8f8;     
				--playhead: rgba(255, 255, 255, 0.8);     
				--primary-text: #f8f8f8;     
				--secondary-text: #b8b4e8;     
				--inverted-text: #3b2655;     
				--text-selection: rgba(124, 91, 173, 0.9);     
				--box-selection-fill: #b8b4e8;     
				--loop-accent: #a80a61;     
				--link-accent: #a286d7;     
				--ui-widget-background: #31253f;     
				--ui-widget-focus: #7c5bad;     
				--pitch-background: rgba(40, 40, 44, 0.5);     
				--tonic: rgba(83, 81, 95, 0.5);     
				--fifth-note: rgba(59, 38, 85, 0.5);   
				--third-note: #2a422282;  
				--white-piano-key: rgb(155, 151, 166);     
				--black-piano-key: #39363e;     
				--white-piano-key-text: #39363e;     
				--black-piano-key-text: #9b97a6;     
				--use-color-formula: true;     
				--track-editor-bg-pitch: #423174;     
				--track-editor-bg-pitch-dim: #252335;     
				--track-editor-bg-noise: #39363e;     
				--track-editor-bg-noise-dim: #28282c;     
				--track-editor-bg-mod: #3b2655;     
				--track-editor-bg-mod-dim: #252335;     
				--multiplicative-mod-slider: #168ee4;     
				--overwriting-mod-slider: #2457c6;     
				--indicator-primary: #f8f8f8;     
				--indicator-secondary: #423174;     
				--select2-opt-group: #423174;     
				--input-box-outline: #3b2655;     
				--mute-button-normal: #00b176;     
				--mute-button-mod: #e6a418;     
				--mod-label-primary: #3b2655;     
				--mod-label-secondary-text: rgb(124 91 173);     
				--mod-label-primary-text: #b8b4e8;     
				--pitch-secondary-channel-hue: 0;     
				--pitch-secondary-channel-hue-scale: 6.5;     
				--pitch-secondary-channel-sat: 83.3;     
				--pitch-secondary-channel-sat-scale: 0.1;     
				--pitch-secondary-channel-lum: 40;     
				--pitch-secondary-channel-lum-scale: 0.05;     
				--pitch-primary-channel-hue: 0;     
				--pitch-primary-channel-hue-scale: 6.5;     
				--pitch-primary-channel-sat: 100;     
				--pitch-primary-channel-sat-scale: 0.1;     
				--pitch-primary-channel-lum: 67.5;     
				--pitch-primary-channel-lum-scale: 0.05;     
				--pitch-secondary-note-hue: 0;     
				--pitch-secondary-note-hue-scale: 6.5;     
				--pitch-secondary-note-sat: 93.9;     
				--pitch-secondary-note-sat-scale: 0.1;     
				--pitch-secondary-note-lum: 25;     
				--pitch-secondary-note-lum-scale: 0.05;     
				--pitch-primary-note-hue: 0;     
				--pitch-primary-note-hue-scale: 6.5;     
				--pitch-primary-note-sat: 100;     
				--pitch-primary-note-sat-scale: 0.05;     
				--pitch-primary-note-lum: 85.6;     
				--pitch-primary-note-lum-scale: 0.025;     
				--noise-secondary-channel-hue: 0;     
				--noise-secondary-channel-hue-scale: 2;     
				--noise-secondary-channel-sat: 25;     
				--noise-secondary-channel-sat-scale: 0;     
				--noise-secondary-channel-lum: 42;     
				--noise-secondary-channel-lum-scale: 0;     
				--noise-primary-channel-hue: 0;     
				--noise-primary-channel-hue-scale: 2;     
				--noise-primary-channel-sat: 33;     
				--noise-primary-channel-sat-scale: 0;     
				--noise-primary-channel-lum: 63.5;     
				--noise-primary-channel-lum-scale: 0;     
				--noise-secondary-note-hue: 0;     
				--noise-secondary-note-hue-scale: 2;     
				--noise-secondary-note-sat: 33.5;     
				--noise-secondary-note-sat-scale: 0;     
				--noise-secondary-note-lum: 55;     
				--noise-secondary-note-lum-scale: 0;     
				--noise-primary-note-hue: 0;     
				--noise-primary-note-hue-scale: 2;     
				--noise-primary-note-sat: 46.5;     
				--noise-primary-note-sat-scale: 0;     
				--noise-primary-note-lum: 74;     
				--noise-primary-note-lum-scale: 0;     
				--mod-secondary-channel-hue: 192;     
				--mod-secondary-channel-hue-scale: 1.5;     
				--mod-secondary-channel-sat: 88;     
				--mod-secondary-channel-sat-scale: 0;     
				--mod-secondary-channel-lum: 50;     
				--mod-secondary-channel-lum-scale: 0;     
				--mod-primary-channel-hue: 192;     
				--mod-primary-channel-hue-scale: 1.5;     
				--mod-primary-channel-sat: 96;     
				--mod-primary-channel-sat-scale: 0;     
				--mod-primary-channel-lum: 80;     
				--mod-primary-channel-lum-scale: 0;     
				--mod-secondary-note-hue: 192;     
				--mod-secondary-note-hue-scale: 1.5;     
				--mod-secondary-note-sat: 92;     
				--mod-secondary-note-sat-scale: 0;     
				--mod-secondary-note-lum: 45;     
				--mod-secondary-note-lum-scale: 0;     
				--mod-primary-note-hue: 192;     
				--mod-primary-note-hue-scale: 1.5;     
				--mod-primary-note-sat: 96;     
				--mod-primary-note-sat-scale: 0;     
				--mod-primary-note-lum: 85;     
				--mod-primary-note-lum-scale: 0;     
				--disabled-note-primary: #252a46;     
				--disabled-note-secondary: #181c34; }

				/* sets background image */
			.beepboxEditor load {
				background: #fff0 !important;
				}

			body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/stars.gif") !important;
			background-repeat: repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
				}
			`,
        "AWeebyssBox": `
			:root {		
			--page-margin: #1e0915; 		
			--editor-background: #1e0915; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #873a51; 		
			--link-accent: #df88ff; 		
			--ui-widget-background: #581b3e; 		
			--ui-widget-focus: #762b4c; 		
			--pitch-background: #381d2455; 		
			--tonic: #873a51; 		
			--fifth-note: #75001e; 	
			--third-note: #75002c;	
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f; 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #571c40; 		
			--track-editor-bg-pitch-dim: #290d0d; 		
			--track-editor-bg-noise: #571131; 		
			--track-editor-bg-noise-dim: #330a28; 		
			--track-editor-bg-mod: #54083c; 		
			--track-editor-bg-mod-dim: #360426; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--progress-bar: #bf2c5d;
			--empty-sample-bar: #260b1b;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 
			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;	
				}
		* {
		cursor: url("abyssbox_cursor.png"), auto !important;
		}

			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: var(--editor-background) !important;
				border-image-source: none !important;
			}

			#text-content {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 

				}
			 .beepboxEditor button, .beepboxEditor select, .beepboxEditor .select2-selection__rendered {
    				border-image-source: url("./image_assets/abyssbox_border.png") !important;
    				border-image-slice: 4 fill !important; 
   				border-image-width: 4px !important; 
				border-image-repeat: stretch !important;
    				padding: 4px !important; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}

				select.trackSelectBox {
					border-image: none !important;
				}

				#firstImage {
					background-image: url("./image_assets/viviandbelle.png") !important;
					background-repeat: no-repeat !important;
					background-size: 100% 100% !important;
				}


			@font-face {
		   font-family: "AbyssType_small";
		   src:
 		   url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}

			html {
 		   	font-family: 'AbyssType';
			}

			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}

		   

			`,
        "Half-Life": `
			:root { 		
			--page-margin: #0c1012; 		
			--editor-background: #0c1012; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: #ffee00; 		
			--secondary-text: #ffee00; 		
			--inverted-text:  #000000;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #ff6f00; 		
			--loop-accent: #ff6f00; 		
			--link-accent: #ff6f00; 		
			--ui-widget-background: #36454F;		
			--ui-widget-focus: #36454F; 		
			--pitch-background: #5e2103; 		
			--tonic: #ff6f00; 		
			--fifth-note: #963c00; 		
			--third-note: #b76f23;
			--white-piano-key: #ccbca5; 		
			--black-piano-key: #40382f; 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #7d5100; 		
			--track-editor-bg-pitch-dim: #3b2c10; 		
			--track-editor-bg-noise: #730a00; 		
			--track-editor-bg-noise-dim: #360e0b; 		
			--track-editor-bg-mod: #856f00; 		
			--track-editor-bg-mod-dim: #3b3205; 		
			--multiplicative-mod-slider: #9f8460; 		
			--overwriting-mod-slider: #9e7534; 		
			--indicator-primary: #b38949; 		
			--indicator-secondary: #543d1d; 		
			--select2-opt-group: #4f3b19; 		
			--input-box-outline: #1a0b04; 		
			--mute-button-normal: #ddac5d;	 		
			--mute-button-mod: #ba3d36; 		
			--mod-label-primary: #542f16; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--progress-bar: #ff6f00;

			--pitch-secondary-channel-hue: 0; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 60; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: 154; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 60; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: 154; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 20; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: 154; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 65; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 60; 		
			--pitch-primary-note-lum-scale: 0.05; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 60; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 25; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 75; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 
			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;	
				}
		/* replaces hotdog (in a hacky way) with an image of gordon freeman but really wide*/
		#Hotdog {
		display: none;
		}
		.instructions-column > section:first-of-type > p:first-of-type:after {
		display: block;
		content: url("./image_assets/wide-gordon.png");
		width: inherit;
		height: contain;
		text-align: center;
		margin-top: 25px;
		}
		/* sets background image */
		body {
		background-image: url("./image_assets/lambda.png") !important;
		background-size: cover !important;
		background-position: center !important;
		background-repeat: no-repeat !important;
			}
			/* make editor background transparent */
		#beepboxEditorContainer, .beepboxEditor, #text-content {
		}

			@font-face {
		   font-family: "trebuc";
		   src:
 		   url("./image_assets/trebuc.otf") format("opentype") tech(color-COLRv1),
			}

			html {
 		   font-family: 'trebuc';
			}
			div.channelBoxLabel {
				font-family: 'trebuc' !important;
			}

			#modTitle::before {
				content: "λbyssBox" !important;
			}

			`,
        "Half-Life: Source": `
			:root { 		
			--page-margin: #0c1012; 		
			--editor-background: #0c1012; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: #ffee00; 		
			--secondary-text: #ffee00; 		
			--inverted-text:  #000000;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #ff6f00; 		
			--loop-accent: #ff6f00; 		
			--link-accent: #ff6f00; 		
			--ui-widget-background: #36454F;		
			--ui-widget-focus: #36454F; 		
			--pitch-background: #5e2103; 		
			--tonic: #ff6f00; 		
			--fifth-note: #963c00; 	
			--third-note: #b76f23;	
			--white-piano-key: #ccbca5; 		
			--black-piano-key: #40382f; 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #7d5100; 		
			--track-editor-bg-pitch-dim: #3b2c10; 		
			--track-editor-bg-noise: #730a00; 		
			--track-editor-bg-noise-dim: #360e0b; 		
			--track-editor-bg-mod: #856f00; 		
			--track-editor-bg-mod-dim: #3b3205; 		
			--multiplicative-mod-slider: #9f8460; 		
			--overwriting-mod-slider: #9e7534; 		
			--indicator-primary: #b38949; 		
			--indicator-secondary: #543d1d; 		
			--select2-opt-group: #4f3b19; 		
			--input-box-outline: #1a0b04; 		
			--mute-button-normal: #ddac5d;	 		
			--mute-button-mod: #ba3d36; 		
			--mod-label-primary: #542f16; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--progress-bar: #ff6f00;

			--pitch-secondary-channel-hue: 0; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 60; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: 154; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 60; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: 154; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 20; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: 154; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 65; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 60; 		
			--pitch-primary-note-lum-scale: 0.05; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 60; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 25; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 75; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 
			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;	
				}
		/* replaces hotdog (in a hacky way) with an image of gordon freeman but really wide*/
		#Hotdog {
		display: none;
		}
		.instructions-column > section:first-of-type > p:first-of-type:after {
		display: block;
		content: url("./image_assets/wide-gordon.png");
		width: inherit;
		height: contain;
		text-align: center;
		margin-top: 25px;
		}
		/* sets background image */
		body {
		background-image: url("./image_assets/lambda.png") !important;
		background-position: center;
		background-repeat: repeat;
			}
			/* make editor background transparent */
		#beepboxEditorContainer, .beepboxEditor, #text-content {
		}

			@font-face {
		   font-family: "trebuc";
		   src:
 		   url("trebuc.otf") format("opentype") tech(color-COLRv1),
			}

			div.prompt.noSelection {
				left: 636px !important;
			}

			#beepboxEditorContainer {
				padding-top: 20px;
			}

			div.beepboxEditor.load {
				width: 50%;
			}

			#text-content {
				overflow: visible;
				width: 20% !important;
			}

			html {
 		   font-family: 'trebuc';
			}
			div.channelBoxLabel {
				font-family: 'trebuc' !important;
			}

			#modTitle::before {
				content: "λbyssBox: Source" !important;
			}

			`,
        "Scratch": `
		:root {
			--page-margin: #4d97ff40;
			--editor-background: #f6e5fa;
			--hover-preview: #ff9900;
			--playhead: #4cbf56;
			--primary-text: #fff;
			--secondary-text: #000;
			--inverted-text: #fff;
			--text-selection: rgba(255, 255, 255, 0.99);
			--box-selection-fill: #7725ff;
			--loop-accent: #ffab19;
			--link-accent: #ff9900;
			--ui-widget-background: #855cd6;
			--ui-widget-focus: #ff661a;
			--pitch-background: #fff;
			--tonic: #855cd6;
			--fifth-note: #7e7e7e;
			--third-note: #d2bddd;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #fff;
			--track-editor-bg-pitch-dim: #c7c7c7;
			--track-editor-bg-noise: #4d97ff40;
			--track-editor-bg-noise-dim: #1c54a3b0;
			--track-editor-bg-mod: #855cd6;
			--track-editor-bg-mod-dim: #503389;
			--multiplicative-mod-slider: #ff6680;
			--overwriting-mod-slider: #ff3355;
			--indicator-primary: #855cd6;
			--indicator-secondary: #cecece;
			--select2-opt-group: #5a3b98;
			--input-box-outline: #626262;
			--mute-button-normal: #cf63cf;
			--mute-button-mod: #cf63cf;
			--mod-label-primary: #ff3355;
			--white-piano-key: #fff;
			--black-piano-key: #000;
			--white-piano-key-text: #000;
			--black-piano-key-text: #fff;
			--note-flash: #4cbf56;
			--note-flash-secondary: #b84848;
			--oscilloscope-line-L: #d587e6;
			--oscilloscope-line-R: #b11cc7;
			--pitch1-secondary-channel: #3373cc;
			--pitch1-primary-channel: #4c97ff;
			--pitch1-secondary-note: #3373cc;
			--pitch1-primary-note: #4c97ff;
			--pitch2-secondary-channel: #774dcb;
			--pitch2-primary-channel: #9966ff;
			--pitch2-secondary-note: #774dcb;
			--pitch2-primary-note: #9966ff;
			--pitch3-secondary-channel: #bd42bd;
			--pitch3-primary-channel: #cf63cf;
			--pitch3-secondary-note: #bd42bd;
			--pitch3-primary-note: #cf63cf;
			--pitch4-secondary-channel: #cc9900;
			--pitch4-primary-channel: #ffbf00;
			--pitch4-secondary-note: #cc9900;
			--pitch4-primary-note: #ffbf00;
			--pitch5-secondary-channel: #cf8b17;
			--pitch5-primary-channel: #ffab19;
			--pitch5-secondary-note: #cf8b17;
			--pitch5-primary-note: #ffab19;
			--pitch6-secondary-channel: #2e8eb8;
			--pitch6-primary-channel: #5cb1d6;
			--pitch6-secondary-note: #2e8eb8;
			--pitch6-primary-note: #5cb1d6;
			--pitch7-secondary-channel: #389438;
			--pitch7-primary-channel: #59c059;
			--pitch7-secondary-note: #389438;
			--pitch7-primary-note: #59c059;
			--pitch8-secondary-channel: #db6e00;
			--pitch8-primary-channel: #ff8c1a;
			--pitch8-secondary-note: #db6e00;
			--pitch8-primary-note: #ff8c1a;
			--pitch9-secondary-channel: #ff3355;
			--pitch9-primary-channel: #ff6680;
			--pitch9-secondary-note: #ff3355;
			--pitch9-primary-note: #ff6680;
			--pitch10-secondary-channel: #0b8e69;
			--pitch10-primary-channel: #0fbd8c;
			--pitch10-secondary-note: #0b8e69;
			--pitch10-primary-note: #0fbd8c;
			--noise1-secondary-channel: #ef3d23;
			--noise1-primary-channel: #fcf9ce;
			--noise1-secondary-note: #ef3d23;
			--noise1-primary-note: #fcf9ce;
			--noise2-secondary-channel: #dd002b;
			--noise2-primary-channel: #f73d61;
			--noise2-secondary-note: #dd002b;
			--noise2-primary-note: #f73d61;
			--noise3-secondary-channel: #d0e9ea;
			--noise3-primary-channel: #f3ffff;
			--noise3-secondary-note: #d0e9ea;
			--noise3-primary-note: #f3ffff;
			--noise4-secondary-channel: #ed9b24;
			--noise4-primary-channel: #ffc941;
			--noise4-secondary-note: #ed9b24;
			--noise4-primary-note: #ffc941;
			--noise5-secondary-channel: #663b00;
			--noise5-primary-channel: #ffe9cc;
			--noise5-secondary-note: #663b00;
			--noise5-primary-note: #ffe9cc;
			--mod1-secondary-channel: #001026;
			--mod1-primary-channel: #ffab19;
			--mod1-secondary-note: #001026;
			--mod1-primary-note: #ffab19;
			--mod2-secondary-channel: #603813;
			--mod2-primary-channel: #ffc93e;
			--mod2-secondary-note: #603813;
			--mod2-primary-note: #ffc93e;
			--mod3-secondary-channel: #1b75bb;
			--mod3-primary-channel: #e6e7e8;
			--mod3-secondary-note: #1b75bb;
			--mod3-primary-note: #e6e7e8;
			--mod4-secondary-channel: #404041;
			--mod4-primary-channel: #f05a28;
			--mod4-secondary-note: #404041;
			--mod4-primary-note: #f05a28;
			--disabled-note-primary: #ff6680;
			--disabled-note-secondary: #ff3355;
		  }
		  * {
		  --play-symbol:url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png");
		  --pause-symbol:url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png");
		  --stop-symbol:url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png");
		  }

		div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0.5 !important;
		}

		  button.playButton::before {

			background-image: url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px;
			color: #fff0;
			/* Hold on, before you start asking: "WHAT THE? WHY IS THE ICON SO LARGE!!!" Let me tell ya that this method removes all the filtering issues on the png and it looks incredibly seemless so shush */

		}

		button.pauseButton::before {

			background-image: url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px;
			color: #fff0;
		}

		button.stopButton::before {

			background-image: url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px;
			color: #fff0;
		}

		  #text-content > section > h1 {
			margin: auto;
			content: url("https://file.garden/ZMQ0Om5nmTe-x2hq/AbyssBox%20Scratch%20Logo3.png");
		  }
		  .beepboxEditor,
		  #beepboxEditorContainer {
			background-color: rgb(255, 255, 255) !important;
			border-radius: 6px;
			box-shadow: 0px 0px 0px 4px rgba(158, 158, 158, 0.91);
		  }
		  .beepboxEditor .loopEditor {
			--editor-background: #4d97ff40 !important;
			border-radius: 3px;
		  }
		  .beepboxEditor .muteEditor {
			--editor-background: #4d97ff40 !important;
			border-radius: 0px;
			height: 158px;
		  }
		  .beepboxEditor .pattern-area {
			--editor-background: #4d97ff40 !important;
			border-radius: 3px;
		  }
		  .beepboxEditor .trackContainer svg {
			--editor-background: #3100ff !important;
		  }
		  .beepboxEditor .muteEditor > :last-child {
			--editor-background: #4d97ff40 !important;
		  }
		  .beepboxEditor #octaveScrollBarContainer {
			background-color: #4d97ff40;
		  }
		  .beepboxEditor .muteButtonText {
			transform: translate(0px, 1px) !important;
			color: #777 !important;
		  }
		  .beepboxEditor .instrument-bar {
			--text-color-lit: #fff !important;
			--text-color-dim: #4c4c4c !important;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument {
			color: rgb(0, 0, 0) !important;
			text-shadow: 0px 0px 4px var(--text-color-lit);
		  }
		  .beepboxEditor .instrument-bar .deactivated {
			color: rgba(0, 0, 0, 1) !important;
			text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		  }
		  .beepboxEditor .instrument-bar > :not(.last-button) {
			border-color: var(--background-color-lit) !important;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument {
			border-color: rgba(255, 255, 255, 1) !important;
		  }
		  .beepboxEditor button, button {
			color: #fff;
			background: #3c236f;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument,
		  .beepboxEditor .filterEditor svg,
		  .beepboxEditor .fadeInOut svg,
		  .beepboxEditor .harmonics svg,
		  .beepboxEditor .spectrum svg {
			background: rgb(255, 255, 255) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.7),
			  inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-thumb {
			background: #000000 !important;
		  }
		  .beepboxEditor input[type="range"]::-moz-range-thumb {
			background: #000000 !important;
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-runnable-track {
			background: rgb(127, 127, 127) !important;
		  }
		  .beepboxEditor input[type="range"]::-moz-range-track {
			background: rgb(127, 127, 127) !important;
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-runnable-track::focus {
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			  inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="range"]::-moz-range-track::focus {
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			  inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="text"],
		  .beepboxEditor input[type="number"] {
			font-size: inherit !important;
			font-weight: bold !important;
			font-family: inherit !important;
			background: #ff8c1a !important;
			text-align: center !important;
			border: 1px solid var(--input-box-outline);
			color: #fff !important;
			box-shadow: 0px 0px 0px 1px rgb(134, 134, 134) !important;
		  }
		  .beepboxEditor .prompt {
			--primary-text: #fff;
			--secondary-text: #fff;
			--ui-widget-background: #351f5f;
			color: #fff !important;
			background: #855cd6 !important;
		  }
		  .beepboxEditor .trackContainer {
			--editor-background: #fff;
		  }
		  #text-content {
			color: #fff;
			background: #855cd6;
		  }
		  body:not(#secondImage) {
			background-image: url("https://cdn.scratch.mit.edu/scratchr2/static/__74e70580e9dbe93ce1c3f8422dde592d__/images/scratch-bg.png");
		  }
		  body:not(#secondImage) input {
			--primary-text: #000;
		  }
		  body:not(#secondImage) h1 {
			color: #000;
		  }
		  button.copyButton,
		  button.pasteButton,
		  button.exportInstrumentButton,
		  button.importInstrumentButton, 
		  button.addEnvelope,
		  div.editor-controls div button,
		  div.selectRow button,
		  div.effects-menu button,
		  div.effects-menu::before,
		  div.selectContainer select,
		  div.selectContainer::after,
		  span#select2-pitchPresetSelect-container {
			color: white !important;
		  }
		  div#text-content {
			padding-top: 15px;
		  }
		  div#beepboxEditorContainer{
			padding-bottom: 15px;
		  }
		  div.channelBox {
			border-radius: 5px;
		  }
		  div.curChannelBox {
			border-radius: 5px;
		  }
		  div.muteEditor {
			border-radius: 0px !important;
			height: 158px !important;
		  }
		  div.loopEditor {
			border-radius: 0px !important;
		  }
		`,
        "Scratch Addons": `
		:root {
			--page-margin: #111111;
			--editor-background: #f6e5fa;
			--hover-preview: #ff9900;
			--playhead: #4cbf56;
			--primary-text: #fff;
			--secondary-text: #fff;
			--inverted-text: #fff;
			--text-selection: rgba(255, 255, 255, .99);
			--box-selection-fill: #7725ff;
			--loop-accent: rgb(225, 169, 26);
			--link-accent: #ff9900;
			--ui-widget-background: #202020;
			--ui-widget-focus: #0a0a0a;
			--pitch-background: #111111;
			--tonic: #855cd6;
			--fifth-note: #2e4274;
			--third-note: #547580;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #393939;
			--track-editor-bg-pitch-dim: #21211F;
			--track-editor-bg-noise: #393939;
			--track-editor-bg-noise-dim: #21211FF;
			--track-editor-bg-mod: #393939;
			--track-editor-bg-mod-dim: #21211FF;
			--multiplicative-mod-slider: #ff6680;
			--overwriting-mod-slider: #ff3355;
			--indicator-primary: #855cd6;
			--indicator-secondary: #cecece;
			--select2-opt-group: #333;
			--input-box-outline: #626262;
			--mute-button-normal: #cf63cf;
			--mute-button-mod: #cf63cf;
			--mod-label-primary: #ff3355;
			--white-piano-key: #fff;
			--black-piano-key: #000;
			--white-piano-key-text: #000;
			--black-piano-key-text: #fff;
			--note-flash: #ff0;
			--note-flash-secondary: #ff7b00;
			--oscilloscope-line-L: #d587e6;
			--oscilloscope-line-R: #b11cc7;
		   
			--pitch1-secondary-channel: #3b56aa;
			--pitch1-primary-channel: #4a6cd4;
			--pitch1-secondary-note: #3b56aa;
			--pitch1-primary-note: #4a6cd4;
			--pitch2-secondary-channel: rgb(110, 68, 172);
			--pitch2-primary-channel: rgb(138, 85, 215);
			--pitch2-secondary-note: rgb(110, 68, 172);
			--pitch2-primary-note: rgb(138, 85, 215);
			--pitch3-secondary-channel: rgb(150, 53, 156);
			--pitch3-primary-channel: rgb(187, 66, 195);
			--pitch3-secondary-note: rgb(150, 53, 156);
			--pitch3-primary-note: rgb(187, 66, 195);
			--pitch4-secondary-channel: rgb(160, 105, 38);
			--pitch4-primary-channel: rgb(200, 131, 48);
			--pitch4-secondary-note: rgb(160, 105, 38);
			--pitch4-primary-note: rgb(200, 131, 48);
			--pitch5-secondary-channel: rgb(180, 135, 21);
			--pitch5-primary-channel: rgb(225, 169, 26);
			--pitch5-secondary-note: rgb(180, 135, 21);
			--pitch5-primary-note: rgb(225, 169, 26);
			--pitch6-secondary-channel: rgb(35, 132, 181);
			--pitch6-primary-channel: rgb(44, 165, 226);
			--pitch6-secondary-note: rgb(35, 132, 181);
			--pitch6-primary-note: rgb(44, 165, 226);
			--pitch7-secondary-channel: rgb(74, 146, 14);
			--pitch7-primary-channel: rgb(92, 183, 18);
			--pitch7-secondary-note: rgb(74, 146, 14);
			--pitch7-primary-note: rgb(92, 183, 18);
			--pitch8-secondary-channel: rgb(190, 100, 18);
			--pitch8-primary-channel: rgb(238, 125, 22);
			--pitch8-secondary-note: rgb(190, 100, 18);
			--pitch8-primary-note: rgb(238, 125, 22);
			--pitch9-secondary-channel: rgb(79, 36, 122);
			--pitch9-primary-channel: rgb(99, 45, 153);
			--pitch9-secondary-note: rgb(79, 36, 122);
			--pitch9-primary-note: rgb(99, 45, 153);
			--pitch10-secondary-channel: rgb(11, 123, 86);
			--pitch10-primary-channel: rgb(14, 154, 108);
			--pitch10-secondary-note: rgb(11, 123, 86);
			--pitch10-primary-note: rgb(14, 154, 108);
			--noise1-secondary-channel: #ef3d23;
			--noise1-primary-channel: #fcf9ce;
			--noise1-secondary-note: #ef3d23;
			--noise1-primary-note: #fcf9ce;
			--noise2-secondary-channel: #dd002b;
			--noise2-primary-channel: #f73d61;
			--noise2-secondary-note: #dd002b;
			--noise2-primary-note: #f73d61;
			--noise3-secondary-channel: #d0e9ea;
			--noise3-primary-channel: #f3ffff;
			--noise3-secondary-note: #d0e9ea;
			--noise3-primary-note: #f3ffff;
			--noise4-secondary-channel: #ed9b24;
			--noise4-primary-channel: #ffc941;
			--noise4-secondary-note: #ed9b24;
			--noise4-primary-note: #ffc941;
			--noise5-secondary-channel: #663b00;
			--noise5-primary-channel: #ffe9cc;
			--noise5-secondary-note: #663b00;
			--noise5-primary-note: #ffe9cc;
			--mod1-secondary-channel: #001026;
			--mod1-primary-channel: #ffab19;
			--mod1-secondary-note: #001026;
			--mod1-primary-note: #ffab19;
			--mod2-secondary-channel: #603813;
			--mod2-primary-channel: #ffc93e;
			--mod2-secondary-note: #603813;
			--mod2-primary-note: #ffc93e;
			--mod3-secondary-channel: #1b75bb;
			--mod3-primary-channel: #e6e7e8;
			--mod3-secondary-note: #1b75bb;
			--mod3-primary-note: #e6e7e8;
			--mod4-secondary-channel: #404041;
			--mod4-primary-channel: #f05a28;
			--mod4-secondary-note: #404041;
			--mod4-primary-note: #f05a28;
			--disabled-note-primary: #ff6680;
			--disabled-note-secondary: #ff3355;
		   }

		div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0.5 !important;
		}

		   * {
		   --play-symbol:url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png");
		   --pause-symbol:url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png");
		   }
 
		   button.playButton::before {
			 background-image: url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png") !important;
			 background-size: 18px !important;
			 background-position: center !important;
			 background-repeat: no-repeat !important;
			 mask-size: 800px;
			 color: #fff0;
		 }
 
		 button.pauseButton::before {
			 background-image: url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png") !important;
			 background-size: 18px !important;
			 background-position: center !important;
			 background-repeat: no-repeat !important;
			 mask-size: 800px;
			   color: #fff0;
		 }

		   #text-content > section > h1 {
			 margin: auto;
			 content: url("https://file.garden/ZMQ0Om5nmTe-x2hq/AbyssBox%20Scratch%20Logo3.png");
		   }
		   .beepboxEditor,
		   #beepboxEditorContainer {
			 background-color: #111111 !important;
			 border-radius: 6px;
			 box-shadow: 0px 0px 0px 4px rgba(158, 158, 158, 0.91);
		   }
		   .beepboxEditor .loopEditor {
			 --editor-background: #111111 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .muteEditor {
			 --editor-background: #4d97ff40 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .pattern-area {
			 --editor-background: #292929 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .trackContainer svg {
			 --editor-background: #3100ff !important;
		   }
		   .beepboxEditor .muteEditor > :last-child {
			 --editor-background: #111111 !important;
		   }
		   .beepboxEditor #octaveScrollBarContainer {
			 background-color: #111111;
		   }
		   .beepboxEditor .muteButtonText {
			 transform: translate(0px, 1px) !important;
			 color: #777 !important;
		   }
		   .beepboxEditor .instrument-bar {
			 --text-color-lit: #111111 !important;
			 --text-color-dim: #4c4c4c !important;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument {
			 color: rgb(0, 0, 0) !important;
			 text-shadow: 0px 0px 4px var(--text-color-lit);
		   }
		   .beepboxEditor .instrument-bar .deactivated {
			 color: rgba(0, 0, 0, 1) !important;
			 text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		   }
		   .beepboxEditor .instrument-bar > :not(.last-button) {
			 border-color: var(--background-color-lit) !important;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument {
			 border-color: #111111 !important;
		   }
		   .beepboxEditor button, button {
			 color: #fff;
			 background: #3c236f;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument,
		   .beepboxEditor .filterEditor svg,
		   .beepboxEditor .fadeInOut svg,
		   .beepboxEditor .harmonics svg,
		   .beepboxEditor .spectrum svg {
			 background: rgb(255, 255, 255) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.7),
			   inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-thumb {
			 background: #fff !important;
		   }
		   .beepboxEditor input[type="range"]::-moz-range-thumb {
			 background: #000000 !important;
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-runnable-track {
			 background: rgb(127, 127, 127) !important;
		   }
		   .beepboxEditor input[type="range"]::-moz-range-track {
			 background: rgb(127, 127, 127) !important;
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-runnable-track::focus {
			 background: rgba(255, 255, 255, 0.2) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			   inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="range"]::-moz-range-track::focus {
			 background: rgba(255, 255, 255, 0.2) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			   inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="text"],
		   .beepboxEditor input[type="number"] {
			 font-size: inherit !important;
			 font-weight: bold !important;
			 font-family: inherit !important;
			 background: #202020 !important;
			 text-align: center !important;
			 border: 1px solid var(--input-box-outline);
			 color: #fff !important;
			 box-shadow: 0px 0px 0px 1px rgb(134, 134, 134) !important;
		   }
		   .beepboxEditor .prompt {
			 --primary-text: #fff;
			 --secondary-text: #fff;
			 --ui-widget-background: #351f5f;
			 color: #fff !important;
			 background: #202020 !important;
		   }
		   .beepboxEditor .trackContainer {
			 --editor-background: #000;
		   }
		   #text-content {
			 color: #fff;
			 background: #202020;
		   }
		   body:not(#secondImage) {
			 background: #202020;
		   }
		   body:not(#secondImage) input {
			 --primary-text: #000;
		   }
		   body:not(#secondImage) h1 {
			 color: #fff;
		   }
		  div#text-content {
			padding-top: 15px;
		  }
		  div#beepboxEditorContainer{
			padding-bottom: 15px;
		  }
		  div.channelBox {
			border-radius: 5px;
		  }
		  div.curChannelBox {
			border-radius: 5px;
		  }
		  div.muteEditor {
			border-radius: 0px !important;
		  }
		`,
        "Doom 1993": `
			:root { 		
			--page-margin: #470000; 		
			--editor-background: #470000; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: #ffffff; 		
			--secondary-text: #ffffff; 		
			--inverted-text:  #000000;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #ff6f00; 		
			--loop-accent: #ff0000; 		
			--link-accent: #962727; 		
			--ui-widget-background: #4f3b36;		
			--ui-widget-focus: #4f3b36; 		
			--pitch-background: #7d0000; 		
			--tonic: #ff0000; 		
			--fifth-note: #962727; 	
			--third-note: #d2192a;	
			--white-piano-key: #ccbca5; 		
			--black-piano-key: #40382f; 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #7d1f00; 		
			--track-editor-bg-pitch-dim: #401000; 		
			--track-editor-bg-noise: #7d0000; 		
			--track-editor-bg-noise-dim: #400000; 		
			--track-editor-bg-mod: #7d0028; 		
			--track-editor-bg-mod-dim: #470017; 		
			--multiplicative-mod-slider: #9f8460; 		
			--overwriting-mod-slider: #9f6460; 		
			--indicator-primary: #b38949; 		
			--indicator-secondary: #543d1d; 		
			--select2-opt-group: #4f3b19; 		
			--input-box-outline: #1a0404; 		
			--mute-button-normal: #dd5d5d;	 		
			--mute-button-mod: #ba3d36; 		
			--mod-label-primary: #541616; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--progress-bar: #ff0000;

			--pitch-secondary-channel-hue: 0; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 60; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -4; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 60; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -4; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 20; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -4; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 65; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 60; 		
			--pitch-primary-note-lum-scale: 0.05; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 60; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 25; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 75; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 
			
			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;
				}
		
			#text-content > section > h1 > font {
		display: none;
		}
		#text-content > section > h1 {
		margin: auto;
		content: url("./image_assets/AbyssBox_DOOM.png");
		}
				
				/* sets background image */
		body {
		background-image: url("./image_assets/doomsky.png") !important;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
			}
			/* make editor background transparent */
		#beepboxEditorContainer, .beepboxEditor, #text-content {
		}


			@font-face {
		   font-family: "doomfont";
		   src:
 		   url("./image_assets/doomfont.otf") format("opentype") tech(color-COLRv1),
			}

			html {
 		   font-family: 'doomfont';
			}
			div.channelBoxLabel {
				font-family: 'doomfont' !important;
			}

			`,
        "Undertale": `
			:root {
				--page-margin: #000;
				--editor-background: #000;
				--hover-preview: #fff;
				--playhead: rgba(255, 255, 255, 0.9);
				--primary-text: #fff;
				--secondary-text: #979797;
				--inverted-text: #000;
				--text-selection: rgba(255, 255, 255, .99);
				--box-selection-fill: #fff;
				--loop-accent: #f00;
				--link-accent: #0f0;
				--ui-widget-background: #4d4d4d;
				--ui-widget-focus: #000;
				--pitch-background: #2d2d2d73;
				--tonic: #c9c9c9;
				--fifth-note: #400000;
				--third-note: #073037;
				--white-piano-key: #fff;
				--black-piano-key: #000;
				--white-piano-key-text: #000;
				--black-piano-key-text: #fff;
				--use-color-formula: false;
			--pitch-channel-limit: 10;
				--track-editor-bg-pitch: #8b8b8b;
				--track-editor-bg-pitch-dim: #000;
				--track-editor-bg-noise: #5c5c5c;
				--track-editor-bg-noise-dim: #000;
				--track-editor-bg-mod: #585858;
				--track-editor-bg-mod-dim: #000;
				--multiplicative-mod-slider: #f00;
				--overwriting-mod-slider: #00f;
				--indicator-primary: #f00;
				--indicator-secondary: #919191;
				--select2-opt-group: #5d576f;
				--input-box-outline: #626262;
				--mute-button-normal: #ffffff;
				--mute-button-mod: #4f4f4f;
				--mod-label-primary: #f00;
				--progress-bar: #00ff00;

				--pitch1-secondary-channel: #590000;
			  --pitch1-primary-channel: #f00;
			  --pitch1-secondary-note: #590000;
			  --pitch1-primary-note: #f00;
			
			  --pitch2-secondary-channel: #00678a;
			  --pitch2-primary-channel: #00ffef;
			  --pitch2-secondary-note: #00678a;
			  --pitch2-primary-note: #00ffef;
			
			  --pitch3-secondary-channel: #b35600;
			  --pitch3-primary-channel: #ff7a00;
			  --pitch3-secondary-note: #b35600;
			  --pitch3-primary-note: #ff7a00;
			
			  --pitch4-secondary-channel: #002866;
			  --pitch4-primary-channel: #001aff;
			  --pitch4-secondary-note: #002866;
			  --pitch4-primary-note: #001aff;
			
			  --pitch5-secondary-channel: #005e0b;
			  --pitch5-primary-channel: #00ff1d;
			  --pitch5-secondary-note: #005e0b;
			  --pitch5-primary-note: #00ff1d;
			
			  --pitch6-secondary-channel: #b55d00;
			  --pitch6-primary-channel: #fe0;
			  --pitch6-secondary-note: #b55d00;
			  --pitch6-primary-note: #fe0;
			
			  --pitch7-secondary-channel: #6a00b3;
			  --pitch7-primary-channel: #a429f7;
			  --pitch7-secondary-note: #6a00b3;
			  --pitch7-primary-note: #a429f7;
			
			  --pitch8-secondary-channel: #02009f;
			  --pitch8-primary-channel: #0058ff;
			  --pitch8-secondary-note: #02009f;
			  --pitch8-primary-note: #0058ff;
			
			  --pitch9-secondary-channel: #5c5c5c;
			  --pitch9-primary-channel: #fff;
			  --pitch9-secondary-note: #5c5c5c;
			  --pitch9-primary-note: #fff;
			
			  --pitch10-secondary-channel: #5e2700;
			  --pitch10-primary-channel: #ffb300;
			  --pitch10-secondary-note: #5e2700;
			  --pitch10-primary-note: #ffb300;
			
			  --noise1-secondary-channel: #750000;
			  --noise1-primary-channel: #f00;
			  --noise1-secondary-note: #750000;
			  --noise1-primary-note: #f00;
			
			  --noise2-secondary-channel: #8567ff;
			  --noise2-primary-channel: #f00;
			  --noise2-secondary-note: #8567ff;
			  --noise2-primary-note: #f00;
			
			  --noise3-secondary-channel: #8567ff;
			  --noise3-primary-channel: #cec2ff;
			  --noise3-secondary-note: #8567ff;
			  --noise3-primary-note: #cec2ff;
			
			  --noise4-secondary-channel: #00266a;
			  --noise4-primary-channel: #ffe100;
			  --noise4-secondary-note: #00266a;
			  --noise4-primary-note: #ffe100;
			
			  --noise5-secondary-channel: #976a00;
			  --noise5-primary-channel: #ffe100;
			  --noise5-secondary-note: #976a00;
			  --noise5-primary-note: #ffe100;
			
			  --mod1-secondary-channel: #aaa;
			  --mod1-primary-channel: #fff;
			  --mod1-secondary-note: #aaa;
			  --mod1-primary-note: #fff;
			
			  --mod2-secondary-channel: #950000;
			  --mod2-primary-channel: #ff6000;
			  --mod2-secondary-note: #950000;
			  --mod2-primary-note: #ff6000;
			
			  --mod3-secondary-channel: #021300;
			  --mod3-primary-channel: #1db917;
			  --mod3-secondary-note: #021300;
			  --mod3-primary-note: #1db917;
			
			  --mod4-secondary-channel: #a00000;
			  --mod4-primary-channel: #ff252f;
			  --mod4-secondary-note: #a00000;
			  --mod4-primary-note: #ff252f;
			
			  --disabled-note-primary: #999;
			  --disabled-note-secondary: #696969;

			  --arrow-color: #f67c33;
			  --icon-color: #f67c33;
				}
				* {
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/cursor-heart.png"), auto !important;
					--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
					--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
					--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
					--text-enabled-icon:❤️ ;
					}
		
			
					div.promptContainerBG {
						background-color: var(--editor-background) !important;
						backdrop-filter: unset !important;
						opacity: 0.5 !important;
					}

			/* sets background image */
			body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/battlebg.png") !important;
			background-position: center;
			background-size: contain;
			background-attachment: fixed;
			background-repeat: no-repeat;
			}
			#text-content > section > h1 > font {
			display: none;
			}
			#text-content > section > h1 {
			margin: auto;
			content: url("https://choptop84.github.io/choptop84s-image-repository/UndertaleThemeLogo.png");
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/AbyssBoxUtThemeLogo.png");
 			background-size: contain;
 			background-position: center;
  			background-repeat: no-repeat;
			}

			div.selectContainer.menu.file select,
			div.selectContainer.menu.edit select,
			div.selectContainer.menu.preferences select {
				border-style: solid;
				border-color: #f67c33;
				border-radius: 0px;
			}
			div.selectContainer.menu.file,
			div.selectContainer.menu.edit,
			div.selectContainer.menu.preferences {
				--ui-widget-background: black;
				--icon-color: #f67c33;
				--arrow-color: #f67c33;
				color: #f67c33;
			}
			.beepboxEditor select:focus,
			.beepboxEditor .selectContainer:focus-within
			{
				border-color: #fbff4b !important;
				--ui-widget-background: black !important;
				--icon-color: #f00 !important;
				--arrow-color: #fbff4b !important;
				color: #fbff4b !important;

				--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
				--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
				--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
			}
			.beepboxEditor .menu.edit::before,
			.beepboxEditor .menu.file::before,
			.beepboxEditor .menu.preferences::before {
				background: var(--icon-color) !important;
			}
			.beepboxEditor .menu.edit::after,
			.beepboxEditor .menu.file::after,
			.beepboxEditor .menu.preferences::after {
				background: var(--arrow-color) !important;
			}

			#text-content {
				border-style: solid;
				border-radius: 0px;
				padding-left: 20px;
				padding-right: 20px;
				padding-top: 15px;
			}
		#beepboxEditorContainer {
			border-style: solid;
			border-radius: 0px;
			padding-left: 20px;
			padding-right: 20px;
			padding-bottom: 15px;
			}
			`,
        "Yume Nikki": `
						:root {		
			--page-margin: #000000; 		
			--editor-background: #000000; 		
			--hover-preview: white; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: white; 		
			--secondary-text: #ffcedd; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #7b2442; 		
			--link-accent: #f588ff; 		
			--ui-widget-background: #000000; 		
			--ui-widget-focus: #1f1f1f; 		
			--pitch-background: #1e0915; 		
			--tonic: #7b2442; 		
			--pitch2-background: #13040c;
			--fifth-note: #4a0008; 	
			--pitch9-background: #13040c;
			--pitch10-background: #13040c;
			--third-note: #481325;	
			--white-piano-key: #cca5c7; 		
			--black-piano-key: #402f2f;
			--white-piano-key-text: #131200;		
			--black-piano-key-text: #fff;		 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #731b50; 		
			--track-editor-bg-pitch-dim: #260019; 		
			--track-editor-bg-noise: #731b50; 		
			--track-editor-bg-noise-dim: #260019; 		
			--track-editor-bg-mod: #731b50; 		
			--track-editor-bg-mod-dim: #260019; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray; 
			--mod-title: #bf2c5d;
			--progress-bar: #bf2c5d;
			--octave-scrollbar: #4a0008;
			--empty-sample-bar: #0d0d0d;

			--pitch-secondary-channel-hue: -80; 		
			--pitch-secondary-channel-hue-scale: 0; 		
			--pitch-secondary-channel-sat: 43; 		
			--pitch-secondary-channel-sat-scale: 0.1; 		
			--pitch-secondary-channel-lum: 40; 		
			--pitch-secondary-channel-lum-scale: 0.05; 
		
			--pitch-primary-channel-hue: -53; 		
			--pitch-primary-channel-hue-scale: 6.1; 		
			--pitch-primary-channel-sat: 75; 		
			--pitch-primary-channel-sat-scale: 0.1; 		
			--pitch-primary-channel-lum: 67.5; 		
			--pitch-primary-channel-lum-scale: 0.05; 	
	
			--pitch-secondary-note-hue: -34; 		
			--pitch-secondary-note-hue-scale: 6.1; 		
			--pitch-secondary-note-sat: 93.9; 		
			--pitch-secondary-note-sat-scale: 0.1; 		
			--pitch-secondary-note-lum: 25; 		
			--pitch-secondary-note-lum-scale: 0.05; 
		
			--pitch-primary-note-hue: -53; 		
			--pitch-primary-note-hue-scale: 6.1; 		
			--pitch-primary-note-sat: 100; 		
			--pitch-primary-note-sat-scale: 0.05; 		
			--pitch-primary-note-lum: 85.6; 		
			--pitch-primary-note-lum-scale: 0.025; 
		
			--noise-secondary-channel-hue: 0; 		
			--noise-secondary-channel-hue-scale: 2; 		
			--noise-secondary-channel-sat: 65; 		
			--noise-secondary-channel-sat-scale: 0; 		
			--noise-secondary-channel-lum: 42; 		
			--noise-secondary-channel-lum-scale: 0; 
		
			--noise-primary-channel-hue: 0; 		
			--noise-primary-channel-hue-scale: 1; 		
			--noise-primary-channel-sat: 100; 		
			--noise-primary-channel-sat-scale: 1; 		
			--noise-primary-channel-lum: 63.5; 		
			--noise-primary-channel-lum-scale: 0; 
		
			--noise-secondary-note-hue: 24; 		
			--noise-secondary-note-hue-scale: 2; 		
			--noise-secondary-note-sat: 100; 		
			--noise-secondary-note-sat-scale: 0; 		
			--noise-secondary-note-lum: 35; 		
			--noise-secondary-note-lum-scale: 0; 	
	
			--noise-primary-note-hue: 24; 		
			--noise-primary-note-hue-scale: 2; 		
			--noise-primary-note-sat: 100; 		
			--noise-primary-note-sat-scale: 1; 		
			--noise-primary-note-lum: 60; 		
			--noise-primary-note-lum-scale: 1; 	
	
			--mod-secondary-channel-hue: 55; 		
			--mod-secondary-channel-hue-scale: 1.5; 		
			--mod-secondary-channel-sat: 100; 		
			--mod-secondary-channel-sat-scale: 0; 		
			--mod-secondary-channel-lum: 20; 		
			--mod-secondary-channel-lum-scale: 0; 
		
			--mod-primary-channel-hue: 55; 		
			--mod-primary-channel-hue-scale: 1.5; 		
			--mod-primary-channel-sat: 96; 		
			--mod-primary-channel-sat-scale: 0; 		
			--mod-primary-channel-lum: 50; 		
			--mod-primary-channel-lum-scale: 0; 
		
			--mod-secondary-note-hue: 55; 		
			--mod-secondary-note-hue-scale: 1.5; 		
			--mod-secondary-note-sat: 92; 		
			--mod-secondary-note-sat-scale: 0; 		
			--mod-secondary-note-lum: 45; 		
			--mod-secondary-note-lum-scale: 0; 
		
			--mod-primary-note-hue: 55; 		
			--mod-primary-note-hue-scale: 1.5; 		
			--mod-primary-note-sat: 96; 		
			--mod-primary-note-sat-scale: 0; 		
			--mod-primary-note-lum: 85; 		
			--mod-primary-note-lum-scale: 0; 	

			--note-flash: #ffffff;
			--note-flash-secondary: #ffffff77;

			--oscilloscope-line-R: #7b2442;
			--oscilloscope-line-L: var(--secondary-text);

			--scrollbar-color: #ffffff;
			--icon-color: #000;
			--arrow-color: #000;
				}
		* {
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
		--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
		--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
		--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		}
		
		.spIcon {
		--ui-widget-background: #93090f;
		}

		.beepboxEditor input[type="range"]::-moz-range-track
		{
			background: #4a0008 !important;
			border-radius: 0px;
		} /* Thanks to LeoV's Skeumorphic theme on this one */

			@font-face {
		   font-family: "AbyssType";
		   src:
 		   url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}

			/*#Hotdog {
				content: url("https://choptop84.github.io/choptop84s-image-repository/abclassic_hotdog.png");
			} */

			#text-content {
    				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/yumeNikkiBorder.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 12px; 
				border-image-repeat: repeat; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/yumeNikkiBorder.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 12px; 
				border-image-repeat: repeat;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}

				div.prompt.noSelection {
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/yumeNikkiBorder.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 12px; 
				border-image-repeat: repeat;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}

				.beepboxEditor select:focus,
				.beepboxEditor select:hover,
				.beepboxEditor .selectContainer:focus-within,
				.beepboxEditor button:hover,
				.beepboxEditor button:focus,
				#select2-pitchPresetSelect-container:hover,
				#select2-pitchPresetSelect-container:focus
				{
					--ui-widget-background: black !important;
					
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/yumeNikkiButton.png");
					border-image-slice: 6 fill; 
   					border-image-width: 8px; 
					border-image-repeat: repeat;
	
					--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
					--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
					--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
					--ui-widget-focus: #000;
				}

				.beepboxEditor .menu.edit::before,
				.beepboxEditor .menu.file::before,
				.beepboxEditor .menu.preferences::before {
					background: var(--icon-color) !important;
				}
				.beepboxEditor .menu.edit::after,
				.beepboxEditor .menu.file::after,
				.beepboxEditor .menu.preferences::after {
					background: var(--arrow-color) !important;
				}

				.beepboxEditor .channelBoxLabel {
					font-size: 14px !important;
					font-weight: unset !important;
				}
				
			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: #000000 !important;
			}
				
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;

				}

			@font-face {
		   font-family: "yumeNumbers";
		   src:
 		   url("https://choptop84.github.io/choptop84s-image-repository/yumeNumbers.otf") format("opentype") tech(color-COLRv1),
			}

			#text-content > section > h1 > font {
				display: none;
				}
				#text-content > section > h1 {
				margin: auto;
				content: url("https://choptop84.github.io/choptop84s-image-repository/AbyssBoxYumeNikkiThemeLogo.png");
				}

			/*html {
 		   	font-family: 'AbyssType';
			}*/

			div.channelBoxLabel {
				font-family: 'yumeNumbers' !important;
			}

			div.fadeInOut svg path {
			--ui-widget-background: #4a0008;
			}
			div.filterEditor svg path {
			--ui-widget-background: #4a0008;
			}
			`,
        "Windows Xp": `
			:root {		
			--page-margin: #edead9; 		
			--editor-background: #edead9; 		
			--hover-preview: black; 		
			--playhead: rgba(255, 255, 255, 0.9); 		
			--primary-text: #231f20; 		
			--secondary-text: #231f20; 		
			--inverted-text: black;	 		
			--text-selection: rgba(119,68,255,0.99); 		
			--box-selection-fill: #1e0915; 		
			--loop-accent: #003399; 		
			--link-accent: #003399; 		
			--ui-widget-background: #faf9f2; 		
			--ui-widget-focus: #faf9f2; 		
			--pitch-background: #ffffff; 		
			--tonic: #d5dbf5; 		
			--fifth-note: #e8e8e8; 	
			--third-note: #b6ceac;	
			--white-piano-key: #ebe2ca; 		
			--black-piano-key: #403a2f; 		
			--use-color-formula: true; 		
			--track-editor-bg-pitch: #cfcab2; 		
			--track-editor-bg-pitch-dim: #9c9781; 		
			--track-editor-bg-noise: #cfcab2; 		
			--track-editor-bg-noise-dim: #9c9781; 		
			--track-editor-bg-mod: #cfcab2; 		
			--track-editor-bg-mod-dim: #9c9781; 		
			--multiplicative-mod-slider: #9f6082; 		
			--overwriting-mod-slider: #9e3470; 		
			--indicator-primary: #b3498f; 		
			--indicator-secondary: #541d40; 		
			--select2-opt-group: #4f191e; 		
			--input-box-outline: #18041a; 		
			--mute-button-normal: #dd5d94;	 		
			--mute-button-mod: #ba364c; 		
			--mod-label-primary: #541625; 		
			--mod-label-secondary-text: rgb(120, 87, 86); 
			--mod-label-primary-text: gray;
			--progress-bar: #00ff00;

--pitch-secondary-channel-hue: 0;		
--pitch-secondary-channel-hue-scale: 6.1;		
--pitch-secondary-channel-sat: 43.3;		
--pitch-secondary-channel-sat-scale: 0.1;		
--pitch-secondary-channel-lum: 20;		
--pitch-secondary-channel-lum-scale: 0.05;
		
--pitch-primary-channel-hue: 0;		
--pitch-primary-channel-hue-scale: 6.1;		
--pitch-primary-channel-sat: 60;		
--pitch-primary-channel-sat-scale: 0.1;		
--pitch-primary-channel-lum: 47.5;		
--pitch-primary-channel-lum-scale: 0.05;
		
--pitch-secondary-note-hue: 0;		
--pitch-secondary-note-hue-scale: 6.1;		
--pitch-secondary-note-sat: 43.9;		
--pitch-secondary-note-sat-scale: 0.1;		
--pitch-secondary-note-lum: 25;		
--pitch-secondary-note-lum-scale: 0.05;
		
--pitch-primary-note-hue: 0;		
--pitch-primary-note-hue-scale: 6.1;		
--pitch-primary-note-sat: 60;		
--pitch-primary-note-sat-scale: 0.05;		
--pitch-primary-note-lum: 65.6;		
--pitch-primary-note-lum-scale: 0.025;
		
--noise-secondary-channel-hue: 0;		
--noise-secondary-channel-hue-scale: 2;		
--noise-secondary-channel-sat: 25;		
--noise-secondary-channel-sat-scale: 0;		
--noise-secondary-channel-lum: 22;		
--noise-secondary-channel-lum-scale: 0;
		
--noise-primary-channel-hue: 0;		
--noise-primary-channel-hue-scale: 2;		
--noise-primary-channel-sat: 33;		
--noise-primary-channel-sat-scale: 0;		
--noise-primary-channel-lum: 43.5;		
--noise-primary-channel-lum-scale: 0;
		
--noise-secondary-note-hue: 0;		
--noise-secondary-note-hue-scale: 2;		
--noise-secondary-note-sat: 33.5;		
--noise-secondary-note-sat-scale: 0;		
--noise-secondary-note-lum: 35;		
--noise-secondary-note-lum-scale: 0;	
	
--noise-primary-note-hue: 0;		
--noise-primary-note-hue-scale: 2;		
--noise-primary-note-sat: 46.5;		
--noise-primary-note-sat-scale: 0;		
--noise-primary-note-lum: 54;		
--noise-primary-note-lum-scale: 0;	
	
--mod-secondary-channel-hue: 192;		
--mod-secondary-channel-hue-scale: 1.5;		
--mod-secondary-channel-sat: 88;		
--mod-secondary-channel-sat-scale: 0;		
--mod-secondary-channel-lum: 30;		
--mod-secondary-channel-lum-scale: 0;	
	
--mod-primary-channel-hue: 192;		
--mod-primary-channel-hue-scale: 1.5;		
--mod-primary-channel-sat: 56;		
--mod-primary-channel-sat-scale: 0;		
--mod-primary-channel-lum: 60;		
--mod-primary-channel-lum-scale: 0;	
	
--mod-secondary-note-hue: 192;		
--mod-secondary-note-hue-scale: 1.5;		
--mod-secondary-note-sat: 42;		
--mod-secondary-note-sat-scale: 0;		
--mod-secondary-note-lum: 25;		
--mod-secondary-note-lum-scale: 0;	
	
--mod-primary-note-hue: 192;		
--mod-primary-note-hue-scale: 1.5;		
--mod-primary-note-sat: 56;		
--mod-primary-note-sat-scale: 0;		
--mod-primary-note-lum: 65;		
--mod-primary-note-lum-scale: 0;	

			--note-flash: #ffffff77;
			--note-flash-secondary: #ffffff66;
				}
				
				@font-face {
					font-family: "tahoma";
					src:
					 url("./image_assets/tahoma.otf") format("opentype") tech(color-COLRv1),
					 image-rendering: -moz-crisp-edges !important;         /* Firefox */
					 image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					 image-rendering: -o-crisp-edges !important;            /* Opera */
					 image-rendering: pixelated !important;                 /* Future browsers */
					 image-rendering: optimizeSpeed !important;             /* IE */

				}
		
				div.promptContainerBG {
					display: none !important;
				}

				html {
				font-family: 'tahoma' !important;
			   font-size: 150% !important;
				}
				div.channelBoxLabel {
					font-family: 'tahoma' !important;
				}

				.beepboxEditor .promptContainer {
				}

				div.prompt.noSelection {
					margin: auto;
					text-align: center;
					background: var(--editor-background);
					border-radius: 15px;
					border: 0px solid var(--ui-widget-background) !important;
					padding-left: 20px !important;
					box-shadow: 6px 6px 27px 4px rgba(0, 0, 0, 0.5) !important;
					padding-top: 6px !important;
					padding-right: 20px !important;
					padding-bottom: 20px !important;
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/xpborder.png") !important;
					border-image-slice: 34 !important;
					border-image-width: 50px !important;
					border-width: unset !important;

					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
				}

				div.prompt.noSelection button.cancelButton {
					opacity: 0;
				}

				div.promptTitle {
					text-align: left !important;
					color: white !important;
				}
				.layoutExt::before {
					content: "layout.exe";
				}
				.layoutTitle {
					display: none;
				}
				.channelExt::after {
					content: "channelSettings.exe";
				}
				.channelTitle {
					display: none;
				}
				.limiterExt::after {
					content: "limiter.exe";
				}
				.limiterTitle {
					display: none;
				}

				.bpmTitle {
					display: none;
				}
				.bpmExt::after {
					content: "bpb.exe";
				}

				.gerTitle {
					display: none;
				}
				.gerExt::after {
					content: "euclidianRhythm.exe";
				}

				.samplesTitle {
					display: none;
				}
				.samplesExt::after {
					content: "sampler.exe";
					margin-bottom: 0.5em;

				}
				.samplesExt {
					padding-bottom: 8px;
				}

				.importTitle {
					display: none;
				}
				.importExt::after {
					content: "import.exe";
				}

				.exportTitle {
					display: none;
				}
				.exportExt::after {
					content: "export.exe";
				}

				.import-instrumentTitle {
					display: none;
				}
				.import-instrumentExt::after {
					content: "importInstrument.exe";
				}

				.export-instrumentTitle {
					display: none;
				}
				.export-instrumentExt::after {
					content: "exportInstrument.exe";
				}

				.song-lengthTitle {
					display: none;
				}
				.song-lengthExt::after {
					content: "songExtender.exe";
				}

				.mnsTitle {
					display: none;
				}
				.mnsExt::after {
					content: "moveNotesSideways.exe";
				}

				.themeExt::after {
					content: "setTheme.exe";
				}
				.themeTitle {
					display: none;
				}

				.customThemeExt::after {
					content: "customThemeEditor.exe";
				}
				.customThemeTitle {
					display: none;
				}

				.nrsTitle {
					display: none;
				}
				.nrsExt::after {
					content: "setupMidiKeyboard.exe";
				}

				.beepboxEditor .promptContainer::before {
					background: #fff0;
				}

		* {
		cursor: url("./image_assets/xpcursor.png"), auto !important;
		--play-symbol:url("./image_assets/xpPlay.png");
		--pause-symbol:url("./image_assets/xpPause.png");
		--record-symbol:url("./image_assets/xpRecord.png");
		--stop-symbol:url("./image_assets/xpStop.png");
		--prev-bar-symbol:url("./image_assets/xpBackward.png");
		--next-bar-symbol:url("./image_assets/xpForward.png");
		--file-page-symbol: url("./image_assets/xpFile.png");
		--edit-pencil-symbol: url("./image_assets/xpEdit.png");
		--preferences-gear-symbol: url("./image_assets/xpPreferences.png");
		--muted-symbol: url("./image_assets/xpSpeakerMute.png");
		--unmuted-symbol: url("./image_assets/xpSpeaker.png");
		--volume-symbol: url("./image_assets/xpSpeaker.png");
		--zoom-in-symbol: url("./image_assets/xpZoomIn.png");
		--zoom-out-symbol: url("./image_assets/xpZoomOut.png");
		}

		.beepboxEditor button,
		button.mobilePatternButton,
		button.mobileTrackButton,
		button.mobileSettingsButton,
		button.mobilePlayButton,
		button.mobilePauseButton,
		button.mobileNextBarButton,
		button.mobilePrevBarButton,
		button.playButton,
		button.pauseButton, 
		button.recordButton, 
		button.stopButton,
		button.nextBarButton, 
		button.prevBarButton, 
		button.copyButton, 
		button.pasteButton, 
		button.exportInstrumentButton, 
		button.importInstrumentButton, 
		.beepboxEditor select, 
		.beepboxEditor .select2-selection__rendered {
				cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
			}

		div.mute-button::before {
			background-image: url("./image_assets/xpSpeaker.png") !important;
			background-size: 120% !important;
			background-position-x: center !important;
			background-position-y: center !important;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		div.mute-button.muted::before {
			background-image: url("./image_assets/xpSpeakerMute.png") !important;
			background-size: 120% !important;
			background-position-x: center !important;
			background-position-y: center !important;
			background-repeat: no-repeat !important;
			
			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		button.recordButton::Before {
			background-image: url("./image_assets/xpRecord.png") !important;
			background-size: 64% !important;
			background-position: center !important;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		button.stopButton::Before {
			background-image: url("./image_assets/xpStop.png") !important;
			background-size: 64% !important;
			background-position: center !important;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		button.pauseButton::Before {
			background-image: url("./image_assets/xpPause.png") !important;
			background-size: 64% !important;
			background-position: center !important;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		.beepboxEditor span.volume-speaker {
			background-image: url("./image_assets/xpSpeaker.png");
			background-position: center !important;
			background-repeat: no-repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
			}

		div.selectContainer.menu.file::before {

			background-image: url("./image_assets/xpFile.png");
			background-size: 64%;
			background-position-x: center;
			background-position-y: center;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		div.selectContainer.menu.edit::before {

			background-image: url("./image_assets/xpEdit.png");
			background-size: 64%;
			background-position-x: center;
			background-position-y: center;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}
		div.selectContainer.menu.preferences::before {

			background-image: url("./image_assets/xpPreferences.png");
			background-size: 64%;
			background-position-x: center;
			background-position-y: center;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}
		button.playButton::before {

			background-image: url("./image_assets/xpPlay.png") !important;
			background-size: 64% !important;
			background-position: center !important;


			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		.beepboxEditor button.prevBarButton::before {
			background-image: url("./image_assets/xpBackward.png") !important;
			background-size: 64% !important;
			background-position: center !important;


			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		.beepboxEditor button.nextBarButton::before {
			background-image: url("./image_assets/xpForward.png") !important;
			background-size: 64% !important;
			background-position: center !important;


			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		.beepboxEditor .zoomInButton::before {
			background-image: url("./image_assets/xpZoomIn.png") !important;
			background-position: center !important;


			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		.beepboxEditor .zoomOutButton::before {
			background-image: url("./image_assets/xpZoomOut.png") !important;
			background-position: center !important;


			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

		.beepboxEditor input[type="range"]::-moz-range-thumb {
			background-image: url("./image_assets/scrollbar.png") !important;
			background-position: center !important;
			background-size: inherit !important;

			border-radius: 0px !important;
			width: 13px !important;
			height: 23px !important;
			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */

		}

			/* NON ICON STUFFS SO DON'T GET CONFUSED DUMMY!!! */

			#text-content > section > h1 > font {
		display: none;
		}
		#text-content > section > h1 {
		margin: auto;
		content: url("./image_assets/AbyssBox_XP.png");
		}

				/* sets background image */
		body {
		background-image: url("./image_assets/xphills.png") !important;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
			}

			#text-content {
    				border-image-source: url("./image_assets/xptextbg.png");
    				border-image-slice: 11 fill; 
   				border-image-width: 11px; 
				border-image-repeat: stretch;
    				background-color: transparent; 
    				padding: 14px; 
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/xptextbg.png");
    				border-image-slice: 11 fill; 
   				border-image-width: 11px; 
				border-image-repeat: stretch;
    				background-color: transparent; 
    				padding: 13px; 
				}

			#firstImage {
				background-image: url("./image_assets/xpsongeditorbg.png") !important;
				background-repeat: no-repeat !important;
				background-size: 100% 100% !important;
			}

			div.menu-area {
				--ui-widget-background: #edead9; 
			}
			select {
				--ui-widget-background: #edead9; 
				cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
			}
			div.playback-bar-controls {
				--ui-widget-background: #edead9; 
			}

			.beepboxEditor input[type="range"]::-moz-range-track
			{
				background: rgba(222, 217, 189, 0.2) !important;
				box-shadow:
					0px 0px 1px 1px rgba(0, 0, 0, 0.0), 
					inset 0px 1px 2px 0px rgb(125, 120, 95), 
					inset 0px -1px 0px 0px rgb(255, 255, 255)
				;
				border-radius: 4px;
			} /* Thanks to LeoV's Skeumorphic theme on this one */
			
			.beepboxEditor input[type="range"]::-moz-range-track {
				height: 3px !important;
			}
			
			.beepboxEditor select:focus {
					border-image-source: url("./image_assets/xpbuttonpressedbg.png");
					border-image-slice: 4 fill; 
					border-image-width: 4px; 
					border-image-repeat: repeat;
					background-color: transparent; 
					padding: 6px; 
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}

				.beepboxEditor input[type="checkbox"]
				{
					appearance: none;
					background: rgba(255, 255, 255, 1);
					color: currentColor;
					border-radius: 0px;
					width: 13px !important;
					height: 13px !important;
					background-image:url("./image_assets/xpCheckmarkBlank.png");
					background-repeat:no-repeat;

					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
					transform: scale(2) !important;
					}

				.beepboxEditor input[type="checkbox"]:checked
				{
					display: flex;
					justify-content: center;
					transform: scale(2) !important;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked:after
				{
					width: 13px;
					height: 13px;
					text-align: center;
					content: "";
					background-repeat:no-repeat;
					background-image:url("./image_assets/xpCheckmark.png");
					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
				}

				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}

				.beepboxEditor input[type="range"]::-webkit-slider-thumb
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]::-ms-thumb
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]::-ms-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]:focus::-ms-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-thumb
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="range"]:focus::-moz-range-track
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="text"],
				.beepboxEditor input[type="number"]
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="checkbox"]
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked:after
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
	
				div.selectRow span 
				{
					cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
				}
				 


			`,
        "corporate dark": `
			:root {
			--page-margin: #1f1f1f;
			--editor-background: #1f1f1f;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #e8e8e8;
			--secondary-text: #8c8c8c;
			--inverted-text: #1D1C1D;
			--text-selection: #C249DD;
			--box-selection-fill: rgba(0,0,0,0.2);
			--loop-accent: #C249DD;
			--link-accent: #0E9DD3;
			--ui-widget-background: #303134;
			--ui-widget-focus: #5B5957;
			--pitch-background: #3e3f42;
			--tonic: #303134;
			--fifth-note: #98809D;
			--third-note: #62738b;
			--white-piano-key: white;
			--black-piano-key: #1D1C1D;
			--white-piano-key-text: #1D1C1D;
			--black-piano-key-text: white;
			--use-color-formula: false;
			--track-editor-bg-pitch: #303134;
			--track-editor-bg-pitch-dim: #1d1e20;
			--track-editor-bg-noise: #303134;
			--track-editor-bg-noise-dim: #1d1e20;
			--track-editor-bg-mod: #46524a;
			--track-editor-bg-mod-dim: #2c352f;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #C249DD;
			--indicator-secondary: #602670;
			--select2-opt-group: #474747;
			--input-box-outline: #F4EDE4;
			--mute-button-normal: #DE8969;
			--mute-button-mod: #C05B8C;
			--pitch-channel-limit: 4;
			--noise-channel-limit: 3;
			--pitch1-secondary-channel: #17616B;
			--pitch1-primary-channel:   #36C5F0;
			--pitch1-secondary-note:    #17616B;
			--pitch1-primary-note:      #36C5F0;
			--pitch2-secondary-channel: #185F34;
			--pitch2-primary-channel:   #2EB67D;
			--pitch2-secondary-note:    #185F34;
			--pitch2-primary-note:      #2EB67D;
			--pitch3-secondary-channel: #755617;
			--pitch3-primary-channel:   #ECB22E;
			--pitch3-secondary-note:    #755617;
			--pitch3-primary-note:      #ECB22E;
			--pitch4-secondary-channel: #821237;
			--pitch4-primary-channel:   #E01E5A;
			--pitch4-secondary-note:    #821237;
			--pitch4-primary-note:      #E01E5A;
			--pitch5-secondary-channel: #D020D0;
			--pitch5-primary-channel:   #FF90FF;
			--pitch5-secondary-note:    #E040E0;
			--pitch5-primary-note:      #FFC0FF;
			--pitch6-secondary-channel: #7777B0;
			--pitch6-primary-channel:   #A0A0FF;
			--pitch6-secondary-note:    #8888D0;
			--pitch6-primary-note:      #D0D0FF;
			--pitch7-secondary-channel: #8AA100;
			--pitch7-primary-channel:   #DEFF25;
			--pitch7-secondary-note:    #AAC700;
			--pitch7-primary-note:      #E6FF92;
			--pitch8-secondary-channel: #DF0019;
			--pitch8-primary-channel:   #FF98A4;
			--pitch8-secondary-note:    #FF4E63;
			--pitch8-primary-note:      #FFB2BB;
			--pitch9-secondary-channel: #00A170;
			--pitch9-primary-channel:   #50FFC9;
			--pitch9-secondary-note:    #00C78A;
			--pitch9-primary-note:      #83FFD9;
			--pitch10-secondary-channel:#A11FFF;
			--pitch10-primary-channel:  #CE8BFF;
			--pitch10-secondary-note:   #B757FF;
			--pitch10-primary-note:     #DFACFF;
			--noise1-secondary-channel: #424242;
			--noise1-primary-channel:   #AAAAAA;
			--noise1-secondary-note:    #424242;
			--noise1-primary-note:      #AAAAAA;
			--noise2-secondary-channel: #5E3A2D;
			--noise2-primary-channel:   #DE8969;
			--noise2-secondary-note:    #5E3A2D;
			--noise2-primary-note:      #DE8969;
			--noise3-secondary-channel: #32595B;
			--noise3-primary-channel:   #78D7DD;
			--noise3-secondary-note:    #32595B;
			--noise3-primary-note:      #78D7DD;
			--noise4-secondary-channel: #7A4F9A;
			--noise4-primary-channel:   #AF82D2;
			--noise4-secondary-note:    #9E71C1;
			--noise4-primary-note:      #D4C1EA;
			--noise5-secondary-channel: #607837;
			--noise5-primary-channel:   #A2BB77;
			--noise5-secondary-note:    #91AA66;
			--noise5-primary-note:      #C5E2B2;
			--mod1-secondary-channel:   #339955;
			--mod1-primary-channel:     #77fc55;
			--mod1-secondary-note:      #77ff8a;
			--mod1-primary-note:        #cdffee;
			--mod2-secondary-channel:   #993355;
			--mod2-primary-channel:     #f04960;
			--mod2-secondary-note:      #f057a0;
			--mod2-primary-note:        #ffb8de;
			--mod3-secondary-channel:   #553399;
			--mod3-primary-channel:     #8855fc;
			--mod3-secondary-note:      #aa64ff;
			--mod3-primary-note:	    #f8ddff;
			--mod4-secondary-channel:   #a86436;
			--mod4-primary-channel:     #c8a825;
			--mod4-secondary-note:      #e8ba46;
			--mod4-primary-note:        #fff6d3;
			--mod-label-primary:        #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text:   black;
			--disabled-note-primary:    #999;
			--disabled-note-secondary:  #666;
			--mod-title: #1D1C1D;
			}

			.channelBox {
			border-radius: 25px;
			}

			button:hover {
			border-radius: 4px;
			background-color: #1d1e20 !important;
			}

			select:hover {
			border-radius: 4px !important;
			background-color: #1d1e20 !important;
			}

			#select2-pitchPresetSelect-container:hover {
			border-radius: 4px !important;
			background-color: #1d1e20 !important;
			}`,
        "corporate light": `
			:root {
			--page-margin: white;
			--editor-background: white;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #1D1C1D;
			--secondary-text: #A5A19B;
			--inverted-text: #1D1C1D;
			--text-selection: #C249DD;
			--box-selection-fill: rgba(0,0,0,0.2);
			--loop-accent: #C249DD;
			--link-accent: #0E9DD3;
			--ui-widget-background: #F4EDE4;
			--ui-widget-focus: white;
			--pitch-background: #E8DED1;
			--tonic: #E6B8A8;
			--fifth-note: #DB99EA;
			--third-note: #99c3ff;
			--white-piano-key: white;
			--black-piano-key: #1D1C1D;
			--white-piano-key-text: #1D1C1D;
			--black-piano-key-text: white;
			--use-color-formula: false;
			--track-editor-bg-pitch: #E8DED1;
			--track-editor-bg-pitch-dim: #ecc6ba;
			--track-editor-bg-noise: #E8DED1;
			--track-editor-bg-noise-dim: #ecc6ba;
			--track-editor-bg-mod: #87BB9B;
			--track-editor-bg-mod-dim: #6baa83;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #C249DD;
			--indicator-secondary: #602670;
			--select2-opt-group: #474747;
			--input-box-outline: #F4EDE4;
			--mute-button-normal: #DE8969;
			--mute-button-mod: #C05B8C;
			--pitch-channel-limit: 4;
			--noise-channel-limit: 3;
			--pitch1-secondary-channel: #17616B;
			--pitch1-primary-channel:   #36C5F0;
			--pitch1-secondary-note:    #17616B;
			--pitch1-primary-note:      #36C5F0;
			--pitch2-secondary-channel: #185F34;
			--pitch2-primary-channel:   #2EB67D;
			--pitch2-secondary-note:    #185F34;
			--pitch2-primary-note:      #2EB67D;
			--pitch3-secondary-channel: #755617;
			--pitch3-primary-channel:   #ECB22E;
			--pitch3-secondary-note:    #755617;
			--pitch3-primary-note:      #ECB22E;
			--pitch4-secondary-channel: #821237;
			--pitch4-primary-channel:   #E01E5A;
			--pitch4-secondary-note:    #821237;
			--pitch4-primary-note:      #E01E5A;
			--pitch5-secondary-channel: #D020D0;
			--pitch5-primary-channel:   #FF90FF;
			--pitch5-secondary-note:    #E040E0;
			--pitch5-primary-note:      #FFC0FF;
			--pitch6-secondary-channel: #7777B0;
			--pitch6-primary-channel:   #A0A0FF;
			--pitch6-secondary-note:    #8888D0;
			--pitch6-primary-note:      #D0D0FF;
			--pitch7-secondary-channel: #8AA100;
			--pitch7-primary-channel:   #DEFF25;
			--pitch7-secondary-note:    #AAC700;
			--pitch7-primary-note:      #E6FF92;
			--pitch8-secondary-channel: #DF0019;
			--pitch8-primary-channel:   #FF98A4;
			--pitch8-secondary-note:    #FF4E63;
			--pitch8-primary-note:      #FFB2BB;
			--pitch9-secondary-channel: #00A170;
			--pitch9-primary-channel:   #50FFC9;
			--pitch9-secondary-note:    #00C78A;
			--pitch9-primary-note:      #83FFD9;
			--pitch10-secondary-channel:#A11FFF;
			--pitch10-primary-channel:  #CE8BFF;
			--pitch10-secondary-note:   #B757FF;
			--pitch10-primary-note:     #DFACFF;
			--noise1-secondary-channel: #424242;
			--noise1-primary-channel:   #AAAAAA;
			--noise1-secondary-note:    #424242;
			--noise1-primary-note:      #AAAAAA;
			--noise2-secondary-channel: #5E3A2D;
			--noise2-primary-channel:   #DE8969;
			--noise2-secondary-note:    #5E3A2D;
			--noise2-primary-note:      #DE8969;
			--noise3-secondary-channel: #32595B;
			--noise3-primary-channel:   #78D7DD;
			--noise3-secondary-note:    #32595B;
			--noise3-primary-note:      #78D7DD;
			--noise4-secondary-channel: #7A4F9A;
			--noise4-primary-channel:   #AF82D2;
			--noise4-secondary-note:    #9E71C1;
			--noise4-primary-note:      #D4C1EA;
			--noise5-secondary-channel: #607837;
			--noise5-primary-channel:   #A2BB77;
			--noise5-secondary-note:    #91AA66;
			--noise5-primary-note:      #C5E2B2;
			--mod1-secondary-channel:   #339955;
			--mod1-primary-channel:     #77fc55;
			--mod1-secondary-note:      #77ff8a;
			--mod1-primary-note:        #cdffee;
			--mod2-secondary-channel:   #993355;
			--mod2-primary-channel:     #f04960;
			--mod2-secondary-note:      #f057a0;
			--mod2-primary-note:        #ffb8de;
			--mod3-secondary-channel:   #553399;
			--mod3-primary-channel:     #8855fc;
			--mod3-secondary-note:      #aa64ff;
			--mod3-primary-note:	    #f8ddff;
			--mod4-secondary-channel:   #a86436;
			--mod4-primary-channel:     #c8a825;
			--mod4-secondary-note:      #e8ba46;
			--mod4-primary-note:        #fff6d3;
			--mod-label-primary:        #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text:   black;
			--disabled-note-primary:    #999;
			--disabled-note-secondary:  #666;
			--mod-title: #1D1C1D;
			}

			.channelBox {
			border-radius: 25px;
			}

			button:hover {
			border-radius: 4px;
			background-color: #dbd2c5 !important;
			}

			select:hover {
			border-radius: 4px !important;
			background-color: #dbd2c5 !important;
			}

			#select2-pitchPresetSelect-container:hover {
			border-radius: 4px !important;
			background-color: #dbd2c5 !important;
			}`,
        "Terminal 2.0 (AB)": `
			:root { 
			--page-margin: black; 
			--editor-background: black; 
			--hover-preview: white; 
			--playhead: white; 
			--primary-text: #26ff00; 
			--secondary-text: #0d6d00; 
			--inverted-text: #000000; 
			--text-selection: rgba(119,68,255,0.99); 
			--box-selection-fill: rgba(255,255,255,0.2); 
			--loop-accent: #1eff00; 
			--link-accent: #8dff7e; 
			--ui-widget-background: #000000; 
			--ui-widget-focus: #242424; 
			--pitch-background: #0d0d0d50; 
			--tonic: #06350090; 
			--fifth-note: #20202090; 
			--third-note: #2f571f8f;
			--white-piano-key: #ffffff; 
			--black-piano-key: #000000; 
			--white-piano-key-text: #131200; 
			--black-piano-key-text: #fff; 
			--use-color-formula: false;
			--pitch-channel-limit: 10; 
			--track-editor-bg-pitch: #152912; 
			--track-editor-bg-pitch-dim: #091307; 
			--track-editor-bg-noise: #1a1a1a; 
			--track-editor-bg-noise-dim: #333; 
			--track-editor-bg-mod: #000000; 
			--track-editor-bg-mod-dim: #000000; 
			--multiplicative-mod-slider: #073c00; 
			--overwriting-mod-slider: #0c6700; 
			--indicator-primary: #139f00; 
			--indicator-secondary: #1eff00; 
			--select2-opt-group: #171717; 
			--input-box-outline: #00ff00; 
			--mute-button-normal: #00ff44; 
			--mute-button-mod: #44ff00; 
			--progress-bar: #00ff00;
			--pitch1-secondary-channel: #0099A1; 
			--pitch1-primary-channel: #25F3FF; 
			--pitch1-secondary-note: #00BDC7; 
			--pitch1-primary-note: #92F9FF; 
			--pitch2-secondary-channel: #A1A100; 
			--pitch2-primary-channel: #FFFF25; 
			--pitch2-secondary-note: #C7C700; 
			--pitch2-primary-note: #FFFF92; 
			--pitch3-secondary-channel: #C75000; 
			--pitch3-primary-channel: #FF9752; 
			--pitch3-secondary-note: #FF771C; 
			--pitch3-primary-note: #FFCDAB; 
			--pitch4-secondary-channel: #00A100; 
			--pitch4-primary-channel: #50FF50; 
			--pitch4-secondary-note: #00C700; 
			--pitch4-primary-note: #A0FFA0; 
			--pitch5-secondary-channel: #D020D0; 
			--pitch5-primary-channel: #FF90FF; 
			--pitch5-secondary-note: #E040E0; 
			--pitch5-primary-note: #FFC0FF; 
			--pitch6-secondary-channel: #7777B0; 
			--pitch6-primary-channel: #A0A0FF; 
			--pitch6-secondary-note: #8888D0; 
			--pitch6-primary-note: #D0D0FF; 
			--pitch7-secondary-channel: #8AA100; 
			--pitch7-primary-channel: #DEFF25; 
			--pitch7-secondary-note: #AAC700; 
			--pitch7-primary-note: #E6FF92; 
			--pitch8-secondary-channel: #DF0019; 
			--pitch8-primary-channel: #FF98A4; 
			--pitch8-secondary-note: #FF4E63; 
			--pitch8-primary-note: #FFB2BB; 
			--pitch9-secondary-channel: #00A170; 
			--pitch9-primary-channel: #50FFC9; 
			--pitch9-secondary-note: #00C78A; 
			--pitch9-primary-note: #83FFD9; 
			--pitch10-secondary-channel: #A11FFF; 
			--pitch10-primary-channel: #CE8BFF; 
			--pitch10-secondary-note: #B757FF; 
			--pitch10-primary-note: #DFACFF; 
			--noise1-secondary-channel: #6F6F6F; 
			--noise1-primary-channel: #AAAAAA; 
			--noise1-secondary-note: #A7A7A7; 
			--noise1-primary-note: #E0E0E0; 
			--noise2-secondary-channel: #996633; 
			--noise2-primary-channel: #DDAA77; 
			--noise2-secondary-note: #CC9966; 
			--noise2-primary-note: #F0D0BB; 
			--noise3-secondary-channel: #4A6D8F; 
			--noise3-primary-channel: #77AADD; 
			--noise3-secondary-note: #6F9FCF; 
			--noise3-primary-note: #BBD7FF; 
			--noise4-secondary-channel: #7A4F9A; 
			--noise4-primary-channel: #AF82D2; 
			--noise4-secondary-note: #9E71C1; 
			--noise4-primary-note: #D4C1EA; 
			--noise5-secondary-channel: #607837; 
			--noise5-primary-channel: #A2BB77; 
			--noise5-secondary-note: #91AA66; 
			--noise5-primary-note: #C5E2B2; 
			--mod1-secondary-channel: #339955; 
			--mod1-primary-channel: #77fc55; 
			--mod1-secondary-note: #77ff8a; 
			--mod1-primary-note: #cdffee; 
			--mod2-secondary-channel: #993355; 
			--mod2-primary-channel: #f04960; 
			--mod2-secondary-note: #f057a0; 
			--mod2-primary-note: #ffb8de; 
			--mod3-secondary-channel: #553399; 
			--mod3-primary-channel: #8855fc; 
			--mod3-secondary-note: #aa64ff; 
			--mod3-primary-note: #f8ddff; 
			--mod4-secondary-channel: #a86436; 
			--mod4-primary-channel: #c8a825; 
			--mod4-secondary-note: #e8ba46; 
			--mod4-primary-note: #fff6d3; 
			--mod-label-primary: #164705; 
			--mod-label-secondary-text: #333; 
			--mod-label-primary-text: #44ff00; 
			--disabled-note-primary: #999; 
			--disabled-note-secondary: #666; 
			--note-flash: #a4ff82; 
			--note-flash-secondary: #dffbd57a; }
			
			.overlay {
				background-image: url("https://choptop84.github.io/choptop84s-image-repository/lines2.png") !important;
				background-size: 10%;
			}

						@font-face {
					   font-family: "Workbench";
					   src:
						url("./image_assets/Workbench.ttf") format("truetype") tech(color-COLRv1),
						}
			
						html {
							font-family: 'Workbench';
						}
			
						div.channelBoxLabel {
							font-family: 'Workbench' !important;
						}
			
							#firstImage {
								background-image: url("https://choptop84.github.io/choptop84s-image-repository/lines.png") !important;
								background-repeat: repeat !important;
								background-size: 40% 40% !important;
								opacity: 70%;
							}
			
						#modTitle::before {
							content: "> AbyssBox Terminal 2.0" !important;
						}
			`,
        "Slushie": `
			:root { 
				--page-margin: #040814; 
				--editor-background: #040814; 
				--hover-preview: #c6f7ff; 
				--playhead: white; 
				--primary-text: #d3f3ff; 
				--secondary-text: #6f72b5; 
				--inverted-text: black; 
				--text-selection: rgba(119,68,255,0.99); 
				--box-selection-fill: rgb(43 70 171 / 62%); 
				--loop-accent: #573ebb; 
				--link-accent: #98f; 
				--ui-widget-background: #2e2f44; 
				--ui-widget-focus: #2b2c46; 
				--pitch-background: #353654; 
				--tonic: #716fe3; 
				--fifth-note: #76469b;
				--third-note: #534488; 
				--white-piano-key: #abbce3; 
				--black-piano-key: #2f235e; 
				--use-color-formula: false;
			--pitch-channel-limit: 10; 
				--track-editor-bg-pitch: #3a3b5c; 
				--track-editor-bg-pitch-dim: #1f2036; 
				--track-editor-bg-noise: #3c3554; 
				--track-editor-bg-noise-dim: #1e1834; 
				--track-editor-bg-mod: #30335e; 
				--track-editor-bg-mod-dim: #161938; 
				--multiplicative-mod-slider: #e29cff; 
				--overwriting-mod-slider: #495789; 
				--indicator-primary: #e1a6ff; 
				--indicator-secondary: #415187; 
				--select2-opt-group: #22223a; 
				--input-box-outline: #2d2648; 
				--mute-button-normal: #7aceff; 
				--mute-button-mod: #9d6bff; 
				--pitch1-secondary-channel: #5f3ea5; 
				--pitch1-primary-channel: #c1a4ff; 
				--pitch1-secondary-note: #794fd3; 
				--pitch1-primary-note: #d8c6ff; 
				--pitch2-secondary-channel: #4f44bf; 
				--pitch2-primary-channel: #9287ff; 
				--pitch2-secondary-note: #5e51d9; 
				--pitch2-primary-note: #b6afff; 
				--pitch3-secondary-channel: #374eb9; 
				--pitch3-primary-channel: #8097ff; 
				--pitch3-secondary-note: #445cc9; 
				--pitch3-primary-note: #a0b2ff; 
				--pitch4-secondary-channel: #2867cf; 
				--pitch4-primary-channel: #6fa5ff; 
				--pitch4-secondary-note: #2e6ed7; 
				--pitch4-primary-note: #a6c7ff; 
				--pitch5-secondary-channel: #3175a7; 
				--pitch5-primary-channel: #7ec9ff; 
				--pitch5-secondary-note: #367eb3; 
				--pitch5-primary-note: #9fd7ff; 
				--pitch6-secondary-channel: #3993a9; 
				--pitch6-primary-channel: #8ce9ff; 
				--pitch6-secondary-note: #386da3; 
				--pitch6-primary-note: #9eecff; 
				--pitch7-secondary-channel: #369d8a; 
				--pitch7-primary-channel: #8bfce7; 
				--pitch7-secondary-note: #1c93a7; 
				--pitch7-primary-note: #abffef; 
				--pitch8-secondary-channel: #00A170; 
				--pitch8-primary-channel: #50FFC9; 
				--pitch8-secondary-note: #00C78A; 
				--pitch8-primary-note: #83FFD9; 
				--pitch9-secondary-channel: #49b374; 
				--pitch9-primary-channel: #8affa9; 
				--pitch9-secondary-note: #26815f; 
				--pitch9-primary-note: #c8ffde; 
				--pitch10-secondary-channel: #58a747; 
				--pitch10-primary-channel: #bbffaa; 
				--pitch10-secondary-note: #1d7c48; 
				--pitch10-primary-note: #c7ffbc; 
				--noise1-secondary-channel: #42829b; 
				--noise1-primary-channel: #97d3fc; 
				--noise1-secondary-note: #3f53b3; 
				--noise1-primary-note: #97d3fc; 
				--noise2-secondary-channel: #6354bb; 
				--noise2-primary-channel: #9a89ff; 
				--noise2-secondary-note: #5f4dcd; 
				--noise2-primary-note: #c6bcff; 
				--noise3-secondary-channel: #704a95; 
				--noise3-primary-channel: #c285ff; 
				--noise3-secondary-note: #ad5aff; 
				--noise3-primary-note: #d3a6ff; 
				--noise4-secondary-channel: #a53c65; 
				--noise4-primary-channel: #f794bb; 
				--noise4-secondary-note: #cb5080; 
				--noise4-primary-note: #f794bb; 
				--noise5-secondary-channel: #9b2d2d; 
				--noise5-primary-channel: #ff7676; 
				--noise5-secondary-note: #cb4444; 
				--noise5-primary-note: #ff9999; 
				--mod1-secondary-channel: #b7613c; 
				--mod1-primary-channel: #ff9f76; 
				--mod1-secondary-note: #e77e52; 
				--mod1-primary-note: #ffb99b; 
				--mod2-secondary-channel: #916d34; 
				--mod2-primary-channel: #fece80; 
				--mod2-secondary-note: #c58b35; 
				--mod2-primary-note: #ffdda5; 
				--mod3-secondary-channel: #83761a; 
				--mod3-primary-channel: #fdf68c; 
				--mod3-secondary-note: #c18e00; 
				--mod3-primary-note: #fdf68c; 
				--mod4-secondary-channel: #a86436; 
				--mod4-primary-channel: #c8a825; 
				--mod4-secondary-note: #e8ba46; 
				--mod4-primary-note: #c8a825; 
				--mod-label-primary: #37325e; 
				--mod-label-secondary-text: #6e8aa7; 
				--mod-label-primary-text: #c1ffff; 
				--disabled-note-primary: #999; 
				--disabled-note-secondary: #666; 
				--note-flash: #ffffff; 
				--note-flash-secondary: #ffffff77; }
			`,
        "Slushie Pixel": `
			:root { 
				--page-margin: #040814; 
				--editor-background: #040814; 
				--hover-preview: #c6f7ff; 
				--playhead: white; 
				--primary-text: #d3f3ff; 
				--secondary-text: #6f72b5; 
				--inverted-text: black; 
				--text-selection: rgba(119,68,255,0.99); 
				--box-selection-fill: rgb(43 70 171 / 62%); 
				--loop-accent: #573ebb; 
				--link-accent: #98f; 
				--ui-widget-background: #2e2f44; 
				--ui-widget-focus: #2b2c46; 
				--pitch-background: #353654; 
				--tonic: #716fe3; 
				--fifth-note: #76469b;
				--third-note: #534488; 
				--white-piano-key: #abbce3; 
				--black-piano-key: #2f235e; 
				--progress-bar: #716fe3;
				--use-color-formula: false;
			--pitch-channel-limit: 10; 
				--track-editor-bg-pitch: #3a3b5c; 
				--track-editor-bg-pitch-dim: #1f2036; 
				--track-editor-bg-noise: #3c3554; 
				--track-editor-bg-noise-dim: #1e1834; 
				--track-editor-bg-mod: #30335e; 
				--track-editor-bg-mod-dim: #161938; 
				--multiplicative-mod-slider: #e29cff; 
				--overwriting-mod-slider: #495789; 
				--indicator-primary: #e1a6ff; 
				--indicator-secondary: #415187; 
				--select2-opt-group: #22223a; 
				--input-box-outline: #2d2648; 
				--mute-button-normal: #7aceff; 
				--mute-button-mod: #9d6bff; 
				--pitch1-secondary-channel: #5f3ea5; 
				--pitch1-primary-channel: #c1a4ff; 
				--pitch1-secondary-note: #794fd3; 
				--pitch1-primary-note: #d8c6ff; 
				--pitch2-secondary-channel: #4f44bf; 
				--pitch2-primary-channel: #9287ff; 
				--pitch2-secondary-note: #5e51d9; 
				--pitch2-primary-note: #b6afff; 
				--pitch3-secondary-channel: #374eb9; 
				--pitch3-primary-channel: #8097ff; 
				--pitch3-secondary-note: #445cc9; 
				--pitch3-primary-note: #a0b2ff; 
				--pitch4-secondary-channel: #2867cf; 
				--pitch4-primary-channel: #6fa5ff; 
				--pitch4-secondary-note: #2e6ed7; 
				--pitch4-primary-note: #a6c7ff; 
				--pitch5-secondary-channel: #3175a7; 
				--pitch5-primary-channel: #7ec9ff; 
				--pitch5-secondary-note: #367eb3; 
				--pitch5-primary-note: #9fd7ff; 
				--pitch6-secondary-channel: #3993a9; 
				--pitch6-primary-channel: #8ce9ff; 
				--pitch6-secondary-note: #386da3; 
				--pitch6-primary-note: #9eecff; 
				--pitch7-secondary-channel: #369d8a; 
				--pitch7-primary-channel: #8bfce7; 
				--pitch7-secondary-note: #1c93a7; 
				--pitch7-primary-note: #abffef; 
				--pitch8-secondary-channel: #00A170; 
				--pitch8-primary-channel: #50FFC9; 
				--pitch8-secondary-note: #00C78A; 
				--pitch8-primary-note: #83FFD9; 
				--pitch9-secondary-channel: #49b374; 
				--pitch9-primary-channel: #8affa9; 
				--pitch9-secondary-note: #26815f; 
				--pitch9-primary-note: #c8ffde; 
				--pitch10-secondary-channel: #58a747; 
				--pitch10-primary-channel: #bbffaa; 
				--pitch10-secondary-note: #1d7c48; 
				--pitch10-primary-note: #c7ffbc; 
				--noise1-secondary-channel: #42829b; 
				--noise1-primary-channel: #97d3fc; 
				--noise1-secondary-note: #3f53b3; 
				--noise1-primary-note: #97d3fc; 
				--noise2-secondary-channel: #6354bb; 
				--noise2-primary-channel: #9a89ff; 
				--noise2-secondary-note: #5f4dcd; 
				--noise2-primary-note: #c6bcff; 
				--noise3-secondary-channel: #704a95; 
				--noise3-primary-channel: #c285ff; 
				--noise3-secondary-note: #ad5aff; 
				--noise3-primary-note: #d3a6ff; 
				--noise4-secondary-channel: #a53c65; 
				--noise4-primary-channel: #f794bb; 
				--noise4-secondary-note: #cb5080; 
				--noise4-primary-note: #f794bb; 
				--noise5-secondary-channel: #9b2d2d; 
				--noise5-primary-channel: #ff7676; 
				--noise5-secondary-note: #cb4444; 
				--noise5-primary-note: #ff9999; 
				--mod1-secondary-channel: #b7613c; 
				--mod1-primary-channel: #ff9f76; 
				--mod1-secondary-note: #e77e52; 
				--mod1-primary-note: #ffb99b; 
				--mod2-secondary-channel: #916d34; 
				--mod2-primary-channel: #fece80; 
				--mod2-secondary-note: #c58b35; 
				--mod2-primary-note: #ffdda5; 
				--mod3-secondary-channel: #83761a; 
				--mod3-primary-channel: #fdf68c; 
				--mod3-secondary-note: #c18e00; 
				--mod3-primary-note: #fdf68c; 
				--mod4-secondary-channel: #a86436; 
				--mod4-primary-channel: #c8a825; 
				--mod4-secondary-note: #e8ba46; 
				--mod4-primary-note: #c8a825; 
				--mod-label-primary: #37325e; 
				--mod-label-secondary-text: #6e8aa7; 
				--mod-label-primary-text: #c1ffff; 
				--disabled-note-primary: #999; 
				--disabled-note-secondary: #666; 
				--note-flash: #ffffff; 
				--note-flash-secondary: #ffffff77; }
			
				* {
				cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_cursor.png"), auto !important;
				--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
				--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
				--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
				--instrument-copy-symbol: url("./image_assets/icon-copy.png");
				--instrument-paste-symbol: url("./image_assets/icon-paste.png");
				--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
				--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
				--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
				--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
				--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
				--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
				--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
				--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
				--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
				--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
				--export-instrument-symbol: var(--export-symbol);
				--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
				--undo-symbol: url("./image_assets/icon-undo.png");
				--redo-symbol: url("./image_assets/icon-redo.png");
				--copy-symbol: url("./image_assets/icon-copy.png");
				--paste-symbol: url("./image_assets/icon-paste.png");
				--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
				--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
				--select-all-symbol: url("./image_assets/icon-SelectAll.png");
				--duplicate-symbol: url("./image_assets/icon-duplicate.png");
				--notes-up-symbol: url("./image_assets/moveNotesUp.png");
				--notes-down-symbol: url("./image_assets/moveNotesDown.png");
				--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
				--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
				--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
				} 
					@font-face {
				   font-family: "AbyssType";
				   src:
					url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
					}
			
					@font-face {
				   font-family: "AbyssType_small";
				   src:
					url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
					}
			
					body {
						background-image: url("https://choptop84.github.io/choptop84s-image-repository/slushbg.gif") !important;
						background-size: 32px;
						background-position: center;
						background-repeat: repeat;
			
						image-rendering: -moz-crisp-edges !important;         /* Firefox */
						image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						image-rendering: -o-crisp-edges !important;            /* Opera */
						image-rendering: pixelated !important;                 /* Future browsers */
						image-rendering: optimizeSpeed !important;             /* IE */
						}
			
					#text-content {
						border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushiepixel_border.png");
						border-image-slice: 4 fill; 
					   border-image-width: 8px; 
					border-image-repeat: repeat; 
						padding-left: 12px; 
						padding-right: 12px; 
						padding-bottom: 12px; 
						image-rendering: -moz-crisp-edges !important;         /* Firefox */
						image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						image-rendering: -o-crisp-edges !important;            /* Opera */
						image-rendering: pixelated !important;                 /* Future browsers */
						image-rendering: optimizeSpeed !important;             /* IE */
					}
				#beepboxEditorContainer {
						border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushiepixel_border.png");
						border-image-slice: 4 fill; 
					   border-image-width: 8px; 
					border-image-repeat: repeat;
						padding-left: 12px; 
						padding-right: 12px; 
						padding-bottom: 12px; 
			
						image-rendering: -moz-crisp-edges !important;         /* Firefox */
						image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						image-rendering: -o-crisp-edges !important;            /* Opera */
						image-rendering: pixelated !important;                 /* Future browsers */
						image-rendering: optimizeSpeed !important;             /* IE */ 
					}
			
					.beepboxEditor button,
					button.mobilePatternButton,
					button.mobileTrackButton,
					button.mobileSettingsButton,
					button.mobilePlayButton,
					button.mobilePauseButton,
					button.mobileNextBarButton,
					button.mobilePrevBarButton,
					button.playButton,
					button.pauseButton, 
					button.recordButton, 
					button.stopButton,
					button.nextBarButton, 
					button.prevBarButton, 
					button.copyButton, 
					button.pasteButton, 
					button.exportInstrumentButton, 
					button.importInstrumentButton, 
					.beepboxEditor select, 
					.beepboxEditor .select2-selection__rendered {
							border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushie buttonbg.png") !important;
							border-image-slice: 4 fill !important; 
						   border-image-width: 4px !important; 
						border-image-repeat: stretch !important;
							padding: 4px !important; 
			
							image-rendering: -moz-crisp-edges !important;         /* Firefox */
							image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
							image-rendering: -o-crisp-edges !important;            /* Opera */
							image-rendering: pixelated !important;                 /* Future browsers */
							image-rendering: optimizeSpeed !important;             /* IE */
			
							cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
						}
			
						button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
							--ui-widget-background: var(--editor-background) !important;
							border-image-source: none !important;
						}

					html {
					font-family: 'AbyssType';
					}
					div.channelBoxLabel {
						font-family: 'AbyssType_small' !important;
					}
			
					.beepboxEditor input[type="range"]::-webkit-slider-thumb
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]::-ms-thumb
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]::-ms-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]:focus::-ms-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]::-moz-range-thumb
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]::-moz-range-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="range"]:focus::-moz-range-track
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="text"],
					.beepboxEditor input[type="number"]
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="checkbox"]
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="checkbox"]:checked
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
					 
					.beepboxEditor input[type="checkbox"]:checked:after
					{
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
			
					div.selectRow span {
						cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_hand.png"), pointer !important;
					}
			`,
        "2012 Video Tutorial": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}

				.overlay {
					background-image: url("https://choptop84.github.io/choptop84s-image-repository/bandicam_watermark.png");
					background-repeat: no-repeat;
  					background-size: contain;
  					background-position-x: center;
				  	backdrop-filter: blur(1px);
					position: fixed !important;
				}

				 html:not(.overlay) {
					width: 75vw;
					padding-left: 12.5%;
					position: relative;
					background: black;
				} 

			`,
        "I am on fire": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}

				.overlay {
					background-image: url("https://choptop84.github.io/choptop84s-image-repository/fire.gif");
					background-repeat: no-repeat;
  					background-size: cover;
  					background-position-y: bottom;
				}

				
				#modTitle::before {
					content: "AAAA I'M ON FIRE AAA" !important;
				}

			`,
        "BeepBox Pixel": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}		
				
				* {
					cursor: url("abyssbox_cursor.png"), auto;
					--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
					--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
					--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
					--instrument-copy-symbol: url("./image_assets/icon-copy.png");
					--instrument-paste-symbol: url("./image_assets/icon-paste.png");
					--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
					--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
					--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
					--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
					--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
					--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
					--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
					--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
					--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
					--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
					--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
					--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
					--export-instrument-symbol: var(--export-symbol);
					--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
					--undo-symbol: url("./image_assets/icon-undo.png");
					--redo-symbol: url("./image_assets/icon-redo.png");
					--copy-symbol: url("./image_assets/icon-copy.png");
					--paste-symbol: url("./image_assets/icon-paste.png");
					--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
					--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
					--select-all-symbol: url("./image_assets/icon-SelectAll.png");
					--duplicate-symbol: url("./image_assets/icon-duplicate.png");
					--notes-up-symbol: url("./image_assets/moveNotesUp.png");
					--notes-down-symbol: url("./image_assets/moveNotesDown.png");
					--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
					--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
					--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
					}
					
						@font-face {
					   font-family: "AbyssType";
					   src:
						url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
						}

						/* sets background image */
						body {
						background-image: url("./image_assets/diamondsbg.gif") !important;
						background-position: center;
						background-repeat: repeat;
			
						image-rendering: -moz-crisp-edges !important;         /* Firefox */
						image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						image-rendering: -o-crisp-edges !important;            /* Opera */
						image-rendering: pixelated !important;                 /* Future browsers */
						image-rendering: optimizeSpeed !important;             /* IE */
							}
			
						#text-content {
								border-image-source: url("./image_assets/beepbox_pixel_border.png");
								border-image-slice: 4 fill; 
							   border-image-width: 8px; 
							border-image-repeat: stretch; 
								padding: 12px; 
			
								image-rendering: -moz-crisp-edges !important;         /* Firefox */
								image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
								image-rendering: -o-crisp-edges !important;            /* Opera */
								image-rendering: pixelated !important;                 /* Future browsers */
								image-rendering: optimizeSpeed !important;             /* IE */
							}
						#beepboxEditorContainer {
								border-image-source: url("./image_assets/beepbox_pixel_border.png");
								border-image-slice: 4 fill; 
							   border-image-width: 8px; 
							border-image-repeat: stretch;
								padding: 12px;
			
								image-rendering: -moz-crisp-edges !important;         /* Firefox */
								image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
								image-rendering: -o-crisp-edges !important;            /* Opera */
								image-rendering: pixelated !important;                 /* Future browsers */
								image-rendering: optimizeSpeed !important;             /* IE */ 
							}
						.beepboxEditor button,
						button.mobilePatternButton,
						button.mobileTrackButton,
						button.mobileSettingsButton,
						button.mobilePlayButton,
						button.mobilePauseButton,
						button.mobileNextBarButton,
						button.mobilePrevBarButton,
						button.playButton,
						button.pauseButton, 
						button.recordButton, 
						button.stopButton,
						button.nextBarButton, 
						button.prevBarButton, 
						button.copyButton, 
						button.pasteButton, 
						button.exportInstrumentButton, 
						button.importInstrumentButton, 
						.beepboxEditor select, 
						.beepboxEditor .select2-selection__rendered {
								border-image-source: url("./image_assets/beepbox_pixel_border.png") !important;
								border-image-slice: 4 fill !important; 
							   border-image-width: 4px !important; 
							border-image-repeat: stretch !important;
								padding: 4px !important; 
			
								image-rendering: -moz-crisp-edges !important;         /* Firefox */
								image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
								image-rendering: -o-crisp-edges !important;            /* Opera */
								image-rendering: pixelated !important;                 /* Future browsers */
								image-rendering: optimizeSpeed !important;             /* IE */
			
								cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
							}
			
						.beepboxEditor .channelBox {
							clip-path: polygon(
								0px calc(100% - 2px),
								2px calc(100% - 2px),
								2px 100%,
								calc(100% - 2px) 100%,
								calc(100% - 2px) calc(100% - 2px),
								100% calc(100% - 2px),
								100% 2px,
								calc(100% - 2px) 2px,
								calc(100% - 2px) 0px,
								2px 0px,
								2px 2px,
								0px 2px
							  );
							}
							
						.beepboxEditor .curChannelBox {
								clip-path: polygon(
									0px calc(100% - 2px),
									2px calc(100% - 2px),
									2px 100%,
									calc(100% - 2px) 100%,
									calc(100% - 2px) calc(100% - 2px),
									100% calc(100% - 2px),
									100% 2px,
									calc(100% - 2px) 2px,
									calc(100% - 2px) 0px,
									2px 0px,
									2px 2px,
									0px 2px
								  );
								}

							button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
								--ui-widget-background: var(--editor-background) !important;
								border-image-source: none !important;
							}
			
							select.trackSelectBox {
								border-image: none !important;
							}
							
						@font-face {
					   font-family: "AbyssType_small";
					   src:
						url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
						}
			
						html {
							font-family: 'AbyssType';
						}
			
						div.channelBoxLabel {
							font-family: 'AbyssType_small' !important;
						}
			
						.beepboxEditor input[type="range"]::-webkit-slider-thumb
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]::-ms-thumb
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]::-ms-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]:focus::-ms-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]::-moz-range-thumb
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]::-moz-range-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="range"]:focus::-moz-range-track
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="text"],
						.beepboxEditor input[type="number"]
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="checkbox"]
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="checkbox"]:checked
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
						 
						.beepboxEditor input[type="checkbox"]:checked:after
						{
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
			
						div.selectRow span {
							cursor: url("./image_assets/abyssbox_cursor_hand.png"), pointer !important;
						}
			
			`,
        "dark classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "dark competition": `
				:root {
					--page-margin: black;
					--editor-background: black;
					--hover-preview: #ddd;
					--playhead: #ddd;
					--primary-text: #ddd;
					--secondary-text: #8e695b;
					--inverted-text: black;
					--text-selection: rgba(169,0,255,0.99);
					--box-selection-fill: rgba(221,221,221,0.2);
					--loop-accent: #bf15ba;
					--link-accent: #f888ff;
					--ui-widget-background: #443a3a;
					--ui-widget-focus: #777;
					--pitch-background: #353333;
					--tonic: #884a44;
					--fifth-note: #415498;
					--third-note: #486;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #00bdc7;
					--pitch1-primary-note:      #92f9ff;
					--pitch2-secondary-channel: #a1a100;
					--pitch2-primary-channel:   #ffff25;
					--pitch2-secondary-note:    #c7c700;
					--pitch2-primary-note:      #ffff92;
					--pitch3-secondary-channel: #c75000;
					--pitch3-primary-channel:   #ff9752;
					--pitch3-secondary-note:    #ff771c;
					--pitch3-primary-note:      #ffcdab;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #8AA100;
					--pitch7-primary-channel:   #DEFF25;
					--pitch7-secondary-note:	  #AAC700;
					--pitch7-primary-note:			#E6FF92;
					--pitch8-secondary-channel: #DF0019;
					--pitch8-primary-channel:   #FF98A4;
					--pitch8-secondary-note:    #FF4E63;
					--pitch8-primary-note:      #FFB2BB;
					--pitch9-secondary-channel: #00A170;
					--pitch9-primary-channel:   #50FFC9;
					--pitch9-secondary-note:    #00C78A;
					--pitch9-primary-note:			#83FFD9;
					--pitch10-secondary-channel:#A11FFF;
					--pitch10-primary-channel:  #CE8BFF;
					--pitch10-secondary-note:   #B757FF;
					--pitch10-primary-note:     #DFACFF;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6B3E8E;
					--noise4-primary-channel:   #AF82D2;
					--noise4-secondary-note:    #9E71C1;
					--noise5-secondary-channel: #607837;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:			  #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

			}
		`,
        "light classic": `
			:root {
				-webkit-text-stroke-width: 0.5px;
				--page-margin: #685d88;
				--editor-background: white;
				--hover-preview: black;
				--playhead: rgba(0,0,0,0.5);
				--primary-text: black;
				--secondary-text: #777;
				--inverted-text: white;
				--text-selection: rgba(200,170,255,0.99);
				--box-selection-fill: rgba(0,0,0,0.1);
				--loop-accent: #98f;
				--link-accent: #74f;
				--ui-widget-background: #ececec;
				--ui-widget-focus: #eee;
				--pitch-background: #ececec;
				--tonic: #f0d6b6;
				--fifth-note: #bbddf0;
				--third-note: #bbf0ce;
				--white-piano-key: #eee;
				--black-piano-key: #666;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
			--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #ececec;
					--track-editor-bg-pitch-dim: #fdfdfd;
					--track-editor-bg-noise: #ececec;
					--track-editor-bg-noise-dim: #fdfdfd;
					--track-editor-bg-mod: #dbecfd;
					--track-editor-bg-mod-dim: #ecfdff;
					--multiplicative-mod-slider: #789;
					--overwriting-mod-slider: #987;
					--indicator-primary: #98f;
					--indicator-secondary: #cde;
					--select2-opt-group: #cecece;
					--input-box-outline: #ddd;
					--mute-button-normal: #c0b47f;
					--mute-button-mod: #bd7fc0;
				--pitch1-secondary-channel: #6CD9ED;
				--pitch1-primary-channel:   #00A0BD;
				--pitch1-secondary-note:    #34C2DC;
				--pitch1-primary-note:      #00758A;
				--pitch2-secondary-channel: #E3C941;
				--pitch2-primary-channel:   #B49700;
				--pitch2-secondary-note:    #D1B628;
				--pitch2-primary-note:      #836E00;
				--pitch3-secondary-channel: #FF9D61;
				--pitch3-primary-channel:   #E14E00;
				--pitch3-secondary-note:    #F67D3C;
				--pitch3-primary-note:      #B64000;
				--pitch4-secondary-channel: #4BE24B;
				--pitch4-primary-channel:   #00A800;
				--pitch4-secondary-note:    #2DC82D;
				--pitch4-primary-note:      #008000;
				--pitch5-secondary-channel: #FF90FF;
				--pitch5-primary-channel:   #E12EDF;
				--pitch5-secondary-note:    #EC6EEC;
				--pitch5-primary-note:      #A600A5;
				--pitch6-secondary-channel: #B5B5FE;
				--pitch6-primary-channel:   #6969FD;
				--pitch6-secondary-note:    #9393FE;
				--pitch6-primary-note:      #4A4AD7;
				--pitch7-secondary-channel: #C2D848;
				--pitch7-primary-channel:   #8EA800;
				--pitch7-secondary-note:    #B0C82D;
				--pitch7-primary-note:      #6C8000;
				--pitch8-secondary-channel: #FF90A4;
				--pitch8-primary-channel:   #E12E4D;
				--pitch8-secondary-note:    #EC6E85;
				--pitch8-primary-note:      #A6001D;
				--pitch9-secondary-channel: #41E3B5;
				--pitch9-primary-channel:   #00B481;
				--pitch9-secondary-note:    #28D1A1;
				--pitch9-primary-note:      #00835E;
				--pitch10-secondary-channel:#CA77FF;
				--pitch10-primary-channel:  #9609FF;
				--pitch10-secondary-note:   #B54FFF;
				--pitch10-primary-note:     #8400E3;
				--noise1-secondary-channel: #C1C1C1;
				--noise1-primary-channel:   #898989;
				--noise1-secondary-note:    #ADADAD;
				--noise1-primary-note:      #6C6C6C;
				--noise2-secondary-channel: #E8BB8C;
				--noise2-primary-channel:   #BD7D3A;
				--noise2-secondary-note:    #D1A374;
				--noise2-primary-note:      #836342;
				--noise3-secondary-channel: #9BC4EB;
				--noise3-primary-channel:   #4481BE;
				--noise3-secondary-note:    #7CA7D3;
				--noise3-primary-note:      #476685;
				--noise4-secondary-channel: #C5A5E0;
				--noise4-primary-channel:   #8553AE;
				--noise4-secondary-note:    #B290CC;
				--noise4-primary-note:      #684F7D;
				--noise5-secondary-channel: #B8CE93;
				--noise5-primary-channel:   #87A74F;
				--noise5-secondary-note:    #ABC183;
				--noise5-primary-note:      #68784C;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77dd55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #2ad84a;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ba124a;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:        #7a1caa;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #a86810;
					--mod-label-primary:        #dddddd;
					--mod-label-secondary-text: #777;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #666;
					--disabled-note-secondary:  #aaa;

					
					

			}
			
			.promptContainerBG::before {
				box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}

			.beepboxEditor button, .beepboxEditor select, button {
				box-shadow: inset 0 0 0 1px var(--secondary-text);
			}

				.select2-selection__rendered {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
		`,
        "jummbox classic": `
				:root {
					--page-margin: #040410;
					--editor-background: #040410;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #84859a;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #393e4f;
					--ui-widget-focus: #6d6886;
					--pitch-background: #393e4f;
					--tonic: #725491;
					--fifth-note: #54547a;
					--third-note: #3b4b71;
					--white-piano-key: #eee;
					--black-piano-key: #666;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #fff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #393e4f;
					--track-editor-bg-pitch-dim: #1c1d28;
					--track-editor-bg-noise: #3d3535;
					--track-editor-bg-noise-dim: #161313;
					--track-editor-bg-mod: #283560;
					--track-editor-bg-mod-dim: #0a101f;
					--multiplicative-mod-slider: #606c9f;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #9c64f7;
					--indicator-secondary: #393e4f;
					--select2-opt-group: #5d576f;
					--input-box-outline: #222;
					--mute-button-normal: #dda85d;
					--mute-button-mod: #886eae;
					--mod-label-primary: #282840;
					--mod-label-secondary-text: rgb(87, 86, 120);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 6.5;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 6.5;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 6.5;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 6.5;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 0;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 0;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 0;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 0;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 192;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 192;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 192;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 192;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #91879f;
					--disabled-note-secondary:  #6a677a;

					
					

				}
			`,
        "forest": `
				:root {
					--page-margin: #010c03;
					--editor-background: #010c03;
					--hover-preview: #efe;
					--playhead: rgba(232, 255, 232, 0.9);
					--primary-text: #efe;
					--secondary-text: #70A070;
					--inverted-text: #280228;
					--text-selection: rgba(255,68,199,0.99);
					--box-selection-fill: #267aa3;
					--loop-accent: #ffe845;
					--link-accent: #9f8;
					--ui-widget-background: #203829;
					--ui-widget-focus: #487860;
					--pitch-background: #203829;
					--tonic: #2b8d20;
					--fifth-note: #385840;
					--third-note: #486;
					--white-piano-key: #bda;
					--black-piano-key: #573;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #ffffff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #254820;
					--track-editor-bg-pitch-dim: #102819;
					--track-editor-bg-noise: #304050;
					--track-editor-bg-noise-dim: #102030;
					--track-editor-bg-mod: #506030;
					--track-editor-bg-mod-dim: #2a300a;
					--multiplicative-mod-slider: #205c8f;
					--overwriting-mod-slider: #20ac6f;
					--indicator-primary: #dcd866;
					--indicator-secondary: #203829;
					--select2-opt-group: #1a6f5a;
					--input-box-outline: #242;
					--mute-button-normal: #49e980;
					--mute-button-mod: #c2e502;
					--mod-label-primary: #133613;
					--mod-label-secondary-text: rgb(27, 126, 40);
					--mod-label-primary-text: #efe;
					--pitch-secondary-channel-hue: 120;
					--pitch-secondary-channel-hue-scale: 8.1;
					--pitch-secondary-channel-sat: 59;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 50;
					--pitch-secondary-channel-lum-scale: 0.04;
					--pitch-primary-channel-hue: 120;
					--pitch-primary-channel-hue-scale: 8.1;
					--pitch-primary-channel-sat: 86;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 70;
					--pitch-primary-channel-lum-scale: 0.04;
					--pitch-secondary-note-hue: 120;
					--pitch-secondary-note-hue-scale: 8.1;
					--pitch-secondary-note-sat: 85;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 30;
					--pitch-secondary-note-lum-scale: 0.04;
					--pitch-primary-note-hue: 120;
					--pitch-primary-note-hue-scale: 8.1;
					--pitch-primary-note-sat: 90;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 80;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 200;
					--noise-secondary-channel-hue-scale: 1.1;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 22;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 200;
					--noise-primary-channel-hue-scale: 1.1;
					--noise-primary-channel-sat: 48;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 65;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 200;
					--noise-secondary-note-hue-scale: 1.1;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 33;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 200;
					--noise-primary-note-hue-scale: 1.1;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 64;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 40;
					--mod-secondary-channel-hue-scale: 1.8;
					--mod-secondary-channel-sat: 44;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 40;
					--mod-primary-channel-hue-scale: 1.8;
					--mod-primary-channel-sat: 60;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 40;
					--mod-secondary-note-hue-scale: 1.8;
					--mod-secondary-note-sat: 62;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 55;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 40;
					--mod-primary-note-hue-scale: 1.8;
					--mod-primary-note-sat: 66;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #536e5c;
					--disabled-note-secondary:  #395440;

					
					

				}
			`,
        "forest 2": `
					:root { --page-margin: #132f16; 
					--editor-background: #002b03;; 
					--hover-preview: white; 
					--playhead: rgba(255, 255, 255, 0.9); 
					--primary-text: #96d69f; 
					--secondary-text: #7fdb60; 
					--inverted-text: #2c562e; 
					--text-selection: rgba(119,68,255,0.99); 
					--box-selection-fill: #044b94; 
					--loop-accent: #63e469; 
					--link-accent: #c5facd; 
					--ui-widget-background: #396b32; 
					--ui-widget-focus: #002b03; 
					--pitch-background: #30583c; 
					--tonic: #4dac5b; 
					--fifth-note: #458343; 
					--third-note: #486;
					--white-piano-key: #bee9bf; 
					--black-piano-key: #395e3c;
					--white-piano-key-text: #024a0c;		
					--black-piano-key-text: #96d69f; 
					--use-color-formula: true; 
					--track-editor-bg-pitch: #43a631; 
					--track-editor-bg-pitch-dim: #387e34; 
					--track-editor-bg-noise: #3c8462; 
					--track-editor-bg-noise-dim: #285821; 
					--track-editor-bg-mod: #419296; 
					--track-editor-bg-mod-dim: #3e7b59; 
					--multiplicative-mod-slider: #345838; 
					--overwriting-mod-slider: #3a8136; 
					--indicator-primary: #75ce71; 
					--indicator-secondary: #5fe857; 
					--select2-opt-group: #002002; 
					--input-box-outline: #bbe6b0; 
					--mute-button-normal: #50aa4a; 
					--mute-button-mod: #49ab69; 
					--mod-label-primary: #8dd883; 
					--mod-label-secondary-text: #7be250; 
					--mod-label-primary-text: #bcebb4; 

					--pitch-secondary-channel-hue: 120;
					--pitch-secondary-channel-hue-scale: 8.1;
					--pitch-secondary-channel-sat: 59;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 50;
					--pitch-secondary-channel-lum-scale: 0.04;
					--pitch-primary-channel-hue: 120;
					--pitch-primary-channel-hue-scale: 8.1;
					--pitch-primary-channel-sat: 86;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 70;
					--pitch-primary-channel-lum-scale: 0.04;
					--pitch-secondary-note-hue: 120;
					--pitch-secondary-note-hue-scale: 8.1;
					--pitch-secondary-note-sat: 85;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 30;
					--pitch-secondary-note-lum-scale: 0.04;
					--pitch-primary-note-hue: 120;
					--pitch-primary-note-hue-scale: 8.1;
					--pitch-primary-note-sat: 90;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 80;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 200;
					--noise-secondary-channel-hue-scale: 1.1;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 22;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 200;
					--noise-primary-channel-hue-scale: 1.1;
					--noise-primary-channel-sat: 48;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 65;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 200;
					--noise-secondary-note-hue-scale: 1.1;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 33;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 200;
					--noise-primary-note-hue-scale: 1.1;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 64;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 40;
					--mod-secondary-channel-hue-scale: 1.8;
					--mod-secondary-channel-sat: 44;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 40;
					--mod-primary-channel-hue-scale: 1.8;
					--mod-primary-channel-sat: 60;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 40;
					--mod-secondary-note-hue-scale: 1.8;
					--mod-secondary-note-sat: 62;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 55;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 40;
					--mod-primary-note-hue-scale: 1.8;
					--mod-primary-note-sat: 66;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #536e5c;
					--disabled-note-secondary:  #395440;


					}

					.note-primary {
						clip-path: polygon(
							0px calc(100% - 4px),
							4px calc(100% - 4px),
							4px 100%,
							calc(100% - 4px) 100%,
							calc(100% - 4px) calc(100% - 4px),
							100% calc(100% - 4px),
							100% 4px,
							calc(100% - 4px) 4px,
							calc(100% - 4px) 0px,
							4px 0px,
							4px 4px,
							0px 4px
						  );
					}
					.note-secondary {
						clip-path: polygon(
							0px calc(100% - 4px),
							4px calc(100% - 4px),
							4px 100%,
							calc(100% - 4px) 100%,
							calc(100% - 4px) calc(100% - 4px),
							100% calc(100% - 4px),
							100% 4px,
							calc(100% - 4px) 4px,
							calc(100% - 4px) 0px,
							4px 0px,
							4px 4px,
							0px 4px
						  );
					}
					.note-flash {
						clip-path: polygon(
							0px calc(100% - 4px),
							4px calc(100% - 4px),
							4px 100%,
							calc(100% - 4px) 100%,
							calc(100% - 4px) calc(100% - 4px),
							100% calc(100% - 4px),
							100% 4px,
							calc(100% - 4px) 4px,
							calc(100% - 4px) 0px,
							4px 0px,
							4px 4px,
							0px 4px
						  );
					}

					/* sets background image */
					body {
						background-image: url("./image_assets/Forest2Trees.png") !important;
						background-size: cover;
						background-position: center top; /* Adjusted to align with the top */
  						background-repeat: no-repeat;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
						}
						#text-content {
						--editor-background: (255, 255, 255, 0);
							border-image-source: url("./image_assets/forest2_border.png");
							border-image-slice: 16 fill; 
						   	border-image-width: 32px; 
							border-image-repeat: repeat; 
							padding: 36px; 
		
							image-rendering: -moz-crisp-edges !important;         /* Firefox */
							image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
							image-rendering: -o-crisp-edges !important;            /* Opera */
							image-rendering: pixelated !important;                 /* Future browsers */
							image-rendering: optimizeSpeed !important;             /* IE */
						}
					#beepboxEditorContainer {
						--editor-background: (255, 255, 255, 0);
							border-image-source: url("./image_assets/forest2_border.png");
							border-image-slice: 16 fill; 
						   	border-image-width: 32px; 
							border-image-repeat: repeat; 
							padding-left: 36px; 
							padding-right: 36px; 
							padding-top: 5px; 
							padding-bottom: 5px; 

							image-rendering: -moz-crisp-edges !important;         /* Firefox */
							image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
							image-rendering: -o-crisp-edges !important;            /* Opera */
							image-rendering: pixelated !important;                 /* Future browsers */
							image-rendering: optimizeSpeed !important;             /* IE */ 
						}
					.beepboxEditor button, .beepboxEditor select, .beepboxEditor .select2-selection__rendered, button {
							border-image-source: url("./image_assets/forest2_border2.png") !important;
							border-image-slice: 4 fill !important; 
						   border-image-width: 4px !important; 
						border-image-repeat: stretch !important;
							padding: 4px !important; 
		
							image-rendering: -moz-crisp-edges !important;         /* Firefox */
							image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
							image-rendering: -o-crisp-edges !important;            /* Opera */
							image-rendering: pixelated !important;                 /* Future browsers */
							image-rendering: optimizeSpeed !important;             /* IE */
						}
					select.trackSelectBox {
						border-image: none !important;
					}
					div.prompt.noSelection {
						--editor-background: #002b03; 
					}
					/* div.channelBox {
					border-radius: 5px;
					} */
					* {
						cursor: url("./image_assets/pixel_cursor.png"), auto !important;
						--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
						--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
						--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
						--instrument-copy-symbol: url("./image_assets/icon-copy.png");
						--instrument-paste-symbol: url("./image_assets/icon-paste.png");
						--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
						--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
						--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
						--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
						--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
						--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
						--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
						--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
						--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
						--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
						--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
						--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
						--export-instrument-symbol: var(--export-symbol);
						--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
						--undo-symbol: url("./image_assets/icon-undo.png");
						--redo-symbol: url("./image_assets/icon-redo.png");
						--copy-symbol: url("./image_assets/icon-copy.png");
						--paste-symbol: url("./image_assets/icon-paste.png");
						--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
						--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
						--select-all-symbol: url("./image_assets/icon-SelectAll.png");
						--duplicate-symbol: url("./image_assets/icon-duplicate.png");
						--notes-up-symbol: url("./image_assets/moveNotesUp.png");
						--notes-down-symbol: url("./image_assets/moveNotesDown.png");
						--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
						--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
						--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
						} 
							@font-face {
						   font-family: "AbyssType";
						   src:
							url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
							}
				
							button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
								--ui-widget-background: var(--editor-background) !important;
								border-image-source: none !important;
							}

							@font-face {
						   font-family: "AbyssType_small";
						   src:
							url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
							}
				
							html {
							font-family: 'AbyssType';
							}
							div.channelBoxLabel {
								font-family: 'AbyssType_small' !important;
							}
			`,
        "canyon": `
				:root {
					--page-margin: #0a0000;
					--editor-background: #0a0000;
					--hover-preview: white;
					--playhead: rgba(247, 172, 196, 0.9);
					--primary-text: #f5d6bf;
					--secondary-text: #934050;
					--inverted-text: #290505;
					--text-selection: rgba(255, 208, 68, 0.99);
					--box-selection-fill: #94044870;
					--loop-accent: #ff1e1e;
					--link-accent: #da7b76;
					--ui-widget-background: #533137;
					--ui-widget-focus: #743e4b;
					--pitch-background: #4f3939;
					--tonic: #9e4145;
					--fifth-note: #5b3e6b;
					--third-note: #886744;
					--white-piano-key: #d89898;
					--black-piano-key: #572b29;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #ffffff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #5e3a41;
					--track-editor-bg-pitch-dim: #281d1c;
					--track-editor-bg-noise: #3a3551;
					--track-editor-bg-noise-dim: #272732;
					--track-editor-bg-mod: #552045;
					--track-editor-bg-mod-dim: #3e1442;
					--multiplicative-mod-slider: #9f6095;
					--overwriting-mod-slider: #b55050;
					--indicator-primary: #f2f764;
					--indicator-secondary: #4f3939;
					--select2-opt-group: #673030;
					--input-box-outline: #443131;
					--mute-button-normal: #d81833;
					--mute-button-mod: #9e2691;
					--mod-label-primary: #5f2b39;
					--mod-label-secondary-text: rgb(158, 66, 122);
					--mod-label-primary-text: #e6caed;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 11.8;
					--pitch-secondary-channel-sat: 73.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 11.8;
					--pitch-primary-channel-sat: 90;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 11.8;
					--pitch-secondary-note-sat: 83.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 35;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 11.8;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 60;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 60;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 60;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 60;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 222;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 222;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 222;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 54;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 222;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 75;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #515164;
					--disabled-note-secondary:  #2a2a3a;

					
					
				}
			`,
        "canyon 2": `
			:root {
				--page-margin: #0a0000;
				--song-player-margin: var(--page-margin);
				--editor-background: #5a1616;
				--hover-preview: white;
				--playhead: rgba(247, 172, 196, 0.9);
				--primary-text: #f5d6bf;
				--secondary-text: #ff234d;
				--inverted-text: #290505;
				--text-selection: rgba(255, 208, 68, 0.99);
				--box-selection-fill: #94044870;
				--loop-accent: #ff1e1e;
				--link-accent: #da7b76;
				--ui-widget-background: #832d2d;
				--ui-widget-focus: #832d2d;
				--pitch-background: #832d2d;
				--tonic: #bb5a5e;
				--fifth-note: #5b3e6b;
				--third-note: #886744;
				--white-piano-key: #ff8383;
				--black-piano-key: #2b0806;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #ffffff;
				--use-color-formula: true;
				--track-editor-bg-pitch: #a80b2b;
				--track-editor-bg-pitch-dim: #38030e;
				--track-editor-bg-noise: #3a3551;
				--track-editor-bg-noise-dim: #272732;
				--track-editor-bg-mod: #552045;
				--track-editor-bg-mod-dim: #3e1442;
				--multiplicative-mod-slider: #9f6095;
				--overwriting-mod-slider: #b55050;
				--indicator-primary: #f2f764;
				--indicator-secondary: #4f3939;
				--select2-opt-group: #673030;
				--input-box-outline: #443131;
				--mute-button-normal: #d81833;
				--mute-button-mod: #9e2691;
				--mod-label-primary: #5f2b39;
				--mod-label-secondary-text: rgb(158, 66, 122);
				--mod-label-primary-text: #e6caed;
				--pitch-secondary-channel-hue: 0;
				--pitch-secondary-channel-hue-scale: 11.8;
				--pitch-secondary-channel-sat: 73.3;
				--pitch-secondary-channel-sat-scale: 0.1;
				--pitch-secondary-channel-lum: 40;
				--pitch-secondary-channel-lum-scale: 0.05;
				--pitch-primary-channel-hue: 0;
				--pitch-primary-channel-hue-scale: 11.8;
				--pitch-primary-channel-sat: 90;
				--pitch-primary-channel-sat-scale: 0.1;
				--pitch-primary-channel-lum: 67.5;
				--pitch-primary-channel-lum-scale: 0.05;
				--pitch-secondary-note-hue: 0;
				--pitch-secondary-note-hue-scale: 11.8;
				--pitch-secondary-note-sat: 83.9;
				--pitch-secondary-note-sat-scale: 0.1;
				--pitch-secondary-note-lum: 35;
				--pitch-secondary-note-lum-scale: 0.05;
				--pitch-primary-note-hue: 0;
				--pitch-primary-note-hue-scale: 11.8;
				--pitch-primary-note-sat: 100;
				--pitch-primary-note-sat-scale: 0.05;
				--pitch-primary-note-lum: 85.6;
				--pitch-primary-note-lum-scale: 0.025;
				--noise-secondary-channel-hue: 60;
				--noise-secondary-channel-hue-scale: 2;
				--noise-secondary-channel-sat: 25;
				--noise-secondary-channel-sat-scale: 0;
				--noise-secondary-channel-lum: 42;
				--noise-secondary-channel-lum-scale: 0;
				--noise-primary-channel-hue: 60;
				--noise-primary-channel-hue-scale: 2;
				--noise-primary-channel-sat: 33;
				--noise-primary-channel-sat-scale: 0;
				--noise-primary-channel-lum: 63.5;
				--noise-primary-channel-lum-scale: 0;
				--noise-secondary-note-hue: 60;
				--noise-secondary-note-hue-scale: 2;
				--noise-secondary-note-sat: 33.5;
				--noise-secondary-note-sat-scale: 0;
				--noise-secondary-note-lum: 55;
				--noise-secondary-note-lum-scale: 0;
				--noise-primary-note-hue: 60;
				--noise-primary-note-hue-scale: 2;
				--noise-primary-note-sat: 46.5;
				--noise-primary-note-sat-scale: 0;
				--noise-primary-note-lum: 74;
				--noise-primary-note-lum-scale: 0;
				--mod-secondary-channel-hue: 222;
				--mod-secondary-channel-hue-scale: 1.5;
				--mod-secondary-channel-sat: 88;
				--mod-secondary-channel-sat-scale: 0;
				--mod-secondary-channel-lum: 50;
				--mod-secondary-channel-lum-scale: 0;
				--mod-primary-channel-hue: 222;
				--mod-primary-channel-hue-scale: 1.5;
				--mod-primary-channel-sat: 96;
				--mod-primary-channel-sat-scale: 0;
				--mod-primary-channel-lum: 80;
				--mod-primary-channel-lum-scale: 0;
				--mod-secondary-note-hue: 222;
				--mod-secondary-note-hue-scale: 1.5;
				--mod-secondary-note-sat: 92;
				--mod-secondary-note-sat-scale: 0;
				--mod-secondary-note-lum: 54;
				--mod-secondary-note-lum-scale: 0;
				--mod-primary-note-hue: 222;
				--mod-primary-note-hue-scale: 1.5;
				--mod-primary-note-sat: 96;
				--mod-primary-note-sat-scale: 0;
				--mod-primary-note-lum: 75;
				--mod-primary-note-lum-scale: 0;
				--disabled-note-primary:    #515164;
				--disabled-note-secondary:  #2a2a3a;
			}
			
			* {
				cursor: url("./image_assets/pixel_cursor.png"), auto !important;
				--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
				--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
				--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
				--instrument-copy-symbol: url("./image_assets/icon-copy.png");
				--instrument-paste-symbol: url("./image_assets/icon-paste.png");
				--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
				--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
				--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
				--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
				--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
				--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
				--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
				--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
				--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
				--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
				--export-instrument-symbol: var(--export-symbol);
				--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
				--undo-symbol: url("./image_assets/icon-undo.png");
				--redo-symbol: url("./image_assets/icon-redo.png");
				--copy-symbol: url("./image_assets/icon-copy.png");
				--paste-symbol: url("./image_assets/icon-paste.png");
				--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
				--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
				--select-all-symbol: url("./image_assets/icon-SelectAll.png");
				--duplicate-symbol: url("./image_assets/icon-duplicate.png");
				--notes-up-symbol: url("./image_assets/moveNotesUp.png");
				--notes-down-symbol: url("./image_assets/moveNotesDown.png");
				--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
				--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
				--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
				} 
			
			@font-face {
				font-family: "AbyssType";
				src:
				 url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
				 }
			
				 @font-face {
				font-family: "AbyssType_small";
				src:
				 url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
				 }
			
				 #pattern-area {
					border-style: solid;
					border-color: #0a0000;
					border-bottom: 0;
					border-right: 0;
					border-top: 0;
				 }
			
				 body {
					background-image: url("https://choptop84.github.io/choptop84s-image-repository/canyonbg.png") !important;
					background-size: 200% !important;
					background-position: center top; /* Adjusted to align with the top */
					  background-repeat: no-repeat !important;
			
					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */ 
					 }
			
				 #text-content {
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_border.png");
					border-image-slice: 16 fill; 
					border-image-width: 32px; 
					border-image-repeat: repeat; 
					padding-left: 36px; 
					padding-right: 36px; 
					padding-bottom: 6px; 
				
					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
					background: #fff0;
				 }
			 #beepboxEditorContainer {
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_border.png");
					border-image-slice: 16 fill; 
					border-image-width: 32px; 
					border-image-repeat: repeat; 
					padding-left: 36px; 
					padding-right: 36px; 
					padding-bottom: 6px; 
					
					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
					background: #fff0;
				 }
			
				 .beepboxEditor button,
				 button.mobilePatternButton,
				 button.mobileTrackButton,
				 button.mobileSettingsButton,
				 button.mobilePlayButton,
				 button.mobilePauseButton,
				 button.mobileNextBarButton,
				 button.mobilePrevBarButton,
				 button.playButton,
				 button.pauseButton, 
				 button.recordButton, 
				 button.stopButton,
				 button.nextBarButton, 
				 button.prevBarButton, 
				 button.copyButton, 
				 button.pasteButton, 
				 button.exportInstrumentButton, 
				 button.importInstrumentButton, 
				 .beepboxEditor select, 
				 .beepboxEditor .select2-selection__rendered {
						 border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_button.png") !important;
						 border-image-slice: 4 fill !important; 
						border-image-width: 4px !important; 
					 border-image-repeat: stretch !important;
						 padding: 4px !important; 
			
						 image-rendering: -moz-crisp-edges !important;         /* Firefox */
						 image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
						 image-rendering: -o-crisp-edges !important;            /* Opera */
						 image-rendering: pixelated !important;                 /* Future browsers */
						 image-rendering: optimizeSpeed !important;             /* IE */
					 }
			
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
						--ui-widget-background: var(--editor-background) !important;
						border-image-source: none !important;
					}

				 html {
				 font-family: 'AbyssType';
				 }
				 div.channelBoxLabel {
					 font-family: 'AbyssType_small' !important;
				 }
		`,
        "midnight": `
		:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #757575;
			--playhead: #fff;
			--primary-text: #fff;
			--secondary-text: #acacac;
			--inverted-text: #290505;
			--text-selection: rgba(155, 155, 155, 0.99);
			--box-selection-fill: #79797970;
			--loop-accent: #646464;
			--link-accent: #707070;
			--ui-widget-background: #353535;
			--ui-widget-focus: #464646;
			--pitch-background: #222121;
			--tonic: #555955;
			--fifth-note: #1a1818;
			--third-note: #19141a;
			--white-piano-key: #a89e9e;
			--black-piano-key: #2d2424;
            --white-piano-key-text: #131200;
            --black-piano-key-text: #ffffff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #373737;
			--track-editor-bg-pitch-dim: #131313;
			--track-editor-bg-noise: #484848;
			--track-editor-bg-noise-dim: #131313;
			--track-editor-bg-mod: #373737;
			--track-editor-bg-mod-dim: #131313;
			--multiplicative-mod-slider: #555;
			--overwriting-mod-slider: #464545;
			--indicator-primary: #e0e0e0;
			--indicator-secondary: #404040;
			--select2-opt-group: #3c3b3b;
			--input-box-outline: #757575;
			--mute-button-normal: #8e8d8d;
			--mute-button-mod: #ddd;
			--mod-label-primary: #262526;
			--mod-label-secondary-text: rgb(227, 222, 225);
			--mod-label-primary-text: #b9b9b9;
			--pitch-secondary-channel-hue: 240;
			--pitch-secondary-channel-hue-scale: 228;
			--pitch-secondary-channel-sat: 73.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 25;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 240;
			--pitch-primary-channel-hue-scale: 228;
			--pitch-primary-channel-sat: 80;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 60.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 240;
			--pitch-secondary-note-hue-scale: 228;
			--pitch-secondary-note-sat: 73.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 32;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 240;
			--pitch-primary-note-hue-scale: 228;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 80.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 160;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 160;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 160;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 62;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 30;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 62;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 62;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 34;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 62;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 75;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary:    #66a;
			--disabled-note-secondary:  #447;

			
			
		}
	`,
        "gold light": `
				:root {
					-webkit-text-stroke-width: 0.5px;
					--page-margin: #cab1d3;
					--editor-background: #f4f4f4;
					--hover-preview: #2d26a2;
					--playhead: rgb(20 25 153 / 90%);
					--primary-text: #b686c3;
					--secondary-text: #970f38;
					--inverted-text: #fefdff;
					--text-selection: rgb(56 21 8 / 99%);
					--box-selection-fill: rgb(20 203 160 / 61%);
					--loop-accent: #09dc0e;
					--link-accent: #3ee669;
					--ui-widget-background: #0e0a42;
					--ui-widget-focus: #380c42;
					--pitch-background: #8daf96;
					--tonic: #a16fb1;
					--fifth-note: #d08c8c;
					--third-note: #486;
					--white-piano-key: #fbffee;
					--black-piano-key: #c9d8e5;
					--white-piano-key-text: #101160;
					--black-piano-key-text: #231b03;
					--use-color-formula: true;
					--track-editor-bg-pitch: #34456a;
					--track-editor-bg-pitch-dim: #88afad;
					--track-editor-bg-noise: #564566;
					--track-editor-bg-noise-dim: #aaa;
					--track-editor-bg-mod: #7f779d;
					--track-editor-bg-mod-dim: #aaa;
					--multiplicative-mod-slider: #807caf;
					--overwriting-mod-slider: #909cdf;
					--indicator-primary: #ae38ff;
					--indicator-secondary: #5c8dbb;
					--select2-opt-group: #581b50;
					--input-box-outline: #6f7074;
					--mute-button-normal: #db1e00;
					--mute-button-mod: #883bf9;
					--mod-label-primary: #525297;
					--mod-label-secondary-text: rgb(197 147 245);
					--mod-label-primary-text: #a3aae9;
                    --pitch-secondary-channel-hue: 26;
                    --pitch-secondary-channel-hue-scale: 214.5;
                    --pitch-secondary-channel-sat: 74.3;
                    --pitch-secondary-channel-sat-scale: -0.1;
					--pitch-secondary-channel-lum: 55;
					--pitch-secondary-channel-lum-scale: -0.05;
					--pitch-primary-channel-hue: 26;
					--pitch-primary-channel-hue-scale: 214.5;
					--pitch-primary-channel-sat: 74;
					--pitch-primary-channel-sat-scale: -0.1;
					--pitch-primary-channel-lum: 65.5;
					--pitch-primary-channel-lum-scale: -0.05;
					--pitch-secondary-note-hue: 26;
					--pitch-secondary-note-hue-scale: 214.5;
					--pitch-secondary-note-sat: 74.9;
					--pitch-secondary-note-sat-scale: -0.1;
					--pitch-secondary-note-lum: 70;
					--pitch-secondary-note-lum-scale: -0.05;
					--pitch-primary-note-hue: 26;
					--pitch-primary-note-hue-scale: 214.5;
					--pitch-primary-note-sat: 85;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 64.6;
					--pitch-primary-note-lum-scale: -0.025;
					--noise-secondary-channel-hue: 220;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 62;
					--noise-secondary-channel-lum-scale: -0.1;
					--noise-primary-channel-hue: 220;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 53;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 53.5;
					--noise-primary-channel-lum-scale: -0.1;
					--noise-secondary-note-hue: 220;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 58.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 85;
					--noise-secondary-note-lum-scale: -1;
					--noise-primary-note-hue: 220;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 56.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 54;
					--noise-primary-note-lum-scale: -1;
					--mod-secondary-channel-hue: 90;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 60;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 90;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 89;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 65;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 90;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 79;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 95;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 90;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 79;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 55;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #868;
					--disabled-note-secondary:  #767;

					
					
				}

				.promptContainerBG::before {
					box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
				}

				.beepboxEditor button, .beepboxEditor select, button {
					background-color: var(--secondary-text);
				}

				.select2-selection__rendered {
					background-color: var(--secondary-text);
				}

				.beepboxEditor .piano-button::before {
					display: none;
				}
			`,
        "amoled dark": `
				:root {
					--page-margin: #000;
					--editor-background: #020406;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #8e88ce;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #ad38f9;
					--link-accent: #bd25ff;
					--ui-widget-background: #080d1f;
					--ui-widget-focus: #060f2d;
					--pitch-background: #02060b;
					--tonic: #00113a;
					--fifth-note: #1b0019;
					--third-note: #071a00;
					--white-piano-key: #02040c;
					--black-piano-key: #02040c;
                    --white-piano-key-text: #fff;
                    --black-piano-key-text: #fff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #050829;
					--track-editor-bg-pitch-dim: #010213;
					--track-editor-bg-noise: #051529;
					--track-editor-bg-noise-dim: #010b13;
					--track-editor-bg-mod: #150529;
					--track-editor-bg-mod-dim: #0a0113;
					--multiplicative-mod-slider: #2b409c;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #7f3bec;
					--indicator-secondary: #213888;
					--select2-opt-group: #1d123c;
					--input-box-outline: #1b1e48;
					--mute-button-normal: #d234b0;
					--mute-button-mod: #263d98;
					--mod-label-primary: #090910;
					--mod-label-secondary-text: rgb(73, 69, 214);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 183;
					--pitch-secondary-channel-hue-scale: 158.7;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 183;
					--pitch-primary-channel-hue-scale: 158.7;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 183;
					--pitch-secondary-note-hue-scale: 158.7;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 183;
					--pitch-primary-note-hue-scale: 158.7;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 30;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 30;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 30;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 30;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 0;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 0;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 0;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 0;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary: #91879f;
					--disabled-note-secondary: #6a677a;

					
					
				}

			`,
        "beachcombing": `
			:root {
			  --page-margin: #010121;
  --editor-background: #020222;
  --hover-preview: #f3ffff;
  --playhead: #fff;
  --primary-text: #c1f1ff;
  --secondary-text: #546775;
  --inverted-text: black;
  --text-selection: rgba(119,68,255,0.99);
  --box-selection-fill: #3e0028;
  --loop-accent: #5e68fffc;
  --link-accent: #ff3ad5fc;
  --ui-widget-background: #1f2b52;
  --ui-widget-focus: #384e91;
  --pitch-background: #2c3155;
  --tonic: #935175;
  --fifth-note: #1f569f;
  --third-note: #704488;
  --white-piano-key: #f3f2ff;
  --black-piano-key: #4b4471;
  --white-piano-key-text: #4b4471;
  --black-piano-key-text: #fff;
  --use-color-formula: false;
			--pitch-channel-limit: 10;
  --track-editor-bg-pitch: #34406c;
  --track-editor-bg-pitch-dim: #121931;
  --track-editor-bg-noise: #562e3b;
  --track-editor-bg-noise-dim: #161313;
  --track-editor-bg-mod: #372e66;
  --track-editor-bg-mod-dim: #2a1640;
  --multiplicative-mod-slider: #606c9f;
  --overwriting-mod-slider: #6850b5;
  --indicator-primary: #ff8bd1;
  --indicator-secondary: #393e4f;
  --select2-opt-group: #5d576f;
  --input-box-outline: #222;
  --mute-button-normal: #7ce1ff;
  --mute-button-mod: #db519d;
  --pitch1-secondary-channel: #329b70;
  --pitch1-primary-channel: #53ffb8;
  --pitch1-secondary-note: #4cb98c;
  --pitch1-primary-note: #98ffd4;
  --pitch2-secondary-channel: #b08e4d;
  --pitch2-primary-channel: #ffe185;
  --pitch2-secondary-note: #91782e;
  --pitch2-primary-note: #ffd968;
  --pitch3-secondary-channel: #018e8e;
  --pitch3-primary-channel: #3de4ff;
  --pitch3-secondary-note: #24b7b7;
  --pitch3-primary-note: #a7ffff;
  --pitch4-secondary-channel: #792354;
  --pitch4-primary-channel: #ff68bd;
  --pitch4-secondary-note: #a73c78;
  --pitch4-primary-note: #ff98d2;
  --pitch5-secondary-channel: #185aab;
  --pitch5-primary-channel: #6493ff;
  --pitch5-secondary-note: #3e99d9;
  --pitch5-primary-note: #b3e3ff;
  --pitch6-secondary-channel: #953C47;
  --pitch6-primary-channel: #FF7888;
  --pitch6-secondary-note: #DF4F60;
  --pitch6-primary-note: #FFB2BB;
  --pitch7-secondary-channel: #4f007d;
  --pitch7-primary-channel: #a54cd9;
  --pitch7-secondary-note: #732b9d;
  --pitch7-primary-note: #d386ff;
  --pitch8-secondary-channel: #323c99;
  --pitch8-primary-channel: #1b61ff;
  --pitch8-secondary-note: #1848b3;
  --pitch8-primary-note: #6f9bff;
  --pitch9-secondary-channel: #1F605A;
  --pitch9-primary-channel: #69FFEA;
  --pitch9-secondary-note: #178076;
  --pitch9-primary-note: #83FFD9;
  --pitch10-secondary-channel: #6D438C;
  --pitch10-primary-channel: #CE8BFF;
  --pitch10-secondary-note: #8040B0;
  --pitch10-primary-note: #DFACFF;
  --noise1-secondary-channel: #635070;
  --noise1-primary-channel: #9071db;
  --noise1-secondary-note: #915dc1;
  --noise1-primary-note: #c5a5ff;
  --noise2-secondary-channel: #993367;
  --noise2-primary-channel: #dd777c;
  --noise2-secondary-note: #cc6695;
  --noise2-primary-note: #f0bbd1;
  --noise3-secondary-channel: #4a8c8f;
  --noise3-primary-channel: #77c5dd;
  --noise3-secondary-note: #6fb4cf;
  --noise3-primary-note: #bbf2ff;
  --noise4-secondary-channel: #8e3e7d;
  --noise4-primary-channel: #c682d2;
  --noise4-secondary-note: #b871c1;
  --noise4-primary-note: #ffb8f0;
  --noise5-secondary-channel: #785e37;
  --noise5-primary-channel: #bb9d77;
  --noise5-secondary-note: #aa8c66;
  --noise5-primary-note: #e2d1b2;
  --mod1-secondary-channel: #4e8397;
  --mod1-primary-channel: #92e6f3;
  --mod1-secondary-note: #76b9d9;
  --mod1-primary-note: #cde3ff;
  --mod2-secondary-channel: #ad5774;
  --mod2-primary-channel: #eba4ae;
  --mod2-secondary-note: #c9719b;
  --mod2-primary-note: #fdcee7;
  --mod3-secondary-channel: #6f579f;
  --mod3-primary-channel: #b192f7;
  --mod3-secondary-note: #7c3fc8;
  --mod3-primary-note: #f8ddff;
  --mod4-secondary-channel: #a88a36;
  --mod4-primary-channel: #bec825;
  --mod4-secondary-note: #aecb57;
  --mod4-primary-note: #dee9bd;
  --mod-label-primary: #2c2c56;
  --mod-label-secondary-text: rgb(71,69,147);
  --mod-label-primary-text: white;
  --disabled-note-primary: #91879f;
  --disabled-note-secondary: #6a677a;

  
  

			}
		`,
        "roe": `
			:root {
			--page-margin: #050000;
			--editor-background: #050000;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #b8cee0;
			--secondary-text: #cb3434;
			--inverted-text: black;
			--text-selection: rgb(255 68 68 / 99%);
			--box-selection-fill: rgb(255 0 0 / 30%);
			--loop-accent: #7744FF;
			--link-accent: #FF2A2A;
			--ui-widget-background: #1a2642;
			--ui-widget-focus: #2c3f6d;
			--pitch-background: #15111a;
			--tonic: #1b3041;
			--fifth-note: #381818;
			--third-note: #733f30;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #302938;
			--track-editor-bg-pitch-dim: #211c26;
			--track-editor-bg-noise: #261f42;
			--track-editor-bg-noise-dim: #1a152d;
			--track-editor-bg-mod: #183049;
			--track-editor-bg-mod-dim: #102132;
			--multiplicative-mod-slider: #344a7f;
			--overwriting-mod-slider: #344a7f;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #800000;
			--select2-opt-group: #141e34;
			--input-box-outline: #141e34;
			--mute-button-normal: #299eff;
			--mute-button-mod: #165a93;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #4281FF;
			--noise1-primary-channel: #96b9ff;
			--noise1-secondary-note: #4281FF;
			--noise1-primary-note: #96b9ff;
			--noise2-secondary-channel: #7347FF;
			--noise2-primary-channel: #c3b0ff;
			--noise2-secondary-note: #7347FF;
			--noise2-primary-note: #c3b0ff;
			--noise3-secondary-channel: #9F3CBF;
			--noise3-primary-channel: #e29cf9;
			--noise3-secondary-note: #9F3CBF;
			--noise3-primary-note: #e29cf9;
			--noise4-secondary-channel: #D3326F;
			--noise4-primary-channel: #fb9bbf;
			--noise4-secondary-note: #D3326F;
			--noise4-primary-note: #fb9bbf;
			--noise5-secondary-channel: #FF2A2A;
			--noise5-primary-channel: #ffa2a2;
			--noise5-secondary-note: #FF2A2A;
			--noise5-primary-note: #ffa2a2;
			--mod1-secondary-channel: #47587a;
			--mod1-primary-channel: #96b9ff;
			--mod1-secondary-note: #47587a;
			--mod1-primary-note: #96b9ff;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #c3b0ff;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #c3b0ff;
			--mod3-secondary-channel: #6f4c7b;
			--mod3-primary-channel: #e29cf9;
			--mod3-secondary-note: #6f4c7b;
			--mod3-primary-note: #e29cf9;
			--mod4-secondary-channel: #9e6279;
			--mod4-primary-channel: #fb9bbf;
			--mod4-secondary-note: #9e6279;
			--mod4-primary-note: #fb9bbf;
			--mod-label-primary: #15111a;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: white;
			--disabled-note-primary: #c9c9c9;
			--disabled-note-secondary: #616161;

			
			
		}`,
        "moonlight": `
			:root {
			--page-margin: #020514;
			--editor-background: #020514;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #D4DCE9;
			--secondary-text: #3E87DA;
			--inverted-text: black;
			--text-selection: #03599bd9;
			--box-selection-fill: hsl(206deg 66% 41% / 85%);
			--loop-accent: #639BD6;
			--link-accent: #A8C6E8;
			--ui-widget-background: #1e2940;
			--ui-widget-focus: #324b81;
			--pitch-background: #223849;
			--tonic: #33536c;
			--fifth-note: hsl(206deg 36% 16%);
			--third-note: #528d9b;
			--white-piano-key: #c1bfe9;
			--black-piano-key: #454354;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #25568d80;
			--track-editor-bg-pitch-dim: #10253c80;
			--track-editor-bg-noise: #25568d80;
			--track-editor-bg-noise-dim: #10253c80;
			--track-editor-bg-mod: #25568d80;
			--track-editor-bg-mod-dim: #10253c80;
			--multiplicative-mod-slider: #0476cd;
			--overwriting-mod-slider: #035899;
			--indicator-primary: #57a1f4;
			--indicator-secondary: #2e5684;
			--select2-opt-group: #24355c;
			--input-box-outline: #141e34;
			--mute-button-normal: #6ebffc;
			--mute-button-mod: #0a92fa;
			--pitch1-secondary-channel: #47425c;
			--pitch1-primary-channel: #918bac;
			--pitch1-secondary-note: #6b6489;
			--pitch1-primary-note: #a8a3bf;
			--pitch2-secondary-channel: #626493;
			--pitch2-primary-channel: #bdbed3;
			--pitch2-secondary-note: #626493;
			--pitch2-primary-note: #bdbed3;
			--pitch3-secondary-channel: #6e89b4;
			--pitch3-primary-channel: #d4dce9;
			--pitch3-secondary-note: #6e89b4;
			--pitch3-primary-note: #d4dce9;
			--pitch4-secondary-channel: #4c77a9;
			--pitch4-primary-channel: #a8c6e8;
			--pitch4-secondary-note: #4c77a9;
			--pitch4-primary-note: #a8c6e8;
			--pitch5-secondary-channel: #314e6d;
			--pitch5-primary-channel: #639bd6;
			--pitch5-secondary-note: #46698f;
			--pitch5-primary-note: #639bd6;
			--pitch6-secondary-channel: #143d6b;
			--pitch6-primary-channel: #3e87da;
			--pitch6-secondary-note: #143d6b;
			--pitch6-primary-note: #3e87da;
			--pitch7-secondary-channel: #314e6d;
			--pitch7-primary-channel: #639bd6;
			--pitch7-secondary-note: #314e6d;
			--pitch7-primary-note: #639bd6;
			--pitch8-secondary-channel: #4c77a9;
			--pitch8-primary-channel: #a8c6e8;
			--pitch8-secondary-note: #4c77a9;
			--pitch8-primary-note: #a8c6e8;
			--pitch9-secondary-channel: #6e89b4;
			--pitch9-primary-channel: #d4dce9;
			--pitch9-secondary-note: #6e89b4;
			--pitch9-primary-note: #d4dce9;
			--pitch10-secondary-channel: #626493;
			--pitch10-primary-channel: #bdbed3;
			--pitch10-secondary-note: #626493;
			--pitch10-primary-note: #bdbed3;
			--noise1-secondary-channel: #4b4a55;
			--noise1-primary-channel: #9795a3;
			--noise1-secondary-note: #4b4a55;
			--noise1-primary-note: #9795a3;
			--noise2-secondary-channel: #858e9d;
			--noise2-primary-channel: #d7dce5;
			--noise2-secondary-note: #858e9d;
			--noise2-primary-note: #d7dce5;
			--noise3-secondary-channel: #394e65;
			--noise3-primary-channel: #809bb7;
			--noise3-secondary-note: #394e65;
			--noise3-primary-note: #809bb7;
			--noise4-secondary-channel: #37577b;
			--noise4-primary-channel: #6189b8;
			--noise4-secondary-note: #37577b;
			--noise4-primary-note: #6189b8;
			--noise5-secondary-channel: #223849;
			--noise5-primary-channel: #5588af;
			--noise5-secondary-note: #223849;
			--noise5-primary-note: #5588af;
			--mod1-secondary-channel: #3e336c;
			--mod1-primary-channel: #6d60a4;
			--mod1-secondary-note: #3e336c;
			--mod1-primary-note: #6d60a4;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #bdbed3;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #bdbed3;
			--mod3-secondary-channel: #6b91bd;
			--mod3-primary-channel: #4b8fdd;
			--mod3-secondary-note: #597ca7;
			--mod3-primary-note: #7eade3;
			--mod4-secondary-channel: #14559f;
			--mod4-primary-channel: #3386e6;
			--mod4-secondary-note: #14559f;
			--mod4-primary-note: #3386e6;
			--mod-label-primary: #1e2940;
			--mod-label-secondary-text: #748ebe;
			--mod-label-primary-text: white;
			--disabled-note-primary: #828282;
			--disabled-note-secondary: #4f4f4f;
			
			
			
		}`,
        "autumn": `
		:root {
			--page-margin: #060304;
			--editor-background: #060304;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 80 76);
			--box-selection-fill: rgb(174 73 81 / 45%);
			--loop-accent: #834A69;
			--link-accent: #98f;
			--ui-widget-background: #2a2523;
			--ui-widget-focus: #4e4c44;
			--pitch-background: #121212;
			--tonic: #4f4f4f;
			--fifth-note: #222;
			--third-note: #778473;
			--white-piano-key: #b59b9b;
			--black-piano-key: #231e1e;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #352f38;
			--track-editor-bg-pitch-dim: #232025;
			--track-editor-bg-noise: #3c3029;
			--track-editor-bg-noise-dim: #251d19;
			--track-editor-bg-mod: #202623;
			--track-editor-bg-mod-dim: #131715;
			--multiplicative-mod-slider: #D9D16E;
			--overwriting-mod-slider: #2D826F;
			--indicator-primary: #D9D16E;
			--indicator-secondary: #444226;
			--select2-opt-group: #20191c;
			--input-box-outline: #20191c;
			--mute-button-normal: var(--pitch2-primary-channel);
			--mute-button-mod: var(--pitch4-primary-channel);
			--pitch1-secondary-channel: #704a34;
			--pitch1-primary-channel: #D9895A;
			--pitch1-secondary-note: #704a34;
			--pitch1-primary-note: #D9895A;
			--pitch2-secondary-channel: #5f3538;
			--pitch2-primary-channel: #AE4951;
			--pitch2-secondary-note: #5f3538;
			--pitch2-primary-note: #AE4951;
			--pitch3-secondary-channel: #5c4336;
			--pitch3-primary-channel: #CA9A81;
			--pitch3-secondary-note: #5c4336;
			--pitch3-primary-note: #CA9A81;
			--pitch4-secondary-channel: #1d3143;
			--pitch4-primary-channel: #386995;
			--pitch4-secondary-note: #1d3143;
			--pitch4-primary-note: #386995;
			--pitch5-secondary-channel: #9c8a58;
			--pitch5-primary-channel: #D9D16E;
			--pitch5-secondary-note: #7c783f;
			--pitch5-primary-note: #D9D16E;
			--pitch6-secondary-channel: #886562;
			--pitch6-primary-channel: #D3A9A5;
			--pitch6-secondary-note: #886562;
			--pitch6-primary-note: #D3A9A5;
			--pitch7-secondary-channel: #1c3f37;
			--pitch7-primary-channel: #2D826F;
			--pitch7-secondary-note: #1c3f37;
			--pitch7-primary-note: #2D826F;
			--pitch8-secondary-channel: #442e2d;
			--pitch8-primary-channel: #815150;
			--pitch8-secondary-note: #442e2d;
			--pitch8-primary-note: #815150;
			--pitch9-secondary-channel: #8e6f60;
			--pitch9-primary-channel: #E5B8A1;
			--pitch9-secondary-note: #8e6f60;
			--pitch9-primary-note: #E5B8A1;
			--pitch10-secondary-channel: #4f3142;
			--pitch10-primary-channel: #834A69;
			--pitch10-secondary-note: #4f3142;
			--pitch10-primary-note: #834A69;
			--noise1-secondary-channel: #6b5346;
			--noise1-primary-channel: #b99c89;
			--noise1-secondary-note: #6b5346;
			--noise1-primary-note: #F0D0BB;
			--noise2-secondary-channel: #4a3839;
			--noise2-primary-channel: #9c6b6e;
			--noise2-secondary-note: #4a3839;
			--noise2-primary-note: #c18b8f;
			--noise3-secondary-channel: #2d3c4a;
			--noise3-primary-channel: #536e86;
			--noise3-secondary-note: #2d3c4a;
			--noise3-primary-note: #8fa8c0;
			--noise4-secondary-channel: #273f3a;
			--noise4-primary-channel: #4e8377;
			--noise4-secondary-note: #273f3a;
			--noise4-primary-note: #87baae;
			--noise5-secondary-channel: #372730;
			--noise5-primary-channel: #7f5e70;
			--noise5-secondary-note: #372730;
			--noise5-primary-note: #cc96b3;
			--mod1-secondary-channel: #783f1f;
			--mod1-primary-channel: #dc6d2c;
			--mod1-secondary-note: #783f1f;
			--mod1-primary-note: #dc6d2c;
			--mod2-secondary-channel: #0b3153;
			--mod2-primary-channel: #1464ac;
			--mod2-secondary-note: #0b3153;
			--mod2-primary-note: #1464ac;
			--mod3-secondary-channel: #075040;
			--mod3-primary-channel: #08a17f;
			--mod3-secondary-note: #075040;
			--mod3-primary-note: #08a17f;
			--mod4-secondary-channel: #631640;
			--mod4-primary-channel: #b4186d;
			--mod4-secondary-note: #631640;
			--mod4-primary-note: #b4186d;
			--mod-label-primary: #000;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;

			
			
		}`,
        "fruit": `
		:root {
			--page-margin: #040507;
			--editor-background: #040507;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 103 76);
			--box-selection-fill: rgb(174 109 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #22222c;
			--ui-widget-focus: #39394c;
			--pitch-background: #101010;
			--tonic: #2c2d34;
			--fifth-note: #191a20;
			--third-note: #1f241e;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #2b2d40;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #3c3644;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #322a2a;
			--track-editor-bg-mod-dim: #191515;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #EAAC9D;
			--indicator-secondary: #5e413a;
			--select2-opt-group: #191920;
			--input-box-outline: #191920;
			--mute-button-normal: #798FA7;
			--mute-button-mod: #354457;
			--pitch1-secondary-channel: #91655a;
			--pitch1-primary-channel: #EAAC9D;
			--pitch1-secondary-note: #91655a;
			--pitch1-primary-note: #EAAC9D;
			--pitch2-secondary-channel: #8f6513;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #8f6513;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #212f46;
			--pitch3-primary-channel: #34558B;
			--pitch3-secondary-note: #212f46;
			--pitch3-primary-note: #34558B;
			--pitch4-secondary-channel: #2e6b5b;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #2e6b5b;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #555D46;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #555D46;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #A2553B;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #A2553B;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #7b4021;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #7b4021;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #847753;
			--pitch8-primary-channel: #EFDAA3;
			--pitch8-secondary-note: #847753;
			--pitch8-primary-note: #EFDAA3;
			--pitch9-secondary-channel: #2c3642;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #2c3642;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #0d4453;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #0d4453;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #3B3D4A;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #3B3D4A;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #625f5e;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #625f5e;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;

			
			
		}`,
        "sunset": `
		:root {
			--page-margin: #040300;
			--editor-background: #040300;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(94 0 157);
			--box-selection-fill: rgb(174 173 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #241b24;
			--ui-widget-focus: #3a2e39;
			--pitch-background: #141414;
			--tonic: #2C212B;
			--fifth-note: #2E2A15;
			--third-note: #1f2b1a;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #2d2e42;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #393340;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #232a2c;
			--track-editor-bg-mod-dim: #151819;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #F28891;
			--indicator-secondary: #601d23;
			--select2-opt-group: #151015;
			--input-box-outline: #151015;
			--mute-button-normal: #E4739D;
			--mute-button-mod: #9650A6;
			--pitch1-secondary-channel: #7F7721;
			--pitch1-primary-channel: #F3E79A;
			--pitch1-secondary-note: #7F7721;
			--pitch1-primary-note: #F3E79A;
			--pitch2-secondary-channel: #785E20;
			--pitch2-primary-channel: #F7D086;
			--pitch2-secondary-note: #785E20;
			--pitch2-primary-note: #F7D086;
			--pitch3-secondary-channel: #6E4219;
			--pitch3-primary-channel: #F9B881;
			--pitch3-secondary-note: #6E4219;
			--pitch3-primary-note: #F9B881;
			--pitch4-secondary-channel: #79351F;
			--pitch4-primary-channel: #F7A086;
			--pitch4-secondary-note: #79351F;
			--pitch4-primary-note: #F7A086;
			--pitch5-secondary-channel: #81272F;
			--pitch5-primary-channel: #F28891;
			--pitch5-secondary-note: #81272F;
			--pitch5-primary-note: #F28891;
			--pitch6-secondary-channel: #8F224D;
			--pitch6-primary-channel: #E4739D;
			--pitch6-secondary-note: #8F224D;
			--pitch6-primary-note: #E4739D;
			--pitch7-secondary-channel: #611548;
			--pitch7-primary-channel: #CF63A6;
			--pitch7-secondary-note: #611548;
			--pitch7-primary-note: #CF63A6;
			--pitch8-secondary-channel: #561253;
			--pitch8-primary-channel: #B557A9;
			--pitch8-secondary-note: #4D104A;
			--pitch8-primary-note: #B557A9;
			--pitch9-secondary-channel: #4c1260;
			--pitch9-primary-channel: #9650A6;
			--pitch9-secondary-note: #3C0F4C;
			--pitch9-primary-note: #9650A6;
			--pitch10-secondary-channel: #3e1d78;
			--pitch10-primary-channel: #704D9E;
			--pitch10-secondary-note: #27124C;
			--pitch10-primary-note: #704D9E;
			--noise1-secondary-channel: #A7A578;
			--noise1-primary-channel: #EFE9AC;
			--noise1-secondary-note: #A7A578;
			--noise1-primary-note: #EFE9AC;
			--noise2-secondary-channel: #947A5F;
			--noise2-primary-channel: #FBCEA8;
			--noise2-secondary-note: #947A5F;
			--noise2-primary-note: #FBCEA8;
			--noise3-secondary-channel: #A3635D;
			--noise3-primary-channel: #F4A5AB;
			--noise3-secondary-note: #A3635D;
			--noise3-primary-note: #F4A5AB;
			--noise4-secondary-channel: #724D60;
			--noise4-primary-channel: #CD90B6;
			--noise4-secondary-note: #724D60;
			--noise4-primary-note: #CD90B6;
			--noise5-secondary-channel: #503F5C;
			--noise5-primary-channel: #7C6A9E;
			--noise5-secondary-note: #503F5C;
			--noise5-primary-note: #7C6A9E;
			--mod1-secondary-channel: #371883;
			--mod1-primary-channel: #6416C6;
			--mod1-secondary-note: #1F0A52;
			--mod1-primary-note: #6416C6;
			--mod2-secondary-channel: #690645;
			--mod2-primary-channel: #E52FA2;
			--mod2-secondary-note: #690645;
			--mod2-primary-note: #E52FA2;
			--mod3-secondary-channel: #943618;
			--mod3-primary-channel: #eb5b2c;
			--mod3-secondary-note: #943618;
			--mod3-primary-note: #eb5b2c;
			--mod4-secondary-channel: #928409;
			--mod4-primary-channel: #ecd50e;
			--mod4-secondary-note: #928409;
			--mod4-primary-note: #ecd50e;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;

			
			
		}`,
        "toxic": `
		:root {
			--page-margin: #010003;
			--editor-background: #010003;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(147 195 0);
			--box-selection-fill: rgb(145 174 73 / 49%);
			--loop-accent: #BCDE2C;
			--link-accent: #edff9f;
			--ui-widget-background: #261e2e;
			--ui-widget-focus: #322042;
			--pitch-background: #141c15;
			--tonic: #282c21;
			--fifth-note: #18221a;
			--third-note: #25421a;
			--white-piano-key: #e3e3e3;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #38293e;
			--track-editor-bg-pitch-dim: #251c29;
			--track-editor-bg-noise: #2c304c;
			--track-editor-bg-noise-dim: #191b2b;
			--track-editor-bg-mod: #311b32;
			--track-editor-bg-mod-dim: #1d101e;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #aae9ff;
			--indicator-secondary: #253e46;
			--select2-opt-group: #110d15;
			--input-box-outline: #110d15;
			--mute-button-normal: #8f5ad1;
			--mute-button-mod: #482574;
			--pitch1-secondary-channel: #6b7f19;
			--pitch1-primary-channel: #BCDE2C;
			--pitch1-secondary-note: #6b7f19;
			--pitch1-primary-note: #BCDE2C;
			--pitch2-secondary-channel: #497a31;
			--pitch2-primary-channel: #7BD152;
			--pitch2-secondary-note: #497a31;
			--pitch2-primary-note: #7BD152;
			--pitch3-secondary-channel: #286b40;
			--pitch3-primary-channel: #45BE71;
			--pitch3-secondary-note: #286b40;
			--pitch3-primary-note: #45BE71;
			--pitch4-secondary-channel: #125140;
			--pitch4-primary-channel: #25A884;
			--pitch4-secondary-note: #125140;
			--pitch4-primary-note: #25A884;
			--pitch5-secondary-channel: #114c49;
			--pitch5-primary-channel: #21908C;
			--pitch5-secondary-note: #114c49;
			--pitch5-primary-note: #21908C;
			--pitch6-secondary-channel: #143843;
			--pitch6-primary-channel: #2B788E;
			--pitch6-secondary-note: #143843;
			--pitch6-primary-note: #2B788E;
			--pitch7-secondary-channel: #1d354e;
			--pitch7-primary-channel: #355F8D;
			--pitch7-secondary-note: #1a2f46;
			--pitch7-primary-note: #355F8D;
			--pitch8-secondary-channel: #2c2e5a;
			--pitch8-primary-channel: #414486;
			--pitch8-secondary-note: #1e1f3d;
			--pitch8-primary-note: #414486;
			--pitch9-secondary-channel: #3c1f5e;
			--pitch9-primary-channel: #5e3b89;
			--pitch9-secondary-note: #25133b;
			--pitch9-primary-note: #5e3b89;
			--pitch10-secondary-channel: #510264;
			--pitch10-primary-channel: #720d8a;
			--pitch10-secondary-note: #440154;
			--pitch10-primary-note: #720d8a;
			--noise1-secondary-channel: #BCDE2C;
			--noise1-primary-channel: #edff9f;
			--noise1-secondary-note: #BCDE2C;
			--noise1-primary-note: #edff9f;
			--noise2-secondary-channel: #45BE71;
			--noise2-primary-channel: #89ffb4;
			--noise2-secondary-note: #45BE71;
			--noise2-primary-note: #89ffb4;
			--noise3-secondary-channel: #21908C;
			--noise3-primary-channel: #72fffa;
			--noise3-secondary-note: #21908C;
			--noise3-primary-note: #72fffa;
			--noise4-secondary-channel: #355F8D;
			--noise4-primary-channel: #7cb6f5;
			--noise4-secondary-note: #355F8D;
			--noise4-primary-note: #7cb6f5;
			--noise5-secondary-channel: #482574;
			--noise5-primary-channel: #8f5ad1;
			--noise5-secondary-note: #48257A;
			--noise5-primary-note: #8f5ad1;
			--mod1-secondary-channel: #815a16;
			--mod1-primary-channel: #F5AB29;
			--mod1-secondary-note: #815a16;
			--mod1-primary-note: #F5AB29;
			--mod2-secondary-channel: #4d341a;
			--mod2-primary-channel: #C98540;
			--mod2-secondary-note: #4d341a;
			--mod2-primary-note: #C98540;
			--mod3-secondary-channel: #643734;
			--mod3-primary-channel: #A75D58;
			--mod3-secondary-note: #643734;
			--mod3-primary-note: #A75D58;
			--mod4-secondary-channel: #461430;
			--mod4-primary-channel: #812359;
			--mod4-secondary-note: #3f112b;
			--mod4-primary-note: #812359;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;

			
			
		}`,
        "violet verdant": `
		:root {
			--page-margin: #0e031a;
			--editor-background: #0e031a;
			--hover-preview: #e5ffea;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: #f0e0ff;
			--secondary-text: #706087;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #225835;
			--loop-accent: #8f00fb;
			--link-accent: #82dd5d;
			--ui-widget-background: #303c66;
			--ui-widget-focus: #62559b;
			--pitch-background: #293b52;
			--tonic: #5b46ad;
			--fifth-note: #42604d;
			--third-note: #884471;
			--white-piano-key: #f6e8ff;
			--black-piano-key: #5a4972;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #392a46;
			--track-editor-bg-pitch-dim: #1c1d28;
			--track-editor-bg-noise: #403150;
			--track-editor-bg-noise-dim: #161313;
			--track-editor-bg-mod: #253c25;
			--track-editor-bg-mod-dim: #0c1811;
			--multiplicative-mod-slider: #606c9f;
			--overwriting-mod-slider: #6850b5;
			--indicator-primary: #9c64f7;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #5d576f;
			--input-box-outline: #403150;
			--mute-button-normal: #82dd5d;
			--mute-button-mod: #945de5;
			--mod-label-primary: #312840;
			--mod-label-secondary-text: rgb(88 70 104);
			--mod-label-primary-text: #82dd5d;
			--pitch-secondary-channel-hue: 64;
			--pitch-secondary-channel-hue-scale: 6.1;
			--pitch-secondary-channel-sat: 63.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 64;
			--pitch-primary-channel-hue-scale: 6.1;
			--pitch-primary-channel-sat: 90;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 32;
			--pitch-secondary-note-hue-scale: 6.1;
			--pitch-secondary-note-sat: 87.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 64;
			--pitch-primary-note-hue-scale: 6.1;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 192;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 45;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 32;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 192;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 43.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 45;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 192;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 132;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 132;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 100;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 132;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #91879f;
			--disabled-note-secondary: #6a677a;

			
			
		}`,
        "portal": `
		:root {
			--page-margin: #04081a;
			--editor-background: #04081a;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: rgb(0 72 181);
			--loop-accent: #44d4ff;
			--link-accent: #ffa500;
			--ui-widget-background: #212c4a;
			--ui-widget-focus: #121f42;
			--pitch-background: #1b263e;
			--tonic: #995d00;
			--fifth-note: #0898a1;
			--third-note: #8a52ce;
			--white-piano-key: #ffffff;
			--black-piano-key: #516d7a;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #213352;
			--track-editor-bg-pitch-dim: #152032;
			--track-editor-bg-noise: #403524;
			--track-editor-bg-noise-dim: #2a1f0e;
			--track-editor-bg-mod: #234;
			--track-editor-bg-mod-dim: #123;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #5490ff;
			--indicator-secondary: #444;
			--select2-opt-group: #585858;
			--input-box-outline: #333;
			--mute-button-normal: #3372ff;
			--mute-button-mod: #dd872f;
			--pitch1-secondary-channel: #0099A1;
			--pitch1-primary-channel: #77f7ff;
			--pitch1-secondary-note: #00BDC7;
			--pitch1-primary-note: #92F9FF;
			--pitch2-secondary-channel: #0083a1;
			--pitch2-primary-channel: #35d9ff;
			--pitch2-secondary-note: #0083a1;
			--pitch2-primary-note: #a4eeff;
			--pitch3-secondary-channel: #0074c7;
			--pitch3-primary-channel: #3caeff;
			--pitch3-secondary-note: #00477a;
			--pitch3-primary-note: #aadcff;
			--pitch4-secondary-channel: #0039a1;
			--pitch4-primary-channel: #2673ff;
			--pitch4-secondary-note: #001f56;
			--pitch4-primary-note: #9bbeff;
			--pitch5-secondary-channel: #31148b;
			--pitch5-primary-channel: #7042ff;
			--pitch5-secondary-note: #190656;
			--pitch5-primary-note: #b79fff;
			--pitch6-secondary-channel: #979934;
			--pitch6-primary-channel: #fbff2f;
			--pitch6-secondary-note: #5d5e0a;
			--pitch6-primary-note: #fdff9a;
			--pitch7-secondary-channel: #b78f00;
			--pitch7-primary-channel: #ffd747;
			--pitch7-secondary-note: #5e3d00;
			--pitch7-primary-note: #ffe381;
			--pitch8-secondary-channel: #9d6500;
			--pitch8-primary-channel: #ffa400;
			--pitch8-secondary-note: #583900;
			--pitch8-primary-note: #ffd07c;
			--pitch9-secondary-channel: #744203;
			--pitch9-primary-channel: #ff8e00;
			--pitch9-secondary-note: #502d00;
			--pitch9-primary-note: #ffcb89;
			--pitch10-secondary-channel: #a32d00;
			--pitch10-primary-channel: #ff885b;
			--pitch10-secondary-note: #521700;
			--pitch10-primary-note: #ffb397;
			--noise1-secondary-channel: #6e2210;
			--noise1-primary-channel: #ff4600;
			--noise1-secondary-note: #4c1a08;
			--noise1-primary-note: #ffc9b4;
			--noise2-secondary-channel: #6a3110;
			--noise2-primary-channel: #ff782a;
			--noise2-secondary-note: #4c1f05;
			--noise2-primary-note: #ffb488;
			--noise3-secondary-channel: #72460e;
			--noise3-primary-channel: #d9871f;
			--noise3-secondary-note: #442905;
			--noise3-primary-note: #ffdcae;
			--noise4-secondary-channel: #837a0f;
			--noise4-primary-channel: #f7ea55;
			--noise4-secondary-note: #605906;
			--noise4-primary-note: #fff9ab;
			--noise5-secondary-channel: #8c8f00;
			--noise5-primary-channel: #fdff90;
			--noise5-secondary-note: #606200;
			--noise5-primary-note: #feffbc;
			--mod1-secondary-channel: #561b97;
			--mod1-primary-channel: #aa66f5;
			--mod1-secondary-note: #30075c;
			--mod1-primary-note: #cd9fff;
			--mod2-secondary-channel: #5116df;
			--mod2-primary-channel: #6b2dff;
			--mod2-secondary-note: #36138b;
			--mod2-primary-note: #bea3ff;
			--mod3-secondary-channel: #2535a1;
			--mod3-primary-channel: #3f57ff;
			--mod3-secondary-note: #0e185c;
			--mod3-primary-note: #8494ff;
			--mod4-secondary-channel: #1b5883;
			--mod4-primary-channel: #5eb7f5;
			--mod4-secondary-note: #072f4a;
			--mod4-primary-note: #63beff;
			--mod-label-primary: #24293a;
			--mod-label-secondary-text: #454d4e;
			--mod-label-primary-text: #7bd4ff;
			--disabled-note-primary: #072f4a;
			--disabled-note-secondary: #6585a7;

			
			
		}`,
        "fusion": `:root {
			--page-margin: #0c0306;
			--editor-background: #0c0306;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #26d9cd;
			--secondary-text: #ff6666;
			--inverted-text: white;
			--text-selection: #ffffff;
			--box-selection-fill: #ff00004d;
			--loop-accent: #ff6666;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: hsl(61deg 100% 70% / 25%);
			--tonic: #66a3ff40;
			--fifth-note: #ff666640;
			--third-note: #48640;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #404040bf;
			--track-editor-bg-pitch-dim: #151515;
			--track-editor-bg-noise: #404040bf;
			--track-editor-bg-noise-dim: #151515;
			--track-editor-bg-mod: #404040bf;
			--track-editor-bg-mod-dim: #151515;
			--multiplicative-mod-slider: #ef7692;
			--overwriting-mod-slider: #f43e69;
			--indicator-primary: #26d9cd;
			--indicator-secondary: hsl(176deg 70% 25%);
			--select2-opt-group: #232323;
			--input-box-outline: #141e34;
			--mute-button-normal: #26d9cd;
			--mute-button-mod: hsl(346deg 70% 50%);
			--pitch1-secondary-channel: #bf4040;
			--pitch1-primary-channel: #ff6666;
			--pitch1-secondary-note: #bf4040;
			--pitch1-primary-note: #ff6666;
			--pitch2-secondary-channel: #bf5b40;
			--pitch2-primary-channel: #ff8766;
			--pitch2-secondary-note: #bf5b40;
			--pitch2-primary-note: #ff8766;
			--pitch3-secondary-channel: #bf7940;
			--pitch3-primary-channel: #ffab66;
			--pitch3-secondary-note: #bf7940;
			--pitch3-primary-note: #ffab66;
			--pitch4-secondary-channel: #bf9b40;
			--pitch4-primary-channel: #ffd466;
			--pitch4-secondary-note: #bf9b40;
			--pitch4-primary-note: #ffd466;
			--pitch5-secondary-channel: #bdbf40;
			--pitch5-primary-channel: #fcff66;
			--pitch5-secondary-note: #bdbf40;
			--pitch5-primary-note: #fcff66;
			--pitch6-secondary-channel: #9dbf40;
			--pitch6-primary-channel: #d6ff66;
			--pitch6-secondary-note: #9dbf40;
			--pitch6-primary-note: #d6ff66;
			--pitch7-secondary-channel: #9dbf40;
			--pitch7-primary-channel: #fcff66;
			--pitch7-secondary-note: #9dbf40;
			--pitch7-primary-note: #fcff66;
			--pitch8-secondary-channel: #bf9b40;
			--pitch8-primary-channel: #ffd466;
			--pitch8-secondary-note: #bf9b40;
			--pitch8-primary-note: #ffd466;
			--pitch9-secondary-channel: #bf5b40;
			--pitch9-primary-channel: #ffab66;
			--pitch9-secondary-note: #bf5b40;
			--pitch9-primary-note: #ffab66;
			--pitch10-secondary-channel: #d15a1f;
			--pitch10-primary-channel: #ff8766;
			--pitch10-secondary-note: #d15a1f;
			--pitch10-primary-note: #ff8766;
			--noise1-secondary-channel: #4073bf;
			--noise1-primary-channel: #66a3ff;
			--noise1-secondary-note: #4073bf;
			--noise1-primary-note: #66a3ff;
			--noise2-secondary-channel: #405dbf;
			--noise2-primary-channel: #668aff;
			--noise2-secondary-note: #405dbf;
			--noise2-primary-note: #668aff;
			--noise3-secondary-channel: #4f40bf;
			--noise3-primary-channel: #7866ff;
			--noise3-secondary-note: #4f40bf;
			--noise3-primary-note: #7866ff;
			--noise4-secondary-channel: #8840bf;
			--noise4-primary-channel: #bd66ff;
			--noise4-secondary-note: #8840bf;
			--noise4-primary-note: #bd66ff;
			--noise5-secondary-channel: #bf40b5;
			--noise5-primary-channel: #ff66f2;
			--noise5-secondary-note: #bf40b5;
			--noise5-primary-note: #ff66f2;
			--mod1-secondary-channel: #cc6666;
			--mod1-primary-channel: #ff9999;
			--mod1-secondary-note: #cc6666;
			--mod1-primary-note: #ff9999;
			--mod2-secondary-channel: #cc7766;
			--mod2-primary-channel: #ffaa99;
			--mod2-secondary-note: #bf5540;
			--mod2-primary-note: #ffaa99;
			--mod3-secondary-channel: #cc8866;
			--mod3-primary-channel: #ffbb99;
			--mod3-secondary-note: #cc8866;
			--mod3-primary-note: #ffbb99;
			--mod4-secondary-channel: #cc9966;
			--mod4-primary-channel: #ffcc99;
			--mod4-secondary-note: #cc9966;
			--mod4-primary-note: #ffcc99;
			--mod-label-primary: #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text: black;
			--disabled-note-primary: #696969;
			--disabled-note-secondary: #232323;

			
			
		}`,
        "inverse": `:root {
			--page-margin: #c4c8e3;
			--editor-background: #c4c8e3;
			--hover-preview: #000000;
			--playhead: #243953;
			--primary-text: black;
			--secondary-text: #855b95;
			--inverted-text: black;
			--text-selection: rgb(132 125 255);
			--box-selection-fill: rgb(174 109 73 / 65%);
			--loop-accent: #EC897D;
			--link-accent: #4e00c8;
			--ui-widget-background: #e7e7ff;
			--ui-widget-focus: #d0d3e9;
			--pitch-background: #ffffff;
			--tonic: #bbbbbb;
			--fifth-note: #dcdcdc;
			--third-note: #dce1da;
			--white-piano-key: #ffffff;
			--black-piano-key: #615f66;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #e9ebff;
			--track-editor-bg-pitch-dim: #e9ebff;
			--track-editor-bg-noise: #fdf2fe;
			--track-editor-bg-noise-dim: #fdf2fe;
			--track-editor-bg-mod: #dbdefe;
			--track-editor-bg-mod-dim: #dbdefe;
			--multiplicative-mod-slider: #6900b3;
			--overwriting-mod-slider: #004b9d;
			--indicator-primary: #ff633d;
			--indicator-secondary: #933822;
			--select2-opt-group: #e7e7ff;
			--input-box-outline: #e7e7ff;
			--mute-button-normal: #0072ef;
			--mute-button-mod: #002e67;
			--pitch1-secondary-channel: #b77d6e;
			--pitch1-primary-channel: #ff9d85;
			--pitch1-secondary-note: #b77d6e;
			--pitch1-primary-note: #ff9d85;
			--pitch2-secondary-channel: #be8821;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #be8821;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #3a62a4;
			--pitch3-primary-channel: #528ae6;
			--pitch3-secondary-note: #3a62a4;
			--pitch3-primary-note: #528ae6;
			--pitch4-secondary-channel: #3e8d78;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #3e8d78;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #84906d;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #84906d;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #bd6345;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #bd6345;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #aa592f;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #aa592f;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #b2a171;
			--pitch8-primary-channel: #ffd76d;
			--pitch8-secondary-note: #b2a171;
			--pitch8-primary-note: #ffd76d;
			--pitch9-secondary-channel: #4f6177;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #4f6177;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #165162;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #165162;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #4a4c5b;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #4a4c5b;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #817c7b;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #817c7b;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #e9e9e9;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: black;
			--disabled-note-primary: #959595;
			--disabled-note-secondary: #6e6e6e;

			
			
			}`,
        "nebula": `
		:root {
			--page-margin: #11001c;
			--editor-background: #150e1f;
			--hover-preview: white;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: white;
			--secondary-text: #8C849A;
			--inverted-text: black;
			--text-selection: rgba(141,79,201,0.99);
			--box-selection-fill: #311E44;
			--loop-accent: #CC688C;
			--link-accent: #817DC9;
			--ui-widget-background: #44394F;
			--ui-widget-focus: #7A6386;
			--pitch-background: #393e4f40;
			--tonic: #7D5C9EC0;
			--fifth-note: #ab77bd50;
			--third-note: #532748;
			--white-piano-key: #EEEEEE;
			--black-piano-key: #5F5566;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #46374C;
			--track-editor-bg-pitch-dim: #1F1C2850;
			--track-editor-bg-noise: #3D353B;
			--track-editor-bg-noise-dim: #16131550;
			--track-editor-bg-mod: #623F4C;
			--track-editor-bg-mod-dim: #361A2450;
			--multiplicative-mod-slider: #9F6E6A;
			--overwriting-mod-slider: #A664B5;
			--indicator-primary: #CC6B8E;
			--indicator-secondary: #44394F;
			--select2-opt-group: #6A576F;
			--input-box-outline: #222;
			--mute-button-normal: #BF91DC;
			--mute-button-mod: #DC8C9A;
			--mod-label-primary: #3A2840;
			--mod-label-secondary-text: #62485E;
			--mod-label-primary-text: white;
			--pitch-secondary-channel-hue: -96;
			--pitch-secondary-channel-hue-scale: 4.2;
			--pitch-secondary-channel-sat: 50.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: -96;
			--pitch-primary-channel-hue-scale: 4.2;
			--pitch-primary-channel-sat: 70;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: -96;
			--pitch-secondary-note-hue-scale: 4.2;
			--pitch-secondary-note-sat: 70.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: -96;
			--pitch-primary-note-hue-scale: 4.2;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 16;
			--noise-secondary-channel-hue-scale: -1.33;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 16;
			--noise-primary-channel-hue-scale: -1.33;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 12;
			--noise-secondary-note-hue-scale: -1.33;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 12;
			--noise-primary-note-hue-scale: -1.33;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 12;
			--mod-secondary-channel-hue-scale: -.75;
			--mod-secondary-channel-sat: 50;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 12;
			--mod-primary-channel-hue-scale: -.75;
			--mod-primary-channel-sat: 70;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 12;
			--mod-secondary-note-hue-scale: -.75;
			--mod-secondary-note-sat: 75;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 12;
			--mod-primary-note-hue-scale: -.75;
			--mod-primary-note-sat: 85;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #aaa;
			--disabled-note-secondary: #666;

			
			
		}`,
        "Nebula 2": ` 
			:root { 
				--page-margin: #040410;
				--editor-background: #11001c;
				--hover-preview: white;
				--playhead: rgba(255, 255, 255, 0.9);
				--primary-text: white;
				--secondary-text: #8C849A;
				--inverted-text: black;
				--text-selection: rgba(141,79,201,0.99);
				--box-selection-fill: #311E44;
				--loop-accent: #CC688C;
				--link-accent: #817DC9;
				--ui-widget-background: #3b2057;
				--ui-widget-focus: #7A6386;
				--pitch-background: #393e4f40;
				--tonic: #7D5C9EC0;
				--fifth-note: #ab77bd50;
				--third-note: #532748;
				--white-piano-key: #EEEEEE;
				--black-piano-key: #5F5566;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
				--use-color-formula: true;
				--track-editor-bg-pitch: #46374C;
				--track-editor-bg-pitch-dim: #1F1C2850;
				--track-editor-bg-noise: #3D353B;
				--track-editor-bg-noise-dim: #16131550;
				--track-editor-bg-mod: #623F4C;
				--track-editor-bg-mod-dim: #361A2450;
				--multiplicative-mod-slider: #9F6E6A;
				--overwriting-mod-slider: #A664B5;
				--indicator-primary: #CC6B8E;
				--indicator-secondary: #3b2057;
				--select2-opt-group: #6A576F;
				--input-box-outline: #222;
				--mute-button-normal: #BF91DC;
				--mute-button-mod: #DC8C9A;
				--mod-label-primary: #3A2840;
				--mod-label-secondary-text: #62485E;
				--mod-label-primary-text: white;
				--pitch-secondary-channel-hue: -96;
				--pitch-secondary-channel-hue-scale: 4.2;
				--pitch-secondary-channel-sat: 50.3;
				--pitch-secondary-channel-sat-scale: 0.1;
				--pitch-secondary-channel-lum: 40;
				--pitch-secondary-channel-lum-scale: 0.05;
				--pitch-primary-channel-hue: -96;
				--pitch-primary-channel-hue-scale: 4.2;
				--pitch-primary-channel-sat: 70;
				--pitch-primary-channel-sat-scale: 0.1;
				--pitch-primary-channel-lum: 67.5;
				--pitch-primary-channel-lum-scale: 0.05;
				--pitch-secondary-note-hue: -96;
				--pitch-secondary-note-hue-scale: 4.2;
				--pitch-secondary-note-sat: 70.9;
				--pitch-secondary-note-sat-scale: 0.1;
				--pitch-secondary-note-lum: 25;
				--pitch-secondary-note-lum-scale: 0.05;
				--pitch-primary-note-hue: -96;
				--pitch-primary-note-hue-scale: 4.2;
				--pitch-primary-note-sat: 90;
				--pitch-primary-note-sat-scale: 0.05;
				--pitch-primary-note-lum: 85.6;
				--pitch-primary-note-lum-scale: 0.025;
				--noise-secondary-channel-hue: 16;
				--noise-secondary-channel-hue-scale: -1.33;
				--noise-secondary-channel-sat: 25;
				--noise-secondary-channel-sat-scale: 0;
				--noise-secondary-channel-lum: 42;
				--noise-secondary-channel-lum-scale: 0;
				--noise-primary-channel-hue: 16;
				--noise-primary-channel-hue-scale: -1.33;
				--noise-primary-channel-sat: 33;
				--noise-primary-channel-sat-scale: 0;
				--noise-primary-channel-lum: 63.5;
				--noise-primary-channel-lum-scale: 0;
				--noise-secondary-note-hue: 12;
				--noise-secondary-note-hue-scale: -1.33;
				--noise-secondary-note-sat: 33.5;
				--noise-secondary-note-sat-scale: 0;
				--noise-secondary-note-lum: 55;
				--noise-secondary-note-lum-scale: 0;
				--noise-primary-note-hue: 12;
				--noise-primary-note-hue-scale: -1.33;
				--noise-primary-note-sat: 46.5;
				--noise-primary-note-sat-scale: 0;
				--noise-primary-note-lum: 74;
				--noise-primary-note-lum-scale: 0;
				--mod-secondary-channel-hue: 12;
				--mod-secondary-channel-hue-scale: -.75;
				--mod-secondary-channel-sat: 50;
				--mod-secondary-channel-sat-scale: 0;
				--mod-secondary-channel-lum: 50;
				--mod-secondary-channel-lum-scale: 0;
				--mod-primary-channel-hue: 12;
				--mod-primary-channel-hue-scale: -.75;
				--mod-primary-channel-sat: 70;
				--mod-primary-channel-sat-scale: 0;
				--mod-primary-channel-lum: 80;
				--mod-primary-channel-lum-scale: 0;
				--mod-secondary-note-hue: 12;
				--mod-secondary-note-hue-scale: -.75;
				--mod-secondary-note-sat: 75;
				--mod-secondary-note-sat-scale: 0;
				--mod-secondary-note-lum: 45;
				--mod-secondary-note-lum-scale: 0;
				--mod-primary-note-hue: 12;
				--mod-primary-note-hue-scale: -.75;
				--mod-primary-note-sat: 85;
				--mod-primary-note-sat-scale: 0;
				--mod-primary-note-lum: 85;
				--mod-primary-note-lum-scale: 0;
				--disabled-note-primary: #aaa;
				--disabled-note-secondary: #666;
				
				
				
			}

			.note-primary {
				clip-path: polygon(
					0px calc(100% - 4px),
					4px calc(100% - 4px),
					4px 100%,
					calc(100% - 4px) 100%,
					calc(100% - 4px) calc(100% - 4px),
					100% calc(100% - 4px),
					100% 4px,
					calc(100% - 4px) 4px,
					calc(100% - 4px) 0px,
					4px 0px,
					4px 4px,
					0px 4px
				  );
			}
			.note-secondary {
				clip-path: polygon(
					0px calc(100% - 4px),
					4px calc(100% - 4px),
					4px 100%,
					calc(100% - 4px) 100%,
					calc(100% - 4px) calc(100% - 4px),
					100% calc(100% - 4px),
					100% 4px,
					calc(100% - 4px) 4px,
					calc(100% - 4px) 0px,
					4px 0px,
					4px 4px,
					0px 4px
				  );
			}
			.note-flash {
				clip-path: polygon(
					0px calc(100% - 4px),
					4px calc(100% - 4px),
					4px 100%,
					calc(100% - 4px) 100%,
					calc(100% - 4px) calc(100% - 4px),
					100% calc(100% - 4px),
					100% 4px,
					calc(100% - 4px) 4px,
					calc(100% - 4px) 0px,
					4px 0px,
					4px 4px,
					0px 4px
				  );
			}

			.prompt.noSelection {
				background: #040410 !important;
			}

			body {
				background-image: url("./image_assets/stars.gif") !important;
				background-size: contain !important;
				background-position: center top !important;
				  background-repeat: repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */ 
				}
			#text-content {
				--editor-background: rgba(255, 255, 255, 0);
					border-image-source: url("./image_assets/nebula2_border.png");
					border-image-slice: 16 fill; 
					   border-image-width: 32px; 
					border-image-repeat: repeat; 
					padding: 36px; 

					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
				--editor-background: rgba(255, 255, 255, 0);
					border-image-source: url("./image_assets/nebula2_border.png");
					border-image-slice: 16 fill; 
					   border-image-width: 32px; 
					border-image-repeat: repeat; 
					padding-left: 36px; 
					padding-right: 36px; 
					padding-top: 5px; 
					padding-bottom: 5px; 

					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */ 
				}
			.beepboxEditor button, .beepboxEditor select, .beepboxEditor .select2-selection__rendered, button {
					border-image-source: url("./image_assets/nebula2_border2.png") !important;
					border-image-slice: 4 fill !important; 
				   border-image-width: 4px !important; 
				border-image-repeat: stretch !important;
					padding: 4px !important; 

					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
				}
				select.trackSelectBox {
					border-image: none !important;
				}
			/* div.channelBox {
			border-radius: 5px;
			} */
			* {
				cursor: url("./image_assets/pixel_cursor.png"), auto !important;
				--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
				--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
				--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
				--instrument-copy-symbol: url("./image_assets/icon-copy.png");
				--instrument-paste-symbol: url("./image_assets/icon-paste.png");
				--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
				--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
				--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
				--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
				--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
				--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
				--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
				--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
				--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
				--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
				--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
				--export-instrument-symbol: var(--export-symbol);
				--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
				--undo-symbol: url("./image_assets/icon-undo.png");
				--redo-symbol: url("./image_assets/icon-redo.png");
				--copy-symbol: url("./image_assets/icon-copy.png");
				--paste-symbol: url("./image_assets/icon-paste.png");
				--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
				--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
				--select-all-symbol: url("./image_assets/icon-SelectAll.png");
				--duplicate-symbol: url("./image_assets/icon-duplicate.png");
				--notes-up-symbol: url("./image_assets/moveNotesUp.png");
				--notes-down-symbol: url("./image_assets/moveNotesDown.png");
				--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
				--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
				--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
				} 
					@font-face {
				   font-family: "AbyssType";
				   src:
					url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
					}
		
					@font-face {
				   font-family: "AbyssType_small";
				   src:
					url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
					}
		
					html {
					font-family: 'AbyssType';
					}
					div.channelBoxLabel {
						font-family: 'AbyssType_small' !important;
					}
		


		`,
        "roe light": `
		:root {
			--page-margin: #fff5f5;
			--editor-background: #fff5f5;
			--hover-preview: #0e8bf1;
			--playhead: 000;
			--primary-text: #0e8bf1;
			--secondary-text: #f10e0e;
			--inverted-text: white;
			--text-selection: #ff4444fc;
			--box-selection-fill: #ff00004d;
			--loop-accent: #9a75ff;
			--link-accent: #ff7070;
			--ui-widget-background: #bdc9e5;
			--ui-widget-focus: #a3b7e5;
			--pitch-background: #d0c7db;
			--tonic: #bed3e4;
			--fifth-note: #e7c6c6;
			--third-note: #c2cc91;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #e5e1ea;
			--track-editor-bg-pitch-dim: #cbc4d4;
			--track-editor-bg-noise: #e0ddee;
			--track-editor-bg-noise-dim: #c1bade;
			--track-editor-bg-mod: #d8e6f3;
			--track-editor-bg-mod-dim: #b1cce7;
			--multiplicative-mod-slider: #8097cb;
			--overwriting-mod-slider: #8097cb;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #92a6d3;
			--select2-opt-group: #b6c4e2;
			--input-box-outline: #bdc9e5;
			--mute-button-normal: #66baff;
			--mute-button-mod: #1a98ff;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #336bdb;
			--noise1-primary-channel: #4281FF;
			--noise1-secondary-note: #336bdb;
			--noise1-primary-note: #4281FF;
			--noise2-secondary-channel: #5e38dc;
			--noise2-primary-channel: #7347FF;
			--noise2-secondary-note: #5e38dc;
			--noise2-primary-note: #7347FF;
			--noise3-secondary-channel: #7d3097;
			--noise3-primary-channel: #9F3CBF;
			--noise3-secondary-note: #7d3097;
			--noise3-primary-note: #9F3CBF;
			--noise4-secondary-channel: #ad2559;
			--noise4-primary-channel: #D3326F;
			--noise4-secondary-note: #ad2559;
			--noise4-primary-note: #D3326F;
			--noise5-secondary-channel: #d02525;
			--noise5-primary-channel: #FF2A2A;
			--noise5-secondary-note: #d02525;
			--noise5-primary-note: #FF2A2A;
			--mod1-secondary-channel: #35415a;
			--mod1-primary-channel: #47587a;
			--mod1-secondary-note: #35415a;
			--mod1-primary-note: #47587a;
			--mod2-secondary-channel: #5a5374;
			--mod2-primary-channel: #716791;
			--mod2-secondary-note: #5a5374;
			--mod2-primary-note: #716791;
			--mod3-secondary-channel: #53385c;
			--mod3-primary-channel: #6f4c7b;
			--mod3-secondary-note: #53385c;
			--mod3-primary-note: #6f4c7b;
			--mod4-secondary-channel: #7e4e60;
			--mod4-primary-channel: #9e6279;
			--mod4-secondary-note: #7e4e60;
			--mod4-primary-note: #9e6279;
			--mod-label-primary: #d0c7db;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: black;
			--disabled-note-primary: #616161;
			--disabled-note-secondary: #474747;
		}
		.promptContainerBG::before {
			box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
		}
		`,
        "jummbox light": `
		:root {
			-webkit-text-stroke-width: 0.5px;
			--page-margin: #fefdff;
			--editor-background: #fefdff;
			--hover-preview: #302880;
			--playhead: rgba(62, 32, 120, 0.9);
			--primary-text: #401890;
			--secondary-text: #8769af;
			--inverted-text: #fefdff;
			--text-selection: rgba(255,160,235,0.99);
			--box-selection-fill: rgba(30,62,220,0.5);
			--loop-accent: #4c35d4;
			--link-accent: #7af;
			--ui-widget-background: #bf9cec;
			--ui-widget-focus: #e9c4ff;
			--pitch-background: #e2d9f9;
			--tonic: #c288cc;
			--fifth-note: #d8c9fd;
			--third-note: #bdd0b6;
			--white-piano-key: #e2e2ff;
			--black-piano-key: #66667a;
			--use-color-formula: true;
			--track-editor-bg-pitch: #d9e5ec;
			--track-editor-bg-pitch-dim: #eaeef5;
			--track-editor-bg-noise: #ffc3ae;
			--track-editor-bg-noise-dim: #ffe0cf;
			--track-editor-bg-mod: #c9accc;
			--track-editor-bg-mod-dim: #ebe3ef;
			--multiplicative-mod-slider: #807caf;
			--overwriting-mod-slider: #909cdf;
			--indicator-primary: #ae38ff;
			--indicator-secondary: #bbd4ec;
			--select2-opt-group: #c1b7f1;
			--input-box-outline: #bbb;
			--mute-button-normal: #e9b752;
			--mute-button-mod: #9558ee;
			--mod-label-primary: #ececff;
			--mod-label-secondary-text: rgb(197, 145, 247);
			--mod-label-primary-text: #302880;
			--pitch-secondary-channel-hue: 0;
			--pitch-secondary-channel-hue-scale: 8.1;
			--pitch-secondary-channel-sat: 53.3;
			--pitch-secondary-channel-sat-scale: -0.1;
			--pitch-secondary-channel-lum: 72;
			--pitch-secondary-channel-lum-scale: -0.05;
			--pitch-primary-channel-hue: 0;
			--pitch-primary-channel-hue-scale: 8.1;
			--pitch-primary-channel-sat: 97;
			--pitch-primary-channel-sat-scale: -0.1;
			--pitch-primary-channel-lum: 45.5;
			--pitch-primary-channel-lum-scale: -0.05;
			--pitch-secondary-note-hue: 0;
			--pitch-secondary-note-hue-scale: 8.1;
			--pitch-secondary-note-sat: 93.9;
			--pitch-secondary-note-sat-scale: -0.1;
			--pitch-secondary-note-lum: 95;
			--pitch-secondary-note-lum-scale: -0.05;
			--pitch-primary-note-hue: 0;
			--pitch-primary-note-hue-scale: 8.1;
			--pitch-primary-note-sat: 100;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 43.6;
			--pitch-primary-note-lum-scale: -0.025;
			--noise-secondary-channel-hue: 220;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 62;
			--noise-secondary-channel-lum-scale: -0.1;
			--noise-primary-channel-hue: 220;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 53;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 53.5;
			--noise-primary-channel-lum-scale: -0.1;
			--noise-secondary-note-hue: 220;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 58.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 85;
			--noise-secondary-note-lum-scale: -1;
			--noise-primary-note-hue: 220;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 56.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 54;
			--noise-primary-note-lum-scale: -1;
			--mod-secondary-channel-hue: 90;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 60;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 90;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 100;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 65;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 90;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 95;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 90;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 55;
			--mod-primary-note-lum-scale: 0;
		}
		.beepboxEditor button, .beepboxEditor select, button {
			box-shadow: inset 0 0 0 1px var(--secondary-text);
		}
		.select2-selection__rendered {
			box-shadow: inset 0 0 0 1px var(--secondary-text);
		}
		.promptContainerBG::before {
			box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
		}
		`,
        "energized": `
		:root {
			--page-margin: #000a08;
			--editor-background: #000a08;
			--hover-preview: #ffffcc;
			--playhead: #ccfff5;
			--primary-text: white;
			--secondary-text: #d9d98c;
			--inverted-text: black;
			--text-selection: #ffff6659;
			--box-selection-fill: #ffffff33;
			--loop-accent: #ffff00;
			--link-accent: #00ffcc;
			--ui-widget-background: #141f1d;
			--ui-widget-focus: #24423d;
			--pitch-background: #001410;
			--tonic: #00241d;
			--fifth-note: #ffff6633;
			--third-note: #885a4452;
			--white-piano-key: #66998f;
			--black-piano-key: #141f1d;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #66998f40;
			--track-editor-bg-pitch-dim: #293d3940;
			--track-editor-bg-noise: #66998f40;
			--track-editor-bg-noise-dim: #293d3940;
			--track-editor-bg-mod: #99996640;
			--track-editor-bg-mod-dim: #3d3d2940;
			--multiplicative-mod-slider: #ffff00;
			--overwriting-mod-slider: #00ffcc;
			--indicator-primary: #ffff00;
			--indicator-secondary: #141f1d;
			--select2-opt-group: #1b312e;
			--input-box-outline: #141f1d;
			--mute-button-normal: #00ffcc;
			--mute-button-mod: #00997a;
			--pitch1-secondary-channel: #bfbf40;
			--pitch1-primary-channel: #ffff64;
			--pitch1-secondary-note: #bfbf40;
			--pitch1-primary-note: #ffff64;
			--pitch2-secondary-channel: #a2bf40;
			--pitch2-primary-channel: #e0ff7d;
			--pitch2-secondary-note: #a2bf40;
			--pitch2-primary-note: #e0ff7d;
			--pitch3-secondary-channel: #75bf40;
			--pitch3-primary-channel: #c1ff96;
			--pitch3-secondary-note: #75bf40;
			--pitch3-primary-note: #c1ff96;
			--pitch4-secondary-channel: #40bf51;
			--pitch4-primary-channel: #a2ffaf;
			--pitch4-secondary-note: #40bf51;
			--pitch4-primary-note: #a2ffaf;
			--pitch5-secondary-channel: #40bf86;
			--pitch5-primary-channel: #83ffc8;
			--pitch5-secondary-note: #40bf86;
			--pitch5-primary-note: #83ffc8;
			--pitch6-secondary-channel: #40bfa6;
			--pitch6-primary-channel: #64ffe1;
			--pitch6-secondary-note: #40bfa6;
			--pitch6-primary-note: #64ffe1;
			--pitch7-secondary-channel: #40bf86;
			--pitch7-primary-channel: #83ffc8;
			--pitch7-secondary-note: #40bf86;
			--pitch7-primary-note: #83ffc8;
			--pitch8-secondary-channel: #40bf51;
			--pitch8-primary-channel: #a2ffaf;
			--pitch8-secondary-note: #40bf51;
			--pitch8-primary-note: #a2ffaf;
			--pitch9-secondary-channel: #75bf40;
			--pitch9-primary-channel: #c1ff96;
			--pitch9-secondary-note: #75bf40;
			--pitch9-primary-note: #c1ff96;
			--pitch10-secondary-channel: #a2bf40;
			--pitch10-primary-channel: #e0ff7d;
			--pitch10-secondary-note: #a2bf40;
			--pitch10-primary-note: #e0ff7d;
			--noise1-secondary-channel: #a6a659;
			--noise1-primary-channel: #ffffcc;
			--noise1-secondary-note: #a6a659;
			--noise1-primary-note: #ffffcc;
			--noise2-secondary-channel: #94a659;
			--noise2-primary-channel: #f3ffcc;
			--noise2-secondary-note: #94a659;
			--noise2-primary-note: #f3ffcc;
			--noise3-secondary-channel: #79a659;
			--noise3-primary-channel: #e1ffcc;
			--noise3-secondary-note: #79a659;
			--noise3-primary-note: #e1ffcc;
			--noise4-secondary-channel: #94a659;
			--noise4-primary-channel: #f3ffcc;
			--noise4-secondary-note: #94a659;
			--noise4-primary-note: #f3ffcc;
			--noise5-secondary-channel: #a6a659;
			--noise5-primary-channel: #ffffcc;
			--noise5-secondary-note: #a6a659;
			--noise5-primary-note: #ffffcc;
			--mod1-secondary-channel: #a3a329;
			--mod1-primary-channel: #ffff00;
			--mod1-secondary-note: #a3a329;
			--mod1-primary-note: #ffff00;
			--mod2-secondary-channel: #a38529;
			--mod2-primary-channel: #ffbf00;
			--mod2-secondary-note: #a38529;
			--mod2-primary-note: #ffbf00;
			--mod3-secondary-channel: #a36629;
			--mod3-primary-channel: #ff7f00;
			--mod3-secondary-note: #a36629;
			--mod3-primary-note: #ff7f00;
			--mod4-secondary-channel: #a38529;
			--mod4-primary-channel: #ffbf00;
			--mod4-secondary-note: #a38529;
			--mod4-primary-note: #ffbf00;
			--mod-label-primary: #141f1d;
			--mod-label-secondary-text: #d9d98c;
			--mod-label-primary-text: white;
			--disabled-note-primary: #808080;
			--disabled-note-secondary: #666666;

			
			
		}`,
        "neapolitan": `:root {
			--page-margin: #120807;
			--editor-background: #120807;
			--hover-preview: #e79a82;
			--playhead: #e79a82;
			--primary-text: #decdbf;
			--secondary-text: #fa99bb;
			--inverted-text: black;
			--text-selection: #990036;
			--box-selection-fill: rgba(255,255,255,0.2);
			--loop-accent: #f6377a;
			--link-accent: #f6377a;
			--ui-widget-background: #24160f;
			--ui-widget-focus: #362217;
			--pitch-background: #1e1106;
			--tonic: #382414;
			--fifth-note: #41240c;
			--third-note: #685022;
			--white-piano-key: #e1c5b7;
			--black-piano-key: #482c1e;
			--white-piano-key-text: black;
			--black-piano-key-text: white;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #4d2a19;
			--track-editor-bg-pitch-dim: #27150c;
			--track-editor-bg-noise: #4d2a19;
			--track-editor-bg-noise-dim: #27150c;
			--track-editor-bg-mod: #4d2a19;
			--track-editor-bg-mod-dim: #27150c;
			--multiplicative-mod-slider: #decdbf;
			--overwriting-mod-slider: #decdbf;
			--indicator-primary: #decdbf;
			--indicator-secondary: #362217;
			--select2-opt-group: #24160f;
			--input-box-outline: #24160f;
			--mute-button-normal: #ff66a1;
			--mute-button-mod: #e61968;
			--pitch1-secondary-channel: #680029;
			--pitch1-primary-channel: #cc0052;
			--pitch1-secondary-note: #660029;
			--pitch1-primary-note: #cc0052;
			--pitch2-secondary-channel: #7e1b43;
			--pitch2-primary-channel: #d32e71;
			--pitch2-secondary-note: #7e1b43;
			--pitch2-primary-note: #d32e71;
			--pitch3-secondary-channel: #aa275e;
			--pitch3-primary-channel: #da5d91;
			--pitch3-secondary-note: #aa275e;
			--pitch3-primary-note: #da5d91;
			--pitch4-secondary-channel: #cc3878;
			--pitch4-primary-channel: #e18bb0;
			--pitch4-secondary-note: #cc3878;
			--pitch4-primary-note: #e18bb0;
			--pitch5-secondary-channel: #d06c9b;
			--pitch5-primary-channel: #e9bad0;
			--pitch5-secondary-note: #d06c9b;
			--pitch5-primary-note: #e9bad0;
			--pitch6-secondary-channel: #c9acc5;
			--pitch6-primary-channel: #f0e8ef;
			--pitch6-secondary-note: #c9acc5;
			--pitch6-primary-note: #f0e8ef;
			--pitch7-secondary-channel: #d06c9b;
			--pitch7-primary-channel: #e9bad0;
			--pitch7-secondary-note: #d06c9b;
			--pitch7-primary-note: #e9bad0;
			--pitch8-secondary-channel: #cc3878;
			--pitch8-primary-channel: #e18bb0;
			--pitch8-secondary-note: #cc3878;
			--pitch8-primary-note: #e18bb0;
			--pitch9-secondary-channel: #aa275e;
			--pitch9-primary-channel: #da5d91;
			--pitch9-secondary-note: #aa275e;
			--pitch9-primary-note: #da5d91;
			--pitch10-secondary-channel: #7e1b43;
			--pitch10-primary-channel: #d32e71;
			--pitch10-secondary-note: #7e1b43;
			--pitch10-primary-note: #d32e71;
			--noise1-secondary-channel: #683a37;
			--noise1-primary-channel: #A85F5A;
			--noise1-secondary-note: #683a37;
			--noise1-primary-note: #A85F5A;
			--noise2-secondary-channel: #7c4a41;
			--noise2-primary-channel: #B47A70;
			--noise2-secondary-note: #7c4a41;
			--noise2-primary-note: #B47A70;
			--noise3-secondary-channel: #935f4d;
			--noise3-primary-channel: #c09587;
			--noise3-secondary-note: #935f4d;
			--noise3-primary-note: #C09587;
			--noise4-secondary-channel: #aa795a;
			--noise4-primary-channel: #cdb09d;
			--noise4-secondary-note: #aa795a;
			--noise4-primary-note: #CDAF9D;
			--noise5-secondary-channel: #bb987c;
			--noise5-primary-channel: #decdbf;
			--noise5-secondary-note: #bb987c;
			--noise5-primary-note: #decdbf;
			--mod1-secondary-channel: #6ca784;
			--mod1-primary-channel: #accdb9;
			--mod1-secondary-note: #6ca784;
			--mod1-primary-note: #accdb9;
			--mod2-secondary-channel: #7daa9f;
			--mod2-primary-channel: #bbd3cd;
			--mod2-secondary-note: #7daa9f;
			--mod2-primary-note: #bbd3cd;
			--mod3-secondary-channel: #70a3a9;
			--mod3-primary-channel: #afcccf;
			--mod3-secondary-note: #70a3a9;
			--mod3-primary-note: #afcccf;
			--mod4-secondary-channel: #5698b8;
			--mod4-primary-channel: #9ec3d6;
			--mod4-secondary-note: #5698b8;
			--mod4-primary-note: #9ec3d6;
			--mod-label-primary: #24160f;
			--mod-label-secondary-text: #E5AFC2;
			--mod-label-primary-text: #decdbf;
			--disabled-note-primary: #bababa;
			--disabled-note-secondary: #878787;

			
			
		}`,
        "mono": `:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #808080;
			--playhead: #808080;
			--primary-text: white;
			--secondary-text: #cccccc;
			--inverted-text: black;
			--text-selection: #696969;
			--box-selection-fill: #cccccc40;
			--loop-accent: #808080;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: #1a1a1a;
			--tonic: #262626;
			--fifth-note: #0d0d0d;
			--third-note: #30332f;
			--white-piano-key: #808080;
			--black-piano-key: #232323;
			--use-color-formula: true;
			--track-editor-bg-pitch: #262626;
			--track-editor-bg-pitch-dim: #1a1a1a;
			--track-editor-bg-noise: #262626;
			--track-editor-bg-noise-dim: #1a1a1a;
			--track-editor-bg-mod: #262626;
			--track-editor-bg-mod-dim: #1a1a1a;
			--multiplicative-mod-slider: #808080;
			--overwriting-mod-slider: #808080;
			--indicator-primary: #808080;
			--indicator-secondary: #333333;
			--select2-opt-group: #232323;
			--input-box-outline: #222;
			--mute-button-normal: #808080;
			--mute-button-mod: #808080;
			--mod-label-primary: #232323;
			--mod-label-secondary-text: #696969;
			--mod-label-primary-text: #cdcdcd;
			--pitch-secondary-channel-hue: 0;
			--pitch-secondary-channel-hue-scale: 25;
			--pitch-secondary-channel-sat: 10;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 70;
			--pitch-secondary-channel-lum-scale: 0;
			--pitch-primary-channel-hue: 0;
			--pitch-primary-channel-hue-scale: 25;
			--pitch-primary-channel-sat: 50;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 95;
			--pitch-primary-channel-lum-scale: 0;
			--pitch-secondary-note-hue: 0;
			--pitch-secondary-note-hue-scale: 25;
			--pitch-secondary-note-sat: 10;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 70;
			--pitch-secondary-note-lum-scale: 0;
			--pitch-primary-note-hue: 0;
			--pitch-primary-note-hue-scale: 25;
			--pitch-primary-note-sat: 50;
			--pitch-primary-note-sat-scale: 0.1;
			--pitch-primary-note-lum: 95;
			--pitch-primary-note-lum-scale: 0;
			--noise-secondary-channel-hue: 125;
			--noise-secondary-channel-hue-scale: 50;
			--noise-secondary-channel-sat: 10;
			--noise-secondary-channel-sat-scale: 0.1;
			--noise-secondary-channel-lum: 70;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 125;
			--noise-primary-channel-hue-scale: 50;
			--noise-primary-channel-sat: 50;
			--noise-primary-channel-sat-scale: 0.1;
			--noise-primary-channel-lum: 95;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 125;
			--noise-secondary-note-hue-scale: 50;
			--noise-secondary-note-sat: 10;
			--noise-secondary-note-sat-scale: 0.1;
			--noise-secondary-note-lum: 70;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 125;
			--noise-primary-note-hue-scale: 50;
			--noise-primary-note-sat: 50;
			--noise-primary-note-sat-scale: 0.1;
			--noise-primary-note-lum: 95;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 255;
			--mod-secondary-channel-hue-scale: 75;
			--mod-secondary-channel-sat: 10;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 70;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 255;
			--mod-primary-channel-hue-scale: 75;
			--mod-primary-channel-sat: 50;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 95;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 255;
			--mod-secondary-note-hue-scale: 75;
			--mod-secondary-note-sat: 10;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 70;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 255;
			--mod-primary-note-hue-scale: 75;
			--mod-primary-note-sat: 50;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 95;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #c6c6c6;
			--disabled-note-secondary: #8c8c8c;
		}`,
        "blutonium": `:root {
			--page-margin: #02070D;
			--editor-background: #02070D;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #9bd1ee;
			--secondary-text: #5a6da8;
			--inverted-text: black;
			--text-selection: rgb(68 68 255 / 99%);
			--box-selection-fill: rgb(0 0 255 / 30%);
			--loop-accent: #024aca;
			--link-accent: #024aca;
			--ui-widget-background: #161c2e;
			--ui-widget-focus: #262c3e;
			--pitch-background: #22272D;
			--tonic: #1b3056;
			--fifth-note: #344051;
			--third-note: #1b3740;
			--white-piano-key: #a6c6ed;
			--black-piano-key: #2f4687;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #25284c;
			--track-editor-bg-pitch-dim: #211c26;
			--track-editor-bg-noise: #261f42;
			--track-editor-bg-noise-dim: #1a152d;
			--track-editor-bg-mod: #183049;
			--track-editor-bg-mod-dim: #102132;
			--multiplicative-mod-slider: #344a7f;
			--overwriting-mod-slider: #344a7f;
			--indicator-primary: #024aca;
			--indicator-secondary: #00177d;
			--select2-opt-group: #141e34;
			--input-box-outline: #141e34;
			--mute-button-normal: #273b9d;
			--mute-button-mod: #27989d;
			--pitch1-secondary-channel: hsl(200, 100%, 40%);
			--pitch1-primary-channel: #99ddff;
			--pitch1-secondary-note: hsl(200, 100%, 40%);
			--pitch1-primary-note: #99ddff;
			--pitch2-secondary-channel: 	hsl(212, 100%, 34%);
			--pitch2-primary-channel: #5BA8FF;
			--pitch2-secondary-note: hsl(212, 100%, 34%);
			--pitch2-primary-note: #5BA8FF;
			--pitch3-secondary-channel: #024ACA;
			--pitch3-primary-channel: #0A89FF;
			--pitch3-secondary-note: #024ACA;
			--pitch3-primary-note: #0A89FF;
			--pitch4-secondary-channel: #00177D;
			--pitch4-primary-channel: #024ACA;
			--pitch4-secondary-note: #00177D;
			--pitch4-primary-note: #024ACA;
			--pitch5-secondary-channel: #000e4e;
			--pitch5-primary-channel: #0023bf;
			--pitch5-secondary-note: #000e4e;
			--pitch5-primary-note: #0023bf;
			--pitch6-secondary-channel: #8990FE;
			--pitch6-primary-channel: #C2C6FF;
			--pitch6-secondary-note: #8990FE;
			--pitch6-primary-note: #C2C6FF;
			--pitch7-secondary-channel: #5E65D3;
			--pitch7-primary-channel: #8990FE;
			--pitch7-secondary-note: #5E65D3;
			--pitch7-primary-note: #8990FE;
			--pitch8-secondary-channel: #3138A6;
			--pitch8-primary-channel: #5E65D3;
			--pitch8-secondary-note: #3138A6;
			--pitch8-primary-note: #5E65D3;
			--pitch9-secondary-channel: #1B0B7F;
			--pitch9-primary-channel: #3138A6;
			--pitch9-secondary-note: #1B0B7F;
			--pitch9-primary-note: #3138A6;
			--pitch10-secondary-channel: #13015D;
			--pitch10-primary-channel: #1c02bd;
			--pitch10-secondary-note: #13015D;
			--pitch10-primary-note: #1c02bd;
			--noise1-secondary-channel: #A675FE;
			--noise1-primary-channel: #E2C9FF;
			--noise1-secondary-note: #A675FE;
			--noise1-primary-note: #E2C9FF;
			--noise2-secondary-channel: #6A31CA;
			--noise2-primary-channel: #A675FE;
			--noise2-secondary-note: #6A31CA;
			--noise2-primary-note: #A675FE;
			--noise3-secondary-channel: #5A1991;
			--noise3-primary-channel: #6A31CA;
			--noise3-secondary-note: #5A1991;
			--noise3-primary-note: #6A31CA;
			--noise4-secondary-channel: #2f1a68;
			--noise4-primary-channel: #5A1991;
			--noise4-secondary-note: #2f1a68;
			--noise4-primary-note: #5A1991;
			--noise5-secondary-channel: #211640;
			--noise5-primary-channel: #391b8d;
			--noise5-secondary-note: #211640;
			--noise5-primary-note: #391b8d;
			--mod1-secondary-channel: #25E2CD;
			--mod1-primary-channel: #BDFFCA;
			--mod1-secondary-note: #25E2CD;
			--mod1-primary-note: #BDFFCA;
			--mod2-secondary-channel: #0A98AC;
			--mod2-primary-channel: #25E2CD;
			--mod2-secondary-note: #0A98AC;
			--mod2-primary-note: #25E2CC;
			--mod3-secondary-channel: #005280;
			--mod3-primary-channel: #0A98AC;
			--mod3-secondary-note: #005280;
			--mod3-primary-note: #0A98AC;
			--mod4-secondary-channel: #0f3670;
			--mod4-primary-channel: #1369c1;
			--mod4-secondary-note: #0f3670;
			--mod4-primary-note: #1369c1;
			--mod-label-primary: #191d26;
			--mod-label-secondary-text: #024aca;
			--mod-label-primary-text: #ffffffa6;
			--disabled-note-primary: #c9c9c9;
			--disabled-note-secondary: #616161;

			
			
	}`,
        "Ghost House": `
	:root { 
		--page-margin: #120918; 
		--editor-background: #120918; 
		--hover-preview: #c6f7ff; 
		--playhead: white; 
		--primary-text: #bbb8db; 
		--secondary-text: #6f72b5; 
		--inverted-text: black; 
		--text-selection: rgba(119,68,255,0.99); 
		--box-selection-fill: rgb(43 70 171 / 62%); 
		--loop-accent: #573ebb; 
		--link-accent: #98f; 
		--ui-widget-background: #1c1a2f; 
		--ui-widget-focus: var(--ui-widget-background); 
		--pitch-background: #3e3a5f; 
		--tonic: #7874a1; 
		--fifth-note: #423fff; 
		--third-note: #534488;
		--white-piano-key: #bbb8db; 
		--black-piano-key: #1c1a2f; 
		--white-piano-key-text: #1c1a2f; 
		--black-piano-key-text: #bbb8db; 
		--use-color-formula: false;
			--pitch-channel-limit: 10; 
		--track-editor-bg-pitch: #3a3b5c; 
		--track-editor-bg-pitch-dim: #1f2036; 
		--track-editor-bg-noise: #3c3554; 
		--track-editor-bg-noise-dim: #1e1834; 
		--track-editor-bg-mod: #30335e; 
		--track-editor-bg-mod-dim: #161938; 
		--multiplicative-mod-slider: #573ebb; 
		--overwriting-mod-slider: #495789; 
		--indicator-primary: #573ebb; 
		--indicator-secondary: #415187; 
		--select2-opt-group: #22223a; 
		--input-box-outline: #2d2648; 
		--mute-button-normal: #7aceff; 
		--mute-button-mod: #9d6bff; 
		--pitch1-secondary-channel: #5f3ea5; 
		--pitch1-primary-channel: #c1a4ff; 
		--pitch1-secondary-note: #794fd3; 
		--pitch1-primary-note: #d8c6ff; 
		--pitch2-secondary-channel: #4f44bf; 
		--pitch2-primary-channel: #9287ff; 
		--pitch2-secondary-note: #5e51d9; 
		--pitch2-primary-note: #b6afff; 
		--pitch3-secondary-channel: #374eb9; 
		--pitch3-primary-channel: #8097ff; 
		--pitch3-secondary-note: #445cc9; 
		--pitch3-primary-note: #a0b2ff; 
		--pitch4-secondary-channel: #2867cf; 
		--pitch4-primary-channel: #6fa5ff; 
		--pitch4-secondary-note: #2e6ed7; 
		--pitch4-primary-note: #a6c7ff; 
		--pitch5-secondary-channel: #3175a7; 
		--pitch5-primary-channel: #7ec9ff; 
		--pitch5-secondary-note: #367eb3; 
		--pitch5-primary-note: #9fd7ff; 
		--pitch6-secondary-channel: #3993a9; 
		--pitch6-primary-channel: #8ce9ff; 
		--pitch6-secondary-note: #386da3; 
		--pitch6-primary-note: #9eecff; 
		--pitch7-secondary-channel: #369d8a; 
		--pitch7-primary-channel: #8bfce7; 
		--pitch7-secondary-note: #1c93a7; 
		--pitch7-primary-note: #abffef; 
		--pitch8-secondary-channel: #00A170; 
		--pitch8-primary-channel: #50FFC9; 
		--pitch8-secondary-note: #00C78A; 
		--pitch8-primary-note: #83FFD9; 
		--pitch9-secondary-channel: #49b374; 
		--pitch9-primary-channel: #8affa9; 
		--pitch9-secondary-note: #26815f; 
		--pitch9-primary-note: #c8ffde; 
		--pitch10-secondary-channel: #58a747; 
		--pitch10-primary-channel: #bbffaa; 
		--pitch10-secondary-note: #1d7c48; 
		--pitch10-primary-note: #c7ffbc; 
		--noise1-secondary-channel: #42829b; 
		--noise1-primary-channel: #97d3fc; 
		--noise1-secondary-note: #3f53b3; 
		--noise1-primary-note: #97d3fc; 
		--noise2-secondary-channel: #6354bb; 
		--noise2-primary-channel: #9a89ff; 
		--noise2-secondary-note: #5f4dcd; 
		--noise2-primary-note: #c6bcff; 
		--noise3-secondary-channel: #704a95; 
		--noise3-primary-channel: #c285ff; 
		--noise3-secondary-note: #ad5aff; 
		--noise3-primary-note: #d3a6ff; 
		--noise4-secondary-channel: #a53c65; 
		--noise4-primary-channel: #f794bb; 
		--noise4-secondary-note: #cb5080; 
		--noise4-primary-note: #f794bb; 
		--noise5-secondary-channel: #9b2d2d; 
		--noise5-primary-channel: #ff7676; 
		--noise5-secondary-note: #cb4444; 
		--noise5-primary-note: #ff9999; 
		--mod1-secondary-channel: #b7613c; 
		--mod1-primary-channel: #ff9f76; 
		--mod1-secondary-note: #e77e52; 
		--mod1-primary-note: #ffb99b; 
		--mod2-secondary-channel: #916d34; 
		--mod2-primary-channel: #fece80; 
		--mod2-secondary-note: #c58b35; 
		--mod2-primary-note: #ffdda5; 
		--mod3-secondary-channel: #83761a; 
		--mod3-primary-channel: #fdf68c; 
		--mod3-secondary-note: #c18e00; 
		--mod3-primary-note: #fdf68c; 
		--mod4-secondary-channel: #a86436; 
		--mod4-primary-channel: #c8a825; 
		--mod4-secondary-note: #e8ba46; 
		--mod4-primary-note: #c8a825; 
		--mod-label-primary: #37325e; 
		--mod-label-secondary-text: #6e8aa7; 
		--mod-label-primary-text: #c1ffff; 
		--disabled-note-primary: #999; 
		--disabled-note-secondary: #666; 
		--note-flash: #ffffff; 
		--note-flash-secondary: #ffffff77; }
	`,
        "Ghost House 2": `
	:root { 
		--page-margin: #120918; 
		--editor-background: #1c1a2f; 
		--hover-preview: #c6f7ff; 
		--playhead: white; 
		--primary-text: #bbb8db; 
		--secondary-text: #6f72b5; 
		--inverted-text: black; 
		--text-selection: rgba(119,68,255,0.99); 
		--box-selection-fill: rgb(43 70 171 / 62%); 
		--loop-accent: #573ebb; 
		--link-accent: #98f; 
		--ui-widget-background: #3e3a5f; 
		--ui-widget-focus: var(--ui-widget-background); 
		--pitch-background: var(--ui-widget-background); 
		--tonic: #7874a1; 
		--fifth-note: #423fff; 
		--third-note: #534488;
		--white-piano-key: #bbb8db; 
		--black-piano-key: #1c1a2f; 
		--white-piano-key-text: #1c1a2f; 
		--black-piano-key-text: #bbb8db; 
		--use-color-formula: false;
			--pitch-channel-limit: 10; 
		--track-editor-bg-pitch: #3a3b5c; 
		--track-editor-bg-pitch-dim: #1f2036; 
		--track-editor-bg-noise: #3c3554; 
		--track-editor-bg-noise-dim: #1e1834; 
		--track-editor-bg-mod: #30335e; 
		--track-editor-bg-mod-dim: #161938; 
		--multiplicative-mod-slider: #573ebb; 
		--overwriting-mod-slider: #495789; 
		--indicator-primary: #573ebb; 
		--indicator-secondary: #415187; 
		--select2-opt-group: #22223a; 
		--input-box-outline: #2d2648; 
		--mute-button-normal: #7aceff; 
		--mute-button-mod: #9d6bff; 
		--pitch1-secondary-channel: #5f3ea5; 
		--pitch1-primary-channel: #c1a4ff; 
		--pitch1-secondary-note: #794fd3; 
		--pitch1-primary-note: #d8c6ff; 
		--pitch2-secondary-channel: #4f44bf; 
		--pitch2-primary-channel: #9287ff; 
		--pitch2-secondary-note: #5e51d9; 
		--pitch2-primary-note: #b6afff; 
		--pitch3-secondary-channel: #374eb9; 
		--pitch3-primary-channel: #8097ff; 
		--pitch3-secondary-note: #445cc9; 
		--pitch3-primary-note: #a0b2ff; 
		--pitch4-secondary-channel: #2867cf; 
		--pitch4-primary-channel: #6fa5ff; 
		--pitch4-secondary-note: #2e6ed7; 
		--pitch4-primary-note: #a6c7ff; 
		--pitch5-secondary-channel: #3175a7; 
		--pitch5-primary-channel: #7ec9ff; 
		--pitch5-secondary-note: #367eb3; 
		--pitch5-primary-note: #9fd7ff; 
		--pitch6-secondary-channel: #3993a9; 
		--pitch6-primary-channel: #8ce9ff; 
		--pitch6-secondary-note: #386da3; 
		--pitch6-primary-note: #9eecff; 
		--pitch7-secondary-channel: #369d8a; 
		--pitch7-primary-channel: #8bfce7; 
		--pitch7-secondary-note: #1c93a7; 
		--pitch7-primary-note: #abffef; 
		--pitch8-secondary-channel: #00A170; 
		--pitch8-primary-channel: #50FFC9; 
		--pitch8-secondary-note: #00C78A; 
		--pitch8-primary-note: #83FFD9; 
		--pitch9-secondary-channel: #49b374; 
		--pitch9-primary-channel: #8affa9; 
		--pitch9-secondary-note: #26815f; 
		--pitch9-primary-note: #c8ffde; 
		--pitch10-secondary-channel: #58a747; 
		--pitch10-primary-channel: #bbffaa; 
		--pitch10-secondary-note: #1d7c48; 
		--pitch10-primary-note: #c7ffbc; 
		--noise1-secondary-channel: #42829b; 
		--noise1-primary-channel: #97d3fc; 
		--noise1-secondary-note: #3f53b3; 
		--noise1-primary-note: #97d3fc; 
		--noise2-secondary-channel: #6354bb; 
		--noise2-primary-channel: #9a89ff; 
		--noise2-secondary-note: #5f4dcd; 
		--noise2-primary-note: #c6bcff; 
		--noise3-secondary-channel: #704a95; 
		--noise3-primary-channel: #c285ff; 
		--noise3-secondary-note: #ad5aff; 
		--noise3-primary-note: #d3a6ff; 
		--noise4-secondary-channel: #a53c65; 
		--noise4-primary-channel: #f794bb; 
		--noise4-secondary-note: #cb5080; 
		--noise4-primary-note: #f794bb; 
		--noise5-secondary-channel: #9b2d2d; 
		--noise5-primary-channel: #ff7676; 
		--noise5-secondary-note: #cb4444; 
		--noise5-primary-note: #ff9999; 
		--mod1-secondary-channel: #b7613c; 
		--mod1-primary-channel: #ff9f76; 
		--mod1-secondary-note: #e77e52; 
		--mod1-primary-note: #ffb99b; 
		--mod2-secondary-channel: #916d34; 
		--mod2-primary-channel: #fece80; 
		--mod2-secondary-note: #c58b35; 
		--mod2-primary-note: #ffdda5; 
		--mod3-secondary-channel: #83761a; 
		--mod3-primary-channel: #fdf68c; 
		--mod3-secondary-note: #c18e00; 
		--mod3-primary-note: #fdf68c; 
		--mod4-secondary-channel: #a86436; 
		--mod4-primary-channel: #c8a825; 
		--mod4-secondary-note: #e8ba46; 
		--mod4-primary-note: #c8a825; 
		--mod-label-primary: #37325e; 
		--mod-label-secondary-text: #6e8aa7; 
		--mod-label-primary-text: #c1ffff; 
		--disabled-note-primary: #999; 
		--disabled-note-secondary: #666; 
		--note-flash: #ffffff; 
		--note-flash-secondary: #ffffff77; }
	
		* {
		cursor: url("./image_assets/pixel_cursor.png"), auto !important;
		--file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
		--edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
		--preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
		--instrument-copy-symbol: url("./image_assets/icon-copy.png");
		--instrument-paste-symbol: url("./image_assets/icon-paste.png");
		--play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
		--pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
		--record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
		--stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
		--prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
		--next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
		--muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
		--unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
		--zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
		--zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
		--export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
		--export-instrument-symbol: var(--export-symbol);
		--import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
		--undo-symbol: url("./image_assets/icon-undo.png");
		--redo-symbol: url("./image_assets/icon-redo.png");
		--copy-symbol: url("./image_assets/icon-copy.png");
		--paste-symbol: url("./image_assets/icon-paste.png");
		--insert-channel-symbol: url("./image_assets/icon-insertChannel.png");
		--delete-channel-symbol: url("./image_assets/icon-deleteChannel.png");
		--select-all-symbol: url("./image_assets/icon-SelectAll.png");
		--duplicate-symbol: url("./image_assets/icon-duplicate.png");
		--notes-up-symbol: url("./image_assets/moveNotesUp.png");
		--notes-down-symbol: url("./image_assets/moveNotesDown.png");
		--loop-bar-symbol: url("./image_assets/icon-singleBarLoop.png");
		--fullscreen-symbol: url("./image_assets/icon-fullscreen.png");
		--loop-within-bar-symbol: url("./image_assets/icon-loop-bar.png");
	--loop-full-song-symbol: url("./image_assets/icon-loop-song.png");
	--dont-loop-symbol: url("./image_assets/icon-loop-once.png");
		} 
			@font-face {
		   font-family: "AbyssType";
		   src:
			url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
			}
	
			#beepboxEditorContainer, .track-area, .beepboxEditor, #text-content, div.noSelection, .beepboxEditor .loopEditor {
				background-color: #fff0 !important;
			} 
	
			@font-face {
		   font-family: "AbyssType_small";
		   src:
			url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
			}
	
			body {
				background-image: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg.png") !important;
				background-size: 256px;
				background-position: center;
				background-repeat: repeat;
	
				image-rendering: -moz-crisp-edges !important;         /* Firefox */
				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
				image-rendering: -o-crisp-edges !important;            /* Opera */
				image-rendering: pixelated !important;                 /* Future browsers */
				image-rendering: optimizeSpeed !important;             /* IE */
				}
	
			#text-content {
				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg2.png");
				border-image-slice: 16 fill; 
			   border-image-width: 32px; 
			border-image-repeat: repeat; 
				padding-left: 32px; 
				padding-right: 32px; 
				padding-bottom: 16px; 
				image-rendering: -moz-crisp-edges !important;         /* Firefox */
				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
				image-rendering: -o-crisp-edges !important;            /* Opera */
				image-rendering: pixelated !important;                 /* Future browsers */
				image-rendering: optimizeSpeed !important;             /* IE */
			}
		#beepboxEditorContainer {
				border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg2.png");
				border-image-slice: 16 fill; 
			   border-image-width: 32px; 
			border-image-repeat: repeat;
				padding-left: 32px; 
				padding-right: 32px; 
				padding-bottom: 16px; 
	
				image-rendering: -moz-crisp-edges !important;         /* Firefox */
				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
				image-rendering: -o-crisp-edges !important;            /* Opera */
				image-rendering: pixelated !important;                 /* Future browsers */
				image-rendering: optimizeSpeed !important;             /* IE */ 
			}
	
			div.prompt.noSelection {
				background-color: var(--editor-background) !important;
			}
			
			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton, 
			button.prevBarButton, 
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton, 
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
					border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthouse_button.png") !important;
					border-image-slice: 5 fill !important; 
				   border-image-width: 5px !important;  
				border-image-repeat: repeat !important;
					padding: 4px !important; 
	
					image-rendering: -moz-crisp-edges !important;         /* Firefox */
					image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
					image-rendering: -o-crisp-edges !important;            /* Opera */
					image-rendering: pixelated !important;                 /* Future browsers */
					image-rendering: optimizeSpeed !important;             /* IE */
				}
	
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}
	
			html {
			font-family: 'AbyssType';
			}
			div.channelBoxLabel {
				font-family: 'AbyssType_small' !important;
			}
	`,
        "modbox classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9900cc;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;

				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;

				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;

				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "modbox 2": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #00ff00;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #c4ffa3;
				--fifth-note: #96fffb;
				--third-note: #9698ff;
				--octave-scrollbar: #00ff00;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #00ff00;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox artic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #ffffff;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #eafffe;
				--fifth-note: #b7f1ff;
				--third-note: #9698ff;
				--octave-scrollbar: #a5eeff;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #42dcff;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox ocean": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #5982ff;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #090b3a;
				--fifth-note: #3f669b;
				--third-note: #6f91bf;
				--octave-scrollbar: #a5eeff;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #4449a3;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox windows": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #2779c2;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #da4e2a;
				--fifth-note: #5d9511;
				--third-note: #2779c2;
				--octave-scrollbar: #295294;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #fdd01d;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox grassland": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #a0d168;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #20330a;
				--fifth-note: #74bc21;
				--third-note: #a0d168;
				--octave-scrollbar: #74bc21;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #69c400;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox dessert": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #ff6254;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #fffc5b;
				--fifth-note: #ff5e3a;
				--third-note: #ffa03a;
				--octave-scrollbar: #ff5e3a;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #fffc5b;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox kahoot": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #ff3355;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #45a3e5;
				--fifth-note: #864cbf;
				--third-note: #bf4ca8;
				--octave-scrollbar: #eb670f;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #66bf39;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox egg": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #6b003a;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #fffafa;
				--fifth-note: #ff91ce;
				--third-note: #ff91a3;
				--octave-scrollbar: #ffb1f4;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #75093e;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox pony": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #4b4b4b;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #1a2844;
				--fifth-note: #dabbe6;
				--third-note: #faf4c3;
				--octave-scrollbar: #5f4c99;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #818383;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox woodkid": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #e83c4e;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #fff6fe;
				--pitch1-background: #41323b;
				--pitch2-background: #41323b;
				--pitch3-background: #41323b;
				--fifth-note: #fff6fe;
				--pitch5-background: #41323b;
				--pitch6-background: #41323b;
				--third-note: #fff6fe;
				--pitch8-background: #41323b;
				--pitch9-background: #41323b;
				--pitch10-background: #41323b;
				--pitch11-background: #41323b;
				--octave-scrollbar: #ef3027;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #ffedca;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox midnight": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #445566;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #222222;
				--pitch1-background: #222222;
				--pitch2-background: #222222;
				--pitch3-background: #222222;
				--fifth-note: #444444;
				--pitch5-background: #222222;
				--pitch6-background:#222222;
				--third-note: #222222;
				--pitch8-background: #222222;
				--pitch9-background: #222222;
				--pitch10-background: #222222;
				--pitch11-background: #222222;


				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #000000;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox snedbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #a53a3d;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #222222;
				--fifth-note: #60389b;
				--third-note: #10997e;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #ffffff;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox unnamed": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #ffffff;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #ffffa0; 
				--pitch1-background: #ffffa0; 
				--pitch2-background: #ffffa0; 
				--pitch3-background: #ffffa0; 
				--third-note: #ffffa0;
				--pitch5-background: #ffffa0; 
				--pitch6-background: #ffffa0; 
				--fifth-note: #ffffa0;  
				--pitch8-background: #ffffa0; 
				--pitch9-background: #ffffa0; 
				--pitch10-background: #ffffa0; 
				--pitch11-background: #ffffa0; 
				--octave-scrollbar: #ffffff;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #ffffff;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox halloween": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #9e2200;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #9e2200; 
				--pitch1-background: #754a3f; 
				--pitch2-background: #754a3f; 
				--pitch3-background: #754a3f; 
				--third-note: #754a3f;
				--pitch5-background: #754a3f; 
				--pitch6-background: #754a3f; 
				--fifth-note: #914300; 
				--pitch8-background: #754a3f; 
				--pitch9-background: #754a3f; 
				--pitch10-background: #754a3f; 
				--pitch11-background: #754a3f; 
				--octave-scrollbar: #9e2200;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #ffffff;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox frozen": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);

				--loop-accent: #38ef17;

				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;

				--tonic: #88bce8; 
				--pitch1-background: #99c8ef; 
				--pitch2-background: #abd3f4; 
				--pitch3-background: #b8d7f2; 
				--third-note: #cbe0f2;
				--pitch5-background: #e5f0f9; 
				--pitch6-background: #ffffff; 
				--fifth-note: #e5f0f9; 
				--pitch8-background: #cbe0f2; 
				--pitch9-background: #b8d7f2; 
				--pitch10-background: #abd3f4; 
				--pitch11-background: #99c8ef;
				--octave-scrollbar: #ffffff; 

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;

				--black-piano-key-text: #38ef17;

					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "modbox cinnamon": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #ba8418;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;

				--pitch-background: #444; 
				--tonic: #f5bb00; 
				--pitch1-background: #f5bb00; 
				--pitch2-background: #f5bb00; 
				--pitch3-background: #f5bb00; 
				--third-note: #f5bb00;
				--pitch5-background: #f5bb00; 
				--pitch6-background: #f5bb00; 
				--fifth-note: #f5bb00;  
				--pitch8-background: #f5bb00; 
				--pitch9-background: #f5bb00; 
				--pitch10-background: #f5bb00; 
				--pitch11-background: #f5bb00; 
				--octave-scrollbar: #e59900;

				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #ffff25;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;

					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #0099a1;
					--pitch1-primary-note:      #25f3ff;
					--pitch2-secondary-channel: #439143;
					--pitch2-primary-channel:   #44ff44;
					--pitch2-secondary-note:    #439143;
					--pitch2-primary-note:      #44ff44;
					--pitch3-secondary-channel: #a1a100;
					--pitch3-primary-channel:   #ffff25;
					--pitch3-secondary-note:    #a1a100;
					--pitch3-primary-note:      #ffff25;
					--pitch4-secondary-channel: #c75000;
					--pitch4-primary-channel:   #ff9752;
					--pitch4-secondary-note:    #c75000;
					--pitch4-primary-note:      #ff9752;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #FF90FF;
					--pitch5-secondary-note:    #d020d0;
					--pitch5-primary-note:      #ff90ff;
					--pitch6-secondary-channel: #552377;
					--pitch6-primary-channel:   #9f31ea;
					--pitch6-secondary-note:    #552377;
					--pitch6-primary-note:      #9f31ea;
					--pitch7-secondary-channel: #221b89;
					--pitch7-primary-channel:   #2b6aff;
					--pitch7-secondary-note:    #221b89;
					--pitch7-primary-note:      #2b6aff;
					--pitch8-secondary-channel: #00995f;
					--pitch8-primary-channel:   #00ff9f;
					--pitch8-secondary-note:    #00995f;
					--pitch8-primary-note:      #00ff9f;
					--pitch9-secondary-channel: #d6b03e;
					--pitch9-primary-channel:   #ffbf00;
					--pitch9-secondary-note:    #d6b03e;
					--pitch9-primary-note:      #ffbf00;
					--pitch10-secondary-channel:#b25915;
					--pitch10-primary-channel:  #d85d00;
					--pitch10-secondary-note:   #b25915;
					--pitch10-primary-note:     #d85d00;
					--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
					--noise1-secondary-channel: #991010;
					--noise1-primary-channel:   #ff1616;
					--noise1-secondary-note:    #991010;
					--noise1-primary-note:      #ff1616;
					--noise2-secondary-channel: #aaaaaa;
					--noise2-primary-channel:   #ffffff;
					--noise2-secondary-note:    #aaaaaa;
					--noise2-primary-note:      #ffffff;
					--noise3-secondary-channel: #5869BD;
					--noise3-primary-channel:   #768dfc;
					--noise3-secondary-note:    #5869BD;
					--noise3-primary-note:      #768dfc;
					--noise4-secondary-channel: #7c9b42;
					--noise4-primary-channel:   #a5ff00;
					--noise4-secondary-note:    #7c9b42;
					--noise4-primary-note:      #a5ff00;
					--noise5-secondary-channel: #7c9b42;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
			 --mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #0099a1;
					--mod1-primary-note:      #25f3ff;
					--mod2-secondary-channel: #439143;
					--mod2-primary-channel:   #44ff44;
					--mod2-secondary-note:    #439143;
					--mod2-primary-note:      #44ff44;
					--mod3-secondary-channel: #a1a100;
					--mod3-primary-channel:   #ffff25;
					--mod3-secondary-note:    #a1a100;
					--mod3-primary-note:      #ffff25;
					--mod4-secondary-channel: #c75000;
					--mod4-primary-channel:   #ff9752;
					--mod4-secondary-note:    #c75000;
					--mod4-primary-note:      #ff9752;
						--mod-label-primary:        #999;
						--mod-label-secondary-text: #333;
						--mod-label-primary-text:   black;
						--disabled-note-primary:    #999;
						--disabled-note-secondary:  #666;
					
				}
			`,
        "modbox float": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #ffffff;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;

				--pitch-background: #444; 
				--tonic: #ffffff; 
				--pitch1-background: #ededed;  
				--pitch2-background: #cecece;  
				--pitch3-background: #bababa;  
				--third-note: #afafaf;
				--pitch5-background: #a5a5a5; 
				--pitch6-background: #999999; 
				--fifth-note: #8e8e8e; 
				--pitch8-background: #828282; 
				--pitch9-background: #777777; 
				--pitch10-background: #565656; 
				--pitch11-background: #282828; 
				--octave-scrollbar: #ffffff; 
				
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #000000;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;

					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #0099a1;
					--pitch1-primary-note:      #25f3ff;
					--pitch2-secondary-channel: #439143;
					--pitch2-primary-channel:   #44ff44;
					--pitch2-secondary-note:    #439143;
					--pitch2-primary-note:      #44ff44;
					--pitch3-secondary-channel: #a1a100;
					--pitch3-primary-channel:   #ffff25;
					--pitch3-secondary-note:    #a1a100;
					--pitch3-primary-note:      #ffff25;
					--pitch4-secondary-channel: #c75000;
					--pitch4-primary-channel:   #ff9752;
					--pitch4-secondary-note:    #c75000;
					--pitch4-primary-note:      #ff9752;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #FF90FF;
					--pitch5-secondary-note:    #d020d0;
					--pitch5-primary-note:      #ff90ff;
					--pitch6-secondary-channel: #552377;
					--pitch6-primary-channel:   #9f31ea;
					--pitch6-secondary-note:    #552377;
					--pitch6-primary-note:      #9f31ea;
					--pitch7-secondary-channel: #221b89;
					--pitch7-primary-channel:   #2b6aff;
					--pitch7-secondary-note:    #221b89;
					--pitch7-primary-note:      #2b6aff;
					--pitch8-secondary-channel: #00995f;
					--pitch8-primary-channel:   #00ff9f;
					--pitch8-secondary-note:    #00995f;
					--pitch8-primary-note:      #00ff9f;
					--pitch9-secondary-channel: #d6b03e;
					--pitch9-primary-channel:   #ffbf00;
					--pitch9-secondary-note:    #d6b03e;
					--pitch9-primary-note:      #ffbf00;
					--pitch10-secondary-channel:#b25915;
					--pitch10-primary-channel:  #d85d00;
					--pitch10-secondary-note:   #b25915;
					--pitch10-primary-note:     #d85d00;
					--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
					--noise1-secondary-channel: #991010;
					--noise1-primary-channel:   #ff1616;
					--noise1-secondary-note:    #991010;
					--noise1-primary-note:      #ff1616;
					--noise2-secondary-channel: #aaaaaa;
					--noise2-primary-channel:   #ffffff;
					--noise2-secondary-note:    #aaaaaa;
					--noise2-primary-note:      #ffffff;
					--noise3-secondary-channel: #5869BD;
					--noise3-primary-channel:   #768dfc;
					--noise3-secondary-note:    #5869BD;
					--noise3-primary-note:      #768dfc;
					--noise4-secondary-channel: #7c9b42;
					--noise4-primary-channel:   #a5ff00;
					--noise4-secondary-note:    #7c9b42;
					--noise4-primary-note:      #a5ff00;
					--noise5-secondary-channel: #7c9b42;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
			 --mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #0099a1;
					--mod1-primary-note:      #25f3ff;
					--mod2-secondary-channel: #439143;
					--mod2-primary-channel:   #44ff44;
					--mod2-secondary-note:    #439143;
					--mod2-primary-note:      #44ff44;
					--mod3-secondary-channel: #a1a100;
					--mod3-primary-channel:   #ffff25;
					--mod3-secondary-note:    #a1a100;
					--mod3-primary-note:      #ffff25;
					--mod4-secondary-channel: #c75000;
					--mod4-primary-channel:   #ff9752;
					--mod4-secondary-note:    #c75000;
					--mod4-primary-note:      #ff9752;
						--mod-label-primary:        #999;
						--mod-label-secondary-text: #333;
						--mod-label-primary-text:   black;
						--disabled-note-primary:    #999;
						--disabled-note-secondary:  #666;
					
				}
			`,
        "modbox rainbow": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #ff0000;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;

				--pitch-background: #444; 
				--tonic: #ffaaaa; 
				--pitch1-background: #ffceaa; 
				--pitch2-background: #ffdfaa; 
				--pitch3-background: #fff5aa; 
				--third-note: #e8ffaa;
				--pitch5-background: #bfffb2; 
				--pitch6-background: #b2ffc8; 
				--fifth-note: #b2ffe4; 
				--pitch8-background: #b2f3ff; 
				--pitch9-background: #b2b3ff; 
				--pitch10-background: #e0b2ff; 
				--pitch11-background: #ffafe9; 
				--octave-scrollbar: #43ff00; 
				
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #000000;
				--black-piano-key-text: #fefe00;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;

					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #0099a1;
					--pitch1-primary-note:      #25f3ff;
					--pitch2-secondary-channel: #439143;
					--pitch2-primary-channel:   #44ff44;
					--pitch2-secondary-note:    #439143;
					--pitch2-primary-note:      #44ff44;
					--pitch3-secondary-channel: #a1a100;
					--pitch3-primary-channel:   #ffff25;
					--pitch3-secondary-note:    #a1a100;
					--pitch3-primary-note:      #ffff25;
					--pitch4-secondary-channel: #c75000;
					--pitch4-primary-channel:   #ff9752;
					--pitch4-secondary-note:    #c75000;
					--pitch4-primary-note:      #ff9752;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #FF90FF;
					--pitch5-secondary-note:    #d020d0;
					--pitch5-primary-note:      #ff90ff;
					--pitch6-secondary-channel: #552377;
					--pitch6-primary-channel:   #9f31ea;
					--pitch6-secondary-note:    #552377;
					--pitch6-primary-note:      #9f31ea;
					--pitch7-secondary-channel: #221b89;
					--pitch7-primary-channel:   #2b6aff;
					--pitch7-secondary-note:    #221b89;
					--pitch7-primary-note:      #2b6aff;
					--pitch8-secondary-channel: #00995f;
					--pitch8-primary-channel:   #00ff9f;
					--pitch8-secondary-note:    #00995f;
					--pitch8-primary-note:      #00ff9f;
					--pitch9-secondary-channel: #d6b03e;
					--pitch9-primary-channel:   #ffbf00;
					--pitch9-secondary-note:    #d6b03e;
					--pitch9-primary-note:      #ffbf00;
					--pitch10-secondary-channel:#b25915;
					--pitch10-primary-channel:  #d85d00;
					--pitch10-secondary-note:   #b25915;
					--pitch10-primary-note:     #d85d00;
					--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
					--noise1-secondary-channel: #991010;
					--noise1-primary-channel:   #ff1616;
					--noise1-secondary-note:    #991010;
					--noise1-primary-note:      #ff1616;
					--noise2-secondary-channel: #aaaaaa;
					--noise2-primary-channel:   #ffffff;
					--noise2-secondary-note:    #aaaaaa;
					--noise2-primary-note:      #ffffff;
					--noise3-secondary-channel: #5869BD;
					--noise3-primary-channel:   #768dfc;
					--noise3-secondary-note:    #5869BD;
					--noise3-primary-note:      #768dfc;
					--noise4-secondary-channel: #7c9b42;
					--noise4-primary-channel:   #a5ff00;
					--noise4-secondary-note:    #7c9b42;
					--noise4-primary-note:      #a5ff00;
					--noise5-secondary-channel: #7c9b42;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
			 --mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #0099a1;
					--mod1-primary-note:      #25f3ff;
					--mod2-secondary-channel: #439143;
					--mod2-primary-channel:   #44ff44;
					--mod2-secondary-note:    #439143;
					--mod2-primary-note:      #44ff44;
					--mod3-secondary-channel: #a1a100;
					--mod3-primary-channel:   #ffff25;
					--mod3-secondary-note:    #a1a100;
					--mod3-primary-note:      #ffff25;
					--mod4-secondary-channel: #c75000;
					--mod4-primary-channel:   #ff9752;
					--mod4-secondary-note:    #c75000;
					--mod4-primary-note:      #ff9752;
						--mod-label-primary:        #999;
						--mod-label-secondary-text: #333;
						--mod-label-primary-text:   black;
						--disabled-note-primary:    #999;
						--disabled-note-secondary:  #666;
					
				}
			`,
        "modbox bitbeam": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #fefe00;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;

				--pitch-background: #444; 
				--tonic: #fefe00; 
				--pitch1-background: #111111; 
				--pitch2-background: #111111; 
				--pitch3-background: #111111; 
				--third-note: #fa0103;
				--pitch5-background: #111111; 
				--pitch6-background: #111111; 
				--fifth-note: #111111; 
				--pitch8-background: #0001fc; 
				--pitch9-background: #111111; 
				--pitch10-background: #111111; 
				--pitch11-background: #111111;
				--octave-scrollbar: #0001fc;  
				
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #8bac0f;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;

					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #0099a1;
					--pitch1-primary-note:      #25f3ff;
					--pitch2-secondary-channel: #439143;
					--pitch2-primary-channel:   #44ff44;
					--pitch2-secondary-note:    #439143;
					--pitch2-primary-note:      #44ff44;
					--pitch3-secondary-channel: #a1a100;
					--pitch3-primary-channel:   #ffff25;
					--pitch3-secondary-note:    #a1a100;
					--pitch3-primary-note:      #ffff25;
					--pitch4-secondary-channel: #c75000;
					--pitch4-primary-channel:   #ff9752;
					--pitch4-secondary-note:    #c75000;
					--pitch4-primary-note:      #ff9752;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #FF90FF;
					--pitch5-secondary-note:    #d020d0;
					--pitch5-primary-note:      #ff90ff;
					--pitch6-secondary-channel: #552377;
					--pitch6-primary-channel:   #9f31ea;
					--pitch6-secondary-note:    #552377;
					--pitch6-primary-note:      #9f31ea;
					--pitch7-secondary-channel: #221b89;
					--pitch7-primary-channel:   #2b6aff;
					--pitch7-secondary-note:    #221b89;
					--pitch7-primary-note:      #2b6aff;
					--pitch8-secondary-channel: #00995f;
					--pitch8-primary-channel:   #00ff9f;
					--pitch8-secondary-note:    #00995f;
					--pitch8-primary-note:      #00ff9f;
					--pitch9-secondary-channel: #d6b03e;
					--pitch9-primary-channel:   #ffbf00;
					--pitch9-secondary-note:    #d6b03e;
					--pitch9-primary-note:      #ffbf00;
					--pitch10-secondary-channel:#b25915;
					--pitch10-primary-channel:  #d85d00;
					--pitch10-secondary-note:   #b25915;
					--pitch10-primary-note:     #d85d00;
					--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
					--noise1-secondary-channel: #991010;
					--noise1-primary-channel:   #ff1616;
					--noise1-secondary-note:    #991010;
					--noise1-primary-note:      #ff1616;
					--noise2-secondary-channel: #aaaaaa;
					--noise2-primary-channel:   #ffffff;
					--noise2-secondary-note:    #aaaaaa;
					--noise2-primary-note:      #ffffff;
					--noise3-secondary-channel: #5869BD;
					--noise3-primary-channel:   #768dfc;
					--noise3-secondary-note:    #5869BD;
					--noise3-primary-note:      #768dfc;
					--noise4-secondary-channel: #7c9b42;
					--noise4-primary-channel:   #a5ff00;
					--noise4-secondary-note:    #7c9b42;
					--noise4-primary-note:      #a5ff00;
					--noise5-secondary-channel: #7c9b42;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
			 --mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #0099a1;
					--mod1-primary-note:      #25f3ff;
					--mod2-secondary-channel: #439143;
					--mod2-primary-channel:   #44ff44;
					--mod2-secondary-note:    #439143;
					--mod2-primary-note:      #44ff44;
					--mod3-secondary-channel: #a1a100;
					--mod3-primary-channel:   #ffff25;
					--mod3-secondary-note:    #a1a100;
					--mod3-primary-note:      #ffff25;
					--mod4-secondary-channel: #c75000;
					--mod4-primary-channel:   #ff9752;
					--mod4-secondary-note:    #c75000;
					--mod4-primary-note:      #ff9752;
						--mod-label-primary:        #999;
						--mod-label-secondary-text: #333;
						--mod-label-primary-text:   black;
						--disabled-note-primary:    #999;
						--disabled-note-secondary:  #666;
					
				}
			`,
        "modbox gameboy": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9bbc0f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;

				--pitch-background: #444; 
				--tonic: #9bbc0f; 
				--pitch1-background: #9bbc0f; 
				--pitch2-background: #9bbc0f; 
				--pitch3-background: #9bbc0f; 
				--third-note: #9bbc0f;
				--pitch5-background: #9bbc0f; 
				--pitch6-background: #306230; 
				--fifth-note: #306230; 
				--pitch8-background: #306230; 
				--pitch9-background: #0f380f; 
				--pitch10-background: #0f380f; 
				--pitch11-background: #0f380f; 
				--octave-scrollbar: #9bbc0f;  
				
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;

					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #0099a1;
					--pitch1-primary-note:      #25f3ff;
					--pitch2-secondary-channel: #439143;
					--pitch2-primary-channel:   #44ff44;
					--pitch2-secondary-note:    #439143;
					--pitch2-primary-note:      #44ff44;
					--pitch3-secondary-channel: #a1a100;
					--pitch3-primary-channel:   #ffff25;
					--pitch3-secondary-note:    #a1a100;
					--pitch3-primary-note:      #ffff25;
					--pitch4-secondary-channel: #c75000;
					--pitch4-primary-channel:   #ff9752;
					--pitch4-secondary-note:    #c75000;
					--pitch4-primary-note:      #ff9752;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #FF90FF;
					--pitch5-secondary-note:    #d020d0;
					--pitch5-primary-note:      #ff90ff;
					--pitch6-secondary-channel: #552377;
					--pitch6-primary-channel:   #9f31ea;
					--pitch6-secondary-note:    #552377;
					--pitch6-primary-note:      #9f31ea;
					--pitch7-secondary-channel: #221b89;
					--pitch7-primary-channel:   #2b6aff;
					--pitch7-secondary-note:    #221b89;
					--pitch7-primary-note:      #2b6aff;
					--pitch8-secondary-channel: #00995f;
					--pitch8-primary-channel:   #00ff9f;
					--pitch8-secondary-note:    #00995f;
					--pitch8-primary-note:      #00ff9f;
					--pitch9-secondary-channel: #d6b03e;
					--pitch9-primary-channel:   #ffbf00;
					--pitch9-secondary-note:    #d6b03e;
					--pitch9-primary-note:      #ffbf00;
					--pitch10-secondary-channel:#b25915;
					--pitch10-primary-channel:  #d85d00;
					--pitch10-secondary-note:   #b25915;
					--pitch10-primary-note:     #d85d00;
					--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
					--noise1-secondary-channel: #991010;
					--noise1-primary-channel:   #ff1616;
					--noise1-secondary-note:    #991010;
					--noise1-primary-note:      #ff1616;
					--noise2-secondary-channel: #aaaaaa;
					--noise2-primary-channel:   #ffffff;
					--noise2-secondary-note:    #aaaaaa;
					--noise2-primary-note:      #ffffff;
					--noise3-secondary-channel: #5869BD;
					--noise3-primary-channel:   #768dfc;
					--noise3-secondary-note:    #5869BD;
					--noise3-primary-note:      #768dfc;
					--noise4-secondary-channel: #7c9b42;
					--noise4-primary-channel:   #a5ff00;
					--noise4-secondary-note:    #7c9b42;
					--noise4-primary-note:      #a5ff00;
					--noise5-secondary-channel: #7c9b42;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
			 --mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #0099a1;
					--mod1-primary-note:      #25f3ff;
					--mod2-secondary-channel: #439143;
					--mod2-primary-channel:   #44ff44;
					--mod2-secondary-note:    #439143;
					--mod2-primary-note:      #44ff44;
					--mod3-secondary-channel: #a1a100;
					--mod3-primary-channel:   #ffff25;
					--mod3-secondary-note:    #a1a100;
					--mod3-primary-note:      #ffff25;
					--mod4-secondary-channel: #c75000;
					--mod4-primary-channel:   #ff9752;
					--mod4-secondary-note:    #c75000;
					--mod4-primary-note:      #ff9752;
						--mod-label-primary:        #999;
						--mod-label-secondary-text: #333;
						--mod-label-primary-text:   black;
						--disabled-note-primary:    #999;
						--disabled-note-secondary:  #666;
					
				}
			`,
        "modbox piano": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #ffffff;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--use-piano-scheme: true;

				--tonic: #fff;
				--third-note: #7a7a7a;
				--fifth-note: #7a7a7a;

				--white-tonic: #fff;
				--black-tonic: #222;
				--white-third-note: #f7f7f7;
				--black-third-note: #444444;
				--white-fifth-note: #f7f7f7;
				--black-fifth-note: #444444;
				--pitch-white-key: #bfbfbf;
				--pitch-black-key: #7a7a7a;
				--octave-scrollbar: #211616;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "nepbox snedbox": `
			:root {
				--page-margin: #000;
				--editor-background: #060606;
				--hover-preview: #fff;
				--playhead: rgb(0, 242, 255);
				--primary-text: #00fff5;
				--secondary-text: #a82f2f;
				--inverted-text: #000;
				--text-selection: rgba(98, 46, 164, .99);
				--box-selection-fill: #b74a4a;

				--loop-accent: #7744FF;

				--link-accent: #ff00e1;
				--ui-widget-background: #484848;
				--ui-widget-focus: #3e3e3e;
				--pitch-background: #444444;

				--use-piano-scheme: true;

				--tonic: #886644;
				--third-note: #7a7a7a;
				--fifth-note: #7a7a7a;

				--white-tonic: #886644;
				--black-tonic: #886644;
				--white-third-note: #f7f7f7;
				--black-third-note: #444444;
				--white-fifth-note: #f7f7f7;
				--black-fifth-note: #444444;
				--pitch-white-key: #bfbfbf;
				--pitch-black-key: #7a7a7a;

				--pitch1-background: #ffffff;
				--pitch2-background: #ffffff;
				--pitch3-background: #ffffff;
				--pitch5-background: #ffffff;
				--pitch6-background: #ffffff;
				--pitch8-background: #ffffff;
				--pitch9-background: #ffffff;
				--pitch10-background: #ffffff;
				--pitch11-background: #ffffff;

				--pitch-white-key: #bfbfbf;
				--pitch-black-key: #7a7a7a;
				--octave-scrollbar: #211616;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "nepbox piano": `
			:root {
				--page-margin: #000;
				--editor-background: #060606;
				--hover-preview: #fff;
				--playhead: rgb(0, 242, 255);
				--primary-text: #00fff5;
				--secondary-text: #a82f2f;
				--inverted-text: #000;
				--text-selection: rgba(98, 46, 164, .99);
				--box-selection-fill: #b74a4a;

				--loop-accent: #7744FF;

				--link-accent: #ff00e1;
				--ui-widget-background: #484848;
				--ui-widget-focus: #3e3e3e;
				--pitch-background: #444444;

				--tonic: #ffffff;
				--third-note: #ffffff;
				--fifth-note: #ffffff;

				--pitch1-background: #ffffff;
				--pitch2-background: #ffffff;
				--pitch3-background: #ffffff;
				--pitch5-background: #ffffff;
				--pitch6-background: #ffffff;
				--pitch8-background: #ffffff;
				--pitch9-background: #ffffff;
				--pitch10-background: #ffffff;
				--pitch11-background: #ffffff;

				--pitch-white-key: #bfbfbf;
				--pitch-black-key: #7a7a7a;
				--octave-scrollbar: #211616;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "nepbox laffey": `
			:root {
				--page-margin: #000;
				--editor-background: #060606;
				--hover-preview: #fff;
				--playhead: rgb(0, 242, 255);
				--primary-text: #00fff5;
				--secondary-text: #a82f2f;
				--inverted-text: #000;
				--text-selection: rgba(98, 46, 164, .99);
				--box-selection-fill: #b74a4a;

				--loop-accent: #7744FF;

				--link-accent: #ff00e1;
				--ui-widget-background: #484848;
				--ui-widget-focus: #3e3e3e;
				--pitch-background: #444444;

				--tonic: #dbbeed;
				--pitch1-background: #1a2182; 
				--pitch2-background: #1a2182; 
				--pitch3-background: #1a2182; 
				--third-note: #1a2182;
				--pitch5-background: #1a2182; 
				--pitch6-background: #1a2182; 
				--fifth-note: #6b1313;
				--pitch8-background: #1a2182; 
				--pitch9-background: #1a2182; 
				--pitch10-background: #1a2182; 
				--pitch11-background: #1a2182;
				--octave-scrollbar: #852929;

				--white-piano-key: #bababa;
				--black-piano-key: #444444;
				--white-piano-key-text: #484848;

				--black-piano-key-text: #ffffff;

				--use-color-formula: false;
				--track-editor-bg-pitch: #424242;
				--track-editor-bg-pitch-dim: #000;
				--track-editor-bg-noise: #424242;
				--track-editor-bg-noise-dim: #000;
				--track-editor-bg-mod: #3c3c3c;
				--track-editor-bg-mod-dim: #000;
				--multiplicative-mod-slider: #fff;
				--overwriting-mod-slider: #9d9d9d;
				--indicator-primary: #f00;
				--indicator-secondary: #919191;
				--select2-opt-group: #5d576f;
				--input-box-outline: #626262;
				--mute-button-normal: #9a00ff;
				--mute-button-mod: #00fff7;
				--mod-label-primary: #2b2b2b;
				--noise-channel-limit: 2;
				--pitch1-secondary-channel: #c13cbf;
				--pitch1-primary-channel: #f75dff;
				--pitch1-secondary-note: #b930a2;
				--pitch1-primary-note: #fca5ff;
				--pitch2-secondary-channel: #800000;
				--pitch2-primary-channel: #f00;
				--pitch2-secondary-note: #8c2121;
				--pitch2-primary-note: #ff5252;
				--pitch3-secondary-channel: #004bb3;
				--pitch3-primary-channel: #1792ff;
				--pitch3-secondary-note: #005cb3;
				--pitch3-primary-note: #00ffe9;
				--pitch4-secondary-channel: #a48800;
				--pitch4-primary-channel: #fb0;
				--pitch4-secondary-note: #9c4100;
				--pitch4-primary-note: #ffd84e;
				--pitch5-secondary-channel: #6c0000;
				--pitch5-primary-channel:   #ff3e3e;
				--pitch5-secondary-note:    #6c0000;
				--pitch5-primary-note:      #ff3e3e;
				--pitch6-secondary-channel:#d25a00;
				--pitch6-primary-channel:  #fdff00;
				--pitch6-secondary-note:   #d25a00;
				--pitch6-primary-note:     #fdff00;
				--pitch7-secondary-channel: #046000;
				--pitch7-primary-channel:   #0c79ff;
				--pitch7-secondary-note:    #046000;
				--pitch7-primary-note:      #0c79ff;
				--pitch8-secondary-channel:#3b2bae;
				--pitch8-primary-channel:  #d85d00;
				--pitch8-secondary-note:   #3b2bae;
				--pitch8-primary-note:     #d85d00;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #868686;
				--noise1-primary-channel: #fff;
				--noise1-secondary-note: #868686;
				--noise1-primary-note: #fff;
				--noise2-secondary-channel: #805300;
				--noise2-primary-channel: #ff8c00;
				--noise2-secondary-note: #6a3500;
				--noise2-primary-note: #a85400;
				--mod1-secondary-channel: #6c0000;
				--mod1-primary-channel: #ff3e3e;
				--mod1-secondary-note: #6c0000;
				--mod1-primary-note: #ff3e3e;
				--mod2-secondary-channel: #d25a00;
				--mod2-primary-channel: #fdff00;
				--mod2-secondary-note: #d25a00;
				--mod2-primary-note: #fdff00;
				--mod3-secondary-channel: #046000;
				--mod3-primary-channel: #23ff1b;
				--mod3-secondary-note: #046000;
				--mod3-primary-note: #23ff1b;
				--mod4-secondary-channel: #3b2bae;
				--mod4-primary-channel: #0c79ff;
				--mod4-secondary-note: #3b2bae;
				--mod4-primary-note: #0c79ff;
				--disabled-note-primary: #999;
				--disabled-note-secondary: #696969;

				
				}
			`,
        "zefbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #C3593D;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #ff8864;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #06c400;
				--pitch1-primary-channel:   #08ff00;
				--pitch1-secondary-note:    #06c400;
				--pitch1-primary-note:      #06e000;
				--pitch2-secondary-channel: #00bf97;
				--pitch2-primary-channel:   #00ffcb;
				--pitch2-secondary-note:    #00bf97;
				--pitch2-primary-note:      #00edbc;
				--pitch3-secondary-channel: #b5b000;
				--pitch3-primary-channel:   #fffa00;
				--pitch3-secondary-note:    #b5b000;
				--pitch3-primary-note:      #e0db00;
				--pitch4-secondary-channel: #c90000;
				--pitch4-primary-channel:   #e20000;
				--pitch4-secondary-note:    #c90000;
				--pitch4-primary-note:      #e20000;
				--pitch5-secondary-channel: #d17d12;
				--pitch5-primary-channel:   #ff9e21;
				--pitch5-secondary-note:    #d17d12;
				--pitch5-primary-note:      #ef9017;
				--pitch6-secondary-channel: #d35bc8;
				--pitch6-primary-channel:   #ffa5f7;
				--pitch6-secondary-note:    #d35bc8;
				--pitch6-primary-note:      #fc64ee;
				--pitch7-secondary-channel: #D00000;
				--pitch7-primary-channel:   #FF4444;
				--pitch7-secondary-note:    #D00000;
				--pitch7-primary-note:      #FF4444;
				--pitch8-secondary-channel: #00C700;
				--pitch8-primary-channel:   #A0FFA0;
				--pitch8-secondary-note:    #00C700;
				--pitch8-primary-note:      #A0FFA0;
				--pitch9-secondary-channel: #A88981;
				--pitch9-primary-channel:   #F1C3B7;
				--pitch9-secondary-note:    #A88981;
				--pitch9-primary-note:      #F1C3B7;
				--pitch10-secondary-channel:#0C0A99;
				--pitch10-primary-channel:  #0000EE;
				--pitch10-secondary-note:   #0C0A99;
				--pitch10-primary-note:     #0000EE;
				--noise1-secondary-channel: #ABABAB;
				--noise1-primary-channel:   #D6D6D6;
				--noise1-secondary-note:    #ABABAB;
				--noise1-primary-note:      #D6D6D6;
				--noise2-secondary-channel: #A18F51;
				--noise2-primary-channel:   #F6BB6A;
				--noise2-secondary-note:    #A18F51;
				--noise2-primary-note:      #F6BB6A;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768DFC;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768DFC;
				--noise4-secondary-channel: #8888D0;
				--noise4-primary-channel:   #D0D0FF;
				--noise4-secondary-note:    #8888D0;
				--noise4-primary-note:      #D0D0FF;
				--noise5-secondary-channel: #B7148E;
				--noise5-primary-channel:   #E819B4;
				--noise5-secondary-note:    #B7148E;
				--noise5-primary-note:      #E819B4;
       --mod1-secondary-channel: #06c400;
				--mod1-primary-channel:   #08ff00;
				--mod1-secondary-note:    #06c400;
				--mod1-primary-note:      #06e000;
				--mod2-secondary-channel: #00bf97;
				--mod2-primary-channel:   #00ffcb;
				--mod2-secondary-note:    #00bf97;
				--mod2-primary-note:      #00edbc;
				--mod3-secondary-channel: #b5b000;
				--mod3-primary-channel:   #fffa00;
				--mod3-secondary-note:    #b5b000;
				--mod3-primary-note:      #e0db00;
				--mod4-secondary-channel: #c90000;
				--mod4-primary-channel:   #e20000;
				--mod4-secondary-note:    #c90000;
				--mod4-primary-note:      #e20000;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "sandbox classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #198195;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 4;
				--pitch1-secondary-channel: #539999;
				--pitch1-primary-channel:   #5EB1B1;
				--pitch1-secondary-note:    #539999;
				--pitch1-primary-note:      #5EB1B1;
				--pitch2-secondary-channel: #95933C;
				--pitch2-primary-channel:   #B0AD44;
				--pitch2-secondary-note:    #95933C;
				--pitch2-primary-note:      #B0AD44;
				--pitch3-secondary-channel: #E75566;
				--pitch3-primary-channel:   #FF9AA6;
				--pitch3-secondary-note:    #E75566;
				--pitch3-primary-note:      #FF9AA6;
				--pitch4-secondary-channel: #8B4343;
				--pitch4-primary-channel:   #FF8844;
				--pitch4-secondary-note:    #8B4343;
				--pitch4-primary-note:      #FF8844;
				--pitch5-secondary-channel: #888888;
				--pitch5-primary-channel:   #BBBBBB;
				--pitch5-secondary-note:    #888888;
				--pitch5-primary-note:      #BBBBBB;
				--pitch6-secondary-channel: #BB6906;
				--pitch6-primary-channel:   #FE8D00;
				--pitch6-secondary-note:    #BB6906;
				--pitch6-primary-note:      #FE8D00;
				--pitch7-secondary-channel: #539999;
				--pitch7-primary-channel:   #5EB1B1;
				--pitch7-secondary-note:    #539999;
				--pitch7-primary-note:      #5EB1B1;
				--pitch8-secondary-channel: #95933C;
				--pitch8-primary-channel:   #B0AD44;
				--pitch8-secondary-note:    #95933C;
				--pitch8-primary-note:      #B0AD44;
				--pitch9-secondary-channel: #E75566;
				--pitch9-primary-channel:   #FF9AA6;
				--pitch9-secondary-note:    #E75566;
				--pitch9-primary-note:      #FF9AA6;
				--pitch10-secondary-channel: #8B4343;
				--pitch10-primary-channel:   #FF8844;
				--pitch10-secondary-note:    #8B4343;
				--pitch10-primary-note:      #FF8844;			
				--noise1-secondary-channel: #ABABAB;
				--noise1-primary-channel:   #D6D6D6;
				--noise1-secondary-note:    #ABABAB;
				--noise1-primary-note:      #D6D6D6;
				--noise2-secondary-channel: #A18F51;
				--noise2-primary-channel:   #F6BB6A;
				--noise2-secondary-note:    #A18F51;
				--noise2-primary-note:      #F6BB6A;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768DFC;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768DFC;
				--noise4-secondary-channel: #8888D0;
				--noise4-primary-channel:   #D0D0FF;
				--noise4-secondary-note:    #8888D0;
				--noise4-primary-note:      #D0D0FF;
				--noise5-secondary-channel: #A18F51;
				--noise5-primary-channel:   #F6BB6A;
				--noise5-secondary-note:    #A18F51;
				--noise5-primary-note:      #F6BB6A;			
         	--mod1-secondary-channel: #539999;
				--mod1-primary-channel:   #5EB1B1;
				--mod1-secondary-note:    #539999;
				--mod1-primary-note:      #5EB1B1;
				--mod2-secondary-channel: #95933C;
				--mod2-primary-channel:   #B0AD44;
				--mod2-secondary-note:    #95933C;
				--mod2-primary-note:      #B0AD44;
				--mod3-secondary-channel: #E75566;
				--mod3-primary-channel:   #FF9AA6;
				--mod3-secondary-note:    #E75566;
				--mod3-primary-note:      #FF9AA6;
				--mod4-secondary-channel: #8B4343;
				--mod4-primary-channel:   #FF8844;
				--mod4-secondary-note:    #8B4343;
				--mod4-primary-note:      #FF8844;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "harrybox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9900cc;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 10;
					--noise-channel-limit: 2;
				--pitch1-secondary-channel: #00ffff;
				--pitch1-primary-channel:   #00ffff;
				--pitch1-secondary-note:    #00ffff;
				--pitch1-primary-note:      #00ffff;
				--pitch2-secondary-channel: #00d8d8;
				--pitch2-primary-channel:   #00d8d8;
				--pitch2-secondary-note:    #00d8d8;
				--pitch2-primary-note:      #00d8d8;
				--pitch3-secondary-channel: #00adad;
				--pitch3-primary-channel:   #00adad;
				--pitch3-secondary-note:    #00adad;
				--pitch3-primary-note:      #00adad;
				-pitch4-secondary-channel: #008c8c;
				--pitch4-primary-channel:   #008c8c;
				--pitch4-secondary-note:    #008c8c;
				--pitch4-primary-note:      #008c8c;
				--pitch5-secondary-channel: #005b5b;
				--pitch5-primary-channel:   #005b5b;
				--pitch5-secondary-note:    #005b5b;
				--pitch5-primary-note:      #005b5b;
				--pitch6-secondary-channel: #003333;
				--pitch6-primary-channel:   #003333;
				--pitch6-secondary-note:    #003333;
				--pitch6-primary-note:      #003333;
				--pitch7-secondary-channel: #00ffff;
				--pitch7-primary-channel:   #00ffff;
				--pitch7-secondary-note:    #00ffff;
				--pitch7-primary-note:      #00ffff;
				--pitch8-secondary-channel: #00ffff;
				--pitch8-primary-channel:   #00ffff;
				--pitch8-secondary-note:    #00ffff;
				--pitch8-primary-note:      #00ffff;
				--pitch9-secondary-channel: #00ffff;
				--pitch9-primary-channel:   #00ffff;
				--pitch9-secondary-note:    #00ffff;
				--pitch9-primary-note:      #00ffff;
				--pitch10-secondary-channel:#00ffff;
				--pitch10-primary-channel:  #00ffff;
				--pitch10-secondary-note:   #00ffff;
				--pitch10-primary-note:     #00ffff;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #991010;
				--noise3-primary-channel:   #ff1616;
				--noise3-secondary-note:    #991010;
				--noise3-primary-note:      #ff1616;
				--noise4-secondary-channel: #aaaaaa;
				--noise4-primary-channel:   #ffffff;
				--noise4-secondary-note:    #aaaaaa;
				--noise4-primary-note:      #ffffff;
				--noise5-secondary-channel: #991010;
				--noise5-primary-channel:   #ff1616;
				--noise5-secondary-note:    #991010;
				--noise5-primary-note:      #ff1616;
         	--mod1-secondary-channel: #00ffff;
				--mod1-primary-channel:   #00ffff;
				--mod1-secondary-note:    #00ffff;
				--mod1-primary-note:      #00ffff;
				--mod2-secondary-channel: #00d8d8;
				--mod2-primary-channel:   #00d8d8;
				--mod2-secondary-note:    #00d8d8;
				--mod2-primary-note:      #00d8d8;
				--mod3-secondary-channel: #00adad;
				--mod3-primary-channel:   #00adad;
				--mod3-secondary-note:    #00adad;
				--mod3-primary-note:      #00adad;
				-mod4-secondary-channel: #008c8c;
				--mod4-primary-channel:   #008c8c;
				--mod4-secondary-note:    #008c8c;
				--mod4-primary-note:      #008c8c;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "brucebox": `
			:root {
				font: 16px/2 cursive;
				--page-margin: #4667CE;
				--editor-background: #4667CE;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #444;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #444;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 3;
					--noise-channel-limit: 1;
				--pitch1-secondary-channel: #bda822;
				--pitch1-primary-channel:   #fcdb00;
				--pitch1-secondary-note:    #bda822;
				--pitch1-primary-note:      #fcdb00;
				--pitch2-secondary-channel: #612278;
				--pitch2-primary-channel:   #bb00ff;
				--pitch2-secondary-note:    #612278;
				--pitch2-primary-note:      #bb00ff;
				--pitch3-secondary-channel: #8b4343;
				--pitch3-primary-channel:   #ff8844;
				--pitch3-secondary-note:    #8b4343;
				--pitch3-primary-note:      #ff8844;
				--pitch4-secondary-channel: #bda822;
				--pitch4-primary-channel:   #fcdb00;
				--pitch4-secondary-note:    #bda822;
				--pitch4-primary-note:      #fcdb00;
				--pitch5-secondary-channel: #612278;
				--pitch5-primary-channel:   #bb00ff;
				--pitch5-secondary-note:    #612278;
				--pitch5-primary-note:      #bb00ff;
				--pitch6-secondary-channel: #8b4343;
				--pitch6-primary-channel:   #ff8844;
				--pitch6-secondary-note:    #8b4343;
				--pitch6-primary-note:      #ff8844;
				--pitch7-secondary-channel: #bda822;
				--pitch7-primary-channel:   #fcdb00;
				--pitch7-secondary-note:    #bda822;
				--pitch7-primary-note:      #fcdb00;
				--pitch8-secondary-channel: #612278;
				--pitch8-primary-channel:   #bb00ff;
				--pitch8-secondary-note:    #612278;
				--pitch8-primary-note:      #bb00ff;
				--pitch9-secondary-channel: #8b4343;
				--pitch9-primary-channel:   #ff8844;
				--pitch9-secondary-note:    #8b4343;
				--pitch9-primary-note:      #ff8844;
				--pitch10-secondary-channel: #bda822;
				--pitch10-primary-channel:   #fcdb00;
				--pitch10-secondary-note:    #bda822;
				--pitch10-primary-note:      #fcdb00;
				--noise1-secondary-channel: #991010;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}

				span input, 
				div.harmonics svg,
				div.spectrum svg,
				div.filterEditor svg,
				div.fadeInOut svg,
				div.loopEditor svg,
				svg#firstImage,
				div.trackContainer div.noSelection
				{
					background: black !important;
				}

				input, textarea {
					background-color: black !important;
				}

				#text-content > section > h1 {
					color: white;
				}
			`,
        "shitbox 1.0": `
			
			:root {
			   --page-margin: #252525;
			   --editor-background: #252525;
			   --hover-preview: white;
			   --playhead: white;
			   --primary-text: #6e6e6e;
			   --secondary-text: #999;
			   --inverted-text: black;
			   --text-selection: rgba(119,68,255,0.99);
			   --box-selection-fill: rgba(255,255,255,0.2);
			   --loop-accent: #74f;
			   --link-accent: #945800;
			   --ui-widget-background: #444;
			   --ui-widget-focus: #565656;
			   --pitch-background: #444;
			   --tonic: #864;
			   --fifth-note: #468;
			   --third-note: #486;
			   --white-piano-key: #bbb;
			   --black-piano-key: #444;
			   --white-piano-key-text: #131200;
			   --black-piano-key-text: #fff;
				   --use-color-formula: false;
				   --track-editor-bg-pitch: #444;
				   --track-editor-bg-pitch-dim: #444;
				   --track-editor-bg-noise: #444;
				   --track-editor-bg-noise-dim: #444;
				   --track-editor-bg-mod: #234;
				   --track-editor-bg-mod-dim: #123;
				   --multiplicative-mod-slider: #456;
				   --overwriting-mod-slider: #654;
				   --indicator-primary: #74f;
				   --indicator-secondary: #444;
				   --select2-opt-group: #585858;
				   --input-box-outline: #333;
				   --mute-button-normal: #ffa033;
				   --mute-button-mod: #9a6bff;
				   --noise-channel-limit: 3;
			   	--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;

				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;

				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
			   --noise1-secondary-channel: #6F6F6F;
			   --noise1-primary-channel:   #AAAAAA;
			   --noise1-secondary-note:    #A7A7A7;
			   --noise1-primary-note:      #E0E0E0;
			   --noise2-secondary-channel: #996633;
			   --noise2-primary-channel:   #DDAA77;
			   --noise2-secondary-note:    #CC9966;
			   --noise2-primary-note:      #F0D0BB;
			   --noise3-secondary-channel: #4A6D8F;
			   --noise3-primary-channel:   #77AADD;
			   --noise3-secondary-note:    #6F9FCF;
			   --noise3-primary-note:      #BBD7FF;
			   --noise4-secondary-channel: #7A4F9A;
			   --noise4-primary-channel:   #AF82D2;
			   --noise4-secondary-note:    #9E71C1;
			   --noise4-primary-note:      #D4C1EA;
			   --noise5-secondary-channel: #607837;
			   --noise5-primary-channel:   #A2BB77;
			   --noise5-secondary-note:    #91AA66;
			   --noise5-primary-note:      #C5E2B2;
		 --mod1-secondary-channel:   #339955;
				   --mod1-primary-channel:     #77fc55;
				   --mod1-secondary-note:      #77ff8a;
				   --mod1-primary-note:        #cdffee;
				   --mod2-secondary-channel:   #993355;
				   --mod2-primary-channel:     #f04960;
				   --mod2-secondary-note:      #f057a0;
				   --mod2-primary-note:        #ffb8de;
				   --mod3-secondary-channel:   #553399;
				   --mod3-primary-channel:     #8855fc;
				   --mod3-secondary-note:      #aa64ff;
				   --mod3-primary-note:	    #f8ddff;
				   --mod4-secondary-channel:   #a86436;
				   --mod4-primary-channel:     #c8a825;
				   --mod4-secondary-note:      #e8ba46;
				   --mod4-primary-note:        #fff6d3;
				   --mod-label-primary:        #999;
				   --mod-label-secondary-text: #333;
				   --mod-label-primary-text:   black;
				   --disabled-note-primary:    #999;
				   --disabled-note-secondary:  #666;
				   --mod-title: #6e6e6e;
			   }

			   .beepboxEditor input[type="range"]::-moz-range-thumb {
				   width: 8px !important;
				 }

			   button.playButton {
				   width: 80px;
			   }
			   button.prevBarButton {
				   width: 40px;
				   left:-5px;
			   }
			   button.nextBarButton {
				   width: 40px;
			   }

			   span input, 
			   div.harmonics svg,
			   div.spectrum svg,
			   div.filterEditor svg,
			   div.fadeInOut svg,
			   div.loopEditor svg,
			   svg#firstImage 
			   {
				   background: black !important;
			   }

			   .beepboxEditor {
				   line-height: 1.25;
			   }

				.trackContainer .noSelection {
				background: black !important;
				}

			   #text-content {
				   font-size: 32px;
				   line-height: 40px;
			   }

			   #text-content > section > h1 {
				   color: #C8C8C8;
				   }

			   html {
				   font-family: monospace !important;
				   }
			   #octaveScrollBarContainer {
			   background-color: black;
			   }	
		   `,
        "shitbox 2.0": `
			:root {
			--page-margin: maroon;
					--editor-background: black;
					--hover-preview: white;
					--playhead: firebrick;
					--primary-text: silver;
					--secondary-text: #999;
					--inverted-text: black;
				--text-selection: rgba(139,69,19,0.99);
					--box-selection-fill: rgba(220,20,60,0.2);
					--loop-accent: #841;
					--link-accent: #841;
					--ui-widget-background: #800;
					--ui-widget-focus: #a00;
					--pitch-background: #700;
					--tonic: #522;
					--fifth-note: #f75;
					--third-note: #9d3535;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
				--pitch1-secondary-channel: #7e4a35;
					--pitch1-primary-channel:   #c27251;
					--pitch1-secondary-note:    #7e4a35;
					--pitch1-primary-note:      #f09571;
					--pitch2-secondary-channel: #998a5c;
					--pitch2-primary-channel:   #d9c27c;
					--pitch2-secondary-note:    #998a5c;
					--pitch2-primary-note:      #fae196;
					--pitch3-secondary-channel: #9c927c;
					--pitch3-primary-channel:   #dbceb0;
					--pitch3-secondary-note:    #9c927c;
					--pitch3-primary-note:      #eddebb;
					--pitch4-secondary-channel: #838060;
					--pitch4-primary-channel:   #ccc795;
					--pitch4-secondary-note:    #838060;
					--pitch4-primary-note:      #f2ecb1;
					--pitch5-secondary-channel: #8b6f47;
					--pitch5-primary-channel:   #d1a76b;
					--pitch5-secondary-note:    #8b6f47;
					--pitch5-primary-note:      #ffcc82;
					--pitch6-secondary-channel: #a96e5b;
					--pitch6-primary-channel:   #e3967d;
					--pitch6-secondary-note:    #a96e5b;
					--pitch6-primary-note:      #ffa68a;
						--pitch7-secondary-channel: #7e4a35;
					--pitch7-primary-channel:   #c27251;
					--pitch7-secondary-note:    #7e4a35;
					--pitch7-primary-note:      #f09571;
					--pitch8-secondary-channel: #998a5c;
					--pitch8-primary-channel:   #d9c27c;
					--pitch8-secondary-note:    #998a5c;
					--pitch8-primary-note:      #fae196;
					--pitch9-secondary-channel: #9c927c;
					--pitch9-primary-channel:   #dbceb0;
					--pitch9-secondary-note:    #9c927c;
					--pitch9-primary-note:      #eddebb;
					--pitch10-secondary-channel: #838060;
					--pitch10-primary-channel:   #ccc795;
					--pitch10-secondary-note:    #838060;
					--pitch10-primary-note:      #f2ecb1;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6f6f6f;
					--noise4-primary-channel:   #aaaaaa;
					--noise4-secondary-note:    #a7a7a7;
					--noise4-primary-note:      #e0e0e0;
					--noise5-secondary-channel: #996633;
					--noise5-primary-channel:   #ddaa77;
					--noise5-secondary-note:    #cc9966;
					--noise5-primary-note:      #f0d0bb;
         --mod1-secondary-channel: #7e4a35;
					--mod1-primary-channel:   #c27251;
					--mod1-secondary-note:    #7e4a35;
					--mod1-primary-note:      #f09571;
					--mod2-secondary-channel: #998a5c;
					--mod2-primary-channel:   #d9c27c;
					--mod2-secondary-note:    #998a5c;
					--mod2-primary-note:      #fae196;
					--mod3-secondary-channel: #9c927c;
					--mod3-primary-channel:   #dbceb0;
					--mod3-secondary-note:    #9c927c;
					--mod3-primary-note:      #eddebb;
					--mod4-secondary-channel: #838060;
					--mod4-primary-channel:   #ccc795;
					--mod4-secondary-note:    #838060;
					--mod4-primary-note:      #f2ecb1;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "shitbox 3.0": `
			
			 :root {
				--page-margin: #252525;
				--editor-background: #252525;
				--hover-preview: white;
				--playhead: white;
				--primary-text: #C8C8C8;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #945800;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #444;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #444;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
					--mod-title: #C8C8C8;
				}

				.beepboxEditor input[type="range"]::-moz-range-thumb {
					width: 8px !important;
				  }

				button.playButton {
					width: 80px;
				}
				button.prevBarButton {
					width: 40px;
					left:-5px;
				}
				button.nextBarButton {
					width: 40px;
				}

				span input, 
				div.harmonics svg,
				div.spectrum svg,
				div.filterEditor svg,
				div.fadeInOut svg,
				div.loopEditor svg,
				svg#firstImage 
				{
					background: black !important;
				}

				.beepboxEditor {
					line-height: 1.25;
				}

				#text-content {
					font-size: 32px;
					line-height: 40px;
				}

				.trackContainer .noSelection {
				background: black !important;
				}

				#text-content > section > h1 {
					color: #C8C8C8;
					}

				html {
					font-family: monospace !important;
					}
				#octaveScrollBarContainer {
				background-color: black;
				}	
			`,
        "shitbox ModBox 2.0": `
			
			:root {
			   --page-margin: #252525;
			   --editor-background: #252525;
			   --hover-preview: white;
			   --playhead: white;
			   --primary-text: #C8C8C8;
			   --secondary-text: #999;
			   --inverted-text: black;
			   --text-selection: rgba(119,68,255,0.99);
			   --box-selection-fill: rgba(255,255,255,0.2);
			   --loop-accent: #00ff00;
			   --link-accent: #945800;
			   --ui-widget-background: #444;
			   --ui-widget-focus: #565656;
			   --pitch-background: #444;
			   --tonic: #c4ffa3;
				--fifth-note: #96fffb;
				--third-note: #9698ff;
				--octave-scrollbar: #00ff00;
			   --white-piano-key: #bbb;
			   --black-piano-key: #444;
			   --white-piano-key-text: #131200;
			   --black-piano-key-text: #fff;
				   --use-color-formula: false;
				   --track-editor-bg-pitch: #444;
				   --track-editor-bg-pitch-dim: #444;
				   --track-editor-bg-noise: #444;
				   --track-editor-bg-noise-dim: #444;
				   --track-editor-bg-mod: #234;
				   --track-editor-bg-mod-dim: #123;
				   --multiplicative-mod-slider: #456;
				   --overwriting-mod-slider: #654;
				   --indicator-primary: #74f;
				   --indicator-secondary: #444;
				   --select2-opt-group: #585858;
				   --input-box-outline: #333;
				   --mute-button-normal: #ffa033;
				   --mute-button-mod: #9a6bff;
				   
				   --noise-channel-limit: 3;
			  --pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
				   --mod-label-primary:        #999;
				   --mod-label-secondary-text: #333;
				   --mod-label-primary-text:   black;
				   --disabled-note-primary:    #999;
				   --disabled-note-secondary:  #666;
			   }

			   .beepboxEditor input[type="range"]::-moz-range-thumb {
				   width: 8px !important;
				 }

			   button.playButton {
				   width: 80px;
			   }
			   button.prevBarButton {
				   width: 40px;
				   left:-5px;
			   }
			   button.nextBarButton {
				   width: 40px;
			   }

				#octaveScrollBarContainer {
				background-color: black;
				}

			   span input, 
			   div.harmonics svg,
			   div.spectrum svg,
			   div.filterEditor svg,
			   div.fadeInOut svg,
			   div.loopEditor svg,
			   svg#firstImage 
			   {
				   background: black !important;
			   }

			   .beepboxEditor {
				   line-height: 1.25;
			   }

			   #text-content {
				   font-size: 32px;
				   line-height: 40px;
			   }

			   #text-content > section > h1 {
				   color: #C8C8C8;
				   }

				.trackContainer .noSelection {
				background: black !important;
				}
				   
			   html {
				   font-family: monospace !important;
				   }
		   `,
        "shitbox Realm": `
			:root {
			   --page-margin: #252525;
			   --editor-background: #252525;
			   --hover-preview: white;
			   --playhead: white;
			   --primary-text: #6e6e6e;
			   --secondary-text: #999;
			   --inverted-text: black;
			   --text-selection: rgba(119,68,255,0.99);
			   --box-selection-fill: rgba(255,255,255,0.2);
			   --loop-accent: #673daf;
			   --link-accent: #945800;
			   --ui-widget-background: #444;
			   --ui-widget-focus: #565656;
			   --pitch-background: #444;
			   --tonic: #673daf;
			   --fifth-note: #673daf;
			   --third-note: #673daf;
			   --pitch1-background: #673daf;
			   --pitch2-background: #673daf;
			   --pitch3-background: #673daf;
			   --pitch5-background: #673daf;
			   --pitch6-background: #673daf;
			   --pitch8-background: #673daf;
			   --pitch9-background: #673daf;
			   --pitch10-background: #673daf;
			   --pitch11-background: #673daf;
			   --octave-scrollbar: #673daf;
			   --white-piano-key: #bbb;
			   --black-piano-key: #444;
			   --white-piano-key-text: #131200;
			   --black-piano-key-text: #fff;
				   --use-color-formula: false;
				   --track-editor-bg-pitch: #444;
				   --track-editor-bg-pitch-dim: #444;
				   --track-editor-bg-noise: #444;
				   --track-editor-bg-noise-dim: #444;
				   --track-editor-bg-mod: #234;
				   --track-editor-bg-mod-dim: #123;
				   --multiplicative-mod-slider: #456;
				   --overwriting-mod-slider: #654;
				   --indicator-primary: #74f;
				   --indicator-secondary: #444;
				   --select2-opt-group: #585858;
				   --input-box-outline: #333;
				   --mute-button-normal: #ffa033;
				   --mute-button-mod: #9a6bff;
				   
				   --noise-channel-limit: 3;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
				   --mod-label-primary:        #999;
				   --mod-label-secondary-text: #333;
				   --mod-label-primary-text:   black;
				   --disabled-note-primary:    #999;
				   --disabled-note-secondary:  #666;
				   --mod-title: #6e6e6e;
			   }

			   .beepboxEditor input[type="range"]::-moz-range-thumb {
				   width: 8px !important;
				 }

				.trackContainer .noSelection {
				background: black !important;
				}

			   button.playButton {
				   width: 80px;
			   }
			   button.prevBarButton {
				   width: 40px;
				   left:-5px;
			   }
			   button.nextBarButton {
				   width: 40px;
			   }

			   span input, 
			   div.harmonics svg,
			   div.spectrum svg,
			   div.filterEditor svg,
			   div.fadeInOut svg,
			   div.loopEditor svg,
			   svg#firstImage 
			   {
				   background: black !important;
			   }

			   .beepboxEditor {
				   line-height: 1.25;
			   }

				#octaveScrollBarContainer {
				background-color: black;
				}

			   #text-content {
				   font-size: 32px;
				   line-height: 40px;
			   }

			   #text-content > section > h1 {
				   color: #C8C8C8;
				   }

			   html {
				   font: monospace !important;
				   }
		   `,
        "shitbox4": `
			:root {
			   font: 20px/2 monospace;
			   --page-margin: #252525;
			   --editor-background: #252525;
			   --hover-preview: white;
			   --playhead: white;
			   --primary-text: #C8C8C8;
			   --secondary-text: #999;
			   --inverted-text: black;
			   --text-selection: rgba(119,68,255,0.99);
			   --box-selection-fill: rgba(255,255,255,0.2);
			   --loop-accent: #74f;
			   --link-accent: #945800;
			   --ui-widget-background: #444;
			   --ui-widget-focus: #777;
			   --pitch-background: #444;
			   --tonic: #864;
			   --fifth-note: #468;
			   --third-note: #486;
			   --white-piano-key: #bbb;
			   --black-piano-key: #444;
			   --white-piano-key-text: #131200;
			   --black-piano-key-text: #fff;
				   --use-color-formula: false;
				   --track-editor-bg-pitch: #444;
				   --track-editor-bg-pitch-dim: #444;
				   --track-editor-bg-noise: #444;
				   --track-editor-bg-noise-dim: #444;
				   --track-editor-bg-mod: #234;
				   --track-editor-bg-mod-dim: #123;
				   --multiplicative-mod-slider: #456;
				   --overwriting-mod-slider: #654;
				   --indicator-primary: #74f;
				   --indicator-secondary: #444;
				   --select2-opt-group: #585858;
				   --input-box-outline: #333;
				   --mute-button-normal: #ffa033;
				   --mute-button-mod: #9a6bff;
				   --pitch-channel-limit: 6;
				   --noise-channel-limit: 3;
			   --pitch1-secondary-channel: #0099A1;
			   --pitch1-primary-channel:   #25F3FF;
			   --pitch1-secondary-note:    #00BDC7;
			   --pitch1-primary-note:      #92F9FF;
			   --pitch2-secondary-channel: #A1A100;
			   --pitch2-primary-channel:   #FFFF25;
			   --pitch2-secondary-note:    #C7C700;
			   --pitch2-primary-note:      #FFFF92;
			   --pitch3-secondary-channel: #C75000;
			   --pitch3-primary-channel:   #FF9752;
			   --pitch3-secondary-note:    #FF771C;
			   --pitch3-primary-note:      #FFCDAB;
			   --pitch4-secondary-channel: #00A100;
			   --pitch4-primary-channel:   #50FF50;
			   --pitch4-secondary-note:    #00C700;
			   --pitch4-primary-note:      #A0FFA0;
			   --pitch5-secondary-channel: #D020D0;
			   --pitch5-primary-channel:   #FF90FF;
			   --pitch5-secondary-note:    #E040E0;
			   --pitch5-primary-note:      #FFC0FF;
			   --pitch6-secondary-channel: #7777B0;
			   --pitch6-primary-channel:   #A0A0FF;
			   --pitch6-secondary-note:    #8888D0;
			   --pitch6-primary-note:      #D0D0FF;
			   --pitch7-secondary-channel: #8AA100;
			   --pitch7-primary-channel:   #DEFF25;
			   --pitch7-secondary-note:    #AAC700;
			   --pitch7-primary-note:      #E6FF92;
			   --pitch8-secondary-channel: #DF0019;
			   --pitch8-primary-channel:   #FF98A4;
			   --pitch8-secondary-note:    #FF4E63;
			   --pitch8-primary-note:      #FFB2BB;
			   --pitch9-secondary-channel: #00A170;
			   --pitch9-primary-channel:   #50FFC9;
			   --pitch9-secondary-note:    #00C78A;
			   --pitch9-primary-note:      #83FFD9;
			   --pitch10-secondary-channel:#A11FFF;
			   --pitch10-primary-channel:  #CE8BFF;
			   --pitch10-secondary-note:   #B757FF;
			   --pitch10-primary-note:     #DFACFF;
			   --noise1-secondary-channel: #6F6F6F;
			   --noise1-primary-channel:   #AAAAAA;
			   --noise1-secondary-note:    #A7A7A7;
			   --noise1-primary-note:      #E0E0E0;
			   --noise2-secondary-channel: #996633;
			   --noise2-primary-channel:   #DDAA77;
			   --noise2-secondary-note:    #CC9966;
			   --noise2-primary-note:      #F0D0BB;
			   --noise3-secondary-channel: #4A6D8F;
			   --noise3-primary-channel:   #77AADD;
			   --noise3-secondary-note:    #6F9FCF;
			   --noise3-primary-note:      #BBD7FF;
			   --noise4-secondary-channel: #7A4F9A;
			   --noise4-primary-channel:   #AF82D2;
			   --noise4-secondary-note:    #9E71C1;
			   --noise4-primary-note:      #D4C1EA;
			   --noise5-secondary-channel: #607837;
			   --noise5-primary-channel:   #A2BB77;
			   --noise5-secondary-note:    #91AA66;
			   --noise5-primary-note:      #C5E2B2;
		 --mod1-secondary-channel:   #339955;
				   --mod1-primary-channel:     #77fc55;
				   --mod1-secondary-note:      #77ff8a;
				   --mod1-primary-note:        #cdffee;
				   --mod2-secondary-channel:   #993355;
				   --mod2-primary-channel:     #f04960;
				   --mod2-secondary-note:      #f057a0;
				   --mod2-primary-note:        #ffb8de;
				   --mod3-secondary-channel:   #553399;
				   --mod3-primary-channel:     #8855fc;
				   --mod3-secondary-note:      #aa64ff;
				   --mod3-primary-note:	    #f8ddff;
				   --mod4-secondary-channel:   #a86436;
				   --mod4-primary-channel:     #c8a825;
				   --mod4-secondary-note:      #e8ba46;
				   --mod4-primary-note:        #fff6d3;
				   --mod-label-primary:        #999;
				   --mod-label-secondary-text: #333;
				   --mod-label-primary-text:   black;
				   --disabled-note-primary:    #999;
				   --disabled-note-secondary:  #666;
			   }

			   .beepboxEditor input[type="range"]::-moz-range-thumb {
				   width: 8px !important;
				 }

			   button.playButton {
				   width: 80px;
			   }
			   button.prevBarButton {
				   width: 40px;
				   left:-5px;
			   }
			   button.nextBarButton {
				   width: 40px;
			   }

			   span input, 
			   div.harmonics svg,
			   div.spectrum svg,
			   div.filterEditor svg,
			   div.fadeInOut svg,
			   div.loopEditor svg,
			   svg#firstImage 
			   {
				   background: black !important;
			   }

			   div.visualizer {
				transform: skew(30deg,20deg) scale(0.5);
				}

			   .beepboxEditor {
				   line-height: 1.25;
			   }

			   #text-content {
				   font-size: 32px;
				   line-height: 40px;
			   }

			   #text-content > section > h1 {
				   color: #C8C8C8;
				   }
		   `,
        "nerdbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 9;
					--noise-channel-limit: 3;
				--pitch1-secondary-channel: #139620;
				--pitch1-primary-channel:   #25ff3a;
				--pitch1-secondary-note:    #139620;
				--pitch1-primary-note:      #25ff3a;
				--pitch2-secondary-channel: #109986;
				--pitch2-primary-channel:   #1cffe0;
				--pitch2-secondary-note:    #109986;
				--pitch2-primary-note:      #1cffe0;
				--pitch3-secondary-channel: #127296;
				--pitch3-primary-channel:   #21c3ff;
				--pitch3-secondary-note:    #127296;
				--pitch3-primary-note:      #21c3ff;
				--pitch4-secondary-channel: #6038a5;
				--pitch4-primary-channel:   #9456ff;
				--pitch4-secondary-note:    #6038a5;
				--pitch4-primary-note:      #ff35e0;
				--pitch5-secondary-channel: #a52491;
				--pitch5-primary-channel:   #ff35e0;
				--pitch5-secondary-note:    #a52491;
				--pitch5-primary-note:      #af3221;
				--pitch6-secondary-channel: #af3221;
				--pitch6-primary-channel:   #ff4a32;
				--pitch6-secondary-note:    #af3221;
				--pitch6-primary-note:      #ff4a32;
				--pitch7-secondary-channel: #ad6e0f;
				--pitch7-primary-channel:   #ffa216;
				--pitch7-secondary-note:    #ad6e0f;
				--pitch7-primary-note:      #ffa216;
				--pitch8-secondary-channel: #ad6e0f;
				--pitch8-primary-channel:   #ffa216;
				--pitch8-secondary-note:    #ad6e0f;
				--pitch8-primary-note:      #ffa216;
				--pitch9-secondary-channel: #a7b512;
				--pitch9-primary-channel:   #ebff19;
				--pitch9-secondary-note:    #a7b512;
				--pitch9-primary-note:      #ebff19;
				--pitch10-secondary-channel:#70ad1b;
				--pitch10-primary-channel:  #a4ff26;
				--pitch10-secondary-note:   #70ad1b;
				--pitch10-primary-note:     #a4ff26;
				--noise1-secondary-channel: #68706f;
				--noise1-primary-channel:   #a6b2b1;
				--noise1-secondary-note:    #68706f;
				--noise1-primary-note:      #a6b2b1;
				--noise2-secondary-channel: #665c64;
				--noise2-primary-channel:   #a396a1;
				--noise2-secondary-note:    #665c64;
				--noise2-primary-note:      #a396a1;
				--noise3-secondary-channel: #60605a;
				--noise3-primary-channel:   #afaea3;
				--noise3-secondary-note:    #60605a;
				--noise3-primary-note:      #afaea3;
			--noise4-secondary-channel: #665c64;
			--noise4-primary-channel:   #a396a1;
				--noise4-secondary-note:    #665c64;
				--noise4-primary-note:      #a396a1;
				--noise5-secondary-channel: #60605a;
				--noise5-primary-channel:   #afaea3;
				--noise5-secondary-note:    #60605a;
				--noise5-primary-note:      #afaea3;
         --mod1-secondary-channel: #139620;
				--mod1-primary-channel:   #25ff3a;
				--mod1-secondary-note:    #139620;
				--mod1-primary-note:      #25ff3a;
				--mod2-secondary-channel: #109986;
				--mod2-primary-channel:   #1cffe0;
				--mod2-secondary-note:    #109986;
				--mod2-primary-note:      #1cffe0;
				--mod3-secondary-channel: #127296;
				--mod3-primary-channel:   #21c3ff;
				--mod3-secondary-note:    #127296;
				--mod3-primary-note:      #21c3ff;
				--mod4-secondary-channel: #6038a5;
				--mod4-primary-channel:   #9456ff;
				--mod4-secondary-note:    #6038a5;
				--mod4-primary-note:      #ff35e0;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "nepbox": `
			:root {
				--page-margin: #000;
				--editor-background: #060606;
				--hover-preview: #fff;
				--playhead: rgb(0, 242, 255);
				--primary-text: #00fff5;
				--secondary-text: #a82f2f;
				--inverted-text: #000;
				--text-selection: rgba(98, 46, 164, .99);
				--box-selection-fill: #b74a4a;
				--loop-accent: #7744FF;
				--link-accent: #ff00e1;
				--ui-widget-background: #484848;
				--ui-widget-focus: #3e3e3e;
				--pitch-background: #0a2d44;
				--tonic: #9150ff;
				--fifth-note: #900;
				--third-note: #258822;
				--white-piano-key: #353535;
				--black-piano-key: #fff;
				--white-piano-key-text: #fff;
				--black-piano-key-text: #000;
				--use-color-formula: false;
				--track-editor-bg-pitch: #424242;
				--track-editor-bg-pitch-dim: #000;
				--track-editor-bg-noise: #424242;
				--track-editor-bg-noise-dim: #000;
				--track-editor-bg-mod: #3c3c3c;
				--track-editor-bg-mod-dim: #000;
				--multiplicative-mod-slider: #fff;
				--overwriting-mod-slider: #9d9d9d;
				--indicator-primary: #f00;
				--indicator-secondary: #919191;
				--select2-opt-group: #5d576f;
				--input-box-outline: #626262;
				--mute-button-normal: #9a00ff;
				--mute-button-mod: #00fff7;
				--mod-label-primary: #2b2b2b;
				--noise-channel-limit: 2;
				--pitch1-secondary-channel: #c13cbf;
				--pitch1-primary-channel: #f75dff;
				--pitch1-secondary-note: #b930a2;
				--pitch1-primary-note: #fca5ff;
				--pitch2-secondary-channel: #800000;
				--pitch2-primary-channel: #f00;
				--pitch2-secondary-note: #8c2121;
				--pitch2-primary-note: #ff5252;
				--pitch3-secondary-channel: #004bb3;
				--pitch3-primary-channel: #1792ff;
				--pitch3-secondary-note: #005cb3;
				--pitch3-primary-note: #00ffe9;
				--pitch4-secondary-channel: #a48800;
				--pitch4-primary-channel: #fb0;
				--pitch4-secondary-note: #9c4100;
				--pitch4-primary-note: #ffd84e;
				--pitch5-secondary-channel: #6c0000;
				--pitch5-primary-channel:   #ff3e3e;
				--pitch5-secondary-note:    #6c0000;
				--pitch5-primary-note:      #ff3e3e;
				--pitch6-secondary-channel:#d25a00;
				--pitch6-primary-channel:  #fdff00;
				--pitch6-secondary-note:   #d25a00;
				--pitch6-primary-note:     #fdff00;
				--pitch7-secondary-channel: #046000;
				--pitch7-primary-channel:   #0c79ff;
				--pitch7-secondary-note:    #046000;
				--pitch7-primary-note:      #0c79ff;
				--pitch8-secondary-channel:#3b2bae;
				--pitch8-primary-channel:  #d85d00;
				--pitch8-secondary-note:   #3b2bae;
				--pitch8-primary-note:     #d85d00;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--pitch11-secondary-channel:#891a60;
				--pitch11-primary-channel:  #ff00a1;
				--pitch11-secondary-note:   #891a60;
				--pitch11-primary-note:     #ff00a1;
				--pitch12-secondary-channel:#965cbc;
				--pitch12-primary-channel:  #c26afc;
				--pitch12-secondary-note:   #965cbc;
				--pitch12-primary-note:     #c26afc;
				--noise1-secondary-channel: #868686;
				--noise1-primary-channel: #fff;
				--noise1-secondary-note: #868686;
				--noise1-primary-note: #fff;
				--noise2-secondary-channel: #805300;
				--noise2-primary-channel: #ff8c00;
				--noise2-secondary-note: #6a3500;
				--noise2-primary-note: #a85400;
				--mod1-secondary-channel: #6c0000;
				--mod1-primary-channel: #ff3e3e;
				--mod1-secondary-note: #6c0000;
				--mod1-primary-note: #ff3e3e;
				--mod2-secondary-channel: #d25a00;
				--mod2-primary-channel: #fdff00;
				--mod2-secondary-note: #d25a00;
				--mod2-primary-note: #fdff00;
				--mod3-secondary-channel: #046000;
				--mod3-primary-channel: #23ff1b;
				--mod3-secondary-note: #046000;
				--mod3-primary-note: #23ff1b;
				--mod4-secondary-channel: #3b2bae;
				--mod4-primary-channel: #0c79ff;
				--mod4-secondary-note: #3b2bae;
				--mod4-primary-note: #0c79ff;
				--disabled-note-primary: #999;
				--disabled-note-secondary: #696969;
				}
			`,
        "cardboardbox classic": `
				:root {
					--page-margin: #0f0700;
--editor-background: #0f0700;
--hover-preview: #75461d;
--playhead: #75461d;
--primary-text: #ddd;
--secondary-text: #8e695b;
--inverted-text: black;
--text-selection: #75461d;
--box-selection-fill: rgba(117, 70, 29,0.5);
--loop-accent: #75461d;
--link-accent: #75461d;
--ui-widget-background: #574a3e;
--ui-widget-focus: #756453;
--pitch-background: #361900;
--tonic: #fdba9a;
--fifth-note: #7f78d2;
--third-note: #886444;
--white-piano-key: #bbb;
--black-piano-key: #444;
--use-color-formula: false;
--pitch-channel-limit: 10;
--track-editor-bg-pitch: #444;
--track-editor-bg-pitch-dim: #333;
--track-editor-bg-noise: #444;
--track-editor-bg-noise-dim: #333;
--track-editor-bg-mod: #234;
--track-editor-bg-mod-dim: #123;
--multiplicative-mod-slider: #456;
--overwriting-mod-slider: #654;
--indicator-primary: #74f;
--indicator-secondary: #444;
--select2-opt-group: #585858;
--input-box-outline: #333;
--mute-button-normal: #ffa033;
--mute-button-mod: #9a6bff;
--pitch1-secondary-channel: #798566;
--pitch1-primary-channel: #9dab86;
--pitch1-secondary-note: #798566;
--pitch1-primary-note: #9dab86;
--pitch2-secondary-channel: #a6733d;
--pitch2-primary-channel: #e6a157;
--pitch2-secondary-note: #a6733d;
--pitch2-primary-note: #e6a157;
--pitch3-secondary-channel: #874c27;
--pitch3-primary-channel: #eb8242;
--pitch3-secondary-note: #874c27;
--pitch3-primary-note: #eb8242;
--pitch4-secondary-channel: #395866;
--pitch4-primary-channel: #537d91;
--pitch4-secondary-note: #395866;
--pitch4-primary-note: #537d91;
--pitch5-secondary-channel: #779992;
--pitch5-primary-channel: #a4d1c8;
--pitch5-secondary-note: #779992;
--pitch5-primary-note: #a4d1c8;
--pitch6-secondary-channel: #7777b0;
--pitch6-primary-channel: #a0a0ff;
--pitch6-secondary-note: #8888d0;
--pitch6-primary-note: #d0d0ff;
--pitch7-secondary-channel: #300707;
--pitch7-primary-channel: #560d0d;
--pitch7-secondary-note: #300707;
--pitch7-primary-note: #560d0d;
--pitch8-secondary-channel: #486312;
--pitch8-primary-channel: #76a21e;
--pitch8-secondary-note: #486312;
--pitch8-primary-note: #76a21e;
--pitch9-secondary-channel: #4a1242;
--pitch9-primary-channel: #721b65;
--pitch9-secondary-note: #4a1242;
--pitch9-primary-note: #721b65;
--pitch10-secondary-channel: #7a312d;
--pitch10-primary-channel: #f8615a;
--pitch10-secondary-note: #7a312d;
--pitch10-primary-note: #f8615a;
--noise1-secondary-channel: #5f6582;
--noise1-primary-channel: #a6b1e1;
--noise1-secondary-note: #5f6582;
--noise1-primary-note: #a6b1e1;
--noise2-secondary-channel: #996633;
--noise2-primary-channel: #ddaa77;
--noise2-secondary-note: #cc9966;
--noise2-primary-note: #f0d0bb;
--noise3-secondary-channel: #4a6d8f;
--noise3-primary-channel: #77aadd;
--noise3-secondary-note: #6f9fcf;
--noise3-primary-note: #bbd7ff;
--noise4-secondary-channel: #6B3E8E;
--noise4-primary-channel: #AF82D2;
--noise4-secondary-note: #9E71C1;
--noise4-primary-note: #D4C1EA;
--noise5-secondary-channel: #996633;
--noise5-primary-channel: #ddaa77;
--noise5-secondary-note: #cc9966;
--noise5-primary-note: #f0d0bb;
--mod1-secondary-channel: #339955;
--mod1-primary-channel: #77fc55;
--mod1-secondary-note: #77ff8a;
--mod1-primary-note: #cdffee;
--mod2-secondary-channel: #993355;
--mod2-primary-channel: #f04960;
--mod2-secondary-note: #f057a0;
--mod2-primary-note: #ffb8de;
--mod3-secondary-channel: #553399;
--mod3-primary-channel: #8855fc;
--mod3-secondary-note: #aa64ff;
--mod3-primary-note: #f8ddff;
--mod4-secondary-channel: #a86436;
--mod4-primary-channel: #c8a825;
--mod4-secondary-note: #e8ba46;
--mod4-primary-note: #fff6d3;
--mod-label-primary: #999;
--mod-label-secondary-text: #333;
--mod-label-primary-text: black;

			
			
				}
			`,
        "blubox classic": `
			:root {
				--page-margin: #040410;
					--editor-background: #040410;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #84859a;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #74f;
					--link-accent: #024ACA;
					--ui-widget-background: #393e4f;
					--ui-widget-focus: #6d6886;
					--pitch-background: #393e4f;
					--tonic: #725491;
					--fifth-note: #54547a;
					--third-note: #446288;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
					--use-color-formula: false;
					--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #393e4f;
					--track-editor-bg-pitch-dim: #1c1d28;
					--track-editor-bg-noise: #3d3535;
					--track-editor-bg-noise-dim: #161313;
					--track-editor-bg-mod: #283560;
					--track-editor-bg-mod-dim: #0a101f;
					--multiplicative-mod-slider: #606c9f;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #9c64f7;
					--indicator-secondary: #393e4f;
					--select2-opt-group: #5d576f;
					--input-box-outline: #222;
					--mute-button-normal: #886eae;
					--mute-button-mod: #9a6bff;
					--pitch1-secondary-channel: #0A89FF;
					--pitch1-primary-channel:   #024ACA;
					--pitch1-secondary-note:    #0A89FF;
					--pitch1-primary-note:      #024ACA;
					--pitch2-secondary-channel: #0A89FF;
					--pitch2-primary-channel:   #024ACA;
					--pitch2-secondary-note:    #0A89FF;
					--pitch2-primary-note:      #024ACA;
					--pitch3-secondary-channel: #0A89FF;
					--pitch3-primary-channel:   #024ACA;
					--pitch3-secondary-note:    #0A89FF;
					--pitch3-primary-note:      #024ACA;
					--pitch4-secondary-channel: #0A89FF;
					--pitch4-primary-channel:   #024ACA;
					--pitch4-secondary-note:    #0A89FF;
					--pitch4-primary-note:      #024ACA;
					--pitch5-secondary-channel: #0A89FF;
					--pitch5-primary-channel:   #024ACA;
					--pitch5-secondary-note:    #0A89FF;
					--pitch5-primary-note:      #024ACA;
					--pitch6-secondary-channel: #0A89FF;
					--pitch6-primary-channel:   #024ACA;
					--pitch6-secondary-note:    #0A89FF;
					--pitch6-primary-note:      #024ACA;
					--pitch7-secondary-channel: #0A89FF;
					--pitch7-primary-channel:   #024ACA;
					--pitch7-secondary-note:	  #0A89FF;
					--pitch7-primary-note:			#024ACA;
					--pitch8-secondary-channel: #0A89FF;
					--pitch8-primary-channel:   #024ACA;
					--pitch8-secondary-note:    #0A89FF;
					--pitch8-primary-note:      #024ACA;
					--pitch9-secondary-channel: #0A89FF;
					--pitch9-primary-channel:   #024ACA;
					--pitch9-secondary-note:    #0A89FF;
					--pitch9-primary-note:			#024ACA;
					--pitch10-secondary-channel:#0A89FF;
					--pitch10-primary-channel:  #024ACA;
					--pitch10-secondary-note:   #0A89FF;
					--pitch10-primary-note:     #024ACA;
					--noise1-secondary-channel: #0A89FF;
					--noise1-primary-channel:   #024ACA;
					--noise1-secondary-note:    #0A89FF;
					--noise1-primary-note:      #024ACA;
					--noise2-secondary-channel: #0A89FF;
					--noise2-primary-channel:   #024ACA;
					--noise2-secondary-note:    #0A89FF;
					--noise2-primary-note:      #024ACA;
					--noise3-secondary-channel: #0A89FF;
					--noise3-primary-channel:   #024ACA;
					--noise3-secondary-note:    #0A89FF;
					--noise3-primary-note:      #024ACA;
					--noise4-secondary-channel: #0A89FF;
					--noise4-primary-channel:   #024ACA;
					--noise4-secondary-note:    #0A89FF;
					--noise4-primary-note:      #024ACA;
					--mod1-secondary-channel:   #0A89FF;
					--mod1-primary-channel:     #024ACA;
					--mod1-secondary-note:      #0A89FF;
					--mod1-primary-note:        #024ACA;
					--mod2-secondary-channel:   #0A89FF;
					--mod2-primary-channel:     #024ACA;
					--mod2-secondary-note:      #0A89FF;
					--mod2-primary-note:        #024ACA;
					--mod3-secondary-channel:   #0A89FF;
					--mod3-primary-channel:     #024ACA;
					--mod3-secondary-note:      #0A89FF;
					--mod3-primary-note:			  #024ACA;
					--mod4-secondary-channel:   #0A89FF;
					--mod4-primary-channel:     #024ACA;
					--mod4-secondary-note:      #0A89FF;
					--mod4-primary-note:        #024ACA;
					--mod-label-primary:        #282840;
					--mod-label-secondary-text: rgb(87, 86, 120);
					--mod-label-primary-text:   white;

					
					
				}
			`,
        "dogebox classic": `
				:root {
			--page-margin: #0d0063;
			--editor-background: #0D0063;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: rgba(255,255,255,0.2);
			--loop-accent: #74f;
			--link-accent: #98f;
			--ui-widget-background: #444;
			--ui-widget-focus: #777;
			--pitch-background: #322c59;
			--tonic: #1c1933;
			--fifth-note: #7b74ad;
			--third-note: #445888;
			--white-piano-key: #bbb;
			--black-piano-key: #444;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #444;
			--track-editor-bg-pitch-dim: #333;
			--track-editor-bg-noise: #444;
			--track-editor-bg-noise-dim: #333;
			--track-editor-bg-mod: #234;
			--track-editor-bg-mod-dim: #123;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #74f;
			--indicator-secondary: #444;
			--select2-opt-group: #585858;
			--input-box-outline: #333;
			--mute-button-normal: #ffa033;
			--mute-button-mod: #9a6bff;
			--pitch-channel-limit: 6;
			--noise-channel-limit: 3;
			--pitch1-secondary-channel: #c7ac00;
			--pitch1-primary-channel: #fcf403;
			--pitch1-secondary-note: #c7c700;
			--pitch1-primary-note: #fcf403;
			--pitch2-secondary-channel: #9400b5;
			--pitch2-primary-channel: #ff00ee;
			--pitch2-secondary-note: #9400b5;
			--pitch2-primary-note: #ff00ee;
			--pitch3-secondary-channel: #b37466;
			--pitch3-primary-channel: #ffc6a1;
			--pitch3-secondary-note: #b37466;
			--pitch3-primary-note: #ffc6a1;
			--pitch4-secondary-channel: #00a100;
			--pitch4-primary-channel: #50ff50;
			--pitch4-secondary-note: #00c700;
			--pitch4-primary-note: #a0ffa0;
			--pitch5-secondary-channel: #d020d0;
			--pitch5-primary-channel: #ff90ff;
			--pitch5-secondary-note: #e040e0;
			--pitch5-primary-note: #ffc0ff;
			--pitch6-secondary-channel: #7777b0;
			--pitch6-primary-channel: #a0a0ff;
			--pitch6-secondary-note: #8888d0;
			--pitch6-primary-note: #d0d0ff;
			--pitch7-secondary-channel: #c7ac00;
			--pitch7-primary-channel: #fcf403;
			--pitch7-secondary-note: #c7c700;
			--pitch7-primary-note: #fcf403;
			--pitch8-secondary-channel: #9400b5;
			--pitch8-primary-channel: #ff00ee;
			--pitch8-secondary-note: #9400b5;
			--pitch8-primary-note: #ff00ee;
			--pitch9-secondary-channel: #b37466;
			--pitch9-primary-channel: #ffc6a1;
			--pitch9-secondary-note: #b37466;
			--pitch9-primary-note: #ffc6a1;
			--pitch10-secondary-channel: #00a100;
			--pitch10-primary-channel: #50ff50;
			--pitch10-secondary-note: #00c700;
			--pitch10-primary-note: #a0ffa0;
			--noise1-secondary-channel: #95acad;
			--noise1-primary-channel: #cee9eb;
			--noise1-secondary-note: #95acad;
			--noise1-primary-note: #cee9eb;
			--noise2-secondary-channel: #996633;
			--noise2-primary-channel: #ddaa77;
			--noise2-secondary-note: #cc9966;
			--noise2-primary-note: #f0d0bb;
			--noise3-secondary-channel: #4a6d8f;
			--noise3-primary-channel: #77aadd;
			--noise3-secondary-note: #6f9fcf;
			--noise3-primary-note: #bbd7ff;
			--noise4-secondary-channel: #7c9b42;
			--noise4-primary-channel:   #a5ff00;
			--noise4-secondary-note:    #7c9b42;
			--noise4-primary-note:      #a5ff00;
			--noise5-secondary-channel: #7c9b42;
			--noise5-primary-channel:   #A2BB77;
			--noise5-secondary-note:    #91AA66;
			--noise5-primary-note:      #C5E2B2;
      	 	--mod1-secondary-channel: #c7ac00;
			--mod1-primary-channel: #fcf403;
			--mod1-secondary-note: #c7c700;
			--mod1-primary-note: #fcf403;
			--mod2-secondary-channel: #9400b5;
			--mod2-primary-channel: #ff00ee;
			--mod2-secondary-note: #9400b5;
			--mod2-primary-note: #ff00ee;
			--mod3-secondary-channel: #b37466;
			--mod3-primary-channel: #ffc6a1;
			--mod3-secondary-note: #b37466;
			--mod3-primary-note: #ffc6a1;
			--mod4-secondary-channel: #00a100;
			--mod4-primary-channel: #50ff50;
			--mod4-secondary-note: #00c700;
			--mod4-primary-note: #a0ffa0;
			--mod-label-primary:        #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text:   black;
			--disabled-note-primary:    #999;
			--disabled-note-secondary:  #666;

			
			
				}
			`,
        "dogebox dark": `
				:root {
					--page-margin: #000;
					--editor-background: #000;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #000;
					--inverted-text: black;
					--text-selection: #000;
					--box-selection-fill: #000;
					--loop-accent: #000;
					--link-accent: #000;
					--ui-widget-background: #000;
					--ui-widget-focus: #000;
					--pitch-background: #000;
					--tonic: #000;
					--fifth-note: #000;
					--third-note: #000;
					--white-piano-key: #000;
					--black-piano-key: #000;
				}
			`,
        "todbox classic": `
				:root {
					--page-margin: black;
					--editor-background: black;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #999;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: rgba(255,255,255,0.2);
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #444;
					--ui-widget-focus: #777;
					--pitch-background: #444;
					--tonic: #864;
					--fifth-note: #468;
					--third-note: #486;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
						--white-piano-key-text: #131200;
						--black-piano-key-text: #fff;
						--use-color-formula: false;
						--track-editor-bg-pitch: #444;
						--track-editor-bg-pitch-dim: #333;
						--track-editor-bg-noise: #444;
						--track-editor-bg-noise-dim: #333;
						--track-editor-bg-mod: #234;
						--track-editor-bg-mod-dim: #123;
						--multiplicative-mod-slider: #456;
						--overwriting-mod-slider: #654;
						--indicator-primary: #74f;
						--indicator-secondary: #444;
						--select2-opt-group: #585858;
						--input-box-outline: #333;
						--mute-button-normal: #ffa033;
						--mute-button-mod: #9a6bff;s
						--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #00bdc7;
					--pitch1-primary-note:      #92f9ff;
					--pitch2-secondary-channel: #a1a100;
					--pitch2-primary-channel:   #ffff25;
					--pitch2-secondary-note:    #c7c700;
					--pitch2-primary-note:      #ffff92;
					--pitch3-secondary-channel: #c75000;
					--pitch3-primary-channel:   #ff9752;
					--pitch3-secondary-note:    #ff771c;
					--pitch3-primary-note:      #ffcdab;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #0099a1;
					--pitch7-primary-channel:   #25f3ff;
					--pitch7-secondary-note:    #00bdc7;
					--pitch7-primary-note:      #92f9ff;
					--pitch8-secondary-channel: #a1a100;
					--pitch8-primary-channel:   #ffff25;
					--pitch8-secondary-note:    #c7c700;
					--pitch8-primary-note:      #ffff92;
					--pitch9-secondary-channel: #c75000;
					--pitch9-primary-channel:   #ff9752;
					--pitch9-secondary-note:    #ff771c;
					--pitch9-primary-note:      #ffcdab;
					--pitch10-secondary-channel: #00a100;
					--pitch10-primary-channel:   #50ff50;
					--pitch10-secondary-note:    #00c700;
					--pitch10-primary-note:      #a0ffa0;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6f6f6f;
					--noise4-primary-channel:   #aaaaaa;
					--noise4-secondary-note:    #a7a7a7;
					--noise4-primary-note:      #e0e0e0;
					--noise5-secondary-channel: #996633;
					--noise5-primary-channel:   #ddaa77;
					--noise5-secondary-note:    #cc9966;
					--noise5-primary-note:      #f0d0bb;
					--mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #00bdc7;
					--mod1-primary-note:      #92f9ff;
					--mod2-secondary-channel: #a1a100;
					--mod2-primary-channel:   #ffff25;
					--mod2-secondary-note:    #c7c700;
					--mod2-primary-note:      #ffff92;
					--mod3-secondary-channel: #c75000;
					--mod3-primary-channel:   #ff9752;
					--mod3-secondary-note:    #ff771c;
					--mod3-primary-note:      #ffcdab;
					--mod4-secondary-channel: #00a100;
					--mod4-primary-channel:   #50ff50;
					--mod4-secondary-note:    #00c700;
					--mod4-primary-note:      #a0ffa0;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "todbox dark mode": `
			:root {
				-webkit-text-stroke-width: 0.5px;
					--page-margin: black;
					--editor-background: black;
					--hover-preview: #999999;
					--playhead: #999999;
					--primary-text: #999999;
					--secondary-text: #444444;
					--inverted-text: black;
				--text-selection: #999999;
					--box-selection-fill: #999999;
					--loop-accent: #999999;
					--link-accent: #999999;
					--ui-widget-background: #222222;
					--ui-widget-focus: #444444;
				--pitch-background: #101010;
					--tonic: #404040;
					--fifth-note: #202020;
					--third-note: #2d3c27;
					--white-piano-key: #999999;
					--black-piano-key: #101010;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
					--pitch1-secondary-channel: #004444;
					--pitch1-primary-channel:   #009999;
					--pitch1-secondary-note:    #004444;
					--pitch1-primary-note:      #009999;
					--pitch2-secondary-channel: #444400;
					--pitch2-primary-channel:   #999900;
					--pitch2-secondary-note:    #444400;
					--pitch2-primary-note:      #999900;
					--pitch3-secondary-channel: #443300;
					--pitch3-primary-channel:   #996600;
					--pitch3-secondary-note:    #443300;
					--pitch3-primary-note:      #996600;
					--pitch4-secondary-channel: #004400;
					--pitch4-primary-channel:   #009900;
					--pitch4-secondary-note:    #004400;
					--pitch4-primary-note:      #009900;
					--pitch5-secondary-channel: #440044;
					--pitch5-primary-channel:   #990099;
					--pitch5-secondary-note:    #440044;
					--pitch5-primary-note:      #990099;
					--pitch6-secondary-channel: #333344;
					--pitch6-primary-channel:   #666699;
					--pitch6-secondary-note:    #333344;
					--pitch6-primary-note:      #666699;
					--pitch7-secondary-channel: #444400;
					--pitch7-primary-channel:   #999900;
					--pitch7-secondary-note:    #444400;
					--pitch7-primary-note:      #999900;
					--pitch8-secondary-channel: #824E54;
					--pitch8-primary-channel:   #C4757E;
					--pitch8-secondary-note:    #824E54;
					--pitch8-primary-note:      #C4757E;
					--pitch9-secondary-channel: #006342;
					--pitch9-primary-channel:   #008E5F;
					--pitch9-secondary-note:    #006342;
					--pitch9-primary-note:      #008E5F;
					--pitch10-secondary-channel: #561291;
					--pitch10-primary-channel:   #7819C1;
					--pitch10-secondary-note:    #561291;
					--pitch10-primary-note:      #7819C1;
					--noise1-secondary-channel: #444444;
					--noise1-primary-channel:   #999999;
					--noise1-secondary-note:    #444444;
					--noise1-primary-note:      #999999;
					--noise2-secondary-channel: #443311;
					--noise2-primary-channel:   #996633;
					--noise2-secondary-note:    #443311;
					--noise2-primary-note:      #996633;
					--noise3-secondary-channel: #113344;
					--noise3-primary-channel:   #336699;
					--noise3-secondary-note:    #113344;
					--noise3-primary-note:      #336699;
					--noise4-secondary-channel: #444444;
					--noise4-primary-channel:   #999999;
					--noise4-secondary-note:    #444444;
					--noise4-primary-note:      #999999;
					--noise5-secondary-channel: #443311;
					--noise5-primary-channel:   #996633;
					--noise5-secondary-note:    #443311;
					--noise5-primary-note:      #996633;
          --mod1-secondary-channel: #004444;
					--mod1-primary-channel:   #009999;
					--mod1-secondary-note:    #004444;
					--mod1-primary-note:      #009999;
					--mod2-secondary-channel: #444400;
					--mod2-primary-channel:   #999900;
					--mod2-secondary-note:    #444400;
					--mod2-primary-note:      #999900;
					--mod3-secondary-channel: #443300;
					--mod3-primary-channel:   #996600;
					--mod3-secondary-note:    #443300;
					--mod3-primary-note:      #996600;
					--mod4-secondary-channel: #004400;
					--mod4-primary-channel:   #009900;
					--mod4-secondary-note:    #004400;
					--mod4-primary-note:      #009900;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
				.beepboxEditor button, .beepboxEditor select, button {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
			`,
        "mainbox 1.0": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #2F1C40;
				--link-accent: #543873;
				--ui-widget-background: #2F1C40;
				--ui-widget-focus: #543873;
				--pitch-background: #2F1C40;
				--tonic: #42286D;
				--fifth-note: #37416B;
				--third-note: #884487;
				--white-piano-key: #156CB6;
				--black-piano-key: #130D14;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
					--pitch1-secondary-channel: #156C99;
					--pitch1-primary-channel:   #00CFDF;
					--pitch1-secondary-note:    #0080A8;
					--pitch1-primary-note:      #009FC6;
					--pitch2-secondary-channel: #AD923A;
					--pitch2-primary-channel:   #FFD552;
					--pitch2-secondary-note:    #C49736;
					--pitch2-primary-note:      #EFC742;
					--pitch3-secondary-channel: #7A401E;
					--pitch3-primary-channel:   #C14E30;
					--pitch3-secondary-note:    #89381B;
					--pitch3-primary-note:      #E15427;
					--pitch4-secondary-channel: #0B6030;
					--pitch4-primary-channel:   #00915C;
					--pitch4-secondary-note:    #004337;
					--pitch4-primary-note:      #00915E;
					--pitch5-secondary-channel: #543873;
					--pitch5-primary-channel:   #695B95;
					--pitch5-secondary-note:    #8188BE;
					--pitch5-primary-note:      #848ED8;
					--pitch6-secondary-channel: #585882;
					--pitch6-primary-channel:   #5A72DD;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #7D7C2E;
					--pitch7-primary-channel:   #B0C952;
					--pitch7-secondary-note:    #7D7C2E;
					--pitch7-primary-note:      #B0C952;
					--pitch8-secondary-channel: #7F426A;
					--pitch8-primary-channel:   #B75297;
					--pitch8-secondary-note:    #7F426A;
					--pitch8-primary-note:      #B75297;
					--pitch9-secondary-channel: #2A6B65;
					--pitch9-primary-channel:   #3BA590;
					--pitch9-secondary-note:    #2A6B65;
					--pitch9-primary-note:      #3BA590;
					--pitch10-secondary-channel: #713EA0;
					--pitch10-primary-channel:   #925EC9;
					--pitch10-secondary-note:    #713EA0;
					--pitch10-primary-note:      #925EC9;
					--noise1-secondary-channel: #6C6C8E;
					--noise1-primary-channel:   #8A7F96;
					--noise1-secondary-note:    #A1A3B7;
					--noise1-primary-note:      #DDBADD;
					--noise2-secondary-channel: #865E40;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #C7B47A;
					--noise2-primary-note:      #CFC587;
					--noise3-secondary-channel: #7E7068;
					--noise3-primary-channel:   #B19998;
					--noise3-secondary-note:    #BAA6BC;
					--noise3-primary-note:      #EDDCEC;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel: #156C99;
					--mod1-primary-channel:   #00CFDF;
					--mod1-secondary-note:    #0080A8;
					--mod1-primary-note:      #009FC6;
					--mod2-secondary-channel: #AD923A;
					--mod2-primary-channel:   #FFD552;
					--mod2-secondary-note:    #C49736;
					--mod2-primary-note:      #EFC742;
					--mod3-secondary-channel: #7A401E;
					--mod3-primary-channel:   #C14E30;
					--mod3-secondary-note:    #89381B;
					--mod3-primary-note:      #E15427;
					--mod4-secondary-channel: #0B6030;
					--mod4-primary-channel:   #00915C;
					--mod4-secondary-note:    #004337;
					--mod4-primary-note:      #00915E;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "fogbox": `
			:root {
				--page-margin: #252525;
				--editor-background: #252525;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
				}
			`,
        "foxbox": `
			:root {
				--page-margin: #ADD8E6;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;	

					
					
				}
			`,
        "wackybox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--third-note: #486;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch-channel-limit: 6;
					--noise-channel-limit: 3;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}

			* {
				cursor: url('./image_assets/wackybox_cursor.png'), auto;
			}


.beepboxEditor {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}
		
.beepboxEditor .tip {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor .prompt label {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor .layout-option {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor select {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.select2-selection__rendered {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.select2-container--default .select2-results__group {
    cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor button {
	 cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor canvas {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

.beepboxEditor input {
	cursor: url('./image_assets/wackybox_cursor.png'), auto !important;;
}

			`,
        "microbox": `
				:root {
					--page-margin: #000000;
					--editor-background: #000000;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #93B6AD;
					--inverted-text: black;
					--text-selection: rgba(47,255,250,0.99);
					--box-selection-fill: #03B068;
					--loop-accent: #FF0061;
					--link-accent: #FFC800;
					--ui-widget-background: #38554E;
					--ui-widget-focus: #2A7E69;
					--pitch-background: #281F23;
					--tonic: #004634;
					--fifth-note: #463400;
					--third-note: #886744;
					--white-piano-key: #edc;
					--black-piano-key: #456;
					--use-color-formula: true;
					--track-editor-bg-pitch: #333333;
					--track-editor-bg-pitch-dim: #000000;
					--track-editor-bg-noise: #463400;
					--track-editor-bg-noise-dim: #000000;
					--track-editor-bg-mod: #004634;
					--track-editor-bg-mod-dim: #000000;
					--multiplicative-mod-slider: #FFC800;
					--overwriting-mod-slider: #00ffc0;
					--indicator-primary: #333333;
					--indicator-secondary: #00ffc0;
					--select2-opt-group: #2B2B2B;
					--input-box-outline: #69BFC6;
					--mute-button-normal: #00ffc0;
					--mute-button-mod: #FFC800;
					--mod-label-primary: #38554E;
					--mod-label-secondary-text: rgb(0, 43, 45);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 6.1;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 6.1;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 6.1;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 6.1;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 0;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 0;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 0;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 0;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 192;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 192;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 192;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 192;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;

					
					
				}
			`,
        "paandorasbox": `
			:root {
			 --page-margin: #200000;
			  --editor-background: #200000;
			  --hover-preview: white;
			  --playhead: white;
			  --primary-text: white;
			  --secondary-text: #999;
			  --inverted-text: black;
			  --text-selection: #FF5100;
			  --box-selection-fill: rgba(255,255,255,0.2);
			  --loop-accent: #FF5100;
			  --link-accent: #0F0;
			  --ui-widget-background: #562334;
			  --ui-widget-focus: #6D1B36;
			  --pitch-background: #6D1B36;
			  --tonic: #FF5100;
			  --fifth-note: #00B6FF;
			  --third-note: #bf32b0;
			  --white-piano-key: #bbb;
			  --black-piano-key: #444;
			  --use-color-formula: false;
			  --pitch-channel-limit: 10;
			  --track-editor-bg-pitch: #380C14;
			  --track-editor-bg-pitch-dim: #200000;
			  --track-editor-bg-noise: #233323;
			  --track-editor-bg-noise-dim: #101A0F;
			  --track-editor-bg-mod: #234C82;
			  --track-editor-bg-mod-dim: #0D1D33;
			  --multiplicative-mod-slider: #456;
			  --overwriting-mod-slider: #654;
			  --indicator-primary: #FF5100;
			  --indicator-secondary: #444;
			  --select2-opt-group: #585858;
			  --input-box-outline: #333;
			  --mute-button-normal: #ffa033;
			  --mute-button-mod: #9a6bff;
			  --pitch1-secondary-channel: #00B200;
			  --pitch1-primary-channel: #0F0;
			  --pitch1-secondary-note: #00B200;
			  --pitch1-primary-note: #0F0;
			  --pitch2-secondary-channel: #00B282;
			  --pitch2-primary-channel: #00FFBF;
			  --pitch2-secondary-note: #00B282;
			  --pitch2-primary-note: #00FFBF;
			  --pitch3-secondary-channel: #00B2B2;
			  --pitch3-primary-channel: #0FF;
			  --pitch3-secondary-note: #00B2B2;
			  --pitch3-primary-note: #0FF;
			  --pitch4-secondary-channel: #2623B2;
			  --pitch4-primary-channel: #3631FF;
			  --pitch4-secondary-note: #2623B2;
			  --pitch4-primary-note: #3631FF;
			  --pitch5-secondary-channel: #7700B2;
			  --pitch5-primary-channel: #A0F;
			  --pitch5-secondary-note: #7700B2;
			  --pitch5-primary-note: #A0F;
			  --pitch6-secondary-channel: #B200B2;
			  --pitch6-primary-channel: #F0F;
			  --pitch6-secondary-note: #B200B2;
			  --pitch6-primary-note: #F0F;
			  --pitch7-secondary-channel: #B20000;
			  --pitch7-primary-channel: #F00;
			  --pitch7-secondary-note: #B20000;
			  --pitch7-primary-note: #F00;
			  --pitch8-secondary-channel: #00B200;
			  --pitch8-primary-channel: #0F0;
			  --pitch8-secondary-note: #00B200;
			  --pitch8-primary-note: #0F0;
			  --pitch9-secondary-channel: #00B282;
			  --pitch9-primary-channel: #0FF;
			  --pitch9-secondary-note: #00B282;
			  --pitch9-primary-note: #0FF;
			  --pitch10-secondary-channel: #0071B2;
			  --pitch10-primary-channel: #009EFF;
			  --pitch10-secondary-note: #0071B2;
			  --pitch10-primary-note: #009EFF;
			  --noise1-secondary-channel: #32B221;
			  --noise1-primary-channel: #44FF2F;
			  --noise1-secondary-note: #32B221;
			  --noise1-primary-note: #44FF2F;
			  --noise2-secondary-channel: #216FB2;
			  --noise2-primary-channel: #2F9DFF;
			  --noise2-secondary-note: #216FB2;
			  --noise2-primary-note: #2F9DFF;
			  --noise3-secondary-channel: #2623B2;
			  --noise3-primary-channel: #3631FF;
			  --noise3-secondary-note: #2623B2;
			  --noise3-primary-note: #3631FF;
			  --noise4-secondary-channel: #7223B2;
			  --noise4-primary-channel: #A531FF;
			  --noise4-secondary-note: #7223B2;
			  --noise4-primary-note: #A531FF;
			  --noise5-secondary-channel: #B2235A;
			  --noise5-primary-channel: #FF317E;
			  --noise5-secondary-note: #B2235A;
			  --noise5-primary-note: #FF317E;
			  --mod1-secondary-channel: #17B274;
			  --mod1-primary-channel: #21FFA8;
			  --mod1-secondary-note: #17B274;
			  --mod1-primary-note: #21FFA8;
			  --mod2-secondary-channel: #1783B2;
			  --mod2-primary-channel: #1FBAFF;
			  --mod2-secondary-note: #1783B2;
			  --mod2-primary-note: #1FBAFF;
			  --mod3-secondary-channel: #553399;
			  --mod3-primary-channel: #8855fc;
			  --mod3-secondary-note: #aa64ff;
			  --mod3-primary-note: #f8ddff;
			  --mod4-secondary-channel: #B20E6B;
			  --mod4-primary-channel: #FF1291;
			  --mod4-secondary-note: #B20E6B;
			  --mod4-primary-note: #FF1291;
			  --mod-label-primary: #994038;
			  --mod-label-secondary-text: #331512;
			  --mod-label-primary-text: #331512;
			  --disabled-note-primary: #994038;
			  --disabled-note-secondary: #331512;

			  
			  
			}
			`,
        "midbox": `:root {
			--page-margin: #010a1e;
			--editor-background: #010a1e;
			--hover-preview: #dfe9fe;
			--playhead: #e7f5f6;
			--primary-text: #f0fdff;
			--secondary-text: #c4c7d7;
			--inverted-text: #0f0623;
			--text-selection: #3f0ab4;
			--box-selection-fill: #32afb3;
			--loop-accent: #1719ff;
			--link-accent: #83a6ed;
			--ui-widget-background: #222856;
			--ui-widget-focus: #21417c;
			--pitch-background: #10264a;
			--tonic: #0797ce;
			--fifth-note: #3e2fb5;
			--third-note: #44887e;
			--white-piano-key: #ebf3f4;
			--black-piano-key: #253353;
			--oscilloscope-line-L: #72dcfc;
			--oscilloscope-line-R: #304eff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #183b65; 
			--track-editor-bg-pitch-dim: #1f2c3d;
			--track-editor-bg-noise: #2e196d;
			--track-editor-bg-noise-dim: #212038;
			--track-editor-bg-mod: #066433;
			--track-editor-bg-mod-dim: #152b1f;
			--multiplicative-mod-slider: #1242a4;
			--overwriting-mod-slider: #2218db;
			--indicator-primary: #1698d3;
			--indicator-secondary: #1b478e;
			--select2-opt-group: #312f6d;
			--input-box-outline: #788b96;
			--mute-button-normal: #1d34f2;
			--mute-button-mod: #06bad6;
			--mod-label-primary: #14383f;
			--mod-label-secondary-text: #1d7080;
			--mod-label-primary-text: #b7e9f2;
			--pitch-secondary-channel-hue: 0;
			--pitch-secondary-channel-hue-scale: 6.1;
			--pitch-secondary-channel-sat: 83.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 0;
			--pitch-primary-channel-hue-scale: 6.1;
			--pitch-primary-channel-sat: 100;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 0;
			--pitch-secondary-note-hue-scale: 6.1;
			--pitch-secondary-note-sat: 93.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 0;
			--pitch-primary-note-hue-scale: 6.1;
			--pitch-primary-note-sat: 100;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 0;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 0;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 0;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 0;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 192;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 192;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 192;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 192;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary:    #53527b;
			--disabled-note-secondary:  #1c1b30;

			
			
		}`,
        "dogebox2": `
			:root {
				--page-margin: #000015;
				--editor-background: #000015;
				--hover-preview: #00ffff;
				--playhead: #00ffff;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(255, 127, 80, 0.99);
				--box-selection-fill: rgba(255, 255, 255, 0.2);
				--loop-accent: #ff00ff;
				--link-accent: #00ffff;
				--ui-widget-background: #222222;
				--ui-widget-focus: #444444;
				--pitch-background: #222222;
				--tonic: #ab382c;
				--fifth-note: #2a76a8;
				--third-note: #70ab2c;
				--white-piano-key: #ffffff;
				--black-piano-key: #222222;
				--white-piano-key-text: #000000;
				--use-color-formula: false;
				--pitch-channel-limit: 10;
				--track-editor-bg-pitch: #222222;
				--track-editor-bg-pitch-dim: #111111;
				--track-editor-bg-noise: #222222;
				--track-editor-bg-noise-dim: #111111;
				--track-editor-bg-mod: #333333;
				--track-editor-bg-mod-dim: #111111;
				--multiplicative-mod-slider: #666666;
				--overwriting-mod-slider: #666666;
				--indicator-primary: #ff00ff;
				--indicator-secondary: #00ffff;
				--select2-opt-group: #333333;
				--input-box-outline: #444444;
				--mute-button-normal: #ff00ff;
				--mute-button-mod: #00ffff;
				--mod-label-primary: #282840;
				--mod-label-secondary-text: rgb(87, 86, 120);
				--mod-label-primary-text: white;
				--pitch1-secondary-channel: #bd9909;
				--pitch1-primary-channel: #fbff8e;
				--pitch1-secondary-note: #c79d3a;
				--pitch1-primary-note: #fdffb2;
				--pitch2-secondary-channel: #b86e0d;
				--pitch2-primary-channel: #ffb28e;
				--pitch2-secondary-note: #ba643a;
				--pitch2-primary-note: #fbac92;
				--pitch3-secondary-channel: #a81b08;
				--pitch3-primary-channel: #f56c67;
				--pitch3-secondary-note: #94352b;
				--pitch3-primary-note: #f56147;
				--pitch4-secondary-channel: #2a7722;
				--pitch4-primary-channel: #6ebf5e;
				--pitch4-secondary-note: #1c5c18;
				--pitch4-primary-note: #88cf82;
				--pitch5-secondary-channel: #8c8b3c;
				--pitch5-primary-channel: #c3c168;
				--pitch5-secondary-note: #747330;
				--pitch5-primary-note: #d4d394;
				--pitch6-secondary-channel: #3f9577;
				--pitch6-primary-channel: #6fc4b4;
				--pitch6-secondary-note: #2c6a5c;
				--pitch6-primary-note: #8fdad0;
				--pitch7-secondary-channel: #204a80;
				--pitch7-primary-channel: #6d9fc2;
				--pitch7-secondary-note: #132f5a;
				--pitch7-primary-note: #9dbed8;
				--pitch8-secondary-channel: #a531ad;
				--pitch8-primary-channel: #db68e3;
				--pitch8-secondary-note: #8d2f94;
				--pitch8-primary-note: #e66cbf;
				--pitch9-secondary-channel: #03a1a1;
				--pitch9-primary-channel: #52fffb;
				--pitch9-secondary-note: #34baba;
				--pitch9-primary-note: #60fbfb;
				--pitch10-secondary-channel: #4208a1;
				--pitch10-primary-channel: #9282ff;
				--pitch10-secondary-note: #5735b5;
				--pitch10-primary-note: #ab52fb;
				--noise1-secondary-channel: #2a5555;
				--noise1-primary-channel: #4c7878;
				--noise1-secondary-note: #6e9a9a;
				--noise1-primary-note: #90bcbc;
				--noise2-secondary-channel: #553355;
				--noise2-primary-channel: #775577;
				--noise2-secondary-note: #997799;
				--noise2-primary-note: #bbaa99;
				--noise3-secondary-channel: #2a6622;
				--noise3-primary-channel: #4c8844;
				--noise3-secondary-note: #6eaa66;
				--noise3-primary-note: #90cc88;
				--noise4-secondary-channel: #664400;
				--noise4-primary-channel: #886600;
				--noise4-secondary-note: #aa8800;
				--noise4-primary-note: #cccc00;
				--noise5-secondary-channel: #006633;
				--noise5-primary-channel: #008855;
				--noise5-secondary-note: #00aa77;
				--noise5-primary-note: #00cc99;
				--mod1-secondary-channel: #fe00ff;
				--mod1-primary-channel: #ff72ff;
				--mod1-secondary-note: #ff92ff;
				--mod1-primary-note: #ffb2fb;
				--mod2-secondary-channel: #00fe00;
				--mod2-primary-channel: #8eff8e;
				--mod2-secondary-note: #92ff92;
				--mod2-primary-note: #b2ffb2;
				--mod3-secondary-channel: #feff00;
				--mod3-primary-channel: #fffb8e;
				--mod3-secondary-note: #fffd92;
				--mod3-primary-note: #fffe92;
				--mod4-secondary-channel: #00fffe;
				--mod4-primary-channel: #82fffb;
				--mod4-secondary-note: #92ffff;
				--mod4-primary-note: #b2fffb;
				--disabled-note-primary: #c6c6c6;
				--disabled-note-secondary: #8c8c8c;

				
				
				}`,
        "birdbox dark": `
				:root {
					--page-margin: #000;
					--editor-background: #000;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #000;
					--inverted-text: black;
					--text-selection: #000;
					--box-selection-fill: #000;
					--loop-accent: #000;
					--link-accent: #000;
					--ui-widget-background: #000;
					--ui-widget-focus: #000;
					--pitch-background: #000;
					--tonic: #000;
					--fifth-note: #000;
					--third-note: #000;
					--white-piano-key: #000;
					--black-piano-key: #000;
				}

				html {
				filter: brightness(0);
				}
			`,
        "birdbox light": `
			:root {
				-webkit-text-stroke-width: 0.5px;
				--page-margin: #685d88;
				--editor-background: white;
				--hover-preview: black;
				--playhead: rgba(0,0,0,0.5);
				--primary-text: black;
				--secondary-text: #777;
				--inverted-text: white;
				--text-selection: rgba(200,170,255,0.99);
				--box-selection-fill: rgba(0,0,0,0.1);
				--loop-accent: #98f;
				--link-accent: #74f;
				--ui-widget-background: #ececec;
				--ui-widget-focus: #eee;
				--pitch-background: #ececec;
				--tonic: #f0d6b6;
				--fifth-note: #bbddf0;
				--third-note: #bbf0ce;
				--white-piano-key: #eee;
				--black-piano-key: #666;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--pitch-channel-limit: 10;
					--track-editor-bg-pitch: #ececec;
					--track-editor-bg-pitch-dim: #fdfdfd;
					--track-editor-bg-noise: #ececec;
					--track-editor-bg-noise-dim: #fdfdfd;
					--track-editor-bg-mod: #dbecfd;
					--track-editor-bg-mod-dim: #ecfdff;
					--multiplicative-mod-slider: #789;
					--overwriting-mod-slider: #987;
					--indicator-primary: #98f;
					--indicator-secondary: #cde;
					--select2-opt-group: #cecece;
					--input-box-outline: #ddd;
					--mute-button-normal: #c0b47f;
					--mute-button-mod: #bd7fc0;
				--pitch1-secondary-channel: #6CD9ED;
				--pitch1-primary-channel:   #00A0BD;
				--pitch1-secondary-note:    #34C2DC;
				--pitch1-primary-note:      #00758A;
				--pitch2-secondary-channel: #E3C941;
				--pitch2-primary-channel:   #B49700;
				--pitch2-secondary-note:    #D1B628;
				--pitch2-primary-note:      #836E00;
				--pitch3-secondary-channel: #FF9D61;
				--pitch3-primary-channel:   #E14E00;
				--pitch3-secondary-note:    #F67D3C;
				--pitch3-primary-note:      #B64000;
				--pitch4-secondary-channel: #4BE24B;
				--pitch4-primary-channel:   #00A800;
				--pitch4-secondary-note:    #2DC82D;
				--pitch4-primary-note:      #008000;
				--pitch5-secondary-channel: #FF90FF;
				--pitch5-primary-channel:   #E12EDF;
				--pitch5-secondary-note:    #EC6EEC;
				--pitch5-primary-note:      #A600A5;
				--pitch6-secondary-channel: #B5B5FE;
				--pitch6-primary-channel:   #6969FD;
				--pitch6-secondary-note:    #9393FE;
				--pitch6-primary-note:      #4A4AD7;
				--pitch7-secondary-channel: #C2D848;
				--pitch7-primary-channel:   #8EA800;
				--pitch7-secondary-note:    #B0C82D;
				--pitch7-primary-note:      #6C8000;
				--pitch8-secondary-channel: #FF90A4;
				--pitch8-primary-channel:   #E12E4D;
				--pitch8-secondary-note:    #EC6E85;
				--pitch8-primary-note:      #A6001D;
				--pitch9-secondary-channel: #41E3B5;
				--pitch9-primary-channel:   #00B481;
				--pitch9-secondary-note:    #28D1A1;
				--pitch9-primary-note:      #00835E;
				--pitch10-secondary-channel:#CA77FF;
				--pitch10-primary-channel:  #9609FF;
				--pitch10-secondary-note:   #B54FFF;
				--pitch10-primary-note:     #8400E3;
				--noise1-secondary-channel: #C1C1C1;
				--noise1-primary-channel:   #898989;
				--noise1-secondary-note:    #ADADAD;
				--noise1-primary-note:      #6C6C6C;
				--noise2-secondary-channel: #E8BB8C;
				--noise2-primary-channel:   #BD7D3A;
				--noise2-secondary-note:    #D1A374;
				--noise2-primary-note:      #836342;
				--noise3-secondary-channel: #9BC4EB;
				--noise3-primary-channel:   #4481BE;
				--noise3-secondary-note:    #7CA7D3;
				--noise3-primary-note:      #476685;
				--noise4-secondary-channel: #C5A5E0;
				--noise4-primary-channel:   #8553AE;
				--noise4-secondary-note:    #B290CC;
				--noise4-primary-note:      #684F7D;
				--noise5-secondary-channel: #B8CE93;
				--noise5-primary-channel:   #87A74F;
				--noise5-secondary-note:    #ABC183;
				--noise5-primary-note:      #68784C;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77dd55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #2ad84a;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ba124a;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:        #7a1caa;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #a86810;
					--mod-label-primary:        #dddddd;
					--mod-label-secondary-text: #777;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #666;
					--disabled-note-secondary:  #aaa;
			}

			html {
				filter: brightness(2000);
				}

			.promptContainerBG::before {
				box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}

			.beepboxEditor button, .beepboxEditor select, button {
				box-shadow: inset 0 0 0 1px var(--secondary-text);
			}

				.select2-selection__rendered {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
		`,
        "azur lane": `
		:root {
			--page-margin: #19337e;
			--editor-background: #000333cf;
			--hover-preview: white;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: #9af9ff;
			--secondary-text: #4072dd;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #044b94;
			--loop-accent: #950d0d;
			--link-accent: #0072ff;
			--ui-widget-background: #255bb3;
			--ui-widget-focus: #757575;
			--pitch-background: #20468b73;
			--tonic: #c9c9c9;
			--fifth-note: #731d1d;
			--third-note: #486;
			--white-piano-key: #eee;
			--black-piano-key: #000;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--pitch-channel-limit: 10;
			--track-editor-bg-pitch: #535a73;
			--track-editor-bg-pitch-dim: #353643;
			--track-editor-bg-noise: #770000;
			--track-editor-bg-noise-dim: #430000;
			--track-editor-bg-mod: #5d1d06;
			--track-editor-bg-mod-dim: #270000;
			--multiplicative-mod-slider: #bb0000;
			--overwriting-mod-slider: #ad0000;
			--indicator-primary: #9c64f7;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #5d576f;
			--input-box-outline: #002957;
			--mute-button-normal: #ffffff;
			--mute-button-mod: #4f4f4f;
			--mod-label-primary: #531313;
			--pitch1-secondary-channel: #80858d;
		  --pitch1-primary-channel: #f2f7ff;
		  --pitch1-secondary-note: #80858d;
		  --pitch1-primary-note: #f2f7ff;
		  --pitch2-secondary-channel: #7392ad;
		  --pitch2-primary-channel: #a8d6ff;
		  --pitch2-secondary-note: #7392ad;
		  --pitch2-primary-note: #a8d6ff;
		  --pitch3-secondary-channel: #4b7eaa;
		  --pitch3-primary-channel: #71bdff;
		  --pitch3-secondary-note: #4b7eaa;
		  --pitch3-primary-note: #71bdff;
		  --pitch4-secondary-channel: #3594b1;
		  --pitch4-primary-channel: #48d4ff;
		  --pitch4-secondary-note: #3594b1;
		  --pitch4-primary-note: #48d4ff;
		  --pitch5-secondary-channel: #1b98b1;
		  --pitch5-primary-channel: #30f1ff;
		  --pitch5-secondary-note: #1b98b1;
		  --pitch5-primary-note: #30f1ff;
		  --pitch6-secondary-channel: #9e0000;
		  --pitch6-primary-channel: #db0000;
		  --pitch6-secondary-note: #9e0000;
		  --pitch6-primary-note: #db0000;
		  --pitch7-secondary-channel: #7c1717;
		  --pitch7-primary-channel: #9e0000;
		  --pitch7-secondary-note: #7c1717;
		  --pitch7-primary-note: #9e0000;
		  --pitch8-secondary-channel: #5c1f1f;
		  --pitch8-primary-channel: #7c1717;
		  --pitch8-secondary-note: #5c1f1f;
		  --pitch8-primary-note: #7c1717;
		  --pitch9-secondary-channel: #3e2020;
		  --pitch9-primary-channel: #5c1f1f;
		  --pitch9-secondary-note: #3e2020;
		  --pitch9-primary-note: #5c1f1f;
		  --pitch10-secondary-channel: #2f1c1c;
		  --pitch10-primary-channel: #5c1f1f;
		  --pitch10-secondary-note: #2f1c1c;
		  --pitch10-primary-note: #5c1f1f;
		  --noise1-secondary-channel: #828282;
		  --noise1-primary-channel: #cacaca;
		  --noise1-secondary-note: #828282;
		  --noise1-primary-note: #cacaca;
		  --noise2-secondary-channel: #2f8baf;
		  --noise2-primary-channel: #3de2ff;
		  --noise2-secondary-note: #2f8baf;
		  --noise2-primary-note: #3de2ff;
		  --noise3-secondary-channel: #6f50b1;
		  --noise3-primary-channel: #8567ff;
		  --noise3-secondary-note: #6f50b1;
		  --noise3-primary-note: #8567ff;
		  --noise4-secondary-channel: #d38900;
		  --noise4-primary-channel: #ffb500;
		  --noise4-secondary-note: #d38900;
		  --noise4-primary-note: #ffb500;
		  --noise5-secondary-channel: #af0008;
		  --noise5-primary-channel: #00d70e;
		  --noise5-secondary-note: #29b700;
		  --noise5-primary-note: #00f7ff;
		  --mod1-secondary-channel: #9d5bb9;
		  --mod1-primary-channel: #e16bff;
		  --mod1-secondary-note: #3a3ea4;
		  --mod1-primary-note: #fff;
		  --mod2-secondary-channel: #3a8d58;
		  --mod2-primary-channel: #42ffff;
		  --mod2-secondary-note: #3a8d58;
		  --mod2-primary-note: #42ffff;
		  --mod3-secondary-channel: #af6c00;
		  --mod3-primary-channel: #fa0;
		  --mod3-secondary-note: #0001a2;
		  --mod3-primary-note: #970000;
		  --mod4-secondary-channel: #d3d3d3;
		  --mod4-primary-channel: #759bff;
		  --mod4-secondary-note: #a00000;
		  --mod4-primary-note: #fff;
		  --disabled-note-primary: #3a3a3a;
		  --disabled-note-secondary: #000;

		  
		  
			}

		.promptContainerBG::before {
			box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
		}

	
		/* replaces hotdog (in a hacky way) with an image of the girls using the same scratch sprites from the 404 page*/
		#Hotdog {
		display: none;
		}
		.instructions-column > section:first-of-type > p:first-of-type:after {
		display: block;
		content: url("./image_assets/UltraboxAzurLaneThemeStarterSquad.png");
		width: 100%;
		text-align: center;
		margin-top: 25px;
		}
		/* sets cursor */
		* {
		cursor: url("./image_assets/UltraBoxAzurLaneThemeMouse.png"), auto !important;
		}
		/* sets background image */
		body {
		background-image: url("./image_assets/UltraBoxAzurLaneThemeMemoryTaskBackground.png") !important;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
			}
			/* make editor background transparent */
		#beepboxEditorContainer, .beepboxEditor, #text-content {
		background: #0400257d !important;
		}
			#text-content > section > h1 > font {
		display: none;
		}
		#text-content > section > h1 {
		margin: auto;
		content: url("./image_assets/UltraBoxALThemeLogo.png");
		}
	}`,
        "WeebBox": `
	:root {
		--page-margin: #040410;
		--editor-background: #040410;
		--hover-preview: white;
		--playhead: rgba(255, 255, 255, 0.9);
		--primary-text: white;
		--secondary-text: #84859a;
		--inverted-text: black;
		--text-selection: rgba(119,68,255,0.99);
		--box-selection-fill: #044b94;
		--loop-accent: #74f;
		--link-accent: #98f;
		--ui-widget-background: #393e4f;
		--ui-widget-focus: #6d6886;
		--pitch-background: #393e4f55;
		--tonic: #725491;
		--fifth-note: #54547a;
		--third-note: #3b4b71;
		--white-piano-key: #eee;
		--black-piano-key: #666;
		--white-piano-key-text: #131200;
		--black-piano-key-text: #fff;
		--use-color-formula: true;
		--track-editor-bg-pitch: #393e4f;
		--track-editor-bg-pitch-dim: #1c1d28;
		--track-editor-bg-noise: #3d3535;
		--track-editor-bg-noise-dim: #161313;
		--track-editor-bg-mod: #283560;
		--track-editor-bg-mod-dim: #0a101f;
		--multiplicative-mod-slider: #606c9f;
		--overwriting-mod-slider: #6850b5;
		--indicator-primary: #9c64f7;
		--indicator-secondary: #393e4f;
		--select2-opt-group: #5d576f;
		--input-box-outline: #222;
		--mute-button-normal: #dda85d;
		--mute-button-mod: #886eae;
		--mod-label-primary: #282840;
		--mod-label-secondary-text: rgb(87, 86, 120);
		--mod-label-primary-text: white;
		--pitch-secondary-channel-hue: 0;
		--pitch-secondary-channel-hue-scale: 6.5;
		--pitch-secondary-channel-sat: 83.3;
		--pitch-secondary-channel-sat-scale: 0.1;
		--pitch-secondary-channel-lum: 40;
		--pitch-secondary-channel-lum-scale: 0.05;
		--pitch-primary-channel-hue: 0;
		--pitch-primary-channel-hue-scale: 6.5;
		--pitch-primary-channel-sat: 100;
		--pitch-primary-channel-sat-scale: 0.1;
		--pitch-primary-channel-lum: 67.5;
		--pitch-primary-channel-lum-scale: 0.05;
		--pitch-secondary-note-hue: 0;
		--pitch-secondary-note-hue-scale: 6.5;
		--pitch-secondary-note-sat: 93.9;
		--pitch-secondary-note-sat-scale: 0.1;
		--pitch-secondary-note-lum: 25;
		--pitch-secondary-note-lum-scale: 0.05;
		--pitch-primary-note-hue: 0;
		--pitch-primary-note-hue-scale: 6.5;
		--pitch-primary-note-sat: 100;
		--pitch-primary-note-sat-scale: 0.05;
		--pitch-primary-note-lum: 85.6;
		--pitch-primary-note-lum-scale: 0.025;
		--noise-secondary-channel-hue: 0;
		--noise-secondary-channel-hue-scale: 2;
		--noise-secondary-channel-sat: 25;
		--noise-secondary-channel-sat-scale: 0;
		--noise-secondary-channel-lum: 42;
		--noise-secondary-channel-lum-scale: 0;
		--noise-primary-channel-hue: 0;
		--noise-primary-channel-hue-scale: 2;
		--noise-primary-channel-sat: 33;
		--noise-primary-channel-sat-scale: 0;
		--noise-primary-channel-lum: 63.5;
		--noise-primary-channel-lum-scale: 0;
		--noise-secondary-note-hue: 0;
		--noise-secondary-note-hue-scale: 2;
		--noise-secondary-note-sat: 33.5;
		--noise-secondary-note-sat-scale: 0;
		--noise-secondary-note-lum: 55;
		--noise-secondary-note-lum-scale: 0;
		--noise-primary-note-hue: 0;
		--noise-primary-note-hue-scale: 2;
		--noise-primary-note-sat: 46.5;
		--noise-primary-note-sat-scale: 0;
		--noise-primary-note-lum: 74;
		--noise-primary-note-lum-scale: 0;
		--mod-secondary-channel-hue: 192;
		--mod-secondary-channel-hue-scale: 1.5;
		--mod-secondary-channel-sat: 88;
		--mod-secondary-channel-sat-scale: 0;
		--mod-secondary-channel-lum: 50;
		--mod-secondary-channel-lum-scale: 0;
		--mod-primary-channel-hue: 192;
		--mod-primary-channel-hue-scale: 1.5;
		--mod-primary-channel-sat: 96;
		--mod-primary-channel-sat-scale: 0;
		--mod-primary-channel-lum: 80;
		--mod-primary-channel-lum-scale: 0;
		--mod-secondary-note-hue: 192;
		--mod-secondary-note-hue-scale: 1.5;
		--mod-secondary-note-sat: 92;
		--mod-secondary-note-sat-scale: 0;
		--mod-secondary-note-lum: 45;
		--mod-secondary-note-lum-scale: 0;
		--mod-primary-note-hue: 192;
		--mod-primary-note-hue-scale: 1.5;
		--mod-primary-note-sat: 96;
		--mod-primary-note-sat-scale: 0;
		--mod-primary-note-lum: 85;
		--mod-primary-note-lum-scale: 0;
		--disabled-note-primary:    #91879f;
		--disabled-note-secondary:  #6a677a;

		
		
	}
	#firstImage {
		background-image: url("https://choptop84.github.io/choptop84s-image-repository/weebboxbackground.jpg") !important;
		background-repeat: no-repeat !important;
		background-size: 100% 100% !important;
	}

	#firstImage rect {
		opacity: 0.8 !important;
	}
`,
        "BoxBeep Dark": `
		:root {
			--page-margin: #97a277;
			--editor-background: black;
			--hover-preview: white;
			--playhead: rgba(255,255,255,255.5);
			--primary-text: white;
			--secondary-text: #888;
			--inverted-text: black;
			--text-selection: rgba(55, 85, 0, 0.99);
			--box-selection-fill: rgba(225,255,255,0.1);
			--loop-accent: #670;
			--link-accent: #8b0;
			--ui-widget-background: #131313;
			--ui-widget-focus: #111;
			--pitch-background: #131313;
			--tonic: #0f2949;
			--fifth-note: #44220f;
			--third-note: #440f31;
			--white-piano-key: #111111;
			--black-piano-key: #999999;
			--white-piano-key-text: #fff;
			--black-piano-key-text: #000;
			--pitch-channel-limit: 10;

			--pitch1-secondary-channel: #932612;
			--pitch1-primary-channel:   #ff5f42;
			--pitch1-secondary-note:    #cb3d23;
			--pitch1-primary-note:      #ff8a75;

			--pitch2-secondary-channel: #1c36be;
			--pitch2-primary-channel:   #4b68ff;
			--pitch2-secondary-note:    #2e49d7;
			--pitch2-primary-note:      #7c91ff;

			--pitch3-secondary-channel: #00629e;
			--pitch3-primary-channel:   #1eb1ff;
			--pitch3-secondary-note:    #0982c3;
			--pitch3-primary-note:      #49bfff;

			--pitch4-secondary-channel: #b41db4;
			--pitch4-primary-channel:   #ff57ff;
			--pitch4-secondary-note:    #d237d2;
			--pitch4-primary-note:      #ff7fff;

			--pitch5-secondary-channel: #006f00;
			--pitch5-primary-channel:   #1ed120;
			--pitch5-secondary-note:    #139113;
			--pitch5-primary-note:      #59ff5a;

			--pitch6-secondary-channel: #4a4a01;
			--pitch6-primary-channel:   #969602;
			--pitch6-secondary-note:    #6c6c01;
			--pitch6-primary-note:      #b5b528;

			--pitch7-secondary-channel: #3d27b7;
			--pitch7-primary-channel:   #7157ff;
			--pitch7-secondary-note:    #4f37d2;
			--pitch7-primary-note:      #937fff;

			--pitch8-secondary-channel: #006f5b;
			--pitch8-primary-channel:   #1ed1b2;
			--pitch8-secondary-note:    #13917a;
			--pitch8-primary-note:      #59ffe2;

			--pitch9-secondary-channel: #be1c4a;
			--pitch9-primary-channel:   #ff4b7e;
			--pitch9-secondary-note:    #d72e5e;
			--pitch9-primary-note:      #ff7ca1;

			--pitch10-secondary-channel:#358800;
			--pitch10-primary-channel:  #69f600;
			--pitch10-secondary-note:   #4ab000;
			--pitch10-primary-note:     #7bff1c;

			--noise1-secondary-channel: #3e3e3e;
			--noise1-primary-channel:   #767676;
			--noise1-secondary-note:    #525252;
			--noise1-primary-note:      #939393;

			--noise2-secondary-channel: #174473;
			--noise2-primary-channel:   #4282c5;
			--noise2-secondary-note:    #2e5c8b;
			--noise2-primary-note:      #7c9cbd;

			--noise3-secondary-channel: #643b14;
			--noise3-primary-channel:   #bb7e41;
			--noise3-secondary-note:    #83582c;
			--noise3-primary-note:      #b8997a;

			--noise4-secondary-channel: #3a5a1f;
			--noise4-primary-channel:   #7aac51;
			--noise4-secondary-note:    #4d6f33;
			--noise4-primary-note:      #97b082;

			--noise5-secondary-channel: #47316c;
			--noise5-primary-channel:   #87A74F;
			--noise5-secondary-note:    #7858b0;
			--noise5-primary-note:      #9787b3;
		}
		
		.beepboxEditor button, .beepboxEditor select, button {
			box-shadow: inset 0 0 0 1px var(--secondary-text);
		}
		
		a.tip {
			display:none;
		}

		div.visualizer {
			transform: scaleX(-1);
		}

		`,
        "BoxBeep light": `
		:root {
			--page-margin: white;
			--editor-background: white;
			--hover-preview: black;
			--playhead: black;
			--primary-text: black;
			--secondary-text: #666666;
			--inverted-text: white;
			--text-selection: rgba(136, 187, 0,0.99);
			--box-selection-fill: rgba(0,0,0,0.2);
			--loop-accent: #88bb00;
			--link-accent: #667700;
			--ui-widget-background: #bbbbbb;
			--ui-widget-focus: #888888;
			--pitch-background: #bbbbbb;
			--tonic: #7799bb;
			--fifth-note: #bb9977;
			--third-note: #a877bb;
			--white-piano-key: #444444;
			--black-piano-key: #bbbbbb;
			--white-piano-key-text: #fff;
			--black-piano-key-text: #000;
			--pitch-channel-limit: 10;

			--pitch1-secondary-channel: #ff665e;
			--pitch1-primary-channel:   #da0c00;
			--pitch1-secondary-note:    #ff4238;
			--pitch1-primary-note:      #6d0600;

			--pitch2-secondary-channel: #5e5eff;
			--pitch2-primary-channel:   #0000da;
			--pitch2-secondary-note:   	#3838ff;
			--pitch2-primary-note:      #00006d;

			--pitch3-secondary-channel: #38afff;
			--pitch3-primary-channel:   #0068ad;
			--pitch3-secondary-note:    #0088e3;
			--pitch3-primary-note:      #003254;

			--pitch4-secondary-channel: #ff5eff;
			--pitch4-primary-channel:   #af00af;
			--pitch4-secondary-note:    #ff38ff;
			--pitch4-primary-note:      #5f005f;

			--pitch5-secondary-channel: #2fdf2f;
			--pitch5-primary-channel:   #006f00;
			--pitch5-secondary-note:    #1fbf1f;
			--pitch5-primary-note:      #003f00;

			--pitch6-secondary-channel: #88884f;
			--pitch6-primary-channel:   #5f5f00;
			--pitch6-secondary-note:    #77772f;
			--pitch6-primary-note:      #2f2f00;

			--pitch7-secondary-channel: #755eff;
			--pitch7-primary-channel:   #2100da;
			--pitch7-secondary-note:    #5538ff;
			--pitch7-primary-note:      #19006d;

			--pitch8-secondary-channel: #20ffe6;
			--pitch8-primary-channel:   #00675b;
			--pitch8-secondary-note:    #00b19c;
			--pitch8-primary-note:      #004d44;

			--pitch9-secondary-channel: #ff5e8f;
			--pitch9-primary-channel:   #af0036;
			--pitch9-secondary-note:    #ff3875;
			--pitch9-primary-note:      #7c0026;

			--pitch10-secondary-channel:#5ee000;
			--pitch10-primary-channel:  #317400;
			--pitch10-secondary-note:   #48a800;
			--pitch10-primary-note:     #205300;

			--noise1-secondary-channel: #909090;
			--noise1-primary-channel:   #555555;
			--noise1-secondary-note:    #585858;
			--noise1-primary-note:      #1f1f1f;

			--noise2-secondary-channel: #6699cc;
			--noise2-primary-channel:   #225588;
			--noise2-secondary-note:    #336699;
			--noise2-primary-note:      #0f2f44;

			--noise3-secondary-channel: #b59270;
			--noise3-primary-channel:   #885522;
			--noise3-secondary-note:    #906030;
			--noise3-primary-note:      #442800;

			--noise4-secondary-channel: #85b065;
			--noise4-primary-channel:   #507d2d;
			--noise4-secondary-note:    #618e3e;
			--noise4-primary-note:      #2b3e15;

			--noise5-secondary-channel: #9f87c8;
			--noise5-primary-channel:   #5d4488;
			--noise5-secondary-note:    #6e5599;
			--noise5-primary-note:      #3a1d4d;
		}

		div.visualizer {
			transform: scaleX(-1);
		}

		a.tip {
			display:none;
		}
		`,
        "Protanopia": `
:root { 
--page-margin: #000000; 
--editor-background: #000000; 
--hover-preview: white; 
--playhead: rgba(255, 255, 255, 0.9); 
--primary-text: #ffffff; 
--secondary-text: #e5e5e5; 
--inverted-text: #000000; 
--text-selection: rgba(119,68,255,0.99); 
--box-selection-fill: #044b94; 
--loop-accent: #ffffff; 
--link-accent: #8915c8; 
--ui-widget-background: #676767; 
--ui-widget-focus: #696969; 
--pitch-background: #302f36; 
--tonic: #19181c; 
--fifth-note: #1b1924; 
--third-note: #192415;
--white-piano-key: #a6a6a6; 
--black-piano-key: #484848; 
--use-color-formula: false;
			--pitch-channel-limit: 10; 
--track-editor-bg-pitch: #666666; 
--track-editor-bg-pitch-dim: #383838; 
--track-editor-bg-noise: #438240; 
--track-editor-bg-noise-dim: #1e361d; 
--track-editor-bg-mod: #5f419c; 
--track-editor-bg-mod-dim: #3e2b66; 
--multiplicative-mod-slider: #b62326; 
--overwriting-mod-slider: #5f1214; 
--indicator-primary: #ccffdb; 
--indicator-secondary: #55dee6; 
--select2-opt-group: #595959; 
--input-box-outline: #ffffff; 
--mute-button-normal: #f11d22; 
--mute-button-mod: #4b57c2; 
--mod-label-primary: #0909ff; 
--mod-label-secondary-text: #ffffff; 
--mod-label-primary-text: #c8ecfd; 
				--pitch1-secondary-channel: #160740;
				--pitch1-primary-channel:   #482d8a;

				--pitch1-secondary-note:    #160740;
				--pitch1-primary-note:      #482d8a;

				--pitch2-secondary-channel: #0b555e;
				--pitch2-primary-channel:   #126e7a;

				--pitch2-secondary-note:    #0b555e;
				--pitch2-primary-note:      #126e7a;

				--pitch3-secondary-channel: #1d898c;
				--pitch3-primary-channel:   #2fa9ad;

				--pitch3-secondary-note:    #1d898c;
				--pitch3-primary-note:      #2fa9ad;

				--pitch4-secondary-channel: #3f9160;
				--pitch4-primary-channel:   #55ad78;

				--pitch4-secondary-note:    #3f9160;
				--pitch4-primary-note:      #55ad78;

				--pitch5-secondary-channel: #69b051;
				--pitch5-primary-channel:   #97e07e;

				--pitch5-secondary-note:    #69b051;
				--pitch5-primary-note:      #97e07e;

				--pitch6-secondary-channel: #bbcc8f;
				--pitch6-primary-channel:   #d4e3ac;

				--pitch6-secondary-note:    #bbcc8f;
				--pitch6-primary-note:      #d4e3ac;

				--pitch7-secondary-channel: #8f7657;
				--pitch7-primary-channel:   #b5a28a;

				--pitch7-secondary-note:    #8f7657;
				--pitch7-primary-note:      #b5a28a;

				--pitch8-secondary-channel: #804d3c;
				--pitch8-primary-channel:   #a16a58;

				--pitch8-secondary-note:    #804d3c;
				--pitch8-primary-note:      #a16a58;

				--pitch9-secondary-channel: #a62b2b;
				--pitch9-primary-channel:   #ba3c3c;

				--pitch9-secondary-note:    #a62b2b;
				--pitch9-primary-note:      #ba3c3c;

				--pitch10-secondary-channel:#ba497c;
				--pitch10-primary-channel:  #d46195;

				--pitch10-secondary-note:   #ba497c;
				--pitch10-primary-note:     #d46195;

				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;

				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;

				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          				--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

					
					
}

			`,
        "Tritanopia": `
:root { 
--page-margin: #000000; 
--editor-background: #000000; 
--hover-preview: white; 
--playhead: rgba(255, 255, 255, 0.9); 
--primary-text: #ffffff; 
--secondary-text: #e5e5e5; 
--inverted-text: #000000; 
--text-selection: rgba(119,68,255,0.99); 
--box-selection-fill: #044b94; 
--loop-accent: #ffffff; 
--link-accent: #8915c8; 
--ui-widget-background: #676767; 
--ui-widget-focus: #696969; 
--pitch-background: #302f36; 
--tonic: #19181c; 
--fifth-note: #1b1924; 
--third-note: #192415;
--white-piano-key: #a6a6a6; 
--black-piano-key: #484848; 
--use-color-formula: false;
			--pitch-channel-limit: 10; 
--track-editor-bg-pitch: #666666; 
--track-editor-bg-pitch-dim: #383838; 
--track-editor-bg-noise: #438240; 
--track-editor-bg-noise-dim: #1e361d; 
--track-editor-bg-mod: #5f419c; 
--track-editor-bg-mod-dim: #3e2b66; 
--multiplicative-mod-slider: #b62326; 
--overwriting-mod-slider: #5f1214; 
--indicator-primary: #ccffdb; 
--indicator-secondary: #55dee6; 
--select2-opt-group: #595959; 
--input-box-outline: #ffffff; 
--mute-button-normal: #f11d22; 
--mute-button-mod: #4b57c2; 
--mod-label-primary: #0909ff; 
--mod-label-secondary-text: #ffffff; 
--mod-label-primary-text: #c8ecfd; 
				--pitch1-secondary-channel: #9C0000;
				--pitch1-primary-channel:   #FF0000;

				--pitch1-secondary-note:    #9C0000;
				--pitch1-primary-note:      #FF0000;

				--pitch2-secondary-channel: #8E009C;
				--pitch2-primary-channel:   #EB25FF;

				--pitch2-secondary-note:    #8E009C;
				--pitch2-primary-note:      #EB25FF;

				--pitch3-secondary-channel: #00069C;
				--pitch3-primary-channel:   #3D45FF;

				--pitch3-secondary-note:    #00069C;
				--pitch3-primary-note:      #3D45FF;

				--pitch4-secondary-channel: #00829C;
				--pitch4-primary-channel:   #24DBFF;

				--pitch4-secondary-note:    #00829C;
				--pitch4-primary-note:      #24DBFF;

				--pitch5-secondary-channel: #009C18;
				--pitch5-primary-channel:   #70FF86;

				--pitch5-secondary-note:    #009C18;
				--pitch5-primary-note:      #70FF86;

				--pitch6-secondary-channel: #8E9C00;
				--pitch6-primary-channel:   #DBEF16;

				--pitch6-secondary-note:    #8E9C00;
				--pitch6-primary-note:      #DBEF16;

				--pitch7-secondary-channel: #9C6A00;
				--pitch7-primary-channel:   #F7AC0E;

				--pitch7-secondary-note:    #9C6A00;
				--pitch7-primary-note:      #F7AC0E;

				--pitch8-secondary-channel: #9C2300;
				--pitch8-primary-channel:   #F53700;

				--pitch8-secondary-note:    #9C2300;
				--pitch8-primary-note:      #F53700;

				--pitch9-secondary-channel: #441A0D;
				--pitch9-primary-channel:   #9E3F22;

				--pitch9-secondary-note:    #441A0D;
				--pitch9-primary-note:      #9E3F22;

				--pitch10-secondary-channel:#2C0D44;
				--pitch10-primary-channel:  #7436A4;

				--pitch10-secondary-note:   #2C0D44;
				--pitch10-primary-note:     #7436A4;

				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;

				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;

				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          				--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
					
					
}

			`,
        "Deuteranopia": `
    :root {
    --page-margin: #000;
    --editor-background: #060606;
    --hover-preview: #fff;
    --playhead: rgb(255, 255, 255);
    --primary-text: #fff;
    --secondary-text: #fff;
    --inverted-text: #000;
    --text-selection: rgba(126, 126, 126, .99);
    --box-selection-fill: #b74a4a;
    --loop-accent: #7744FF;
    --link-accent: #7744FF;
    --ui-widget-background: #484848;
    --ui-widget-focus: #3e3e3e;
    --pitch-background: #3e3e3e;
    --tonic: #861057;
    --fifth-note: #7e7e7e;
	--third-note: #486;
    --use-color-formula: false;
			--pitch-channel-limit: 10;
    --track-editor-bg-pitch: #666161;
    --track-editor-bg-pitch-dim: #3e3e3e;
    --track-editor-bg-noise: #474747;
    --track-editor-bg-noise-dim: #1a1a1a;
    --track-editor-bg-mod: #474747;
    --track-editor-bg-mod-dim: #1a1a1a;
    --multiplicative-mod-slider: #868686;
    --overwriting-mod-slider: #fff;
    --indicator-primary: #fff;
    --indicator-secondary: #535353;
    --select2-opt-group: #5d576f;
    --input-box-outline: #626262;
    --mute-button-normal: #ffdc00;
    --mute-button-mod: #0027ff;
    --mod-label-primary: #2b2b2b;

    --pitch1-secondary-channel: #0082BB;
  --pitch1-primary-channel: #B1E8FF;
  --pitch1-secondary-note: #0082BB;
  --pitch1-primary-note: #B1E8FF;
  --pitch2-secondary-channel: #005F88;
  --pitch2-primary-channel: #00B2FF;
  --pitch2-secondary-note: #005F88;
  --pitch2-primary-note: #00B2FF;
  --pitch3-secondary-channel: #0E0090;
  --pitch3-primary-channel: #5196ff;
  --pitch3-secondary-note: #0E0090;
  --pitch3-primary-note: #5196ff;
  --pitch4-secondary-channel: #001540;
  --pitch4-primary-channel: #0041CA;
  --pitch4-secondary-note: #001b55;
  --pitch4-primary-note: #0041CA;
  --pitch5-secondary-channel: #936e21;
  --pitch5-primary-channel: #ffb300;
  --pitch5-secondary-note: #936e21;
  --pitch5-primary-note: #ffbe23;
  --pitch6-secondary-channel: #ca5b00;
  --pitch6-primary-channel: #faff52;
  --pitch6-secondary-note: #ca5b00;
  --pitch6-primary-note: #faff52;
  --pitch7-secondary-channel: #75714a;
  --pitch7-primary-channel: #fff3b8;
  --pitch7-secondary-note: #75714a;
  --pitch7-primary-note: #fff3b8;
  --pitch8-secondary-channel: #9c4100;
  --pitch8-primary-channel: #fc0;
  --pitch8-secondary-note: #9c4100;
  --pitch8-primary-note: #fc0;
  --pitch9-secondary-channel: #8d4d00;
  --pitch9-primary-channel: #ff9b20;
  --pitch9-secondary-note: #8d4d00;
  --pitch9-primary-note: #ff9b20;
  --pitch10-secondary-channel: #a28f00;
  --pitch10-primary-channel: #ffac55;
  --pitch10-secondary-note: #a28f00;
  --pitch10-primary-note: #ffac55;
  --noise1-secondary-channel: #868686;
  --noise1-primary-channel: #fff;
  --noise1-secondary-note: #868686;
  --noise1-primary-note: #fff;
  --noise2-secondary-channel: #ad5600;
  --noise2-primary-channel: #ffd300;
  --noise2-secondary-note: #ad5600;
  --noise2-primary-note: #ffd300;
  --noise3-secondary-channel: #4f2f00;
  --noise3-primary-channel: #fff3bc;
  --noise3-secondary-note: #4f2f00;
  --noise3-primary-note: #fff3bc;
  --noise4-secondary-channel: #0070ff;
  --noise4-primary-channel: #84f1ff;
  --noise4-secondary-note: #0070ff;
  --noise4-primary-note: #84f1ff;
  --noise5-secondary-channel: #00c4b2;
  --noise5-primary-channel: #4198ff;
  --noise5-secondary-note: #00c4b2;
  --noise5-primary-note: #4198ff;
  --mod1-secondary-channel: #00046c;
  --mod1-primary-channel: #00faff;
  --mod1-secondary-note: #00046c;
  --mod1-primary-note: #00faff;
  --mod2-secondary-channel: #d25a00;
  --mod2-primary-channel: #fdff00;
  --mod2-secondary-note: #d25a00;
  --mod2-primary-note: #fdff00;
  --mod3-secondary-channel: #5a5a5a;
  --mod3-primary-channel: #fff;
  --mod3-secondary-note: #5a5a5a;
  --mod3-primary-note: #fff;
  --mod4-secondary-channel: #006dfb;
  --mod4-primary-channel: #0ce7ff;
  --mod4-secondary-note: #006dfb;
  --mod4-primary-note: #0ce7ff;
  --disabled-note-primary: #8d8d8d;
  --disabled-note-secondary: #363636;

  
  
    }

			`,
        "custom": `${localStorage.getItem("customColors") || `:root {
				--page-margin: #040410;
				--editor-background: #040410;
				--hover-preview: white;
				--playhead: rgba(255, 255, 255, 0.9);
				--primary-text: white;
				--secondary-text: #84859a;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: #044b94;
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #393e4f;
				--ui-widget-focus: #6d6886;
				--pitch-background: #393e4f99;
				--tonic: #725491;
				--fifth-note: #54547a;
				--third-note: #486;
				--white-piano-key: #eee;
				--black-piano-key: #666;
				--use-color-formula: true;
				--track-editor-bg-pitch: #393e4f;
				--track-editor-bg-pitch-dim: #1c1d28;
				--track-editor-bg-noise: #3d3535;
				--track-editor-bg-noise-dim: #161313;
				--track-editor-bg-mod: #283560;
				--track-editor-bg-mod-dim: #0a101f;
				--multiplicative-mod-slider: #606c9f;
				--overwriting-mod-slider: #6850b5;
				--indicator-primary: #9c64f7;
				--indicator-secondary: #393e4f;
				--select2-opt-group: #5d576f;
				--input-box-outline: #222;
				--mute-button-normal: #dda85d;
				--mute-button-mod: #886eae;
				--mod-label-primary: #282840;
				--mod-label-secondary-text: rgb(87, 86, 120);
				--mod-label-primary-text: white;
				--pitch-secondary-channel-hue: 0;
				--pitch-secondary-channel-hue-scale: 6.1;
				--pitch-secondary-channel-sat: 83.3;
				--pitch-secondary-channel-sat-scale: 0.1;
				--pitch-secondary-channel-lum: 40;
				--pitch-secondary-channel-lum-scale: 0.05;
				--pitch-primary-channel-hue: 0;
				--pitch-primary-channel-hue-scale: 6.1;
				--pitch-primary-channel-sat: 100;
				--pitch-primary-channel-sat-scale: 0.1;
				--pitch-primary-channel-lum: 67.5;
				--pitch-primary-channel-lum-scale: 0.05;
				--pitch-secondary-note-hue: 0;
				--pitch-secondary-note-hue-scale: 6.1;
				--pitch-secondary-note-sat: 93.9;
				--pitch-secondary-note-sat-scale: 0.1;
				--pitch-secondary-note-lum: 25;
				--pitch-secondary-note-lum-scale: 0.05;
				--pitch-primary-note-hue: 0;
				--pitch-primary-note-hue-scale: 6.1;
				--pitch-primary-note-sat: 100;
				--pitch-primary-note-sat-scale: 0.05;
				--pitch-primary-note-lum: 85.6;
				--pitch-primary-note-lum-scale: 0.025;
				--noise-secondary-channel-hue: 0;
				--noise-secondary-channel-hue-scale: 2;
				--noise-secondary-channel-sat: 25;
				--noise-secondary-channel-sat-scale: 0;
				--noise-secondary-channel-lum: 42;
				--noise-secondary-channel-lum-scale: 0;
				--noise-primary-channel-hue: 0;
				--noise-primary-channel-hue-scale: 2;
				--noise-primary-channel-sat: 33;
				--noise-primary-channel-sat-scale: 0;
				--noise-primary-channel-lum: 63.5;
				--noise-primary-channel-lum-scale: 0;
				--noise-secondary-note-hue: 0;
				--noise-secondary-note-hue-scale: 2;
				--noise-secondary-note-sat: 33.5;
				--noise-secondary-note-sat-scale: 0;
				--noise-secondary-note-lum: 55;
				--noise-secondary-note-lum-scale: 0;
				--noise-primary-note-hue: 0;
				--noise-primary-note-hue-scale: 2;
				--noise-primary-note-sat: 46.5;
				--noise-primary-note-sat-scale: 0;
				--noise-primary-note-lum: 74;
				--noise-primary-note-lum-scale: 0;
				--mod-secondary-channel-hue: 192;
				--mod-secondary-channel-hue-scale: 1.5;
				--mod-secondary-channel-sat: 88;
				--mod-secondary-channel-sat-scale: 0;
				--mod-secondary-channel-lum: 50;
				--mod-secondary-channel-lum-scale: 0;
				--mod-primary-channel-hue: 192;
				--mod-primary-channel-hue-scale: 1.5;
				--mod-primary-channel-sat: 96;
				--mod-primary-channel-sat-scale: 0;
				--mod-primary-channel-lum: 80;
				--mod-primary-channel-lum-scale: 0;
				--mod-secondary-note-hue: 192;
				--mod-secondary-note-hue-scale: 1.5;
				--mod-secondary-note-sat: 92;
				--mod-secondary-note-sat-scale: 0;
				--mod-secondary-note-lum: 45;
				--mod-secondary-note-lum-scale: 0;
				--mod-primary-note-hue: 192;
				--mod-primary-note-hue-scale: 1.5;
				--mod-primary-note-sat: 96;
				--mod-primary-note-sat-scale: 0;
				--mod-primary-note-lum: 85;
				--mod-primary-note-lum-scale: 0;

				
				
			}`}`,
    };
    ColorConfig.pageMargin = "var(--page-margin)";
    ColorConfig.editorBackground = "var(--editor-background)";
    ColorConfig.hoverPreview = "var(--hover-preview)";
    ColorConfig.playhead = "var(--playhead)";
    ColorConfig.primaryText = "var(--primary-text)";
    ColorConfig.secondaryText = "var(--secondary-text)";
    ColorConfig.invertedText = "var(--inverted-text)";
    ColorConfig.textSelection = "var(--text-selection)";
    ColorConfig.boxSelectionFill = "var(--box-selection-fill)";
    ColorConfig.loopAccent = "var(--loop-accent)";
    ColorConfig.linkAccent = "var(--link-accent)";
    ColorConfig.uiWidgetBackground = "var(--ui-widget-background)";
    ColorConfig.uiWidgetFocus = "var(--ui-widget-focus)";
    ColorConfig.pitchBackground = "var(--pitch-background)";
    ColorConfig.tonic = "var(--tonic)";
    ColorConfig.fifthNote = "var(--fifth-note)";
    ColorConfig.thirdNote = "var(--third-note)";
    ColorConfig.pitch1Background = "var(--pitch1-background)";
    ColorConfig.pitch2Background = "var(--pitch2-background)";
    ColorConfig.pitch3Background = "var(--pitch3-background)";
    ColorConfig.pitch5Background = "var(--pitch5-background)";
    ColorConfig.pitch6Background = "var(--pitch6-background)";
    ColorConfig.pitch8Background = "var(--pitch8-background)";
    ColorConfig.pitch9Background = "var(--pitch9-background)";
    ColorConfig.pitch10Background = "var(--pitch10-background)";
    ColorConfig.pitch11Background = "var(--pitch11-background)";
    ColorConfig.whitePianoKey = "var(--white-piano-key)";
    ColorConfig.blackPianoKey = "var(--black-piano-key)";
    ColorConfig.whitePianoKeyText = "var(--white-piano-key-text)";
    ColorConfig.blackPianoKeyText = "var(--black-piano-key-text)";
    ColorConfig.songPlayerMargin = "var(--song-player-margin)";
    ColorConfig.progressBar = "var(--progress-bar)";
    ColorConfig.useColorFormula = "var(--use-color-formula)";
    ColorConfig.pitchSecondaryChannelHue = "var(--pitch-secondary-channel-hue)";
    ColorConfig.pitchSecondaryChannelHueScale = "var(--pitch-secondary-channel-hue-scale)";
    ColorConfig.pitchSecondaryChannelSat = "var(--pitch-secondary-channel-sat)";
    ColorConfig.pitchSecondaryChannelSatScale = "var(--pitch-secondary-channel-sat-scale)";
    ColorConfig.pitchSecondaryChannelLum = "var(--pitch-secondary-channel-lum)";
    ColorConfig.pitchSecondaryChannelLumScale = "var(--pitch-secondary-channel-lum-scale)";
    ColorConfig.pitchPrimaryChannelHue = "var(--pitch-primary-channel-hue)";
    ColorConfig.pitchPrimaryChannelHueScale = "var(--pitch-primary-channel-hue-scale)";
    ColorConfig.pitchPrimaryChannelSat = "var(--pitch-primary-channel-sat)";
    ColorConfig.pitchPrimaryChannelSatScale = "var(--pitch-primary-channel-sat-scale)";
    ColorConfig.pitchPrimaryChannelLum = "var(--pitch-primary-channel-lum)";
    ColorConfig.pitchPrimaryChannelLumScale = "var(--pitch-primary-channel-lum-scale)";
    ColorConfig.pitchSecondaryNoteHue = "var(--pitch-secondary-note-hue)";
    ColorConfig.pitchSecondaryNoteHueScale = "var(--pitch-secondary-note-hue-scale)";
    ColorConfig.pitchSecondaryNoteSat = "var(--pitch-secondary-note-sat)";
    ColorConfig.pitchSecondaryNoteSatScale = "var(--pitch-secondary-note-sat-scale)";
    ColorConfig.pitchSecondaryNoteLum = "var(--pitch-secondary-note-lum)";
    ColorConfig.pitchSecondaryNoteLumScale = "var(--pitch-secondary-note-lum-scale)";
    ColorConfig.pitchPrimaryNoteHue = "var(--pitch-primary-note-hue)";
    ColorConfig.pitchPrimaryNoteHueScale = "var(--pitch-primary-note-hue-scale)";
    ColorConfig.pitchPrimaryNoteSat = "var(--pitch-primary-note-sat)";
    ColorConfig.pitchPrimaryNoteSatScale = "var(--pitch-primary-note-sat-scale)";
    ColorConfig.pitchPrimaryNoteLum = "var(--pitch-primary-note-lum)";
    ColorConfig.pitchPrimaryNoteLumScale = "var(--pitch-primary-note-lum-scale)";
    ColorConfig.modSecondaryChannelHue = "var(--mod-secondary-channel-hue)";
    ColorConfig.modSecondaryChannelHueScale = "var(--mod-secondary-channel-hue-scale)";
    ColorConfig.modSecondaryChannelSat = "var(--mod-secondary-channel-sat)";
    ColorConfig.modSecondaryChannelSatScale = "var(--mod-secondary-channel-sat-scale)";
    ColorConfig.modSecondaryChannelLum = "var(--mod-secondary-channel-lum)";
    ColorConfig.modSecondaryChannelLumScale = "var(--mod-secondary-channel-lum-scale)";
    ColorConfig.modPrimaryChannelHue = "var(--mod-primary-channel-hue)";
    ColorConfig.modPrimaryChannelHueScale = "var(--mod-primary-channel-hue-scale)";
    ColorConfig.modPrimaryChannelSat = "var(--mod-primary-channel-sat)";
    ColorConfig.modPrimaryChannelSatScale = "var(--mod-primary-channel-sat-scale)";
    ColorConfig.modPrimaryChannelLum = "var(--mod-primary-channel-lum)";
    ColorConfig.modPrimaryChannelLumScale = "var(--mod-primary-channel-lum-scale)";
    ColorConfig.modSecondaryNoteHue = "var(--mod-secondary-note-hue)";
    ColorConfig.modSecondaryNoteHueScale = "var(--mod-secondary-note-hue-scale)";
    ColorConfig.modSecondaryNoteSat = "var(--mod-secondary-note-sat)";
    ColorConfig.modSecondaryNoteSatScale = "var(--mod-secondary-note-sat-scale)";
    ColorConfig.modSecondaryNoteLum = "var(--mod-secondary-note-lum)";
    ColorConfig.modSecondaryNoteLumScale = "var(--mod-secondary-note-lum-scale)";
    ColorConfig.modPrimaryNoteHue = "var(--mod-primary-note-hue)";
    ColorConfig.modPrimaryNoteHueScale = "var(--mod-primary-note-hue-scale)";
    ColorConfig.modPrimaryNoteSat = "var(--mod-primary-note-sat)";
    ColorConfig.modPrimaryNoteSatScale = "var(--mod-primary-note-sat-scale)";
    ColorConfig.modPrimaryNoteLum = "var(--mod-primary-note-lum)";
    ColorConfig.modPrimaryNoteLumScale = "var(--mod-primary-note-lum-scale)";
    ColorConfig.noiseSecondaryChannelHue = "var(--noise-secondary-channel-hue)";
    ColorConfig.noiseSecondaryChannelHueScale = "var(--noise-secondary-channel-hue-scale)";
    ColorConfig.noiseSecondaryChannelSat = "var(--noise-secondary-channel-sat)";
    ColorConfig.noiseSecondaryChannelSatScale = "var(--noise-secondary-channel-sat-scale)";
    ColorConfig.noiseSecondaryChannelLum = "var(--noise-secondary-channel-lum)";
    ColorConfig.noiseSecondaryChannelLumScale = "var(--noise-secondary-channel-lum-scale)";
    ColorConfig.noisePrimaryChannelHue = "var(--noise-primary-channel-hue)";
    ColorConfig.noisePrimaryChannelHueScale = "var(--noise-primary-channel-hue-scale)";
    ColorConfig.noisePrimaryChannelSat = "var(--noise-primary-channel-sat)";
    ColorConfig.noisePrimaryChannelSatScale = "var(--noise-primary-channel-sat-scale)";
    ColorConfig.noisePrimaryChannelLum = "var(--noise-primary-channel-lum)";
    ColorConfig.noisePrimaryChannelLumScale = "var(--noise-primary-channel-lum-scale)";
    ColorConfig.noiseSecondaryNoteHue = "var(--noise-secondary-note-hue)";
    ColorConfig.noiseSecondaryNoteHueScale = "var(--noise-secondary-note-hue-scale)";
    ColorConfig.noiseSecondaryNoteSat = "var(--noise-secondary-note-sat)";
    ColorConfig.noiseSecondaryNoteSatScale = "var(--noise-secondary-note-sat-scale)";
    ColorConfig.noiseSecondaryNoteLum = "var(--noise-secondary-note-lum)";
    ColorConfig.noiseSecondaryNoteLumScale = "var(--noise-secondary-note-lum-scale)";
    ColorConfig.noisePrimaryNoteHue = "var(--noise-primary-note-hue)";
    ColorConfig.noisePrimaryNoteHueScale = "var(--noise-primary-note-hue-scale)";
    ColorConfig.noisePrimaryNoteSat = "var(--noise-primary-note-sat)";
    ColorConfig.noisePrimaryNoteSatScale = "var(--noise-primary-note-sat-scale)";
    ColorConfig.noisePrimaryNoteLum = "var(--noise-primary-note-lum)";
    ColorConfig.noisePrimaryNoteLumScale = "var(--noise-primary-note-lum-scale)";
    ColorConfig.trackEditorBgPitch = "var(--track-editor-bg-pitch)";
    ColorConfig.trackEditorBgPitchDim = "var(--track-editor-bg-pitch-dim)";
    ColorConfig.trackEditorBgNoise = "var(--track-editor-bg-noise)";
    ColorConfig.trackEditorBgNoiseDim = "var(--track-editor-bg-noise-dim)";
    ColorConfig.trackEditorBgMod = "var(--track-editor-bg-mod)";
    ColorConfig.trackEditorBgModDim = "var(--track-editor-bg-mod-dim)";
    ColorConfig.multiplicativeModSlider = "var(--multiplicative-mod-slider)";
    ColorConfig.overwritingModSlider = "var(--overwriting-mod-slider)";
    ColorConfig.indicatorPrimary = "var(--indicator-primary)";
    ColorConfig.indicatorSecondary = "var(--indicator-secondary)";
    ColorConfig.select2OptGroup = "var(--select2-opt-group)";
    ColorConfig.inputBoxOutline = "var(--input-box-outline)";
    ColorConfig.muteButtonNormal = "var(--mute-button-normal)";
    ColorConfig.muteButtonMod = "var(--mute-button-mod)";
    ColorConfig.modLabelPrimary = "var(--mod-label-primary)";
    ColorConfig.modLabelSecondaryText = "var(--mod-label-secondary-text)";
    ColorConfig.modLabelPrimaryText = "var(--mod-label-primary-text)";
    ColorConfig.disabledNotePrimary = "var(--disabled-note-primary)";
    ColorConfig.disabledNoteSecondary = "var(--disabled-note-secondary)";
    ColorConfig.scrollbarColor = "var(--scrollbar-color)";
    ColorConfig.scrollbarBackground = "var(--scrollbar-background)";
    ColorConfig.c_pitchSecondaryChannelHue = 0;
    ColorConfig.c_pitchSecondaryChannelHueScale = 0;
    ColorConfig.c_pitchSecondaryChannelSat = 0;
    ColorConfig.c_pitchSecondaryChannelSatScale = 0;
    ColorConfig.c_pitchSecondaryChannelLum = 0;
    ColorConfig.c_pitchSecondaryChannelLumScale = 0;
    ColorConfig.c_pitchPrimaryChannelHue = 0;
    ColorConfig.c_pitchPrimaryChannelHueScale = 0;
    ColorConfig.c_pitchPrimaryChannelSat = 0;
    ColorConfig.c_pitchPrimaryChannelSatScale = 0;
    ColorConfig.c_pitchPrimaryChannelLum = 0;
    ColorConfig.c_pitchPrimaryChannelLumScale = 0;
    ColorConfig.c_pitchSecondaryNoteHue = 0;
    ColorConfig.c_pitchSecondaryNoteHueScale = 0;
    ColorConfig.c_pitchSecondaryNoteSat = 0;
    ColorConfig.c_pitchSecondaryNoteSatScale = 0;
    ColorConfig.c_pitchSecondaryNoteLum = 0;
    ColorConfig.c_pitchSecondaryNoteLumScale = 0;
    ColorConfig.c_pitchPrimaryNoteHue = 0;
    ColorConfig.c_pitchPrimaryNoteHueScale = 0;
    ColorConfig.c_pitchPrimaryNoteSat = 0;
    ColorConfig.c_pitchPrimaryNoteSatScale = 0;
    ColorConfig.c_pitchPrimaryNoteLum = 0;
    ColorConfig.c_pitchPrimaryNoteLumScale = 0;
    ColorConfig.c_modSecondaryChannelHue = 0;
    ColorConfig.c_modSecondaryChannelHueScale = 0;
    ColorConfig.c_modSecondaryChannelSat = 0;
    ColorConfig.c_modSecondaryChannelSatScale = 0;
    ColorConfig.c_modSecondaryChannelLum = 0;
    ColorConfig.c_modSecondaryChannelLumScale = 0;
    ColorConfig.c_modPrimaryChannelHue = 0;
    ColorConfig.c_modPrimaryChannelHueScale = 0;
    ColorConfig.c_modPrimaryChannelSat = 0;
    ColorConfig.c_modPrimaryChannelSatScale = 0;
    ColorConfig.c_modPrimaryChannelLum = 0;
    ColorConfig.c_modPrimaryChannelLumScale = 0;
    ColorConfig.c_modSecondaryNoteHue = 0;
    ColorConfig.c_modSecondaryNoteHueScale = 0;
    ColorConfig.c_modSecondaryNoteSat = 0;
    ColorConfig.c_modSecondaryNoteSatScale = 0;
    ColorConfig.c_modSecondaryNoteLum = 0;
    ColorConfig.c_modSecondaryNoteLumScale = 0;
    ColorConfig.c_modPrimaryNoteHue = 0;
    ColorConfig.c_modPrimaryNoteHueScale = 0;
    ColorConfig.c_modPrimaryNoteSat = 0;
    ColorConfig.c_modPrimaryNoteSatScale = 0;
    ColorConfig.c_modPrimaryNoteLum = 0;
    ColorConfig.c_modPrimaryNoteLumScale = 0;
    ColorConfig.c_noiseSecondaryChannelHue = 0;
    ColorConfig.c_noiseSecondaryChannelHueScale = 0;
    ColorConfig.c_noiseSecondaryChannelSat = 0;
    ColorConfig.c_noiseSecondaryChannelSatScale = 0;
    ColorConfig.c_noiseSecondaryChannelLum = 0;
    ColorConfig.c_noiseSecondaryChannelLumScale = 0;
    ColorConfig.c_noisePrimaryChannelHue = 0;
    ColorConfig.c_noisePrimaryChannelHueScale = 0;
    ColorConfig.c_noisePrimaryChannelSat = 0;
    ColorConfig.c_noisePrimaryChannelSatScale = 0;
    ColorConfig.c_noisePrimaryChannelLum = 0;
    ColorConfig.c_noisePrimaryChannelLumScale = 0;
    ColorConfig.c_noiseSecondaryNoteHue = 0;
    ColorConfig.c_noiseSecondaryNoteHueScale = 0;
    ColorConfig.c_noiseSecondaryNoteSat = 0;
    ColorConfig.c_noiseSecondaryNoteSatScale = 0;
    ColorConfig.c_noiseSecondaryNoteLum = 0;
    ColorConfig.c_noiseSecondaryNoteLumScale = 0;
    ColorConfig.c_noisePrimaryNoteHue = 0;
    ColorConfig.c_noisePrimaryNoteHueScale = 0;
    ColorConfig.c_noisePrimaryNoteSat = 0;
    ColorConfig.c_noisePrimaryNoteSatScale = 0;
    ColorConfig.c_noisePrimaryNoteLum = 0;
    ColorConfig.c_noisePrimaryNoteLumScale = 0;
    ColorConfig.c_invertedText = "";
    ColorConfig.c_trackEditorBgNoiseDim = "";
    ColorConfig.c_trackEditorBgNoise = "";
    ColorConfig.c_trackEditorBgModDim = "";
    ColorConfig.c_trackEditorBgMod = "";
    ColorConfig.c_trackEditorBgPitchDim = "";
    ColorConfig.c_trackEditorBgPitch = "";
    ColorConfig.pitchChannels = toNameMap([
        {
            name: "pitch1",
            secondaryChannel: "var(--pitch1-secondary-channel)",
            primaryChannel: "var(--pitch1-primary-channel)",
            secondaryNote: "var(--pitch1-secondary-note)",
            primaryNote: "var(--pitch1-primary-note)",
        }, {
            name: "pitch2",
            secondaryChannel: "var(--pitch2-secondary-channel)",
            primaryChannel: "var(--pitch2-primary-channel)",
            secondaryNote: "var(--pitch2-secondary-note)",
            primaryNote: "var(--pitch2-primary-note)",
        }, {
            name: "pitch3",
            secondaryChannel: "var(--pitch3-secondary-channel)",
            primaryChannel: "var(--pitch3-primary-channel)",
            secondaryNote: "var(--pitch3-secondary-note)",
            primaryNote: "var(--pitch3-primary-note)",
        }, {
            name: "pitch4",
            secondaryChannel: "var(--pitch4-secondary-channel)",
            primaryChannel: "var(--pitch4-primary-channel)",
            secondaryNote: "var(--pitch4-secondary-note)",
            primaryNote: "var(--pitch4-primary-note)",
        }, {
            name: "pitch5",
            secondaryChannel: "var(--pitch5-secondary-channel)",
            primaryChannel: "var(--pitch5-primary-channel)",
            secondaryNote: "var(--pitch5-secondary-note)",
            primaryNote: "var(--pitch5-primary-note)",
        }, {
            name: "pitch6",
            secondaryChannel: "var(--pitch6-secondary-channel)",
            primaryChannel: "var(--pitch6-primary-channel)",
            secondaryNote: "var(--pitch6-secondary-note)",
            primaryNote: "var(--pitch6-primary-note)",
        }, {
            name: "pitch7",
            secondaryChannel: "var(--pitch7-secondary-channel)",
            primaryChannel: "var(--pitch7-primary-channel)",
            secondaryNote: "var(--pitch7-secondary-note)",
            primaryNote: "var(--pitch7-primary-note)",
        }, {
            name: "pitch8",
            secondaryChannel: "var(--pitch8-secondary-channel)",
            primaryChannel: "var(--pitch8-primary-channel)",
            secondaryNote: "var(--pitch8-secondary-note)",
            primaryNote: "var(--pitch8-primary-note)",
        }, {
            name: "pitch9",
            secondaryChannel: "var(--pitch9-secondary-channel)",
            primaryChannel: "var(--pitch9-primary-channel)",
            secondaryNote: "var(--pitch9-secondary-note)",
            primaryNote: "var(--pitch9-primary-note)",
        }, {
            name: "pitch10",
            secondaryChannel: "var(--pitch10-secondary-channel)",
            primaryChannel: "var(--pitch10-primary-channel)",
            secondaryNote: "var(--pitch10-secondary-note)",
            primaryNote: "var(--pitch10-primary-note)",
        },
        {
            name: "pitch11",
            secondaryChannel: "var(--pitch11-secondary-channel)",
            primaryChannel: "var(--pitch11-primary-channel)",
            secondaryNote: "var(--pitch11-secondary-note)",
            primaryNote: "var(--pitch11-primary-note)",
        }, {
            name: "pitch12",
            secondaryChannel: "var(--pitch12-secondary-channel)",
            primaryChannel: "var(--pitch12-primary-channel)",
            secondaryNote: "var(--pitch12-secondary-note)",
            primaryNote: "var(--pitch12-primary-note)",
        },
    ]);
    ColorConfig.noiseChannels = toNameMap([
        {
            name: "noise1",
            secondaryChannel: "var(--noise1-secondary-channel)",
            primaryChannel: "var(--noise1-primary-channel)",
            secondaryNote: "var(--noise1-secondary-note)",
            primaryNote: "var(--noise1-primary-note)",
        }, {
            name: "noise2",
            secondaryChannel: "var(--noise2-secondary-channel)",
            primaryChannel: "var(--noise2-primary-channel)",
            secondaryNote: "var(--noise2-secondary-note)",
            primaryNote: "var(--noise2-primary-note)",
        }, {
            name: "noise3",
            secondaryChannel: "var(--noise3-secondary-channel)",
            primaryChannel: "var(--noise3-primary-channel)",
            secondaryNote: "var(--noise3-secondary-note)",
            primaryNote: "var(--noise3-primary-note)",
        }, {
            name: "noise4",
            secondaryChannel: "var(--noise4-secondary-channel)",
            primaryChannel: "var(--noise4-primary-channel)",
            secondaryNote: "var(--noise4-secondary-note)",
            primaryNote: "var(--noise4-primary-note)",
        }, {
            name: "noise5",
            secondaryChannel: "var(--noise5-secondary-channel)",
            primaryChannel: "var(--noise5-primary-channel)",
            secondaryNote: "var(--noise5-secondary-note)",
            primaryNote: "var(--noise5-primary-note)",
        },
    ]);
    ColorConfig.modChannels = toNameMap([
        {
            name: "mod1",
            secondaryChannel: "var(--mod1-secondary-channel)",
            primaryChannel: "var(--mod1-primary-channel)",
            secondaryNote: "var(--mod1-secondary-note)",
            primaryNote: "var(--mod1-primary-note)",
        }, {
            name: "mod2",
            secondaryChannel: "var(--mod2-secondary-channel)",
            primaryChannel: "var(--mod2-primary-channel)",
            secondaryNote: "var(--mod2-secondary-note)",
            primaryNote: "var(--mod2-primary-note)",
        }, {
            name: "mod3",
            secondaryChannel: "var(--mod3-secondary-channel)",
            primaryChannel: "var(--mod3-primary-channel)",
            secondaryNote: "var(--mod3-secondary-note)",
            primaryNote: "var(--mod3-primary-note)",
        }, {
            name: "mod4",
            secondaryChannel: "var(--mod4-secondary-channel)",
            primaryChannel: "var(--mod4-primary-channel)",
            secondaryNote: "var(--mod4-secondary-note)",
            primaryNote: "var(--mod4-primary-note)",
        },
    ]);
    ColorConfig._styleElement = document.head.appendChild(HTML.style({ type: "text/css" }));

    const scrollBarTest = document.body.appendChild(HTML.div({ style: "width:30px; height:30px; overflow: auto;" }, HTML.div({ style: "width:100%;height:40px" })));
    if (scrollBarTest.firstChild.clientWidth < 30) {
        document.documentElement.classList.add("obtrusive-scrollbars");
    }
    document.body.removeChild(scrollBarTest);
    document.head.appendChild(HTML.style({ type: "text/css" }, `

/* Note: "#" symbols need to be encoded as "%23" in SVG data urls, otherwise they are interpreted as fragment identifiers! */
:root {
	--button-size: 26px;
	--settings-area-width: 192px;
	--play-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -5 -8 L -5 8 L 8 0 z" fill="gray"/></svg>');
	--pause-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-5" y="-7" width="4" height="14" fill="gray"/><rect x="3" y="-7" width="4" height="14" fill="gray"/></svg>');
	--record-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><circle cx="0" cy="0" r="6" fill="gray"/></svg>');
	--stop-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-6" y="-6" width="12" height="12" fill="gray"/></svg>');
	--prev-bar-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-6" y="-6" width="2" height="12" fill="gray"/><path d="M 6 -6 L 6 6 L -3 0 z" fill="gray"/></svg>');
	--next-bar-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="4" y="-6" width="2" height="12" fill="gray"/><path d="M -6 -6 L -6 6 L 3 0 z" fill="gray"/></svg>');
	--volume-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z" fill="gray"/></svg>');
	--unmuted-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="3 3 20 20"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z" fill="gray"/></svg>');
	--muted-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="3 3 20 20"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z" fill="gray"/></svg>');
	--menu-down-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -4 -2 L 4 -2 L 0 3 z" fill="gray"/></svg>');
	--select-arrows-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -4 -3 L 4 -3 L 0 -8 z M -4 3 L 4 3 L 0 8 z" fill="gray"/></svg>');
	--file-page-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 2 0 L 2 -16 L 10 -16 L 14 -12 L 14 0 z M 3 -1 L 13 -1 L 13 -11 L 9 -11 L 9 -15 L 3 -15 z" fill="gray"/></svg>');
	--edit-pencil-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 0 0 L 1 -4 L 4 -1 z M 2 -5 L 10 -13 L 13 -10 L 5 -2 zM 11 -14 L 13 -16 L 14 -16 L 16 -14 L 16 -13 L 14 -11 z" fill="gray"/></svg>');
	--preferences-gear-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M 5.78 -1.6 L 7.93 -0.94 L 7.93 0.94 L 5.78 1.6 L 4.85 3.53 L 5.68 5.61 L 4.21 6.78 L 2.36 5.52 L 0.27 5.99 L -0.85 7.94 L -2.68 7.52 L -2.84 5.28 L -4.52 3.95 L -6.73 4.28 L -7.55 2.59 L -5.9 1.07 L -5.9 -1.07 L -7.55 -2.59 L -6.73 -4.28 L -4.52 -3.95 L -2.84 -5.28 L -2.68 -7.52 L -0.85 -7.94 L 0.27 -5.99 L 2.36 -5.52 L 4.21 -6.78 L 5.68 -5.61 L 4.85 -3.53 M 2.92 0.67 L 2.92 -0.67 L 2.35 -1.87 L 1.3 -2.7 L 0 -3 L -1.3 -2.7 L -2.35 -1.87 L -2.92 -0.67 L -2.92 0.67 L -2.35 1.87 L -1.3 2.7 L -0 3 L 1.3 2.7 L 2.35 1.87 z" fill="gray"/></svg>');
	--customize-dial-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"> \
		<g transform="translate(0,1)" fill="gray"> \
				<circle cx="0" cy="0" r="6.5" stroke="gray" stroke-width="1" fill="none"/> \
				<rect x="-1" y="-5" width="2" height="4" transform="rotate(30)"/> \
				<circle cx="-7.79" cy="4.5" r="0.75"/> \
				<circle cx="-9" cy="0" r="0.75"/> \
				<circle cx="-7.79" cy="-4.5" r="0.75"/> \
				<circle cx="-4.5" cy="-7.79" r="0.75"/> \
				<circle cx="0" cy="-9" r="0.75"/> \
				<circle cx="4.5" cy="-7.79" r="0.75"/> \
				<circle cx="7.79" cy="-4.5" r="0.75"/> \
				<circle cx="9" cy="0" r="0.75"/> \
				<circle cx="7.79" cy="4.5" r="0.75"/> \
			</g> \
		</svg>');
	--instrument-copy-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z" fill="currentColor"></path></svg>');
	--instrument-paste-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z" stroke="currentColor" fill="none"></path><path d="M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z" fill="currentColor"></path></svg>');
	--export-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -8 3 L -8 8 L 8 8 L 8 3 L 6 3 L 6 6 L -6 6 L -6 3 z M 0 2 L -4 -2 L -1 -2 L -1 -8 L 1 -8 L 1 -2 L 4 -2 z"/></svg>');
	--export-instrument-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 -960 960 960"><path fill="gray" d="M200-120v-40h560v40H200Zm279.231-150.769L254.615-568.462h130.769V-840h188.462v271.538h130.77L479.231-270.769Zm0-65.385 142.923-191.538h-88.308V-800H425.385v272.308h-88.308l142.154 191.538ZM480-527.692Z"/></svg>');
	--import-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 -960 960 960"><path fill="gray" d="M200-120v-40h560v40H200Zm185.384-150.769v-271.539H254.615L480-840l224.616 297.692h-130.77v271.539H385.384Zm40.001-40h108.461v-272.308h88.308L480-774.615 337.077-583.077h88.308v272.308ZM480-583.077Z"/></svg>');
	--close-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -7.07 -5.66 L -5.66 -7.07 L 0 -1.4 L 5.66 -7.07 L 7.07 -5.66 L 1.4 0 L 7.07 5.66 L 5.66 7.07 L 0 1.4 L -5.66 7.07 L -7.07 5.66 L -1.4 0 z"/></svg>');
	--add-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -8 -1 L -1 -1 L -1 -8  L 1 -8 L 1 -1 L 8 -1 L 8 1 L 1 1 L 1 8 L -1 8 L -1 1 L -8 1 z"/></svg>');
	--zoom-in-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="-10 -10 20 20"><circle cx="-1" cy="-1" r="6" stroke-width="2" stroke="gray" fill="none"></circle><path stroke="gray" stroke-width="2" d="M 3 3 L 7 7 M -1 -4 L -1 2 M -4 -1 L 2 -1" fill="none"></path></svg>');
	--zoom-out-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="-10 -10 20 20"><circle cx="-1" cy="-1" r="6" stroke-width="2" stroke="gray" fill="none"></circle><path stroke="gray" stroke-width="2" d="M 3 3 L 7 7 M -4 -1 L 2 -1" fill="none"></path></svg>');
	--undo-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M15 16c.53 0 1.04.21 1.41.59.38.37.59.88.59 1.41s-.21 1.04-.59 1.41c-.37.38-4.62 4.63-5 5-.37.38-.88.59-1.41.59s-1.04-.21-1.41-.59c-.38-.37-4.63-4.62-5-5C3.21 19.04 3 18.53 3 18s.21-1.04.59-1.41c.37-.38.88-.59 1.41-.59h2C7 8.825 12.825 3 20 3s13 5.825 13 13v4c0 7.175-5.823 13-13 13a3.001 3.001 0 0 1 0-6c3.862 0 7-3.137 7-7v-4c0-3.863-3.137-7-7-7s-7 3.137-7 7z"/></svg>');
	--redo-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M21 16c-.53 0-1.04.21-1.41.59-.38.37-.59.88-.59 1.41s.21 1.04.59 1.41c.37.38 4.62 4.63 5 5 .37.38.88.59 1.41.59s1.04-.21 1.41-.59c.38-.37 4.63-4.62 5-5 .38-.37.59-.88.59-1.41s-.21-1.04-.59-1.41c-.37-.38-.88-.59-1.41-.59h-2c0-7.175-5.825-13-13-13S3 8.825 3 16v4c0 7.175 5.823 13 13 13a3.001 3.001 0 0 0 0-6c-3.862 0-7-3.137-7-7v-4c0-3.863 3.137-7 7-7s7 3.137 7 7z"/></svg>');
	--copy-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M14 15H7a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-5h-2c-1.656 0-3-1.344-3-3zm7-9h-3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-6h-6c-1.656 0-3-1.344-3-3zm8 5-5-5v4.5a.5.5 0 0 0 .5.5zm-15 1H6.182A3.184 3.184 0 0 0 3 15.182v14.636A3.184 3.184 0 0 0 6.182 33h12.636A3.184 3.184 0 0 0 22 29.818V24h7.818A3.184 3.184 0 0 0 33 20.818V12c0-.79-.32-1.56-.88-2.12l-6-6C25.56 3.32 24.8 3 24 3h-6.818A3.184 3.184 0 0 0 14 6.182zm6 4h7a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1" fill-rule="evenodd"/></svg>');
	--paste-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M15 31H7a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h4v2h10V8h4a1 1 0 0 1 1 1v3l3 3V8c0-1.656-1.344-3-3-3h-5a3.19 3.19 0 0 0-3.182-3h-3.636A3.19 3.19 0 0 0 11 5H6C4.344 5 3 6.344 3 8v23c0 1.656 1.344 3 3 3h9zm2.606-26.5c.493 0 .894.401.894.894V7.5h-5V5.394c0-.493.401-.894.894-.894zM19 34c-1.656 0-3-1.344-3-3V16.182A3.184 3.184 0 0 1 19.182 13H24c.8 0 1.56.32 2.12.88l6 6c.56.56.88 1.33.88 2.12v8.818A3.184 3.184 0 0 1 29.818 34zm11-12-6-6v5.5a.5.5 0 0 0 .5.5zm-9-6h-1a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-5h-6c-1.656 0-3-1.344-3-3zm6 11a1 1 0 0 1 0 2h-5a1 1 0 0 1 0-2z" /></svg>');
	
	--insert-channel-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M11 3a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zM6.5 5a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7H6a1 1 0 0 1 0-2zM11 24a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2H6a1 1 0 0 1 0-2zm15-23a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zM17 5a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7h-.5a1 1 0 0 1 0-2zm4.5 19a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zM17 26a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2h-.5a1 1 0 0 1 0-2zM32 3a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7H27a1 1 0 0 1 0-2zM32 24a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2H27a1 1 0 0 1 0-2zm-19-9v-2a1 1 0 0 0-2 0v2h-2a1 1 0 0 0 0 2h2v2a1 1 0 0 0 2 0v-2h2a1 1 0 0 0 0-2zM19 17v-2a1 1 0 0 0-2 0v2h-2a1 1 0 0 0 0 2h2v2a1 1 0 0 0 2 0v-2h2a1 1 0 0 0 0-2zm10.5 0v-2a1 1 0 0 0-2 0v2h-2a1 1 0 0 0 0 2h2v2a1 1 0 0 0 2 0v-2h2a1 1 0 0 0 0-2z" fill-rule="evenodd"/></svg>');
	--delete-channel-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M11 3a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zM6.5 5a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7H6a1 1 0 0 1 0-2zM11 24a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2H6a1 1 0 0 1 0-2zm15-23a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zM17 5a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7h-.5a1 1 0 0 1 0-2zm4.5 19a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zM17 26a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2h-.5a1 1 0 0 1 0-2zM32 3a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1V7H27a1 1 0 0 1 0-2zM32 24a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1zm-4.5 2a1 1 0 0 1 2 0v4h1a1 1 0 0 1 0 2h-4a1 1 0 0 1 0-2h1v-2H27a1 1 0 0 1 0-2zm-20-9.414-2.793-2.793a.999.999 0 1 0-1.414 1.414L6.086 18l-2.793 2.793a.999.999 0 1 0 1.414 1.414L7.5 19.414l2.793 2.793a.999.999 0 1 0 1.414-1.414L8.914 18l2.793-2.793a.999.999 0 1 0-1.414-1.414zm10.5 0-2.793-2.793a.999.999 0 1 0-1.414 1.414L16.586 18l-2.793 2.793a.999.999 0 1 0 1.414 1.414L18 19.414l2.793 2.793a.999.999 0 1 0 1.414-1.414L19.414 18l2.793-2.793a.999.999 0 1 0-1.414-1.414zm10.5 0-2.793-2.793a.999.999 0 1 0-1.414 1.414L27.086 18l-2.793 2.793a.999.999 0 1 0 1.414 1.414l2.793-2.793 2.793 2.793a.999.999 0 1 0 1.414-1.414L29.914 18l2.793-2.793a.999.999 0 1 0-1.414-1.414z" fill-rule="evenodd"/></svg>');
	--select-all-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M10 33H5.951A2.95 2.95 0 0 1 3 30.049V26h3v3.2a.8.8 0 0 0 .8.8H10zm1 0h4v-3h-4zm0-30h4v3h-4zm-1 0H5.951A2.95 2.95 0 0 0 3 5.951V10h3V6.8a.8.8 0 0 1 .8-.8H10zM3 25v-4h3v4zm30 0v-4h-3v4zm0 1v4.049A2.95 2.95 0 0 1 30.049 33H26v-3h3.2a.8.8 0 0 0 .8-.8V26zm-17 7h4v-3h-4zm0-30h4v3h-4zM3 20v-4h3v4zm30 0v-4h-3v4zM21 33h4v-3h-4zm0-30h4v3h-4zm12 12v-4h-3v4zM3 15v-4h3v4zM26 3h4.049A2.95 2.95 0 0 1 33 5.951V10h-3V6.8a.8.8 0 0 0-.8-.8H26zM9 8h7a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1m11 0h7a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1M9 19h7a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1m13.414 2H27a1 1 0 0 0 0-2h-7a1 1 0 0 0-1 1v7a1 1 0 0 0 2 0v-4.586l5.293 5.293a.999.999 0 1 0 1.414-1.414z" fill-rule="evenodd" /></svg>');
	--duplicate-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M20 13h-3.25C14.68 13 13 14.68 13 16.75V20H6.778A.78.78 0 0 1 6 19.222V6.778C6 6.349 6.349 6 6.778 6h12.444c.429 0 .778.349.778.778zm-3.222 3h12.444c.429 0 .778.349.778.778v12.444a.78.78 0 0 1-.778.778H16.778a.78.78 0 0 1-.778-.778V16.778c0-.429.349-.778.778-.778M23 13h6.25c2.07 0 3.75 1.68 3.75 3.75v12.5c0 2.07-1.68 3.75-3.75 3.75h-12.5C14.68 33 13 31.32 13 29.25V23H6.75C4.68 23 3 21.32 3 19.25V6.75C3 4.68 4.68 3 6.75 3h12.5C21.32 3 23 4.68 23 6.75zm-1 9v-3a1 1 0 0 1 2 0v3h3a1 1 0 0 1 0 2h-3v3a1 1 0 0 1-2 0v-3h-3a1 1 0 0 1 0-2z" fill-rule="evenodd"/></svg>');
    --notes-up-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M12 10.778V28.4c0 1.298-1.414 3.474-3.502 4.192-2.421.834-4.834.348-5.385-1.082s.968-3.269 3.389-4.102c1.728-.595 3.452-.518 4.498.095V7l18-4v22l-1-1V7.222zM26 28.82l-3.604 3.576c-.79.791-2.058.807-2.828.036-.771-.77-.755-2.038.036-2.828l5-5c.79-.791 2.058-.807 2.828-.036l5 5c.771.77.755 2.038-.036 2.828-.79.791-2.058.807-2.828.036z" /></svg>');
	--notes-down-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M12 10.778V28.4c0 1.298-1.414 3.474-3.502 4.192-2.421.834-4.834.348-5.385-1.082s.968-3.269 3.389-4.102c1.728-.595 3.452-.518 4.498.095V7l18-4v21l-1 1V7.222zM26 28.18l3.604-3.576c.79-.791 2.058-.807 2.828-.036.771.77.755 2.038-.036 2.828l-5 5c-.79.791-2.058.807-2.828.036l-5-5c-.771-.77-.755-2.038.036-2.828.79-.791 2.058-.807 2.828-.036z"/></svg>');
	--loop-bar-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 36 36"><defs><clipPath id="a"><path d="M0 0h36v36H0z"/></clipPath></defs><path d="M31.667 19c.736 0 1.333.597 1.333 1.333v9.334c0 .736-.597 1.333-1.333 1.333h-9.334A1.333 1.333 0 0 1 21 29.667v-9.334c0-.736.597-1.333 1.333-1.333zM26 27h-2a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2h-2v-5a1 1 0 0 0-2 0v.5h-1a1 1 0 0 0 0 2h1zm5-9c0-4.967-4.033-9-9-9H12c-4.967 0-9 4.033-9 9s4.033 9 9 9h8v-5h-8c-2.208 0-4-1.792-4-4s1.792-4 4-4h10c2.208 0 4 1.792 4 4z"/></svg>');

	--fullscreen-symbol: url("https://choptop84.github.io/abyssbox-app/icon-fullscreen.png");

	--loop-within-bar-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="2 -0.5 12 12"><path d="M 5 2 C 3 2 2 3 2 5 L 2 6 C 2 8 3 9 5 9 L 11 9 C 13 9 14 8 14 6 L 14 5 C 14 3 13 2 11 2 L 8 2 L 8 4 L 11 4 C 11 4 12 4 12 5 L 12 6 C 12 7 11 7 11 7 L 5 7 C 5 7 4 7 4 6 L 4 5 C 4 4 5 4 5 4 L 8 4 L 8 2"/></svg>');
	--loop-full-song-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="2 -2 15 15"><path d="M 3 3 C 2 3 2 3 2 3 L 4 6 L 6 3 L 5 3 C 5 3 5 1 7 1 L 12 1 C 14 1 14 3 14 3 L 13 8 L 15 5 L 17 8 L 16 8 C 16 12 12 12 12 12 L 7 12 C 3 12 3 8 3 8 C 3 7 5 7 5 8 C 5 8 5 10 7 10 L 12 10 C 14 10 14 8 14 8 L 13 8 L 14 3 C 14 4 16 4 16 3 C 16 -1 12 -1 12 -1 L 7 -1 C 3 -1 3 3 3 3 Z Z"/></svg>');
	--dont-loop-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="2 -2 15 15"><path d="M 3 3 C 2 3 2 3 2 3 L 4 6 L 6 3 L 5 3 C 5 3 5 1 7 1 L 12 1 C 14 1 14 3 14 3 L 13 8 L 15 5 L 17 8 L 16 8 C 16 12 12 12 12 12 L 7 12 C 3 12 3 8 3 8 C 3 7 5 7 5 8 C 5 8 5 10 7 10 L 12 10 C 14 10 14 8 14 8 L 8 8 L 8 7 L 9 7 L 9 4.5 L 8 4.5 L 8 3.5 L 9 3 L 10 3 L 10 7 L 11 7 L 11 8 L 13 8 L 14 3 C 14 4 16 4 16 3 C 16 -1 12 -1 12 -1 L 7 -1 C 3 -1 3 3 3 3 Z Z"/></svg>');

	--checkmark-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -9 -2 L -8 -3 L -3 2 L 9 -8 L 10 -7 L -3 8 z"/></svg>');
	--drum-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 32 40"> \
			<defs> \
				<linearGradient id="gold1" x1="0%" y1="0%" x2="100%" y2="0%"> \
					<stop offset="0%" stop-color="%237e3302"/> \
					<stop offset="40%" stop-color="%23ffec6b"/> \
					<stop offset="100%" stop-color="%237e3302"/> \
				</linearGradient> \
				<linearGradient id="gold2" x1="0%" y1="0%" x2="100%" y2="0%"> \
					<stop offset="0%" stop-color="%23faaf7d"/> \
					<stop offset="15%" stop-color="%23fffba9"/> \
					<stop offset="40%" stop-color="%23ffffe3"/> \
					<stop offset="65%" stop-color="%23fffba9"/> \
					<stop offset="100%" stop-color="%23faaf7d"/> \
				</linearGradient> \
				<radialGradient id="gold3" cx="0%" cy="0%" r="100%"> \
					<stop offset="0%" stop-color="%23ffffe3"/> \
					<stop offset="50%" stop-color="%23ffec6b"/> \
					<stop offset="100%" stop-color="%237e3302"/> \
				</radialGradient> \
				<linearGradient id="red" x1="0%" y1="0%" x2="100%" y2="0%"> \
					<stop offset="0%" stop-color="%23641919"/> \
					<stop offset="40%" stop-color="%23cd2c2c"/> \
					<stop offset="100%" stop-color="%23641919"/> \
				</linearGradient> \
				<radialGradient id="membrane"> \
					<stop offset="10%" stop-color="%23cccccc" /> \
					<stop offset="90%" stop-color="%23f6f6f7" /> \
					<stop offset="100%" stop-color="%23999" /> \
				</radialGradient> \
			</defs> \
			<ellipse cx="16" cy="26" rx="16" ry="14" fill="rgba(0,0,0,0.5)"/> \
			<ellipse cx="16" cy="25" rx="16" ry="14" fill="url(%23gold1)"/> \
			<rect x="0" y="23" width="32" height="2" fill="url(%23gold1)"/> \
			<ellipse cx="16" cy="23" rx="16" ry="14" fill="url(%23gold2)"/> \
			<ellipse cx="16" cy="23" rx="15" ry="13" fill="url(%23red)"/> \
			<rect x="1" y="17" width="30" height="6" fill="url(%23red)"/> \
			<rect x="5" y="27" width="1" height="5" rx="0.5" fill="rgba(0,0,0,0.5)"/> \
			<rect x="15" y="31" width="2" height="5" rx="1" fill="rgba(0,0,0,0.5)"/> \
			<rect x="26" y="27" width="1" height="5" rx="0.5" fill="rgba(0,0,0,0.5)"/> \
			<rect x="5" y="26" width="1" height="5" rx="0.5" fill="url(%23gold3)"/> \
			<rect x="15" y="30" width="2" height="5" rx="1" fill="url(%23gold3)"/> \
			<rect x="26" y="26" width="1" height="5" rx="0.5" fill="url(%23gold3)"/> \
			<ellipse cx="16" cy="18" rx="15" ry="13" fill="rgba(0,0,0,0.5)"/> \
			<ellipse cx="16" cy="16" rx="16" ry="14" fill="url(%23gold1)"/> \
			<rect x="0" y="14" width="32" height="2" fill="url(%23gold1)"/> \
			<ellipse cx="16" cy="14" rx="16" ry="14" fill="url(%23gold2)"/> \
			<ellipse cx="16" cy="14" rx="15" ry="13" fill="url(%23membrane)"/> \
		</svg>');
	--piano-key-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="15" preserveAspectRatio="none" viewBox="0 -1 32 15"> \
			<defs> \
				<linearGradient id="shadow" x1="0%" y1="0%" x2="100%" y2="0%"> \
					<stop offset="0%" stop-color="rgba(0,0,0,0.5)"/> \
					<stop offset="100%" stop-color="transparent"/> \
				</linearGradient> \
			</defs> \
			<rect x="-1" y="1" width="31" height="1" rx="0.6" fill="rgba(255,255,255,0.4)"/> \
			<path d="M -1 11 L 30 11 L 30 2 L 33 -1 L 33 14 L -1 14 z" fill="rgba(0,0,0,0.7)"/> \
			<rect x="-1" y="-1" width="19" height="15" fill="url(%23shadow)"/> \
		</svg>');
  --mod-key-symbol: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="80" preserveAspectRatio="none" viewBox="0 -1 32 80"> \
			<defs> \
				<linearGradient id="shadow" x1="0%" y1="0%" x2="100%" y2="0%"> \
					<stop offset="0%" stop-color="rgba(0,0,0,0.4)"/> \
					<stop offset="100%" stop-color="transparent"/> \
				</linearGradient> \
			</defs> \
			<rect x="-1" y="1" width="31" height="1" rx="0.6" fill="rgba(255,255,255,0.2)"/> \
			<path d="M -1 76 L 30 76 L 30 1 L 33 -1 L 33 80 L -1 80 z" fill="rgba(0,0,0,0.7)"/> \
			<rect x="-1" y="-1" width="19" height="80" fill="url(%23shadow)"/> \
		</svg>');
}

html {
	scrollbar-color: var(--scrollbar-color, var(--ui-widget-background)) var(--scrollbar-background, var(--editor-background));
}

.tutorialButton {
	height: auto !important;
} 

.obtrusive-scrollbars, .obtrusive-scrollbars * {
	scrollbar-width: thin;
}
.obtrusive-scrollbars::-webkit-scrollbar, .obtrusive-scrollbars *::-webkit-scrollbar {
	width: 12px;
}
.obtrusive-scrollbars::-webkit-scrollbar-track, .obtrusive-scrollbars *::-webkit-scrollbar-track {
	background: ${ColorConfig.editorBackground};
}
.obtrusive-scrollbars::-webkit-scrollbar-thumb, .obtrusive-scrollbars *::-webkit-scrollbar-thumb {
	background-color: ${ColorConfig.uiWidgetBackground};
	border: 3px solid ${ColorConfig.editorBackground};
}

.songLoopButton::before {
content: "";
  position: absolute;
  width: var(--button-size);
  height: var(--button-size);
  left: 3px;
  top: 0;
  mask-image: var(--loop-within-bar-symbol);
  -webkit-mask-image: var(--loop-within-bar-symbol);
  pointer-events: none;
  background: currentColor;
  mask-repeat: no-repeat;
  mask-position: center;
  -webkit-mask-repeat: no-repeat;
  -webkit-mask-position: center;
  image-rendering: -moz-crisp-edges !important;
  image-rendering: -webkit-optimize-contrast !important;
  image-rendering: -o-crisp-edges !important;
  image-rendering: pixelated !important;
  image-rendering: optimizeSpeed !important;
}

.beepboxEditor {
	display: grid;
    grid-template-columns: minmax(0, 1fr) max-content;
    grid-template-rows: max-content 1fr; /* max-content minmax(0, 1fr); Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */
    grid-template-areas: "pattern-area settings-area" "track-area settings-area";
	grid-column-gap: 6px;
	grid-row-gap: 6px;
	position: relative;
	touch-action: manipulation;
	cursor: default;
	font-size: 13px;
	overflow: show;
	color: ${ColorConfig.primaryText};
	background: ${ColorConfig.editorBackground};
    opacity: 0;
    -webkit-transition: opacity 0.2s ease-in;
    -moz-transition: opacity 0.2s ease-in;
    -o-transition: opacity 0.2s ease-in;
    -ms-transition: opacity 0.2s ease-in;
    transition: opacity 0.2s ease-in;
    transition-delay: 0s;
}

.beepboxEditor .operatorRow {
	margin: 2px 0;
	height: 2em;
	display: flex;
	flex-direction: row;
	align-items: center;
}

.beepboxEditor .operatorRow > * {
	flex-grow: 1;
	flex-shrink: 1;
}

.pattern-area {
     opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0s;
}

.settings-area {
    opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0.15s;
}

.editor-song-settings {
    opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0.35s;
}

.instrument-settings-area {
    opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0.15s;
}

.trackAndMuteContainer {
    opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0.4s;
}

.barScrollBar {
    opacity: 0;
    -webkit-transition: opacity 0.5s ease-in;
    -moz-transition: opacity 0.5s ease-in;
    -o-transition: opacity 0.5s ease-in;
    -ms-transition: opacity 0.5s ease-in;
    transition: opacity 0.5s ease-in;
    transition-delay: 0.5s;
}



.load {
    opacity: 1;
}

.beepboxEditor .noSelection {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

.beepboxEditor div {
	margin: 0;
	padding: 0;
}

.beepboxEditor .pattern-area {
	grid-area: pattern-area;
	height: 481px;
	display: flex;
	flex-direction: row;
	position: relative;
}

.beepboxEditor .track-area {
	grid-area: track-area;
}

.beepboxEditor .loopEditor {
	height: 20px;
	position: sticky;
	bottom: 0;
	padding: 5px 0;
	background-color: ${ColorConfig.editorBackground};
}

.beepboxEditor .settings-area {
	grid-area: settings-area;
	display: grid;
    grid-template-columns: auto;
    grid-template-rows: min-content min-content min-content min-content min-content;
    grid-template-areas: "version-area" "play-pause-area" "menu-area" "song-settings-area" "instrument-settings-area";
	grid-column-gap: 6px;
}

.beepboxEditor .version-area{ grid-area: version-area; }
.beepboxEditor .play-pause-area{ grid-area: play-pause-area; }
.beepboxEditor .menu-area{ grid-area: menu-area; }
.beepboxEditor .song-settings-area{ grid-area: song-settings-area; }
.beepboxEditor .instrument-settings-area{ grid-area: instrument-settings-area; }

.beepboxEditor .tip {
	cursor: help;
	color: ${ColorConfig.secondaryText};
	text-decoration: none;
}

.beepboxEditor .tip:hover {
	color: ${ColorConfig.linkAccent};
	text-decoration: underline;
}
.beepboxEditor .tip:active {
	color: ${ColorConfig.primaryText};
}

.beepboxEditor .volume-speaker {
	flex-shrink: 0;
	width: var(--button-size);
	height: var(--button-size);
	background: ${ColorConfig.secondaryText};
	-webkit-mask-image: var(--volume-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--volume-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .drum-button {
	flex: 1;
	background-color: transparent;
	background-image: var(--drum-symbol);
	background-repeat: no-repeat;
	background-position: center;
}

.beepboxEditor .modulator-button {
	flex: 1;
	position: relative;
	display: flex;
	align-items: center;
}
.beepboxEditor .modulator-button::before {
	content: "";
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	pointer-events: none;
	background-image: var(--mod-key-symbol);
	background-repeat: no-repeat;
	background-position: center;
	background-size: 100% 102%;
}

.beepboxEditor .piano-button {
	flex: 1;
	position: relative;
	display: flex;
	align-items: center;
}
.beepboxEditor .piano-button::before {
	content: "";
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	pointer-events: none;
	background-image: var(--piano-key-symbol);
	background-repeat: no-repeat;
	background-position: center;
	background-size: 100% 115.38%;
}
.beepboxEditor .piano-button.disabled::after {
	content: "";
	position: absolute;
	right: 0;
	top: 0;
	width: 70%;
	height: 100%;
	pointer-events: none;
	background: ${ColorConfig.editorBackground};
	-webkit-mask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .piano-button.pressed, .beepboxEditor .drum-button.pressed {
	filter: brightness(0.5);
}

.beepboxEditor .customize-instrument {
	margin: 2px 0;
}
.beepboxEditor .customize-instrument::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--customize-dial-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--customize-dial-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .instrumentCopyPasteRow {
	gap: 2px;
}

.beepboxEditor .copyButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--instrument-copy-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--instrument-copy-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .pasteButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--instrument-paste-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--instrument-paste-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .exportInstrumentButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--export-instrument-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--export-instrument-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .importInstrumentButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--import-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--import-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .envelopeEditor {
	display: flex;
	flex-direction: column;
}

.beepboxEditor .envelope-row {
	display: flex;
	margin: 2px 0;
	gap: 2px;
}

.beepboxEditor .add-envelope {
	width: var(--button-size);
}
.beepboxEditor .add-envelope::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--add-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--add-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}
.beepboxEditor .add-envelope:disabled {
	visibility: hidden;
}

.beepboxEditor .effects-menu {
	width: var(--button-size);
	position: relative;
}
.beepboxEditor .effects-menu::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--menu-down-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--menu-down-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor .zoomInButton, .beepboxEditor .zoomOutButton {
	width: var(--button-size);
	position: absolute;
	right: 10px;
}
.beepboxEditor .zoomInButton {
	top: 10px;
}
.beepboxEditor .zoomOutButton {
	top: 50px;
}
.beepboxEditor .zoomInButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--zoom-in-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--zoom-in-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}
.beepboxEditor .zoomOutButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--zoom-out-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--zoom-out-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor .undoButton,
.beepboxEditor .redoButton,
.beepboxEditor .copyPatternButton,
.beepboxEditor .pastePatternButton,
.beepboxEditor .insertChannelButton,
.beepboxEditor .deleteChannelButton, 
.beepboxEditor .selectAllButton,
.beepboxEditor .duplicateButton, 
.beepboxEditor .notesUpButton, 
.beepboxEditor .notesDownButton,
.beepboxEditor .loopBarButton,
.beepboxEditor .fullscreenButton
 {
	width: var(--button-size);
	position: absolute;
	right: 10px;
}
.beepboxEditor .undoButton {
	top: 10px;
}
.beepboxEditor .redoButton {
	top: 10px;
}
.beepboxEditor .copyPatternButton {
	top: 40px;
}
.beepboxEditor .pastePatternButton {
	top: 40px;
}
.beepboxEditor .insertChannelButton {
	top: 70px;
}
.beepboxEditor .deleteChannelButton {
	top: 70px;
}
.beepboxEditor .selectAllButton {
	top: 100px;
}
.beepboxEditor .duplicateButton {
	top: 100px;
}
.beepboxEditor .notesUpButton {
	top: 130px;
}
.beepboxEditor .notesDownButton {
	top: 130px;
}
.beepboxEditor .loopBarButton {
	top: 160px;
}
.beepboxEditor .copyPatternButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--copy-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--copy-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .pastePatternButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--paste-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--paste-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .undoButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--undo-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--undo-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .redoButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--redo-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--redo-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .insertChannelButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--insert-channel-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--insert-channel-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .deleteChannelButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--delete-channel-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--delete-channel-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .selectAllButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--select-all-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--select-all-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .duplicateButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--duplicate-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--duplicate-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .notesUpButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--notes-up-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--notes-up-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .notesDownButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--notes-down-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--notes-down-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .loopBarButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--loop-bar-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--loop-bar-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}
.beepboxEditor .fullscreenButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--fullscreen-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--fullscreen-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;         /* Firefox */
	image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
	image-rendering: -o-crisp-edges !important;            /* Opera */
	image-rendering: pixelated !important;                 /* Future browsers */
	image-rendering: optimizeSpeed !important;             /* IE */
}

.beepboxEditor .delete-envelope {
	width: var(--button-size);
	flex-shrink: 0;
	flex-grow: 0;
}
.beepboxEditor .delete-envelope::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--close-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--close-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}
.beepboxEditor .delete-envelope:disabled {
	visibility: hidden;
}

.beepboxEditor .menu.file::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--file-page-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--file-page-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .menu.edit::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--edit-pencil-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--edit-pencil-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .menu.preferences::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--preferences-gear-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--preferences-gear-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor .mute-button {
	background: transparent;
	border: none;
  padding-right: 0px;
  padding-left: 0px;
  box-shadow: none;
}

.beepboxEditor .mute-button:focus {
  background: transparent;
	border: none;
}

.beepboxEditor .mute-button::before {
	content: "";
	pointer-events: none;
	width: 100%;
	height: 100%;
	display: inline-block;
  background: var(--mute-button-normal);
	-webkit-mask-image: var(--unmuted-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	-webkit-mask-size: cover;
  mask-repeat: no-repeat;
	mask-position: center;
	mask-size: cover;
  mask-image: var(--unmuted-symbol);
}

.beepboxEditor .mute-button.muted::before {
  background: var(--ui-widget-background);
	-webkit-mask-image: var(--muted-symbol);
  mask-image: var(--muted-symbol);
}

.beepboxEditor .mute-button.modMute.muted::before {
  background: var(--ui-widget-background);
	-webkit-mask-image: var(--muted-symbol);
  mask-image: var(--muted-symbol);
}

.beepboxEditor .mute-button.modMute::before {
  background: var(--mute-button-mod);
}


.beepboxEditor .promptContainer {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	display: flex;
	justify-content: center;
	align-items: center;
	z-index: 100;
}

.beepboxEditor .prompt {
	margin: auto;
	text-align: center;
	background: ${ColorConfig.editorBackground};
	border-radius: 15px;
	border: 4px solid ${ColorConfig.uiWidgetBackground};
	color: ${ColorConfig.primaryText};
	padding: 20px;
	display: flex;
	flex-direction: column;
	position: relative;
	box-shadow: 5px 5px 20px 10px rgba(0,0,0,0.5);
}

.beepboxEditor .prompt > *:not(:first-child):not(.cancelButton) {
	margin-top: 1.5em;
}

.beepboxEditor .prompt h2 {
	font-size: 2em;
	margin: 0 16px;
	font-weight: normal;
}

.beepboxEditor .prompt p {
	text-align: left;
	margin: 1em 0;
}

.beepboxEditor .prompt label {
	cursor: pointer;
}

.beepboxEditor .prompt.recordingSetupPrompt p {
	margin-top: 0.75em;
	margin-bottom: 0;
}

.beepboxEditor .prompt.recordingSetupPrompt > label:not(:first-child):not(.cancelButton) {
	margin: 2px 0;
}

.beepboxEditor .layout-option {
	display: flex;
	flex-direction: column;
	cursor: pointer;
	color: ${ColorConfig.secondaryText};
	width: 25%;
}

.beepboxEditor .layout-option input {
	display: none;
}

.beepboxEditor .layout-option input:checked ~ * {
	color: ${ColorConfig.primaryText};
}
.beepboxEditor select.invalidSetting {
	border: solid 1px red;
}
.beepboxEditor .selectContainer {
	position: relative;
}
.beepboxEditor .selectContainer:not(.menu)::after {
	content: "";
	flex-shrink: 0;
	position: absolute;
	right: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: 14px;
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--select-arrows-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--select-arrows-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
.beepboxEditor .selectContainer.menu::after {
	content: "";
	flex-shrink: 0;
	position: absolute;
	right: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--menu-down-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--menu-down-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
.beepboxEditor select {
	margin: 0;
	padding: 0 4px;
	display: block;
	height: var(--button-size);
	border: none;
	border-radius: 5px;
	background: ${ColorConfig.uiWidgetBackground};
	color: inherit;
	font-size: inherit;
	cursor: pointer;
	font-family: inherit;
	font-weight: inherit;

	-webkit-appearance:none;
	-moz-appearance: none;
	appearance: none;
}
.beepboxEditor select option:disabled {
	color: ${ColorConfig.linkAccent};
	font-weight: bold;
}

.select2-container .select2-selection--single {
  height: auto;
}

.select2-container {
  width: -moz-available !important;
  width: -webkit-fill-available !important;
}
@media (min-width: 711px) {
	.select2 {
	  width: calc(var(--settings-area-width) * 0.625) !important;
	}
}

.select2-container--default .select2-selection--single{
  border-radius: 0px;
  border: 0px;
  background-color: transparent;
  outline: none;
}

.select2-selection__rendered:not(.menu)::before {
	content: "";
	position: absolute;
	right: 0.3em;
	top: 0.4em;
	border-bottom: 0.4em solid currentColor;
	border-left: 0.3em solid transparent;
	border-right: 0.3em solid transparent;
	pointer-events: none;
}
.select2-selection__rendered:not(.menu)::after {
	content: "";
	position: absolute;
	right: 0.3em;
	bottom: 0.4em;
	border-top: 0.4em solid currentColor;
	border-left: 0.3em solid transparent;
	border-right: 0.3em solid transparent;
	pointer-events: none;
}
.select2-selection__rendered {
	margin: 0;
	padding: 0 0.3em;
	display: block;
	height: 2em;
	border: none;
	border-radius: 0.4em;
	background: ${ColorConfig.uiWidgetBackground};
	color: inherit !important;
	font-size: inherit;
	cursor: pointer;
	font-family: inherit;
	-webkit-appearance:none;
	-moz-appearance: none;
	appearance: none;
}
.select2-selection__arrow b{
    display:none !important;
}

.select2-selection__rendered--focus {
	background: ${ColorConfig.uiWidgetFocus};
	outline: none;
}
.select2-search__field {
    background: ${ColorConfig.uiWidgetBackground};
    color: inherit !important;
    font-size: small;
    font-family: inherit;
    border: 0px !important;
    padding: 1px !important;
}
.select2-dropdown {
    box-sizing: border-box;
    display: inline-block;
    margin: 0;
    font-size: small;
    position: relative;
    vertical-align: middle;
    background-color: ${ColorConfig.uiWidgetFocus};
}

.select2-container--default .select2-results>.select2-results__options {
    max-height: 430px;
    overflow-x: hidden;
}
.select2-container--default .select2-results__group {
    cursor: default;
    display: block;
    padding: 1px;
    background: ${ColorConfig.select2OptGroup};
}
.select2-results__option {
    padding: 2px;
    user-select: none;
    -webkit-user-select: none;
}
.select2-container--default .select2-results__option .select2-results__option {
    padding-left: 0.1em;
}
.select2-container--default .select2-results__option[aria-selected=true] {
  background-color: transparent !important;
}

.select2-results__option--highlighted[aria-selected] {
	color: white !important;
}

.beepboxEditor .menu select {
	padding: 0 var(--button-size);
}
.beepboxEditor select:focus {
	background: ${ColorConfig.uiWidgetFocus};
	outline: none;
}
.beepboxEditor .menu select {
	text-align: center;
	text-align-last: center;
}
.beepboxEditor .settings-area select {
       width: 100%;
}

/* This makes it look better in firefox on my computer... What about others?
@-moz-document url-prefix() {
	.beepboxEditor select { padding: 0 2px; }
}
*/
.beepboxEditor button, button {
	margin: 0;
	position: relative;
	height: var(--button-size);
	border: none;
	border-radius: 5px;
	background: ${ColorConfig.uiWidgetBackground};
	color: inherit;
	font-size: inherit;
	font-family: inherit;
	font-weight: inherit;
	cursor: pointer;
}
.mobileEditMenuIcon {
  content: "";
  pointer-events: none;
  background: currentColor;
  mask-image: var(--edit-pencil-symbol);
  mask-repeat: no-repeat;
  mask-position: center;
  -webkit-mask-image: var(--edit-pencil-symbol);
  -webkit-mask-repeat: no-repeat;
  -webkit-mask-position: center;
  image-rendering: -moz-crisp-edges !important;
  image-rendering: -webkit-optimize-contrast !important;
  image-rendering: -o-crisp-edges !important;
  image-rendering: pixelated !important;
  image-rendering: optimizeSpeed !important;
  width: 100%;
  height: 100%;
  mask-size: 50%;
  
}
.mobileTrackMenuIcon {
	content: "";
	pointer-events: none;
	background: currentColor;
	mask-image: var(--insert-channel-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--insert-channel-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;
	image-rendering: -webkit-optimize-contrast !important;
	image-rendering: -o-crisp-edges !important;
	image-rendering: pixelated !important;
	image-rendering: optimizeSpeed !important;
	width: 100%;
	height: 100%;
	mask-size: 50%;
  }
.mobileSettingsMenuIcon {
	content: "";
	pointer-events: none;
	background: currentColor;
	mask-image: var(--preferences-gear-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--preferences-gear-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	image-rendering: -moz-crisp-edges !important;
	image-rendering: -webkit-optimize-contrast !important;
	image-rendering: -o-crisp-edges !important;
	image-rendering: pixelated !important;
	image-rendering: optimizeSpeed !important;
	width: 100%;
	height: 100%;
	mask-size: 50%;
  }
.beepboxEditor button:focus {
	background: ${ColorConfig.uiWidgetFocus};
	outline: none;
}

.beepboxEditor button.cancelButton {
	float: right;
	width: var(--button-size);
	position: absolute;
	top: 8px;
	right: 8px;
}

.beepboxEditor .playback-bar-controls {
	display: grid;
	grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);
	grid-template-rows: min-content;
	grid-column-gap: 4px;
}

.beepboxEditor button.playButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--play-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--play-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
.beepboxEditor button.pauseButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--pause-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--pause-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
button.mobilePlayButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--play-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--play-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
button.mobilePauseButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--pause-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--pause-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
.beepboxEditor button.recordButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--record-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--record-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}
.beepboxEditor button.stopButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--stop-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--stop-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor button.prevBarButton::before, button.mobilePrevBarButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--prev-bar-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--prev-bar-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor button.nextBarButton::before, button.mobileNextBarButton::before {
	content: "";
	flex-shrink: 0;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	pointer-events: none;
	width: var(--button-size);
	height: var(--button-size);
	background: currentColor;
	-webkit-mask-image: var(--next-bar-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--next-bar-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton, .beepboxEditor button.stopButton, .beepboxEditor button.okayButton, .beepboxEditor button.exportButton {
	padding-left: var(--button-size);
}
.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton {
	grid-column-start: 1;
	grid-column-end: 3;
}
.beepboxEditor button.stopButton {
	grid-column-start: 1;
	grid-column-end: 5;
}
.beepboxEditor button.prevBarButton {
	grid-column-start: 3;
	grid-column-end: 4;
}
.beepboxEditor button.nextBarButton {
	grid-column-start: 4;
	grid-column-end: 5;
}

.beepboxEditor button.playButton.shrunk, .beepboxEditor button.recordButton.shrunk {
	padding: 0;
}
.beepboxEditor button.playButton.shrunk::before, .beepboxEditor button.recordButton.shrunk::before {
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
}
.beepboxEditor button.playButton.shrunk span, .beepboxEditor button.recordButton.shrunk span {
	display: none;
}
.beepboxEditor button.playButton.shrunk {
	grid-column-start: 1;
	grid-column-end: 2;
}
.beepboxEditor button.recordButton.shrunk {
	grid-column-start: 2;
	grid-column-end: 3;
}

.beepboxEditor button.cancelButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--close-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--close-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor button.okayButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	-webkit-mask-image: var(--checkmark-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
	mask-image: var(--checkmark-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
}

.beepboxEditor button.exportButton::before {
	content: "";
	position: absolute;
	width: var(--button-size);
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--export-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--export-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor .instrument-bar {
	display: flex;
	gap: 2px;
}

.beepboxEditor .instrument-bar button {
	flex-grow: 1;
	min-width: 0;
	padding: 0;
	flex-basis: 0;
	display: flex;
	align-items: center;
	justify-content: center;
	color: var(--text-color-lit);
}

.beepboxEditor .instrument-bar .remove-instrument, .beepboxEditor .instrument-bar .add-instrument {
	max-width: var(--button-size);
}

.beepboxEditor .instrument-bar > :not(:first-child) {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
}

.beepboxEditor .instrument-bar > :not(.last-button) {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
	border-bottom: inset;
	border-color: var(--background-color-dim);
}

.beepboxEditor .instrument-bar .selected-instrument {
	background: var(--background-color-lit);
	color: ${ColorConfig.invertedText};
}

.beepboxEditor .instrument-bar .deactivated {
	background: ${ColorConfig.editorBackground};
	color: var(--text-color-dim);
	border-bottom: unset;
}

.beepboxEditor .instrument-bar .deactivated.selected-instrument {
	background: var(--background-color-dim);
	color: ${ColorConfig.invertedText};
}

.beepboxEditor .instrument-bar .remove-instrument {
	border-bottom: unset;
}

.beepboxEditor .instrument-bar .remove-instrument::before {
	content: "";
	position: absolute;
	width: 100%;
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--close-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--close-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor .instrument-bar .add-instrument {
	border-bottom: unset;
}

.beepboxEditor .instrument-bar .no-underline {
	border-bottom: unset;
}

.beepboxEditor .instrument-bar .add-instrument::before {
	content: "";
	position: absolute;
	width: 100%;
	height: var(--button-size);
	left: 0;
	top: 0;
	pointer-events: none;
	background: currentColor;
	mask-image: var(--add-symbol);
	mask-repeat: no-repeat;
	mask-position: center;
	-webkit-mask-image: var(--add-symbol);
	-webkit-mask-repeat: no-repeat;
	-webkit-mask-position: center;
}

.beepboxEditor canvas {
	overflow: hidden;
	position: absolute;
	display: block;
  cursor: crosshair;
}

@keyframes dash-animation {
  to {
    stroke-dashoffset: -100;
  }
}

.beepboxEditor .dash-move {
  animation: dash-animation 20s infinite linear;
}

.beepboxEditor .trackContainer {
	flex-grow: 1;
}

.beepboxEditor .trackAndMuteContainer {
	display: flex;
	align-items: flex-start;
	width: 100%;
	min-height: 0;
	flex: 1;
	overflow-x: hidden;
	position: relative;
}

.beepboxEditor .channelRow {
	display: flex;
}
.beepboxEditor .channelBox {
	display: flex;
	text-align: center;
	align-items: center;
	justify-content: center;
	box-sizing: border-box;
	padding-top: 1px;
}
.beepboxEditor .emptyChannelBox {
	display: flex;
	text-align: center;
	align-items: center;
	justify-content: center;
	box-sizing: border-box;
	padding-top: 1px;
}

.beepboxEditor .curChannelBox {
	display: flex;
	text-align: center;
	align-items: center;
	justify-content: center;
	box-sizing: border-box;
	padding-top: 1px;
}
.beepboxEditor .channelBoxLabel {
	font-size: 20px;
	font-family: sans-serif;
	font-weight: bold;
}
.beepboxEditor .dropFader {
	opacity: 0;
	-webkit-transition:opacity 0.17s linear;
    -moz-transition:opacity 0.17s linear;
    -o-transition:opacity 0.17s linear;
    -ms-transition:opacity 0.17s linear; 
    transition:opacity 0.17s linear;
}

.beepboxEditor .muteEditor {
	width: 32px;
	flex-shrink: 0;
	display: flex;
	flex-direction: column;
	align-items: stretch;
	position: sticky;
	left: 0;
	z-index: 1;
	background: ${ColorConfig.editorBackground};
}

.beepboxEditor .selectRow, .beepboxEditor .instrumentCopyPasteRow {
	margin: 2px 0;
	height: var(--button-size);
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
}

.beepboxEditor .selectRow > :last-child {
	width: 62.5%;
	flex-shrink: 0;
}

.beepboxEditor .menu-area {
	display: flex;
	flex-direction: column;
}
.beepboxEditor .menu-area > * {
	margin: 2px 0;
}
.beepboxEditor .menu-area > button {
	padding: 0 var(--button-size);
	white-space: nowrap;
}

.beepboxEditor .song-settings-area {
	display: flex;
	flex-direction: column;
}

.beepboxEditor .editor-controls {
	flex-shrink: 0;
	display: flex;
	flex-direction: column;
}

.beepboxEditor .instrument-settings-area {
	display: flex;
	flex-direction: column;
}

.beepboxEditor .editor-right-side-top > *, .beepboxEditor .editor-right-side-bottom > * {
	flex-shrink: 0;
}

.beepboxEditor .pitchShiftMarkerContainer {
	box-sizing: border-box;
	display: flex;
	height: 100%;
	left: 3px;
	right: 3px;
	position: absolute;
	align-items: center;
	pointer-events: none;
}

#secondImage {
	background-image: url(${getLocalStorageItem('customTheme2', '')});
}

.beepboxEditor .pitchShiftMarker {
	width: 0;
	height: 0;
	position: absolute;
}

.beepboxEditor .pitchShiftMarker::before {
	content: "";
	width: 2px;
	height: 20px;
	transform: translate(-50%, -50%);
	position: absolute;
	background: currentColor;
	border-radius: 3px;
}

.beepboxEditor input[type=text], .beepboxEditor input[type=number] {
	font-size: inherit;
	font-weight: inherit;
	font-family: inherit;
	background: transparent;
	text-align: center;
	border: 1px solid ${ColorConfig.inputBoxOutline};
	color: ${ColorConfig.primaryText};
}

.beepboxEditor input[type=text]::selection, .beepboxEditor input[type=number]::selection {
	background-color: ${ColorConfig.textSelection};
	color: ${ColorConfig.primaryText};
}

.beepboxEditor input[type=checkbox] {
  transform: scale(1.5);
}

.beepboxEditor input[type=range] {
	-webkit-appearance: none;
	color: inherit;
	width: 100%;
	height: var(--button-size);
	font-size: inherit;
	margin: 0;
	cursor: pointer;
	background: none;
	touch-action: pan-y;
  position: relative;
}
.beepboxEditor input[type=range]:focus {
	outline: none;
}
.beepboxEditor input[type=range]::-webkit-slider-runnable-track {
	width: 100%;
	height: 6px;
	cursor: pointer;
	background: ${ColorConfig.uiWidgetBackground};
}

.modTarget:hover {
	fill: ${ColorConfig.hoverPreview} !important;
}

.beepboxEditor span.midTick:after {
    content: "";
    display:inline-block;
    position: absolute;
    background: currentColor;
    width: 2%;
    left: 49%;
    height: 0.5em;
    top: 32%;
    z-index: 1;
		pointer-events: none;
}
.beepboxEditor span.modSlider {
	--mod-position: 20%;
	--mod-color: ${ColorConfig.overwritingModSlider};
  --mod-border-radius: 0%;
}
.beepboxEditor span.modSlider:before {
	content: "";
    display:inline-block;
    position: absolute;
    background: var(--mod-color);
    width: 4%;
    left: var(--mod-position);
    height: 0.8em;
    top: 28%;
    z-index: 2;
		transform: translate(-50%, 0%);
		pointer-events: none;
		border: 40%;
		border-radius: var(--mod-border-radius);
}
.beepboxEditor input[type=range]::-webkit-slider-thumb {
	height: var(--button-size);
	width: 6px;
	border-radius: 3px;
	background: currentColor;
	cursor: pointer;
	-webkit-appearance: none;
	margin-top: -10px;
}
.beepboxEditor input[type=range]:focus::-webkit-slider-runnable-track {
	background: ${ColorConfig.uiWidgetFocus};
}
.beepboxEditor input[type=range]::-moz-range-track {
	width: 100%;
	height: 6px;
	cursor: pointer;
	background: ${ColorConfig.uiWidgetBackground};
}
.beepboxEditor input[type=range]:focus::-moz-range-track {
	background: ${ColorConfig.uiWidgetFocus};
}
.beepboxEditor input[type=range]::-moz-range-thumb {
	height: var(--button-size);
	width: 6px;
	border-radius: 3px;
	border: none;
	background: currentColor;
	cursor: pointer;
}
.beepboxEditor input[type=range]::-ms-track {
	width: 100%;
	height: 6px;
	cursor: pointer;
	background: ${ColorConfig.uiWidgetBackground};
	border-color: transparent;
}
.beepboxEditor input[type=range]:focus::-ms-track {
	background: ${ColorConfig.uiWidgetFocus};
}
.beepboxEditor input[type=range]::-ms-thumb {
	height: var(--button-size);
	width: 6px;
	border-radius: 3px;
	background: currentColor;
	cursor: pointer;
}

li.select2-results__option[role=group] > strong:hover {
  background-color: #516fbb;
}

/* wide screen */
@media (min-width: 711px) {
	#beepboxEditorContainer {
		display: table;
	}
	.beepboxEditor {
		flex-direction: row;
	}
	.beepboxEditor:focus-within {
		outline: 3px solid ${ColorConfig.uiWidgetBackground};
	}
	.beepboxEditor .trackAndMuteContainer {
		width: 512px;
	}
	.beepboxEditor .trackSelectBox {
		display: none;
	}
    .beepboxEditor .muteButtonSelectBox {
		display: none;
	}
	.beepboxEditor .play-pause-area {
		display: flex;
		flex-direction: column;
	}
	.beepboxEditor .playback-bar-controls {
		margin: 2px 0;
	}
	.beepboxEditor .playback-volume-controls {
		display: flex;
		flex-direction: row;
		margin: 2px 0;
		align-items: center;
	}
	.beepboxEditor .settings-area {
		width: var(--settings-area-width);
	}
}

/* narrow screen */
@media (max-width: 710px) {
	.beepboxEditor {
		grid-template-columns: minmax(0, 1fr);
		grid-template-rows: min-content 6px min-content min-content;
		grid-template-areas: "pattern-area" "." "track-area" "settings-area";
		grid-row-gap: 0;
	}
	.beepboxEditor .settings-area {
		grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
		grid-template-rows: min-content min-content 1fr min-content;
		grid-template-areas:
			"play-pause-area play-pause-area"
			"menu-area instrument-settings-area"
			"song-settings-area instrument-settings-area"
			"version-area version-area";
		grid-column-gap: 8px;
		margin: 0 4px;
	}
	.beepboxEditor:focus-within {
		outline: none;
	}
	.beepboxEditor .pattern-area {
		max-height: 75vh;
	}
	.beepboxEditor .trackAndMuteContainer {
		overflow-x: auto;
	}
	.beepboxEditor .barScrollBar {
		display: none;
	}
	.beepboxEditor .play-pause-area {
		display: grid;
		grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
		grid-column-gap: 8px;
		margin: 2px 0;
	}
	.beepboxEditor .playback-bar-controls {
		flex-grow: 1;
	}
	.beepboxEditor .playback-volume-controls {
		display: flex;
		flex-direction: row;
		align-items: center;
		flex-grow: 1;
	}
	
	.beepboxEditor .soundIcon {
	  background: ${ColorConfig.editorBackground};
	  display: inline-block;
	  height: 10px;
	  margin-left: 0px;
	  margin-top: 8px;
		position: relative;
		width: 10px;
	}
	.beepboxEditor .soundIcon:before {
	  border-bottom: 6px solid transparent;
	  border-top: 6px solid transparent;
	  border-right: 10px solid ${ColorConfig.editorBackground};
	  content: "";
	  height: 10px;
	  left: 6px;
	  position: absolute;
	  top: -6px;
	  width: 0;
	}
}

`));

    class BarScrollBar {
        constructor(_doc) {
            this._doc = _doc;
            this._editorWidth = 512;
            this._editorHeight = 20;
            this._playhead = SVG.rect("rect", { fill: ColorConfig.playhead, x: 0, y: 0, width: 2, height: this._editorHeight });
            this._notches = SVG.svg({ "pointer-events": "none" });
            this._handle = SVG.rect({ fill: "var(--octave-scrollbar, var(--ui-widget-background))", x: 0, y: 2, width: 10, height: this._editorHeight - 4 });
            this._handleHighlight = SVG.rect({ fill: "none", stroke: ColorConfig.hoverPreview, "stroke-width": 2, "pointer-events": "none", x: 0, y: 1, width: 10, height: this._editorHeight - 2 });
            this._leftHighlight = SVG.path({ fill: ColorConfig.hoverPreview, "pointer-events": "none" });
            this._rightHighlight = SVG.path({ fill: ColorConfig.hoverPreview, "pointer-events": "none" });
            this._renderedPlayhead = -1;
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: pan-y; position: absolute;`, width: this._editorWidth, height: this._editorHeight }, this._notches, this._handle, this._handleHighlight, this._leftHighlight, this._rightHighlight, this._playhead);
            this.container = HTML.div({ class: "barScrollBar", style: "width: 512px; height: 20px; overflow: hidden; position: relative;" }, this._svg);
            this._mouseX = 0;
            this._mouseDown = false;
            this._mouseOver = false;
            this._dragging = false;
            this._renderedNotchCount = -1;
            this._renderedScrollBarPos = -1;
            this.animatePlayhead = () => {
                const playhead = Math.min(512, Math.max(0, (this._notchSpace * this._doc.synth.playhead - 2)));
                if (this._renderedPlayhead != playhead) {
                    this._renderedPlayhead = playhead;
                    this._playhead.setAttribute("x", "" + playhead);
                }
            };
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
                this._updatePreview();
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
                this._updatePreview();
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.clientX || event.pageX) - boundingRect.left;
                this._updatePreview();
                if (this._mouseX >= this._doc.barScrollPos * this._notchSpace && this._mouseX <= (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {
                    this._dragging = true;
                    this._dragStart = this._mouseX;
                }
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = event.touches[0].clientX - boundingRect.left;
                this._updatePreview();
                if (this._mouseX >= this._doc.barScrollPos * this._notchSpace && this._mouseX <= (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {
                    this._dragging = true;
                    this._dragStart = this._mouseX;
                }
            };
            this._whenMouseMoved = (event) => {
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.clientX || event.pageX) - boundingRect.left;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = event.touches[0].clientX - boundingRect.left;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (!this._dragging && this._mouseDown) {
                    if (this._mouseX < (this._doc.barScrollPos + 8) * this._notchSpace) {
                        if (this._doc.barScrollPos > 0)
                            this._doc.barScrollPos--;
                        this._doc.notifier.changed();
                    }
                    else {
                        if (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars)
                            this._doc.barScrollPos++;
                        this._doc.notifier.changed();
                    }
                }
                this._mouseDown = false;
                this._dragging = false;
                this._updatePreview();
            };
            const center = this._editorHeight * 0.5;
            const base = 20;
            const tip = 9;
            const arrowHeight = 6;
            this._leftHighlight.setAttribute("d", `M ${tip} ${center} L ${base} ${center + arrowHeight} L ${base} ${center - arrowHeight} z`);
            this._rightHighlight.setAttribute("d", `M ${this._editorWidth - tip} ${center} L ${this._editorWidth - base} ${center + arrowHeight} L ${this._editorWidth - base} ${center - arrowHeight} z`);
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("mouseover", this._whenMouseOver);
            this.container.addEventListener("mouseout", this._whenMouseOut);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _whenCursorMoved() {
            if (this._dragging) {
                while (this._mouseX - this._dragStart < -this._notchSpace * 0.5) {
                    if (this._doc.barScrollPos > 0) {
                        this._doc.barScrollPos--;
                        this._dragStart -= this._notchSpace;
                        this._doc.notifier.changed();
                    }
                    else {
                        break;
                    }
                }
                while (this._mouseX - this._dragStart > this._notchSpace * 0.5) {
                    if (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {
                        this._doc.barScrollPos++;
                        this._dragStart += this._notchSpace;
                        this._doc.notifier.changed();
                    }
                    else {
                        break;
                    }
                }
            }
            if (this._mouseOver)
                this._updatePreview();
        }
        changePos(offset) {
            while (Math.abs(offset) >= 1) {
                if (offset < 0) {
                    if (this._doc.barScrollPos > 0) {
                        this._doc.barScrollPos--;
                        this._dragStart += this._notchSpace;
                        this._doc.notifier.changed();
                    }
                }
                else {
                    if (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {
                        this._doc.barScrollPos++;
                        this._dragStart += this._notchSpace;
                        this._doc.notifier.changed();
                    }
                }
                offset += (offset > 0) ? -1 : 1;
            }
        }
        _updatePreview() {
            const showHighlight = this._mouseOver && !this._mouseDown;
            let showleftHighlight = false;
            let showRightHighlight = false;
            let showHandleHighlight = false;
            if (showHighlight) {
                if (this._mouseX < this._doc.barScrollPos * this._notchSpace) {
                    showleftHighlight = true;
                }
                else if (this._mouseX > (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {
                    showRightHighlight = true;
                }
                else {
                    showHandleHighlight = true;
                }
            }
            this._leftHighlight.style.visibility = showleftHighlight ? "visible" : "hidden";
            this._rightHighlight.style.visibility = showRightHighlight ? "visible" : "hidden";
            this._handleHighlight.style.visibility = showHandleHighlight ? "visible" : "hidden";
        }
        render() {
            this._notchSpace = (this._editorWidth - 1) / Math.max(this._doc.trackVisibleBars, this._doc.song.barCount);
            const resized = this._renderedNotchCount != this._doc.song.barCount;
            if (resized) {
                this._renderedNotchCount = this._doc.song.barCount;
                while (this._notches.firstChild)
                    this._notches.removeChild(this._notches.firstChild);
                for (let i = 0; i <= this._doc.song.barCount; i++) {
                    const lineHeight = (i % 16 == 0) ? 0 : ((i % 4 == 0) ? this._editorHeight / 8 : this._editorHeight / 3);
                    this._notches.appendChild(SVG.rect({ fill: ColorConfig.uiWidgetBackground, x: i * this._notchSpace - 1, y: lineHeight, width: 2, height: this._editorHeight - lineHeight * 2 }));
                }
            }
            if (resized || this._renderedScrollBarPos != this._doc.barScrollPos) {
                this._renderedScrollBarPos = this._doc.barScrollPos;
                this._handle.setAttribute("x", String(this._notchSpace * this._doc.barScrollPos));
                this._handle.setAttribute("width", String(this._notchSpace * this._doc.trackVisibleBars));
                this._handleHighlight.setAttribute("x", String(this._notchSpace * this._doc.barScrollPos));
                this._handleHighlight.setAttribute("width", String(this._notchSpace * this._doc.trackVisibleBars));
            }
            this._updatePreview();
        }
    }

    function scaleElementsByFactor(array, factor) {
        for (let i = 0; i < array.length; i++) {
            array[i] *= factor;
        }
    }
    function isPowerOf2(n) {
        return !!n && !(n & (n - 1));
    }
    function countBits(n) {
        if (!isPowerOf2(n))
            throw new Error("FFT array length must be a power of 2.");
        return Math.round(Math.log(n) / Math.log(2));
    }
    function reverseIndexBits(array, fullArrayLength) {
        const bitCount = countBits(fullArrayLength);
        if (bitCount > 16)
            throw new Error("FFT array length must not be greater than 2^16.");
        const finalShift = 16 - bitCount;
        for (let i = 0; i < fullArrayLength; i++) {
            let j;
            j = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);
            j = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);
            j = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);
            j = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;
            if (j > i) {
                let temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
    }
    function inverseRealFourierTransform(array, fullArrayLength) {
        const totalPasses = countBits(fullArrayLength);
        if (fullArrayLength < 4)
            throw new Error("FFT array length must be at least 4.");
        for (let pass = totalPasses - 1; pass >= 2; pass--) {
            const subStride = 1 << pass;
            const midSubStride = subStride >> 1;
            const stride = subStride << 1;
            const radiansIncrement = Math.PI * 2.0 / stride;
            const cosIncrement = Math.cos(radiansIncrement);
            const sinIncrement = Math.sin(radiansIncrement);
            const oscillatorMultiplier = 2.0 * cosIncrement;
            for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {
                const startIndexA = startIndex;
                const midIndexA = startIndexA + midSubStride;
                const startIndexB = startIndexA + subStride;
                const midIndexB = startIndexB + midSubStride;
                const stopIndex = startIndexB + subStride;
                const realStartA = array[startIndexA];
                const imagStartB = array[startIndexB];
                array[startIndexA] = realStartA + imagStartB;
                array[midIndexA] *= 2;
                array[startIndexB] = realStartA - imagStartB;
                array[midIndexB] *= 2;
                let c = cosIncrement;
                let s = -sinIncrement;
                let cPrev = 1.0;
                let sPrev = 0.0;
                for (let index = 1; index < midSubStride; index++) {
                    const indexA0 = startIndexA + index;
                    const indexA1 = startIndexB - index;
                    const indexB0 = startIndexB + index;
                    const indexB1 = stopIndex - index;
                    const real0 = array[indexA0];
                    const real1 = array[indexA1];
                    const imag0 = array[indexB0];
                    const imag1 = array[indexB1];
                    const tempA = real0 - real1;
                    const tempB = imag0 + imag1;
                    array[indexA0] = real0 + real1;
                    array[indexA1] = imag1 - imag0;
                    array[indexB0] = tempA * c - tempB * s;
                    array[indexB1] = tempB * c + tempA * s;
                    const cTemp = oscillatorMultiplier * c - cPrev;
                    const sTemp = oscillatorMultiplier * s - sPrev;
                    cPrev = c;
                    sPrev = s;
                    c = cTemp;
                    s = sTemp;
                }
            }
        }
        for (let index = 0; index < fullArrayLength; index += 4) {
            const index1 = index + 1;
            const index2 = index + 2;
            const index3 = index + 3;
            const real0 = array[index];
            const real1 = array[index1] * 2;
            const imag2 = array[index2];
            const imag3 = array[index3] * 2;
            const tempA = real0 + imag2;
            const tempB = real0 - imag2;
            array[index] = tempA + real1;
            array[index1] = tempA - real1;
            array[index2] = tempB + imag3;
            array[index3] = tempB - imag3;
        }
        reverseIndexBits(array, fullArrayLength);
    }

    class Deque {
        constructor() {
            this._capacity = 1;
            this._buffer = [undefined];
            this._mask = 0;
            this._offset = 0;
            this._count = 0;
        }
        pushFront(element) {
            if (this._count >= this._capacity)
                this._expandCapacity();
            this._offset = (this._offset - 1) & this._mask;
            this._buffer[this._offset] = element;
            this._count++;
        }
        pushBack(element) {
            if (this._count >= this._capacity)
                this._expandCapacity();
            this._buffer[(this._offset + this._count) & this._mask] = element;
            this._count++;
        }
        popFront() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            const element = this._buffer[this._offset];
            this._buffer[this._offset] = undefined;
            this._offset = (this._offset + 1) & this._mask;
            this._count--;
            return element;
        }
        popBack() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            this._count--;
            const index = (this._offset + this._count) & this._mask;
            const element = this._buffer[index];
            this._buffer[index] = undefined;
            return element;
        }
        peakFront() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            return this._buffer[this._offset];
        }
        peakBack() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            return this._buffer[(this._offset + this._count - 1) & this._mask];
        }
        count() {
            return this._count;
        }
        set(index, element) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            this._buffer[(this._offset + index) & this._mask] = element;
        }
        get(index) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            return this._buffer[(this._offset + index) & this._mask];
        }
        remove(index) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            if (index <= (this._count >> 1)) {
                while (index > 0) {
                    this.set(index, this.get(index - 1));
                    index--;
                }
                this.popFront();
            }
            else {
                index++;
                while (index < this._count) {
                    this.set(index - 1, this.get(index));
                    index++;
                }
                this.popBack();
            }
        }
        _expandCapacity() {
            if (this._capacity >= 0x40000000)
                throw new Error("Capacity too big.");
            this._capacity = this._capacity << 1;
            const oldBuffer = this._buffer;
            const newBuffer = new Array(this._capacity);
            const size = this._count | 0;
            const offset = this._offset | 0;
            for (let i = 0; i < size; i++) {
                newBuffer[i] = oldBuffer[(offset + i) & this._mask];
            }
            for (let i = size; i < this._capacity; i++) {
                newBuffer[i] = undefined;
            }
            this._offset = 0;
            this._buffer = newBuffer;
            this._mask = this._capacity - 1;
        }
    }

    class EventManager {
        constructor() {
            this.activeEvents = [];
            this.listeners = {};
            this.activeEvents = [];
            this.listeners = {};
        }
        raise(eventType, eventData, extraEventData) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            this.activeEvents.push(eventType);
            for (let i = 0; i < this.listeners[eventType].length; i++) {
                this.listeners[eventType][i](eventData, extraEventData);
            }
            this.activeEvents.pop();
        }
        listen(eventType, callback) {
            if (this.listeners[eventType] == undefined) {
                this.listeners[eventType] = [];
            }
            this.listeners[eventType].push(callback);
        }
        unlisten(eventType, callback) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            const lisen = this.listeners[eventType].indexOf(callback);
            if (lisen != -1) {
                this.listeners[eventType].splice(lisen, 1);
            }
        }
        unlistenAll(eventType) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            this.listeners[eventType] = [];
        }
    }
    const events = new EventManager();

    class FilterCoefficients {
        constructor() {
            this.a = [1.0];
            this.b = [1.0];
            this.order = 0;
        }
        linearGain0thOrder(linearGain) {
            this.b[0] = linearGain;
            this.order = 0;
        }
        lowPass1stOrderButterworth(cornerRadiansPerSample) {
            const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);
            const a0 = 1.0 + g;
            this.a[1] = (1.0 - g) / a0;
            this.b[1] = this.b[0] = 1 / a0;
            this.order = 1;
        }
        lowPass1stOrderSimplified(cornerRadiansPerSample) {
            const g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);
            this.a[1] = g - 1.0;
            this.b[0] = g;
            this.b[1] = 0.0;
            this.order = 1;
        }
        highPass1stOrderButterworth(cornerRadiansPerSample) {
            const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);
            const a0 = 1.0 + g;
            this.a[1] = (1.0 - g) / a0;
            this.b[0] = g / a0;
            this.b[1] = -g / a0;
            this.order = 1;
        }
        highShelf1stOrder(cornerRadiansPerSample, shelfLinearGain) {
            const tan = Math.tan(cornerRadiansPerSample * 0.5);
            const sqrtGain = Math.sqrt(shelfLinearGain);
            const g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);
            const a0 = 1.0;
            this.a[1] = g / a0;
            this.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);
            this.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);
            this.order = 1;
        }
        allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample) {
            const g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);
            this.a[1] = g;
            this.b[0] = g;
            this.b[1] = 1.0;
            this.order = 1;
        }
        allPass1stOrderFractionalDelay(delay) {
            const g = (1.0 - delay) / (1.0 + delay);
            this.a[1] = g;
            this.b[0] = g;
            this.b[1] = 1.0;
            this.order = 1;
        }
        lowPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {
            const alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);
            const cos = Math.cos(cornerRadiansPerSample);
            const a0 = 1.0 + alpha;
            this.a[1] = -2.0 * cos / a0;
            this.a[2] = (1 - alpha) / a0;
            this.b[2] = this.b[0] = (1 - cos) / (2.0 * a0);
            this.b[1] = (1 - cos) / a0;
            this.order = 2;
        }
        lowPass2ndOrderSimplified(cornerRadiansPerSample, peakLinearGain) {
            const g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);
            const filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);
            const feedback = filterResonance + filterResonance / (1.0 - g);
            this.a[1] = 2.0 * g + (g - 1.0) * g * feedback - 2.0;
            this.a[2] = (g - 1.0) * (g - g * feedback - 1.0);
            this.b[0] = g * g;
            this.b[1] = 0;
            this.b[2] = 0;
            this.order = 2;
        }
        highPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {
            const alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);
            const cos = Math.cos(cornerRadiansPerSample);
            const a0 = 1.0 + alpha;
            this.a[1] = -2.0 * cos / a0;
            this.a[2] = (1.0 - alpha) / a0;
            this.b[2] = this.b[0] = (1.0 + cos) / (2.0 * a0);
            this.b[1] = -(1.0 + cos) / a0;
            this.order = 2;
        }
        highShelf2ndOrder(cornerRadiansPerSample, shelfLinearGain, slope) {
            const A = Math.sqrt(shelfLinearGain);
            const c = Math.cos(cornerRadiansPerSample);
            const Aplus = A + 1.0;
            const Aminus = A - 1.0;
            const alpha = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);
            const sqrtA2Alpha = 2.0 * Math.sqrt(A) * alpha;
            const a0 = (Aplus - Aminus * c + sqrtA2Alpha);
            this.a[1] = 2 * (Aminus - Aplus * c) / a0;
            this.a[2] = (Aplus - Aminus * c - sqrtA2Alpha) / a0;
            this.b[0] = A * (Aplus + Aminus * c + sqrtA2Alpha) / a0;
            this.b[1] = -2 * A * (Aminus + Aplus * c) / a0;
            this.b[2] = A * (Aplus + Aminus * c - sqrtA2Alpha) / a0;
            this.order = 2;
        }
        peak2ndOrder(cornerRadiansPerSample, peakLinearGain, bandWidthScale) {
            const sqrtGain = Math.sqrt(peakLinearGain);
            const bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1 / sqrtGain);
            const alpha = Math.tan(bandWidth * 0.5);
            const a0 = 1.0 + alpha / sqrtGain;
            this.b[0] = (1.0 + alpha * sqrtGain) / a0;
            this.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;
            this.b[2] = (1.0 - alpha * sqrtGain) / a0;
            this.a[2] = (1.0 - alpha / sqrtGain) / a0;
            this.order = 2;
        }
    }
    class FrequencyResponse {
        constructor() {
            this.real = 0.0;
            this.imag = 0.0;
            this.denom = 1.0;
        }
        analyze(filter, radiansPerSample) {
            this.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));
        }
        analyzeComplex(filter, real, imag) {
            const a = filter.a;
            const b = filter.b;
            const realZ1 = real;
            const imagZ1 = -imag;
            let realNum = b[0] + b[1] * realZ1;
            let imagNum = b[1] * imagZ1;
            let realDenom = 1.0 + a[1] * realZ1;
            let imagDenom = a[1] * imagZ1;
            let realZ = realZ1;
            let imagZ = imagZ1;
            for (let i = 2; i <= filter.order; i++) {
                const realTemp = realZ * realZ1 - imagZ * imagZ1;
                const imagTemp = realZ * imagZ1 + imagZ * realZ1;
                realZ = realTemp;
                imagZ = imagTemp;
                realNum += b[i] * realZ;
                imagNum += b[i] * imagZ;
                realDenom += a[i] * realZ;
                imagDenom += a[i] * imagZ;
            }
            this.denom = realDenom * realDenom + imagDenom * imagDenom;
            this.real = realNum * realDenom + imagNum * imagDenom;
            this.imag = imagNum * realDenom - realNum * imagDenom;
        }
        magnitude() {
            return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;
        }
        angle() {
            return Math.atan2(this.imag, this.real);
        }
    }
    class DynamicBiquadFilter {
        constructor() {
            this.a1 = 0.0;
            this.a2 = 0.0;
            this.b0 = 1.0;
            this.b1 = 0.0;
            this.b2 = 0.0;
            this.a1Delta = 0.0;
            this.a2Delta = 0.0;
            this.b0Delta = 0.0;
            this.b1Delta = 0.0;
            this.b2Delta = 0.0;
            this.output1 = 0.0;
            this.output2 = 0.0;
            this.useMultiplicativeInputCoefficients = false;
        }
        resetOutput() {
            this.output1 = 0.0;
            this.output2 = 0.0;
        }
        loadCoefficientsWithGradient(start, end, deltaRate, useMultiplicativeInputCoefficients) {
            if (start.order != 2 || end.order != 2)
                throw new Error();
            this.a1 = start.a[1];
            this.a2 = start.a[2];
            this.b0 = start.b[0];
            this.b1 = start.b[1];
            this.b2 = start.b[2];
            this.a1Delta = (end.a[1] - start.a[1]) * deltaRate;
            this.a2Delta = (end.a[2] - start.a[2]) * deltaRate;
            if (useMultiplicativeInputCoefficients) {
                this.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);
                this.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);
                this.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);
            }
            else {
                this.b0Delta = (end.b[0] - start.b[0]) * deltaRate;
                this.b1Delta = (end.b[1] - start.b[1]) * deltaRate;
                this.b2Delta = (end.b[2] - start.b[2]) * deltaRate;
            }
            this.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;
        }
    }
    function warpInfinityToNyquist(radians) {
        return 2.0 * Math.atan(radians * 0.5);
    }

    let _loopType = 1;
    function changeLoopType() {
        if (_loopType < 3) {
            _loopType += 1;
        }
        else {
            _loopType = 1;
        }
    }
    const epsilon = (1.0e-24);
    function clamp(min, max, val) {
        max = max - 1;
        if (val <= max) {
            if (val >= min)
                return val;
            else
                return min;
        }
        else {
            return max;
        }
    }
    function validateRange(min, max, val) {
        if (min <= val && val <= max)
            return val;
        throw new Error(`Value ${val} not in range [${min}, ${max}]`);
    }
    function parseFloatWithDefault(s, defaultValue) {
        let result = parseFloat(s);
        if (Number.isNaN(result))
            result = defaultValue;
        return result;
    }
    function parseIntWithDefault(s, defaultValue) {
        let result = parseInt(s);
        if (Number.isNaN(result))
            result = defaultValue;
        return result;
    }
    function encode32BitNumber(buffer, x) {
        buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);
        buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);
        buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);
        buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);
        buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);
        buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);
    }
    function decode32BitNumber(compressed, charIndex) {
        let x = 0;
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);
        x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);
        return x;
    }
    function encodeUnisonSettings(buffer, v, s, o, e, i) {
        buffer.push(base64IntToCharCode[v]);
        buffer.push(base64IntToCharCode[Number((s > 0))]);
        let cleanS = Math.round(Math.abs(s) * 1000);
        let cleanSDivided = Math.floor(cleanS / 63);
        buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);
        buffer.push(base64IntToCharCode[Number((o > 0))]);
        let cleanO = Math.round(Math.abs(o) * 1000);
        let cleanODivided = Math.floor(cleanO / 63);
        buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);
        buffer.push(base64IntToCharCode[Number((e > 0))]);
        let cleanE = Math.round(Math.abs(e) * 1000);
        buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);
        buffer.push(base64IntToCharCode[Number((i > 0))]);
        let cleanI = Math.round(Math.abs(i) * 1000);
        buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);
    }
    function convertLegacyKeyToKeyAndOctave(rawKeyIndex) {
        let key = clamp(0, Config.keys.length, rawKeyIndex);
        let octave = 0;
        if (rawKeyIndex === 12) {
            key = 0;
            octave = 1;
        }
        else if (rawKeyIndex === 13) {
            key = 6;
            octave = -1;
        }
        else if (rawKeyIndex === 14) {
            key = 0;
            octave = -1;
        }
        else if (rawKeyIndex === 15) {
            key = 5;
            octave = -1;
        }
        return [key, octave];
    }
    const base64IntToCharCode = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];
    const base64CharCodeToInt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];
    class BitFieldReader {
        constructor(source, startIndex, stopIndex) {
            this._bits = [];
            this._readIndex = 0;
            for (let i = startIndex; i < stopIndex; i++) {
                const value = base64CharCodeToInt[source.charCodeAt(i)];
                this._bits.push((value >> 5) & 0x1);
                this._bits.push((value >> 4) & 0x1);
                this._bits.push((value >> 3) & 0x1);
                this._bits.push((value >> 2) & 0x1);
                this._bits.push((value >> 1) & 0x1);
                this._bits.push(value & 0x1);
            }
        }
        read(bitCount) {
            let result = 0;
            while (bitCount > 0) {
                result = result << 1;
                result += this._bits[this._readIndex++];
                bitCount--;
            }
            return result;
        }
        readLongTail(minValue, minBits) {
            let result = minValue;
            let numBits = minBits;
            while (this._bits[this._readIndex++]) {
                result += 1 << numBits;
                numBits++;
            }
            while (numBits > 0) {
                numBits--;
                if (this._bits[this._readIndex++]) {
                    result += 1 << numBits;
                }
            }
            return result;
        }
        readPartDuration() {
            return this.readLongTail(1, 3);
        }
        readLegacyPartDuration() {
            return this.readLongTail(1, 2);
        }
        readPinCount() {
            return this.readLongTail(1, 0);
        }
        readPitchInterval() {
            if (this.read(1)) {
                return -this.readLongTail(1, 3);
            }
            else {
                return this.readLongTail(1, 3);
            }
        }
    }
    class BitFieldWriter {
        constructor() {
            this._index = 0;
            this._bits = [];
        }
        clear() {
            this._index = 0;
        }
        write(bitCount, value) {
            bitCount--;
            while (bitCount >= 0) {
                this._bits[this._index++] = (value >>> bitCount) & 1;
                bitCount--;
            }
        }
        writeLongTail(minValue, minBits, value) {
            if (value < minValue)
                throw new Error("value out of bounds");
            value -= minValue;
            let numBits = minBits;
            while (value >= (1 << numBits)) {
                this._bits[this._index++] = 1;
                value -= 1 << numBits;
                numBits++;
            }
            this._bits[this._index++] = 0;
            while (numBits > 0) {
                numBits--;
                this._bits[this._index++] = (value >>> numBits) & 1;
            }
        }
        writePartDuration(value) {
            this.writeLongTail(1, 3, value);
        }
        writePinCount(value) {
            this.writeLongTail(1, 0, value);
        }
        writePitchInterval(value) {
            if (value < 0) {
                this.write(1, 1);
                this.writeLongTail(1, 3, -value);
            }
            else {
                this.write(1, 0);
                this.writeLongTail(1, 3, value);
            }
        }
        concat(other) {
            for (let i = 0; i < other._index; i++) {
                this._bits[this._index++] = other._bits[i];
            }
        }
        encodeBase64(buffer) {
            for (let i = 0; i < this._index; i += 6) {
                const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];
                buffer.push(base64IntToCharCode[value]);
            }
            return buffer;
        }
        lengthBase64() {
            return Math.ceil(this._index / 6);
        }
    }
    function makeNotePin(interval, time, size) {
        return { interval: interval, time: time, size: size };
    }
    class Note {
        constructor(pitch, start, end, size, fadeout = false) {
            this.pitches = [pitch];
            this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];
            this.start = start;
            this.end = end;
            this.continuesLastPattern = false;
        }
        pickMainInterval() {
            let longestFlatIntervalDuration = 0;
            let mainInterval = 0;
            for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {
                const pinA = this.pins[pinIndex - 1];
                const pinB = this.pins[pinIndex];
                if (pinA.interval == pinB.interval) {
                    const duration = pinB.time - pinA.time;
                    if (longestFlatIntervalDuration < duration) {
                        longestFlatIntervalDuration = duration;
                        mainInterval = pinA.interval;
                    }
                }
            }
            if (longestFlatIntervalDuration == 0) {
                let loudestSize = 0;
                for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {
                    const pin = this.pins[pinIndex];
                    if (loudestSize < pin.size) {
                        loudestSize = pin.size;
                        mainInterval = pin.interval;
                    }
                }
            }
            return mainInterval;
        }
        clone() {
            const newNote = new Note(-1, this.start, this.end, 3);
            newNote.pitches = this.pitches.concat();
            newNote.pins = [];
            for (const pin of this.pins) {
                newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));
            }
            newNote.continuesLastPattern = this.continuesLastPattern;
            return newNote;
        }
        getEndPinIndex(part) {
            let endPinIndex;
            for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {
                if (this.pins[endPinIndex].time + this.start > part)
                    break;
            }
            return endPinIndex;
        }
    }
    class Pattern {
        constructor() {
            this.notes = [];
            this.instruments = [0];
        }
        cloneNotes() {
            const result = [];
            for (const note of this.notes) {
                result.push(note.clone());
            }
            return result;
        }
        reset() {
            this.notes.length = 0;
            this.instruments[0] = 0;
            this.instruments.length = 1;
        }
        toJsonObject(song, channel, isModChannel) {
            const noteArray = [];
            for (const note of this.notes) {
                let instrument = channel.instruments[this.instruments[0]];
                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);
                let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);
                const pointArray = [];
                for (const pin of note.pins) {
                    let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);
                    pointArray.push({
                        "tick": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,
                        "pitchBend": pin.interval,
                        "volume": useVol,
                        "forMod": isModChannel,
                    });
                }
                const noteObject = {
                    "pitches": note.pitches,
                    "points": pointArray,
                };
                if (note.start == 0) {
                    noteObject["continuesLastPattern"] = note.continuesLastPattern;
                }
                noteArray.push(noteObject);
            }
            const patternObject = { "notes": noteArray };
            if (song.patternInstruments) {
                patternObject["instruments"] = this.instruments.map(i => i + 1);
            }
            return patternObject;
        }
        fromJsonObject(patternObject, song, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, jsonFormat = "auto") {
            const format = jsonFormat.toLowerCase();
            if (song.patternInstruments) {
                if (Array.isArray(patternObject["instruments"])) {
                    const instruments = patternObject["instruments"];
                    const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);
                    for (let j = 0; j < instrumentCount; j++) {
                        this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);
                    }
                    this.instruments.length = instrumentCount;
                }
                else {
                    this.instruments[0] = clamp(0, channel.instruments.length, (patternObject["instrument"] | 0) - 1);
                    this.instruments.length = 1;
                }
            }
            if (patternObject["notes"] && patternObject["notes"].length > 0) {
                const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject["notes"].length >>> 0);
                for (let j = 0; j < patternObject["notes"].length; j++) {
                    if (j >= maxNoteCount)
                        break;
                    const noteObject = patternObject["notes"][j];
                    if (!noteObject || !noteObject["pitches"] || !(noteObject["pitches"].length >= 1) || !noteObject["points"] || !(noteObject["points"].length >= 2)) {
                        continue;
                    }
                    const note = new Note(0, 0, 0, 0);
                    note.pitches = [];
                    note.pins = [];
                    for (let k = 0; k < noteObject["pitches"].length; k++) {
                        const pitch = noteObject["pitches"][k] | 0;
                        if (note.pitches.indexOf(pitch) != -1)
                            continue;
                        note.pitches.push(pitch);
                        if (note.pitches.length >= Config.maxChordSize)
                            break;
                    }
                    if (note.pitches.length < 1)
                        continue;
                    let startInterval = 0;
                    let instrument = channel.instruments[this.instruments[0]];
                    let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);
                    for (let k = 0; k < noteObject["points"].length; k++) {
                        const pointObject = noteObject["points"][k];
                        if (pointObject == undefined || pointObject["tick"] == undefined)
                            continue;
                        const interval = (pointObject["pitchBend"] == undefined) ? 0 : (pointObject["pitchBend"] | 0);
                        const time = Math.round((+pointObject["tick"]) * Config.partsPerBeat / importedPartsPerBeat);
                        let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);
                        let size;
                        if (pointObject["volume"] == undefined) {
                            size = volumeCap;
                        }
                        else if (pointObject["forMod"] == undefined) {
                            size = Math.max(0, Math.min(volumeCap, Math.round((pointObject["volume"] | 0) * volumeCap / 100)));
                        }
                        else {
                            size = ((pointObject["forMod"] | 0) > 0) ? Math.round(pointObject["volume"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject["volume"] | 0) * volumeCap / 100)));
                        }
                        if (time > song.beatsPerBar * Config.partsPerBeat)
                            continue;
                        if (note.pins.length == 0) {
                            note.start = time;
                            startInterval = interval;
                        }
                        note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));
                    }
                    if (note.pins.length < 2)
                        continue;
                    note.end = note.pins[note.pins.length - 1].time + note.start;
                    const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;
                    let lowestPitch = maxPitch;
                    let highestPitch = 0;
                    for (let k = 0; k < note.pitches.length; k++) {
                        note.pitches[k] += startInterval;
                        if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {
                            note.pitches.splice(k, 1);
                            k--;
                        }
                        if (note.pitches[k] < lowestPitch)
                            lowestPitch = note.pitches[k];
                        if (note.pitches[k] > highestPitch)
                            highestPitch = note.pitches[k];
                    }
                    if (note.pitches.length < 1)
                        continue;
                    for (let k = 0; k < note.pins.length; k++) {
                        const pin = note.pins[k];
                        if (pin.interval + lowestPitch < 0)
                            pin.interval = -lowestPitch;
                        if (pin.interval + highestPitch > maxPitch)
                            pin.interval = maxPitch - highestPitch;
                        if (k >= 2) {
                            if (pin.interval == note.pins[k - 1].interval &&
                                pin.interval == note.pins[k - 2].interval &&
                                pin.size == note.pins[k - 1].size &&
                                pin.size == note.pins[k - 2].size) {
                                note.pins.splice(k - 1, 1);
                                k--;
                            }
                        }
                    }
                    if (note.start == 0) {
                        note.continuesLastPattern = (noteObject["continuesLastPattern"] === true);
                    }
                    else {
                        note.continuesLastPattern = false;
                    }
                    if (format != "ultrabox" && instrument.modulators[mod] == Config.modulators.dictionary["tempo"].index) {
                        for (const pin of note.pins) {
                            const oldMin = 30;
                            const newMin = 1;
                            const old = pin.size + oldMin;
                            pin.size = old - newMin;
                        }
                    }
                    this.notes.push(note);
                }
            }
        }
    }
    class Operator {
        constructor(index) {
            this.frequency = 4;
            this.amplitude = 0;
            this.waveform = 0;
            this.pulseWidth = 0.5;
            this.reset(index);
        }
        reset(index) {
            this.frequency = 4;
            this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;
            this.waveform = 0;
            this.pulseWidth = 5;
        }
        copy(other) {
            this.frequency = other.frequency;
            this.amplitude = other.amplitude;
            this.waveform = other.waveform;
            this.pulseWidth = other.pulseWidth;
        }
    }
    class CustomAlgorithm {
        constructor() {
            this.name = "";
            this.carrierCount = 0;
            this.modulatedBy = [[], [], [], [], [], []];
            this.associatedCarrier = [];
            this.fromPreset(1);
        }
        set(carriers, modulation) {
            this.reset();
            this.carrierCount = carriers;
            for (let i = 0; i < this.modulatedBy.length; i++) {
                this.modulatedBy[i] = modulation[i];
                if (i < carriers) {
                    this.associatedCarrier[i] = i + 1;
                }
                this.name += (i + 1);
                for (let j = 0; j < modulation[i].length; j++) {
                    this.name += modulation[i][j];
                    if (modulation[i][j] > carriers - 1) {
                        this.associatedCarrier[modulation[i][j] - 1] = i + 1;
                    }
                    this.name += ",";
                }
                if (i < carriers) {
                    this.name += "|";
                }
                else {
                    this.name += ".";
                }
            }
        }
        reset() {
            this.name = "";
            this.carrierCount = 1;
            this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];
            this.associatedCarrier = [1, 1, 1, 1, 1, 1];
        }
        copy(other) {
            this.name = other.name;
            this.carrierCount = other.carrierCount;
            this.modulatedBy = other.modulatedBy;
            this.associatedCarrier = other.associatedCarrier;
        }
        fromPreset(other) {
            this.reset();
            let preset = Config.algorithms6Op[other];
            this.name = preset.name;
            this.carrierCount = preset.carrierCount;
            for (var i = 0; i < preset.modulatedBy.length; i++) {
                this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);
                this.associatedCarrier[i] = preset.associatedCarrier[i];
            }
        }
    }
    class CustomFeedBack {
        constructor() {
            this.name = "";
            this.indices = [[], [], [], [], [], []];
            this.fromPreset(1);
        }
        set(inIndices) {
            this.reset();
            for (let i = 0; i < this.indices.length; i++) {
                this.indices[i] = inIndices[i];
                for (let j = 0; j < inIndices[i].length; j++) {
                    this.name += inIndices[i][j];
                    this.name += ",";
                }
                this.name += ".";
            }
        }
        reset() {
            this.reset;
            this.name = "";
            this.indices = [[1], [], [], [], [], []];
        }
        copy(other) {
            this.name = other.name;
            this.indices = other.indices;
        }
        fromPreset(other) {
            this.reset();
            let preset = Config.feedbacks6Op[other];
            for (var i = 0; i < preset.indices.length; i++) {
                this.indices[i] = Array.from(preset.indices[i]);
                for (let j = 0; j < preset.indices[i].length; j++) {
                    this.name += preset.indices[i][j];
                    this.name += ",";
                }
                this.name += ".";
            }
        }
    }
    class SpectrumWave {
        constructor(isNoiseChannel) {
            this.spectrum = [];
            this.hash = -1;
            this.reset(isNoiseChannel);
        }
        reset(isNoiseChannel) {
            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                if (isNoiseChannel) {
                    this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));
                }
                else {
                    const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;
                    this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;
                }
            }
            this.markCustomWaveDirty();
        }
        markCustomWaveDirty() {
            const hashMult = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;
            let hash = 0;
            for (const point of this.spectrum)
                hash = ((hash * hashMult) + point) >>> 0;
            this.hash = hash;
        }
    }
    class SpectrumWaveState {
        constructor() {
            this.wave = null;
            this._hash = -1;
        }
        getCustomWave(settings, lowestOctave) {
            if (this._hash == settings.hash)
                return this.wave;
            this._hash = settings.hash;
            const waveLength = Config.spectrumNoiseLength;
            if (this.wave == null || this.wave.length != waveLength + 1) {
                this.wave = new Float32Array(waveLength + 1);
            }
            const wave = this.wave;
            for (let i = 0; i < waveLength; i++) {
                wave[i] = 0;
            }
            const highestOctave = 14;
            const falloffRatio = 0.25;
            const pitchTweak = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];
            function controlPointToOctave(point) {
                return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];
            }
            let combinedAmplitude = 1;
            for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {
                const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];
                const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];
                const octave1 = controlPointToOctave(i - 1);
                let octave2 = controlPointToOctave(i);
                if (i >= Config.spectrumControlPoints)
                    octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;
                if (value1 == 0 && value2 == 0)
                    continue;
                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);
            }
            if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {
                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);
            }
            inverseRealFourierTransform(wave, waveLength);
            scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));
            wave[waveLength] = wave[0];
            return wave;
        }
    }
    class HarmonicsWave {
        constructor() {
            this.harmonics = [];
            this.hash = -1;
            this.reset();
        }
        reset() {
            for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                this.harmonics[i] = 0;
            }
            this.harmonics[0] = Config.harmonicsMax;
            this.harmonics[3] = Config.harmonicsMax;
            this.harmonics[6] = Config.harmonicsMax;
            this.markCustomWaveDirty();
        }
        markCustomWaveDirty() {
            const hashMult = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;
            let hash = 0;
            for (const point of this.harmonics)
                hash = ((hash * hashMult) + point) >>> 0;
            this.hash = hash;
        }
    }
    class HarmonicsWaveState {
        constructor() {
            this.wave = null;
            this._hash = -1;
        }
        getCustomWave(settings, instrumentType) {
            if (this._hash == settings.hash && this._generatedForType == instrumentType)
                return this.wave;
            this._hash = settings.hash;
            this._generatedForType = instrumentType;
            const harmonicsRendered = (instrumentType == 7) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;
            const waveLength = Config.harmonicsWavelength;
            const retroWave = getDrumWave(0, null, null);
            if (this.wave == null || this.wave.length != waveLength + 1) {
                this.wave = new Float32Array(waveLength + 1);
            }
            const wave = this.wave;
            for (let i = 0; i < waveLength; i++) {
                wave[i] = 0;
            }
            const overallSlope = -0.25;
            let combinedControlPointAmplitude = 1;
            for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {
                const harmonicFreq = harmonicIndex + 1;
                let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];
                if (harmonicIndex >= Config.harmonicsControlPoints) {
                    controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);
                }
                const normalizedValue = controlValue / Config.harmonicsMax;
                let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);
                if (harmonicIndex < Config.harmonicsControlPoints) {
                    combinedControlPointAmplitude += amplitude;
                }
                amplitude *= Math.pow(harmonicFreq, overallSlope);
                amplitude *= retroWave[harmonicIndex + 589];
                wave[waveLength - harmonicFreq] = amplitude;
            }
            inverseRealFourierTransform(wave, waveLength);
            const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);
            for (let i = 0; i < wave.length; i++)
                wave[i] *= mult;
            performIntegralOld(wave);
            wave[waveLength] = wave[0];
            return wave;
        }
    }
    class FilterControlPoint {
        constructor() {
            this.freq = 0;
            this.gain = Config.filterGainCenter;
            this.type = 2;
        }
        set(freqSetting, gainSetting) {
            this.freq = freqSetting;
            this.gain = gainSetting;
        }
        getHz() {
            return FilterControlPoint.getHzFromSettingValue(this.freq);
        }
        static getHzFromSettingValue(value) {
            return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);
        }
        static getSettingValueFromHz(hz) {
            return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;
        }
        static getRoundedSettingValueFromHz(hz) {
            return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));
        }
        getLinearGain(peakMult = 1.0) {
            const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;
            const neutral = (this.type == 2) ? 0.0 : -0.5;
            const interpolatedPower = neutral + (power - neutral) * peakMult;
            return Math.pow(2.0, interpolatedPower);
        }
        static getRoundedSettingValueFromLinearGain(linearGain) {
            return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));
        }
        toCoefficients(filter, sampleRate, freqMult = 1.0, peakMult = 1.0) {
            const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;
            const linearGain = this.getLinearGain(peakMult);
            switch (this.type) {
                case 0:
                    filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);
                    break;
                case 1:
                    filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);
                    break;
                case 2:
                    filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);
                    break;
                default:
                    throw new Error();
            }
        }
        getVolumeCompensationMult() {
            const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;
            const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;
            switch (this.type) {
                case 0:
                    const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;
                    const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;
                    const warpedOctave = Math.log2(warpedFreq);
                    return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));
                case 1:
                    return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));
                case 2:
                    const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);
                    const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);
                    return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));
                default:
                    throw new Error();
            }
        }
    }
    class FilterSettings {
        constructor() {
            this.controlPoints = [];
            this.controlPointCount = 0;
            this.reset();
        }
        reset() {
            this.controlPointCount = 0;
        }
        addPoint(type, freqSetting, gainSetting) {
            let controlPoint;
            if (this.controlPoints.length <= this.controlPointCount) {
                controlPoint = new FilterControlPoint();
                this.controlPoints[this.controlPointCount] = controlPoint;
            }
            else {
                controlPoint = this.controlPoints[this.controlPointCount];
            }
            this.controlPointCount++;
            controlPoint.type = type;
            controlPoint.set(freqSetting, gainSetting);
        }
        toJsonObject() {
            const filterArray = [];
            for (let i = 0; i < this.controlPointCount; i++) {
                const point = this.controlPoints[i];
                filterArray.push({
                    "type": Config.filterTypeNames[point.type],
                    "cutoffHz": Math.round(point.getHz() * 100) / 100,
                    "linearGain": Math.round(point.getLinearGain() * 10000) / 10000,
                });
            }
            return filterArray;
        }
        fromJsonObject(filterObject) {
            this.controlPoints.length = 0;
            if (filterObject) {
                for (const pointObject of filterObject) {
                    const point = new FilterControlPoint();
                    point.type = Config.filterTypeNames.indexOf(pointObject["type"]);
                    if (point.type == -1)
                        point.type = 2;
                    if (pointObject["cutoffHz"] != undefined) {
                        point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject["cutoffHz"]);
                    }
                    else {
                        point.freq = 0;
                    }
                    if (pointObject["linearGain"] != undefined) {
                        point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject["linearGain"]);
                    }
                    else {
                        point.gain = Config.filterGainCenter;
                    }
                    this.controlPoints.push(point);
                }
            }
            this.controlPointCount = this.controlPoints.length;
        }
        static filtersCanMorph(filterA, filterB) {
            if (filterA.controlPointCount != filterB.controlPointCount)
                return false;
            for (let i = 0; i < filterA.controlPointCount; i++) {
                if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)
                    return false;
            }
            return true;
        }
        static lerpFilters(filterA, filterB, pos) {
            let lerpedFilter = new FilterSettings();
            if (filterA == null) {
                return filterA;
            }
            if (filterB == null) {
                return filterB;
            }
            pos = Math.max(0, Math.min(1, pos));
            if (this.filtersCanMorph(filterA, filterB)) {
                for (let i = 0; i < filterA.controlPointCount; i++) {
                    lerpedFilter.controlPoints[i] = new FilterControlPoint();
                    lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;
                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;
                    lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;
                }
                lerpedFilter.controlPointCount = filterA.controlPointCount;
                return lerpedFilter;
            }
            else {
                return (pos >= 1) ? filterB : filterA;
            }
        }
        convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyEnv) {
            this.reset();
            const legacyFilterCutoffMaxHz = 8000;
            const legacyFilterMax = 0.95;
            const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;
            const legacyFilterMaxResonance = 0.95;
            const legacyFilterCutoffRange = 11;
            const legacyFilterResonanceRange = 8;
            const resonant = (legacyResonanceSetting > 1);
            const firstOrder = (legacyResonanceSetting == 0);
            const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);
            const envDecays = (legacyEnv.type == 3 || legacyEnv.type == 4 || legacyEnv.type == 8 || legacyEnv.type == 0);
            const standardSampleRate = 48000;
            const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);
            const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);
            if (legacyEnv.type == 1 && !resonant && cutoffAtMax) ;
            else if (firstOrder) {
                const extraOctaves = 3.5;
                const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);
                const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);
                const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);
                const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass1stOrderSimplified(legacyRadians);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, finalRadians);
                const legacyFilterGainAtNewRadians = response.magnitude();
                let logGain = Math.log2(legacyFilterGainAtNewRadians);
                logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;
                if (envDecays)
                    logGain = Math.min(logGain, -1.0);
                const convertedGain = Math.pow(2.0, logGain);
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            else {
                const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));
                const invertedGain = 0.5 / intendedGain;
                const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;
                const freqRatio = legacyRadians / maxRadians;
                const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);
                const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;
                let curvedHz;
                if (envDecays) {
                    curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);
                }
                else {
                    curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                }
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                let legacyFilterGain;
                if (envDecays) {
                    legacyFilterGain = intendedGain;
                }
                else {
                    const legacyFilter = new FilterCoefficients();
                    legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);
                    const response = new FrequencyResponse();
                    response.analyze(legacyFilter, curvedRadians);
                    legacyFilterGain = response.magnitude();
                }
                if (!resonant)
                    legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            this.controlPoints.length = this.controlPointCount;
        }
        convertLegacySettingsForSynth(legacyCutoffSetting, legacyResonanceSetting, allowFirstOrder = false) {
            this.reset();
            const legacyFilterCutoffMaxHz = 8000;
            const legacyFilterMax = 0.95;
            const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;
            const legacyFilterMaxResonance = 0.95;
            const legacyFilterCutoffRange = 11;
            const legacyFilterResonanceRange = 8;
            const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);
            const standardSampleRate = 48000;
            const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);
            const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);
            if (firstOrder) {
                const extraOctaves = 3.5;
                const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);
                const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);
                const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);
                const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass1stOrderSimplified(legacyRadians);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, finalRadians);
                const legacyFilterGainAtNewRadians = response.magnitude();
                let logGain = Math.log2(legacyFilterGainAtNewRadians);
                logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;
                const convertedGain = Math.pow(2.0, logGain);
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            else {
                const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));
                const invertedGain = 0.5 / intendedGain;
                const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;
                const freqRatio = legacyRadians / maxRadians;
                const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);
                const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;
                let curvedHz;
                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);
                let legacyFilterGain;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, curvedRadians);
                legacyFilterGain = response.magnitude();
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
        }
    }
    class EnvelopeSettings {
        constructor() {
            this.target = 0;
            this.index = 0;
            this.envelope = 0;
            this.reset();
        }
        reset() {
            this.target = 0;
            this.index = 0;
            this.envelope = 0;
        }
        toJsonObject() {
            const envelopeObject = {
                "target": Config.instrumentAutomationTargets[this.target].name,
                "envelope": Config.envelopes[this.envelope].name,
            };
            if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {
                envelopeObject["index"] = this.index;
            }
            return envelopeObject;
        }
        fromJsonObject(envelopeObject) {
            this.reset();
            let target = Config.instrumentAutomationTargets.dictionary[envelopeObject["target"]];
            if (target == null)
                target = Config.instrumentAutomationTargets.dictionary["noteVolume"];
            this.target = target.index;
            let envelope = Config.envelopes.dictionary[envelopeObject["envelope"]];
            if (envelope == null)
                envelope = Config.envelopes.dictionary["none"];
            this.envelope = envelope.index;
            if (envelopeObject["index"] != undefined) {
                this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject["index"] | 0);
            }
            else {
                this.index = 0;
            }
        }
    }
    class Instrument {
        constructor(isNoiseChannel, isModChannel) {
            this.type = 0;
            this.preset = 0;
            this.chipWave = 2;
            this.isUsingAdvancedLoopControls = false;
            this.chipWaveLoopStart = 0;
            this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
            this.chipWaveLoopMode = 0;
            this.chipWavePlayBackwards = false;
            this.chipWaveStartOffset = 0;
            this.chipNoise = 1;
            this.eqFilter = new FilterSettings();
            this.eqFilterType = false;
            this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.eqFilterSimplePeak = 0;
            this.noteFilter = new FilterSettings();
            this.noteFilterType = false;
            this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.noteFilterSimplePeak = 0;
            this.eqSubFilters = [];
            this.noteSubFilters = [];
            this.envelopes = [];
            this.fadeIn = 0;
            this.fadeOut = Config.fadeOutNeutral;
            this.envelopeCount = 0;
            this.transition = Config.transitions.dictionary["normal"].index;
            this.pitchShift = 0;
            this.detune = 0;
            this.vibrato = 0;
            this.interval = 0;
            this.vibratoDepth = 0;
            this.vibratoSpeed = 10;
            this.vibratoDelay = 0;
            this.vibratoType = 0;
            this.envelopeSpeed = 12;
            this.discreteEnvelope = false;
            this.unison = 0;
            this.unisonVoices = 1;
            this.unisonSpread = 0.0;
            this.unisonOffset = 0.0;
            this.unisonExpression = 1.4;
            this.unisonSign = 1.0;
            this.effects = 0;
            this.chord = 1;
            this.volume = 0;
            this.pan = Config.panCenter;
            this.panDelay = 10;
            this.arpeggioSpeed = 12;
            this.fastTwoNoteArp = false;
            this.legacyTieOver = false;
            this.clicklessTransition = false;
            this.aliases = false;
            this.pulseWidth = Config.pulseWidthRange;
            this.decimalOffset = 0;
            this.supersawDynamism = Config.supersawDynamismMax;
            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);
            this.supersawShape = 0;
            this.stringSustain = 10;
            this.stringSustainType = 1;
            this.distortion = 0;
            this.ringModulation = 0;
            this.ringModulationHz = 0;
            this.rmWaveformIndex = 0;
            this.rmPulseWidth = 0;
            this.bitcrusherFreq = 0;
            this.bitcrusherQuantization = 0;
            this.chorus = 0;
            this.reverb = 0;
            this.echoSustain = 0;
            this.echoDelay = 0;
            this.phaserFreq = 0;
            this.phaserMix = Config.phaserMixRange - 1;
            this.phaserFeedback = 0;
            this.phaserStages = 2;
            this.algorithm = 0;
            this.feedbackType = 0;
            this.algorithm6Op = 1;
            this.feedbackType6Op = 1;
            this.customAlgorithm = new CustomAlgorithm();
            this.customFeedbackType = new CustomFeedBack();
            this.feedbackAmplitude = 0;
            this.customChipWave = new Float32Array(64);
            this.customChipWaveIntegral = new Float32Array(65);
            this.operators = [];
            this.harmonicsWave = new HarmonicsWave();
            this.drumsetEnvelopes = [];
            this.drumsetSpectrumWaves = [];
            this.modChannels = [];
            this.modInstruments = [];
            this.modulators = [];
            this.modFilterTypes = [];
            this.invalidModulators = [];
            if (isModChannel) {
                for (let mod = 0; mod < Config.modCount; mod++) {
                    this.modChannels.push(-2);
                    this.modInstruments.push(0);
                    this.modulators.push(Config.modulators.dictionary["none"].index);
                }
            }
            this.spectrumWave = new SpectrumWave(isNoiseChannel);
            for (let i = 0; i < Config.operatorCount + 2; i++) {
                this.operators[i] = new Operator(i);
            }
            for (let i = 0; i < Config.drumCount; i++) {
                this.drumsetEnvelopes[i] = Config.envelopes.dictionary["twang 2"].index;
                this.drumsetSpectrumWaves[i] = new SpectrumWave(true);
            }
            for (let i = 0; i < 64; i++) {
                this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));
            }
            let sum = 0.0;
            for (let i = 0; i < this.customChipWave.length; i++) {
                sum += this.customChipWave[i];
            }
            const average = sum / this.customChipWave.length;
            let cumulative = 0;
            let wavePrev = 0;
            for (let i = 0; i < this.customChipWave.length; i++) {
                cumulative += wavePrev;
                wavePrev = this.customChipWave[i] - average;
                this.customChipWaveIntegral[i] = cumulative;
            }
            this.customChipWaveIntegral[64] = 0.0;
        }
        setTypeAndReset(type, isNoiseChannel, isModChannel) {
            if (isModChannel)
                type = 10;
            this.type = type;
            this.preset = type;
            this.volume = 0;
            this.effects = (1 << 2);
            this.chorus = Config.chorusRange - 1;
            this.reverb = 0;
            this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);
            this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);
            this.eqFilter.reset();
            this.eqFilterType = false;
            this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.eqFilterSimplePeak = 0;
            for (let i = 0; i < Config.filterMorphCount; i++) {
                this.eqSubFilters[i] = null;
                this.noteSubFilters[i] = null;
            }
            this.noteFilter.reset();
            this.noteFilterType = false;
            this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.noteFilterSimplePeak = 0;
            this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);
            this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5);
            this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);
            this.ringModulation = 0;
            this.ringModulationHz = 0;
            this.rmPulseWidth = 0;
            this.rmWaveformIndex = 0;
            this.phaserFreq = 0;
            this.phaserFeedback = 0;
            this.phaserStages = 2;
            this.phaserMix = Config.phaserMixRange - 1;
            this.pan = Config.panCenter;
            this.panDelay = 10;
            this.pitchShift = Config.pitchShiftCenter;
            this.detune = Config.detuneCenter;
            this.vibrato = 0;
            this.unison = 0;
            this.stringSustain = 10;
            this.stringSustainType = Config.enableAcousticSustain ? 1 : 0;
            this.clicklessTransition = false;
            this.arpeggioSpeed = 12;
            this.envelopeSpeed = 12;
            this.discreteEnvelope = false;
            this.legacyTieOver = false;
            this.aliases = false;
            this.fadeIn = 0;
            this.fadeOut = Config.fadeOutNeutral;
            this.transition = Config.transitions.dictionary["normal"].index;
            this.envelopeCount = 0;
            switch (type) {
                case 0:
                    this.chipWave = 2;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    this.isUsingAdvancedLoopControls = false;
                    this.chipWaveLoopStart = 0;
                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
                    this.chipWaveLoopMode = 0;
                    this.chipWavePlayBackwards = false;
                    this.chipWaveStartOffset = 0;
                    break;
                case 9:
                    this.chipWave = 2;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    for (let i = 0; i < 64; i++) {
                        this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));
                    }
                    let sum = 0.0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        sum += this.customChipWave[i];
                    }
                    const average = sum / this.customChipWave.length;
                    let cumulative = 0;
                    let wavePrev = 0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        cumulative += wavePrev;
                        wavePrev = this.customChipWave[i] - average;
                        this.customChipWaveIntegral[i] = cumulative;
                    }
                    this.customChipWaveIntegral[64] = 0.0;
                    break;
                case 1:
                    this.chord = Config.chords.dictionary["custom interval"].index;
                    this.algorithm = 0;
                    this.feedbackType = 0;
                    this.feedbackAmplitude = 0;
                    for (let i = 0; i < this.operators.length; i++) {
                        this.operators[i].reset(i);
                    }
                    break;
                case 11:
                    this.transition = 1;
                    this.vibrato = 0;
                    this.effects = 1;
                    this.chord = 3;
                    this.algorithm = 0;
                    this.feedbackType = 0;
                    this.algorithm6Op = 1;
                    this.feedbackType6Op = 1;
                    this.customAlgorithm.fromPreset(1);
                    this.feedbackAmplitude = 0;
                    for (let i = 0; i < this.operators.length; i++) {
                        this.operators[i].reset(i);
                    }
                    break;
                case 2:
                    this.chipNoise = 1;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    break;
                case 3:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    this.spectrumWave.reset(isNoiseChannel);
                    break;
                case 4:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    for (let i = 0; i < Config.drumCount; i++) {
                        this.drumsetEnvelopes[i] = Config.envelopes.dictionary["twang 2"].index;
                        if (this.drumsetSpectrumWaves[i] == undefined) {
                            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);
                        }
                        this.drumsetSpectrumWaves[i].reset(isNoiseChannel);
                    }
                    break;
                case 5:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    this.harmonicsWave.reset();
                    break;
                case 6:
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    this.pulseWidth = Config.pulseWidthRange;
                    this.decimalOffset = 0;
                    break;
                case 7:
                    this.chord = Config.chords.dictionary["strum"].index;
                    this.harmonicsWave.reset();
                    break;
                case 10:
                    this.transition = 0;
                    this.vibrato = 0;
                    this.interval = 0;
                    this.effects = 0;
                    this.chord = 0;
                    this.modChannels = [];
                    this.modInstruments = [];
                    this.modulators = [];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        this.modChannels.push(-2);
                        this.modInstruments.push(0);
                        this.modulators.push(Config.modulators.dictionary["none"].index);
                        this.invalidModulators[mod] = false;
                        this.modFilterTypes[mod] = 0;
                    }
                    break;
                case 8:
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    this.supersawDynamism = Config.supersawDynamismMax;
                    this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);
                    this.supersawShape = 0;
                    this.pulseWidth = Config.pulseWidthRange - 1;
                    this.decimalOffset = 0;
                    break;
                default:
                    throw new Error("Unrecognized instrument type: " + type);
            }
            if (this.chord != Config.chords.dictionary["simultaneous"].index) {
                this.effects = (this.effects | (1 << 11));
            }
        }
        convertLegacySettings(legacySettings, forceSimpleFilter) {
            let legacyCutoffSetting = legacySettings.filterCutoff;
            let legacyResonanceSetting = legacySettings.filterResonance;
            let legacyFilterEnv = legacySettings.filterEnvelope;
            let legacyPulseEnv = legacySettings.pulseEnvelope;
            let legacyOperatorEnvelopes = legacySettings.operatorEnvelopes;
            let legacyFeedbackEnv = legacySettings.feedbackEnvelope;
            if (legacyCutoffSetting == undefined)
                legacyCutoffSetting = (this.type == 0) ? 6 : 10;
            if (legacyResonanceSetting == undefined)
                legacyResonanceSetting = 0;
            if (legacyFilterEnv == undefined)
                legacyFilterEnv = Config.envelopes.dictionary["none"];
            if (legacyPulseEnv == undefined)
                legacyPulseEnv = Config.envelopes.dictionary[(this.type == 6) ? "twang 2" : "none"];
            if (legacyOperatorEnvelopes == undefined)
                legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == 1) ? "note size" : "none"], Config.envelopes.dictionary["none"], Config.envelopes.dictionary["none"], Config.envelopes.dictionary["none"]];
            if (legacyFeedbackEnv == undefined)
                legacyFeedbackEnv = Config.envelopes.dictionary["none"];
            const legacyFilterCutoffRange = 11;
            const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);
            if (cutoffAtMax && legacyFilterEnv.type == 2)
                legacyFilterEnv = Config.envelopes.dictionary["none"];
            const carrierCount = Config.algorithms[this.algorithm].carrierCount;
            let noCarriersControlledByNoteSize = true;
            let allCarriersControlledByNoteSize = true;
            let noteSizeControlsSomethingElse = (legacyFilterEnv.type == 0) || (legacyPulseEnv.type == 0);
            if (this.type == 1 || this.type == 11) {
                noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == 0);
                for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {
                    if (i < carrierCount) {
                        if (legacyOperatorEnvelopes[i].type != 0) {
                            allCarriersControlledByNoteSize = false;
                        }
                        else {
                            noCarriersControlledByNoteSize = false;
                        }
                    }
                    else {
                        noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == 0);
                    }
                }
            }
            this.envelopeCount = 0;
            if (this.type == 1 || this.type == 11) {
                if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteVolume"].index, 0, Config.envelopes.dictionary["note size"].index);
                }
                else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["none"].index, 0, Config.envelopes.dictionary["note size"].index);
                }
            }
            if (legacyFilterEnv.type == 1) {
                this.noteFilter.reset();
                this.noteFilterType = false;
                this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);
                this.effects &= ~(1 << 5);
                if (forceSimpleFilter || this.eqFilterType) {
                    this.eqFilterType = true;
                    this.eqFilterSimpleCut = legacyCutoffSetting;
                    this.eqFilterSimplePeak = legacyResonanceSetting;
                }
            }
            else {
                this.eqFilter.reset();
                this.eqFilterType = false;
                this.noteFilterType = false;
                this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);
                this.effects |= 1 << 5;
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteFilterAllFreqs"].index, 0, legacyFilterEnv.index);
                if (forceSimpleFilter || this.noteFilterType) {
                    this.noteFilterType = true;
                    this.noteFilterSimpleCut = legacyCutoffSetting;
                    this.noteFilterSimplePeak = legacyResonanceSetting;
                }
            }
            if (legacyPulseEnv.type != 1) {
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["pulseWidth"].index, 0, legacyPulseEnv.index);
            }
            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {
                if (i < carrierCount && allCarriersControlledByNoteSize)
                    continue;
                if (legacyOperatorEnvelopes[i].type != 1) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["operatorAmplitude"].index, i, legacyOperatorEnvelopes[i].index);
                }
            }
            if (legacyFeedbackEnv.type != 1) {
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["feedbackAmplitude"].index, 0, legacyFeedbackEnv.index);
            }
        }
        toJsonObject() {
            const instrumentObject = {
                "type": Config.instrumentTypeNames[this.type],
                "volume": this.volume,
                "eqFilter": this.eqFilter.toJsonObject(),
                "eqFilterType": this.eqFilterType,
                "eqSimpleCut": this.eqFilterSimpleCut,
                "eqSimplePeak": this.eqFilterSimplePeak,
                "envelopeSpeed": this.envelopeSpeed,
                "discreteEnvelope": this.discreteEnvelope
            };
            if (this.preset != this.type) {
                instrumentObject["preset"] = this.preset;
            }
            for (let i = 0; i < Config.filterMorphCount; i++) {
                if (this.eqSubFilters[i] != null)
                    instrumentObject["eqSubFilters" + i] = this.eqSubFilters[i].toJsonObject();
            }
            const effects = [];
            for (const effect of Config.effectOrder) {
                if (this.effects & (1 << effect)) {
                    effects.push(Config.effectNames[effect]);
                }
            }
            instrumentObject["effects"] = effects;
            if (effectsIncludeTransition(this.effects)) {
                instrumentObject["transition"] = Config.transitions[this.transition].name;
                instrumentObject["clicklessTransition"] = this.clicklessTransition;
            }
            if (effectsIncludeChord(this.effects)) {
                instrumentObject["chord"] = this.getChord().name;
                instrumentObject["fastTwoNoteArp"] = this.fastTwoNoteArp;
                instrumentObject["arpeggioSpeed"] = this.arpeggioSpeed;
            }
            if (effectsIncludePitchShift(this.effects)) {
                instrumentObject["pitchShiftSemitones"] = this.pitchShift;
            }
            if (effectsIncludeDetune(this.effects)) {
                instrumentObject["detuneCents"] = Synth.detuneToCents(this.detune);
            }
            if (effectsIncludeVibrato(this.effects)) {
                if (this.vibrato == -1) {
                    this.vibrato = 5;
                }
                if (this.vibrato != 5) {
                    instrumentObject["vibrato"] = Config.vibratos[this.vibrato].name;
                }
                else {
                    instrumentObject["vibrato"] = "custom";
                }
                instrumentObject["vibratoDepth"] = this.vibratoDepth;
                instrumentObject["vibratoDelay"] = this.vibratoDelay;
                instrumentObject["vibratoSpeed"] = this.vibratoSpeed;
                instrumentObject["vibratoType"] = this.vibratoType;
            }
            if (effectsIncludeNoteFilter(this.effects)) {
                instrumentObject["noteFilterType"] = this.noteFilterType;
                instrumentObject["noteSimpleCut"] = this.noteFilterSimpleCut;
                instrumentObject["noteSimplePeak"] = this.noteFilterSimplePeak;
                instrumentObject["noteFilter"] = this.noteFilter.toJsonObject();
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (this.noteSubFilters[i] != null)
                        instrumentObject["noteSubFilters" + i] = this.noteSubFilters[i].toJsonObject();
                }
            }
            if (effectsIncludeDistortion(this.effects)) {
                instrumentObject["distortion"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));
                instrumentObject["aliases"] = this.aliases;
            }
            if (effectsIncludeBitcrusher(this.effects)) {
                instrumentObject["bitcrusherOctave"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;
                instrumentObject["bitcrusherQuantization"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));
            }
            if (effectsIncludeRM(this.effects)) {
                instrumentObject["ringMod"] = Math.round(100 * this.ringModulation / (Config.ringModRange - 1));
                instrumentObject["ringModHz"] = Math.round(100 * this.ringModulationHz / (Config.ringModHzRange - 1));
                instrumentObject["rmWaveformIndex"] = this.rmWaveformIndex;
                instrumentObject["rmPulseWidth"] = Math.round(100 * this.rmPulseWidth / (Config.pulseWidthRange - 1));
            }
            if (effectsIncludePhaser(this.effects)) {
                instrumentObject["phaserMix"] = Math.round(100 * this.phaserMix / (Config.phaserMixRange - 1));
                instrumentObject["phaserFreq"] = Math.round(100 * this.phaserFreq / (Config.phaserFreqRange - 1));
                instrumentObject["phaserFeedback"] = Math.round(100 * this.phaserFeedback / (Config.phaserFeedbackRange - 1));
                instrumentObject["phaserStages"] = Math.round(100 * this.phaserStages / (Config.phaserMaxStages - 1));
            }
            if (effectsIncludePanning(this.effects)) {
                instrumentObject["pan"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);
                instrumentObject["panDelay"] = this.panDelay;
            }
            if (effectsIncludeChorus(this.effects)) {
                instrumentObject["chorus"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));
            }
            if (effectsIncludeEcho(this.effects)) {
                instrumentObject["echoSustain"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));
                instrumentObject["echoDelayBeats"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;
            }
            if (effectsIncludeReverb(this.effects)) {
                instrumentObject["reverb"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));
            }
            if (this.type != 4) {
                instrumentObject["fadeInSeconds"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;
                instrumentObject["fadeOutTicks"] = Synth.fadeOutSettingToTicks(this.fadeOut);
            }
            if (this.type == 5 || this.type == 7) {
                instrumentObject["harmonics"] = [];
                for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                    instrumentObject["harmonics"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);
                }
            }
            if (this.type == 2) {
                instrumentObject["wave"] = Config.chipNoises[this.chipNoise].name;
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
            }
            else if (this.type == 3) {
                instrumentObject["spectrum"] = [];
                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                    instrumentObject["spectrum"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);
                }
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
            }
            else if (this.type == 4) {
                instrumentObject["drums"] = [];
                for (let j = 0; j < Config.drumCount; j++) {
                    const spectrum = [];
                    for (let i = 0; i < Config.spectrumControlPoints; i++) {
                        spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);
                    }
                    instrumentObject["drums"][j] = {
                        "filterEnvelope": this.getDrumsetEnvelope(j).name,
                        "spectrum": spectrum,
                    };
                }
            }
            else if (this.type == 0) {
                instrumentObject["wave"] = Config.chipWaves[this.chipWave].name;
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
                instrumentObject["isUsingAdvancedLoopControls"] = this.isUsingAdvancedLoopControls;
                instrumentObject["chipWaveLoopStart"] = this.chipWaveLoopStart;
                instrumentObject["chipWaveLoopEnd"] = this.chipWaveLoopEnd;
                instrumentObject["chipWaveLoopMode"] = this.chipWaveLoopMode;
                instrumentObject["chipWavePlayBackwards"] = this.chipWavePlayBackwards;
                instrumentObject["chipWaveStartOffset"] = this.chipWaveStartOffset;
            }
            else if (this.type == 6) {
                instrumentObject["pulseWidth"] = this.pulseWidth;
                instrumentObject["decimalOffset"] = this.decimalOffset;
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
            }
            else if (this.type == 8) {
                instrumentObject["pulseWidth"] = this.pulseWidth;
                instrumentObject["decimalOffset"] = this.decimalOffset;
                instrumentObject["dynamism"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);
                instrumentObject["spread"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);
                instrumentObject["shape"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);
            }
            else if (this.type == 7) {
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
                instrumentObject["stringSustain"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));
                if (Config.enableAcousticSustain) {
                    instrumentObject["stringSustainType"] = Config.sustainTypeNames[this.stringSustainType];
                }
            }
            else if (this.type == 5) {
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
            }
            else if (this.type == 1 || this.type == 11) {
                const operatorArray = [];
                for (const operator of this.operators) {
                    operatorArray.push({
                        "frequency": Config.operatorFrequencies[operator.frequency].name,
                        "amplitude": operator.amplitude,
                        "waveform": Config.operatorWaves[operator.waveform].name,
                        "pulseWidth": operator.pulseWidth,
                    });
                }
                if (this.type == 1) {
                    instrumentObject["algorithm"] = Config.algorithms[this.algorithm].name;
                    instrumentObject["feedbackType"] = Config.feedbacks[this.feedbackType].name;
                    instrumentObject["feedbackAmplitude"] = this.feedbackAmplitude;
                    instrumentObject["operators"] = operatorArray;
                }
                else {
                    instrumentObject["algorithm"] = Config.algorithms6Op[this.algorithm6Op].name;
                    instrumentObject["feedbackType"] = Config.feedbacks6Op[this.feedbackType6Op].name;
                    instrumentObject["feedbackAmplitude"] = this.feedbackAmplitude;
                    if (this.algorithm6Op == 0) {
                        const customAlgorithm = {};
                        customAlgorithm["mods"] = this.customAlgorithm.modulatedBy;
                        customAlgorithm["carrierCount"] = this.customAlgorithm.carrierCount;
                        instrumentObject["customAlgorithm"] = customAlgorithm;
                    }
                    if (this.feedbackType6Op == 0) {
                        const customFeedback = {};
                        customFeedback["mods"] = this.customFeedbackType.indices;
                        instrumentObject["customFeedback"] = customFeedback;
                    }
                    instrumentObject["operators"] = operatorArray;
                }
            }
            else if (this.type == 9) {
                instrumentObject["wave"] = Config.chipWaves[this.chipWave].name;
                instrumentObject["unison"] = this.unison == Config.unisons.length ? "custom" : Config.unisons[this.unison].name;
                if (this.unison == Config.unisons.length) {
                    instrumentObject["unisonVoices"] = this.unisonVoices;
                    instrumentObject["unisonSpread"] = this.unisonSpread;
                    instrumentObject["unisonOffset"] = this.unisonOffset;
                    instrumentObject["unisonExpression"] = this.unisonExpression;
                    instrumentObject["unisonSign"] = this.unisonSign;
                }
                instrumentObject["customChipWave"] = new Float64Array(64);
                instrumentObject["customChipWaveIntegral"] = new Float64Array(65);
                for (let i = 0; i < this.customChipWave.length; i++) {
                    instrumentObject["customChipWave"][i] = this.customChipWave[i];
                }
            }
            else if (this.type == 10) {
                instrumentObject["modChannels"] = [];
                instrumentObject["modInstruments"] = [];
                instrumentObject["modSettings"] = [];
                instrumentObject["modFilterTypes"] = [];
                for (let mod = 0; mod < Config.modCount; mod++) {
                    instrumentObject["modChannels"][mod] = this.modChannels[mod];
                    instrumentObject["modInstruments"][mod] = this.modInstruments[mod];
                    instrumentObject["modSettings"][mod] = this.modulators[mod];
                    instrumentObject["modFilterTypes"][mod] = this.modFilterTypes[mod];
                }
            }
            else {
                throw new Error("Unrecognized instrument type");
            }
            const envelopes = [];
            for (let i = 0; i < this.envelopeCount; i++) {
                envelopes.push(this.envelopes[i].toJsonObject());
            }
            instrumentObject["envelopes"] = envelopes;
            return instrumentObject;
        }
        fromJsonObject(instrumentObject, isNoiseChannel, isModChannel, useSlowerRhythm, useFastTwoNoteArp, legacyGlobalReverb = 0, jsonFormat = Config.jsonFormat) {
            if (instrumentObject == undefined)
                instrumentObject = {};
            const format = jsonFormat.toLowerCase();
            let type = Config.instrumentTypeNames.indexOf(instrumentObject["type"]);
            if ((format == "synthbox") && (instrumentObject["type"] == "FM"))
                type = Config.instrumentTypeNames.indexOf("FM6op");
            if (type == -1)
                type = isModChannel ? 10 : (isNoiseChannel ? 2 : 0);
            this.setTypeAndReset(type, isNoiseChannel, isModChannel);
            this.effects &= ~(1 << 2);
            if (instrumentObject["preset"] != undefined) {
                this.preset = instrumentObject["preset"] >>> 0;
            }
            if (instrumentObject["volume"] != undefined) {
                if (format == "jummbox" || format == "midbox" || format == "synthbox" || format == "goldbox" || format == "paandorasbox" || format == "ultrabox") {
                    this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject["volume"] | 0);
                }
                else {
                    this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject["volume"] | 0) / 20)) * 25.0 / 7.0);
                }
            }
            else {
                this.volume = 0;
            }
            if (instrumentObject["envelopeSpeed"] != undefined) {
                this.envelopeSpeed = clamp(0, Config.modulators.dictionary["envelope speed"].maxRawVol + 1, instrumentObject["envelopeSpeed"] | 0);
            }
            else {
                this.envelopeSpeed = 12;
            }
            if (instrumentObject["discreteEnvelope"] != undefined) {
                this.discreteEnvelope = instrumentObject["discreteEnvelope"];
            }
            else {
                this.discreteEnvelope = false;
            }
            if (Array.isArray(instrumentObject["effects"])) {
                let effects = 0;
                for (let i = 0; i < instrumentObject["effects"].length; i++) {
                    effects = effects | (1 << Config.effectNames.indexOf(instrumentObject["effects"][i]));
                }
                this.effects = (effects & ((1 << 14) - 1));
            }
            else {
                const legacyEffectsNames = ["none", "reverb", "chorus", "chorus & reverb"];
                this.effects = legacyEffectsNames.indexOf(instrumentObject["effects"]);
                if (this.effects == -1)
                    this.effects = (this.type == 2) ? 0 : 1;
            }
            this.transition = Config.transitions.dictionary["normal"].index;
            const transitionProperty = instrumentObject["transition"] || instrumentObject["envelope"];
            if (transitionProperty != undefined) {
                let transition = Config.transitions.dictionary[transitionProperty];
                if (instrumentObject["fadeInSeconds"] == undefined || instrumentObject["fadeOutTicks"] == undefined) {
                    const legacySettings = {
                        "binary": { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                        "seamless": { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                        "sudden": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                        "hard": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                        "smooth": { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "soft": { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "slide": { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "cross fade": { transition: "normal", fadeInSeconds: 0.04, fadeOutTicks: 6 },
                        "hard fade": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: 48 },
                        "medium fade": { transition: "normal", fadeInSeconds: 0.0125, fadeOutTicks: 72 },
                        "soft fade": { transition: "normal", fadeInSeconds: 0.06, fadeOutTicks: 96 },
                    }[transitionProperty];
                    if (legacySettings != undefined) {
                        transition = Config.transitions.dictionary[legacySettings.transition];
                        this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);
                        this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);
                    }
                }
                if (transition != undefined)
                    this.transition = transition.index;
                if (this.transition != Config.transitions.dictionary["normal"].index) {
                    this.effects = (this.effects | (1 << 10));
                }
            }
            if (instrumentObject["fadeInSeconds"] != undefined) {
                this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject["fadeInSeconds"]);
            }
            if (instrumentObject["fadeOutTicks"] != undefined) {
                this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject["fadeOutTicks"]);
            }
            {
                const chordProperty = instrumentObject["chord"];
                const legacyChordNames = { "harmony": "simultaneous" };
                const chord = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];
                if (chord != undefined) {
                    this.chord = chord.index;
                }
                else {
                    if (this.type == 2) {
                        this.chord = Config.chords.dictionary["arpeggio"].index;
                    }
                    else if (this.type == 7) {
                        this.chord = Config.chords.dictionary["strum"].index;
                    }
                    else if (this.type == 0) {
                        this.chord = Config.chords.dictionary["arpeggio"].index;
                    }
                    else if (this.type == 1 || this.type == 11) {
                        this.chord = Config.chords.dictionary["custom interval"].index;
                    }
                    else {
                        this.chord = Config.chords.dictionary["simultaneous"].index;
                    }
                }
            }
            this.unison = Config.unisons.dictionary["none"].index;
            const unisonProperty = instrumentObject["unison"] || instrumentObject["interval"] || instrumentObject["chorus"];
            if (unisonProperty != undefined) {
                const legacyChorusNames = { "union": "none", "fifths": "fifth", "octaves": "octave", "error": "voiced" };
                const unison = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];
                if (unison != undefined)
                    this.unison = unison.index;
                if (unisonProperty == "custom")
                    this.unison = Config.unisons.length;
            }
            this.unisonVoices = (instrumentObject["unisonVoices"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject["unisonVoices"];
            this.unisonSpread = (instrumentObject["unisonSpread"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject["unisonSpread"];
            this.unisonOffset = (instrumentObject["unisonOffset"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject["unisonOffset"];
            this.unisonExpression = (instrumentObject["unisonExpression"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject["unisonExpression"];
            this.unisonSign = (instrumentObject["unisonSign"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject["unisonSign"];
            if (instrumentObject["chorus"] == "custom harmony") {
                this.unison = Config.unisons.dictionary["hum"].index;
                this.chord = Config.chords.dictionary["custom interval"].index;
            }
            if (this.chord != Config.chords.dictionary["simultaneous"].index && !Array.isArray(instrumentObject["effects"])) {
                this.effects = (this.effects | (1 << 11));
            }
            if (instrumentObject["pitchShiftSemitones"] != undefined) {
                this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject["pitchShiftSemitones"]));
            }
            if (instrumentObject["octoff"] != undefined) {
                let potentialPitchShift = instrumentObject["octoff"];
                this.effects = (this.effects | (1 << 7));
                if ((potentialPitchShift == "+1 (octave)") || (potentialPitchShift == "+2 (2 octaves)")) {
                    this.pitchShift = 24;
                }
                else if ((potentialPitchShift == "+1/2 (fifth)") || (potentialPitchShift == "+1 1/2 (octave and fifth)")) {
                    this.pitchShift = 18;
                }
                else if ((potentialPitchShift == "-1 (octave)") || (potentialPitchShift == "-2 (2 octaves")) {
                    this.pitchShift = 0;
                }
                else if ((potentialPitchShift == "-1/2 (fifth)") || (potentialPitchShift == "-1 1/2 (octave and fifth)")) {
                    this.pitchShift = 6;
                }
                else {
                    this.pitchShift = 12;
                }
            }
            if (instrumentObject["detuneCents"] != undefined) {
                this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject["detuneCents"])));
            }
            this.vibrato = Config.vibratos.dictionary["none"].index;
            const vibratoProperty = instrumentObject["vibrato"] || instrumentObject["effect"];
            if (vibratoProperty != undefined) {
                const legacyVibratoNames = { "vibrato light": "light", "vibrato delayed": "delayed", "vibrato heavy": "heavy" };
                const vibrato = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];
                if (vibrato != undefined)
                    this.vibrato = vibrato.index;
                else if (vibratoProperty == "custom")
                    this.vibrato = Config.vibratos.length;
                if (this.vibrato == Config.vibratos.length) {
                    this.vibratoDepth = instrumentObject["vibratoDepth"];
                    this.vibratoSpeed = instrumentObject["vibratoSpeed"];
                    this.vibratoDelay = instrumentObject["vibratoDelay"];
                    this.vibratoType = instrumentObject["vibratoType"];
                }
                else {
                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;
                    this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;
                    this.vibratoSpeed = 10;
                    this.vibratoType = Config.vibratos[this.vibrato].type;
                }
                if (vibrato != Config.vibratos.dictionary["none"]) {
                    this.effects = (this.effects | (1 << 9));
                }
            }
            if (instrumentObject["pan"] != undefined) {
                this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject["pan"] | 0) * Config.panCenter / 100));
            }
            else if (instrumentObject["ipan"] != undefined) {
                this.pan = clamp(0, Config.panMax + 1, Config.panCenter + (instrumentObject["ipan"] * -50));
            }
            else {
                this.pan = Config.panCenter;
            }
            if (this.pan != Config.panCenter) {
                this.effects = (this.effects | (1 << 2));
            }
            if (instrumentObject["panDelay"] != undefined) {
                this.panDelay = (instrumentObject["panDelay"] | 0);
            }
            else {
                this.panDelay = 10;
            }
            if (instrumentObject["detune"] != undefined) {
                this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject["detune"] | 0));
            }
            else if (instrumentObject["detuneCents"] == undefined) {
                this.detune = Config.detuneCenter;
            }
            if (instrumentObject["distortion"] != undefined) {
                this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject["distortion"] | 0) / 100));
            }
            if (instrumentObject["bitcrusherOctave"] != undefined) {
                this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject["bitcrusherOctave"]) / Config.bitcrusherOctaveStep;
            }
            if (instrumentObject["bitcrusherQuantization"] != undefined) {
                this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject["bitcrusherQuantization"] | 0) / 100));
            }
            if (instrumentObject["ringMod"] != undefined) {
                this.ringModulation = clamp(0, Config.ringModRange, Math.round((Config.ringModRange - 1) * (instrumentObject["ringMod"] | 0) / 100));
            }
            if (instrumentObject["ringModHz"] != undefined) {
                this.ringModulationHz = clamp(0, Config.ringModHzRange, Math.round((Config.ringModHzRange - 1) * (instrumentObject["ringModHz"] | 0) / 100));
            }
            if (instrumentObject["rmWaveformIndex"] != undefined) {
                this.rmWaveformIndex = clamp(0, Config.operatorWaves.length, instrumentObject["rmWaveformIndex"]);
            }
            if (instrumentObject["rmPulseWidth"] != undefined) {
                this.rmPulseWidth = clamp(0, Config.pulseWidthRange, Math.round((Config.pulseWidthRange - 1) * (instrumentObject["rmPulseWidth"] | 0) / 100));
            }
            if (instrumentObject["phaserMix"] != undefined) {
                this.phaserMix = clamp(0, Config.phaserMixRange, Math.round((Config.phaserMixRange - 1) * (instrumentObject["phaserMix"] | 0) / 100));
            }
            if (instrumentObject["phaserFreq"] != undefined) {
                this.phaserFreq = clamp(0, Config.phaserFreqRange, Math.round((Config.phaserFreqRange - 1) * (instrumentObject["phaserFreq"] | 0) / 100));
            }
            if (instrumentObject["phaserFeedback"] != undefined) {
                this.phaserFeedback = clamp(0, Config.phaserFeedbackRange, Math.round((Config.phaserFeedbackRange - 1) * (instrumentObject["phaserFeedback"] | 0) / 100));
            }
            if (instrumentObject["phaserStages"] != undefined) {
                this.phaserStages = clamp(0, Config.phaserMaxStages, Math.round((Config.phaserMaxStages - 1) * (instrumentObject["phaserStages"] | 0) / 100));
            }
            if (instrumentObject["echoSustain"] != undefined) {
                this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject["echoSustain"] | 0) / 100));
            }
            if (instrumentObject["echoDelayBeats"] != undefined) {
                this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject["echoDelayBeats"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));
            }
            if (!isNaN(instrumentObject["chorus"])) {
                this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject["chorus"] | 0) / 100));
            }
            if (instrumentObject["reverb"] != undefined) {
                this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject["reverb"] | 0) / 100));
            }
            else {
                this.reverb = legacyGlobalReverb;
            }
            if (instrumentObject["pulseWidth"] != undefined) {
                this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject["pulseWidth"]));
            }
            else {
                this.pulseWidth = Config.pulseWidthRange;
            }
            if (instrumentObject["decimalOffset"] != undefined) {
                this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject["decimalOffset"]));
            }
            else {
                this.decimalOffset = 0;
            }
            if (instrumentObject["dynamism"] != undefined) {
                this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject["dynamism"] | 0) / 100));
            }
            else {
                this.supersawDynamism = Config.supersawDynamismMax;
            }
            if (instrumentObject["spread"] != undefined) {
                this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject["spread"] | 0) / 100));
            }
            else {
                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);
            }
            if (instrumentObject["shape"] != undefined) {
                this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject["shape"] | 0) / 100));
            }
            else {
                this.supersawShape = 0;
            }
            if (instrumentObject["harmonics"] != undefined) {
                for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                    this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject["harmonics"][i]) / 100)));
                }
                this.harmonicsWave.markCustomWaveDirty();
            }
            else {
                this.harmonicsWave.reset();
            }
            if (instrumentObject["spectrum"] != undefined) {
                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                    this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject["spectrum"][i]) / 100)));
                    this.spectrumWave.markCustomWaveDirty();
                }
            }
            else {
                this.spectrumWave.reset(isNoiseChannel);
            }
            if (instrumentObject["stringSustain"] != undefined) {
                this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject["stringSustain"] | 0) / 100));
            }
            else {
                this.stringSustain = 10;
            }
            this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject["stringSustainType"]) : 0;
            if (this.stringSustainType == -1)
                this.stringSustainType = 0;
            if (this.type == 2) {
                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject["wave"]);
                if (instrumentObject["wave"] == "pink noise")
                    this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == "pink");
                if (instrumentObject["wave"] == "brownian noise")
                    this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == "brownian");
                if (this.chipNoise == -1)
                    this.chipNoise = 1;
            }
            const legacyEnvelopeNames = { "custom": "note size", "steady": "none", "pluck 1": "twang 1", "pluck 2": "twang 2", "pluck 3": "twang 3" };
            const getEnvelope = (name) => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];
            if (this.type == 4) {
                if (instrumentObject["drums"] != undefined) {
                    for (let j = 0; j < Config.drumCount; j++) {
                        const drum = instrumentObject["drums"][j];
                        if (drum == undefined)
                            continue;
                        this.drumsetEnvelopes[j] = Config.envelopes.dictionary["twang 2"].index;
                        if (drum["filterEnvelope"] != undefined) {
                            const envelope = getEnvelope(drum["filterEnvelope"]);
                            if (envelope != undefined)
                                this.drumsetEnvelopes[j] = envelope.index;
                        }
                        if (drum["spectrum"] != undefined) {
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum["spectrum"][i]) / 100)));
                            }
                        }
                        this.drumsetSpectrumWaves[j].markCustomWaveDirty();
                    }
                }
            }
            if (this.type == 0) {
                const legacyWaveNames = { "triangle": 1, "square": 2, "pulse wide": 3, "pulse narrow": 4, "sawtooth": 5, "double saw": 6, "double pulse": 7, "spiky": 8, "plateau": 0 };
                const modboxWaveNames = { "10% pulse": 22, "sunsoft bass": 23, "loud pulse": 24, "sax": 25, "guitar": 26, "atari bass": 28, "atari pulse": 29, "1% pulse": 30, "curved sawtooth": 31, "viola": 32, "brass": 33, "acoustic bass": 34, "lyre": 35, "ramp pulse": 36, "piccolo": 37, "squaretooth": 38, "flatline": 39, "pnryshk a (u5)": 40, "pnryshk b (riff)": 41 };
                const sandboxWaveNames = { "shrill lute": 42, "shrill bass": 44, "nes pulse": 45, "saw bass": 46, "euphonium": 47, "shrill pulse": 48, "r-sawtooth": 49, "recorder": 50, "narrow saw": 51, "deep square": 52, "ring pulse": 53, "double sine": 54, "contrabass": 55, "double bass": 56 };
                const zefboxWaveNames = { "semi-square": 63, "deep square": 64, "squaretal": 40, "saw wide": 65, "saw narrow ": 66, "deep sawtooth": 67, "sawtal": 68, "pulse": 69, "triple pulse": 70, "high pulse": 71, "deep pulse": 72 };
                const miscWaveNames = { "test1": 56, "pokey 4bit lfsr": 57, "pokey 5step bass": 58, "isolated spiky": 59, "unnamed 1": 60, "unnamed 2": 61, "guitar string": 75, "intense": 76, "buzz wave": 77, "pokey square": 57, "pokey bass": 58, "banana wave": 83, "test 1": 84, "test 2": 84, "real snare": 85, "earthbound o. guitar": 86 };
                const paandorasboxWaveNames = { "kick": 87, "snare": 88, "piano1": 89, "WOW": 90, "overdrive": 91, "trumpet": 92, "saxophone": 93, "orchestrahit": 94, "detached violin": 95, "synth": 96, "sonic3snare": 97, "come on": 98, "choir": 99, "overdriveguitar": 100, "flute": 101, "legato violin": 102, "tremolo violin": 103, "amen break": 104, "pizzicato violin": 105, "tim allen grunt": 106, "tuba": 107, "loopingcymbal": 108, "standardkick": 109, "standardsnare": 110, "closedhihat": 111, "foothihat": 112, "openhihat": 113, "crashcymbal": 114, "pianoC4": 115, "liver pad": 116, "marimba": 117, "susdotwav": 118, "wackyboxtts": 119 };
                this.chipWave = -1;
                const rawName = instrumentObject["wave"];
                for (const table of [
                    legacyWaveNames,
                    modboxWaveNames,
                    sandboxWaveNames,
                    zefboxWaveNames,
                    miscWaveNames,
                    paandorasboxWaveNames
                ]) {
                    if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {
                        this.chipWave = table[rawName];
                        break;
                    }
                }
                if (this.chipWave == -1) {
                    const potentialChipWaveIndex = Config.chipWaves.findIndex(wave => wave.name == rawName);
                    if (potentialChipWaveIndex != -1)
                        this.chipWave = potentialChipWaveIndex;
                }
                if (this.chipWave == -1)
                    this.chipWave = 1;
            }
            if (this.type == 1 || this.type == 11) {
                if (this.type == 1) {
                    this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject["algorithm"]);
                    if (this.algorithm == -1)
                        this.algorithm = 0;
                    this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject["feedbackType"]);
                    if (this.feedbackType == -1)
                        this.feedbackType = 0;
                }
                else {
                    this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject["algorithm"]);
                    if (this.algorithm6Op == -1)
                        this.algorithm6Op = 1;
                    if (this.algorithm6Op == 0) {
                        this.customAlgorithm.set(instrumentObject["customAlgorithm"]["carrierCount"], instrumentObject["customAlgorithm"]["mods"]);
                    }
                    else {
                        this.customAlgorithm.fromPreset(this.algorithm6Op);
                    }
                    this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject["feedbackType"]);
                    if (this.feedbackType6Op == -1) {
                        let synthboxLegacyFeedbacks = toNameMap([
                            { name: "2⟲ 3⟲", indices: [[], [2], [3], [], [], []] },
                            { name: "3⟲ 4⟲", indices: [[], [], [3], [4], [], []] },
                            { name: "4⟲ 5⟲", indices: [[], [], [], [4], [5], []] },
                            { name: "5⟲ 6⟲", indices: [[], [], [], [], [5], [6]] },
                            { name: "1⟲ 6⟲", indices: [[1], [], [], [], [], [6]] },
                            { name: "1⟲ 3⟲", indices: [[1], [], [3], [], [], []] },
                            { name: "1⟲ 4⟲", indices: [[1], [], [], [4], [], []] },
                            { name: "1⟲ 5⟲", indices: [[1], [], [], [], [5], []] },
                            { name: "4⟲ 6⟲", indices: [[], [], [], [4], [], [6]] },
                            { name: "2⟲ 6⟲", indices: [[], [2], [], [], [], [6]] },
                            { name: "3⟲ 6⟲", indices: [[], [], [3], [], [], [6]] },
                            { name: "4⟲ 5⟲ 6⟲", indices: [[], [], [], [4], [5], [6]] },
                            { name: "1⟲ 3⟲ 6⟲", indices: [[1], [], [3], [], [], [6]] },
                            { name: "2→5", indices: [[], [], [], [], [2], []] },
                            { name: "2→6", indices: [[], [], [], [], [], [2]] },
                            { name: "3→5", indices: [[], [], [], [], [3], []] },
                            { name: "3→6", indices: [[], [], [], [], [], [3]] },
                            { name: "4→6", indices: [[], [], [], [], [], [4]] },
                            { name: "5→6", indices: [[], [], [], [], [], [5]] },
                            { name: "1→3→4", indices: [[], [], [1], [], [3], []] },
                            { name: "2→5→6", indices: [[], [], [], [], [2], [5]] },
                            { name: "2→4→6", indices: [[], [], [], [2], [], [4]] },
                            { name: "4→5→6", indices: [[], [], [], [], [4], [5]] },
                            { name: "3→4→5→6", indices: [[], [], [], [3], [4], [5]] },
                            { name: "2→3→4→5→6", indices: [[], [1], [2], [3], [4], [5]] },
                            { name: "1→2→3→4→5→6", indices: [[], [1], [2], [3], [4], [5]] },
                        ]);
                        let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject["feedbackType"])].indices;
                        if (synthboxFeedbackType != undefined) {
                            this.feedbackType6Op = 0;
                            this.customFeedbackType.set(synthboxFeedbackType);
                        }
                        else {
                            this.feedbackType6Op = 1;
                        }
                    }
                }
                if ((this.feedbackType6Op == 0) && (instrumentObject["customFeedback"] != undefined)) {
                    this.customFeedbackType.set(instrumentObject["customFeedback"]["mods"]);
                }
                else {
                    this.customFeedbackType.fromPreset(this.feedbackType6Op);
                }
                if (instrumentObject["feedbackAmplitude"] != undefined) {
                    this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject["feedbackAmplitude"] | 0);
                }
                else {
                    this.feedbackAmplitude = 0;
                }
                for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {
                    const operator = this.operators[j];
                    let operatorObject = undefined;
                    if (instrumentObject["operators"] != undefined)
                        operatorObject = instrumentObject["operators"][j];
                    if (operatorObject == undefined)
                        operatorObject = {};
                    operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject["frequency"]);
                    if (operator.frequency == -1)
                        operator.frequency = 0;
                    if (operatorObject["amplitude"] != undefined) {
                        operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject["amplitude"] | 0);
                    }
                    else {
                        operator.amplitude = 0;
                    }
                    if (operatorObject["waveform"] != undefined) {
                        if (format == "goldbox" && j > 3) {
                            operator.waveform = 0;
                            continue;
                        }
                        operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject["waveform"]);
                        if (operator.waveform == -1) {
                            if (operatorObject["waveform"] == "square") {
                                operator.waveform = Config.operatorWaves.dictionary["pulse width"].index;
                                operator.pulseWidth = 5;
                            }
                            else {
                                operator.waveform = 0;
                            }
                        }
                    }
                    else {
                        operator.waveform = 0;
                    }
                    if (operatorObject["pulseWidth"] != undefined) {
                        operator.pulseWidth = operatorObject["pulseWidth"] | 0;
                    }
                    else {
                        operator.pulseWidth = 5;
                    }
                }
            }
            else if (this.type == 9) {
                if (instrumentObject["customChipWave"]) {
                    for (let i = 0; i < 64; i++) {
                        this.customChipWave[i] = instrumentObject["customChipWave"][i];
                    }
                    let sum = 0.0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        sum += this.customChipWave[i];
                    }
                    const average = sum / this.customChipWave.length;
                    let cumulative = 0;
                    let wavePrev = 0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        cumulative += wavePrev;
                        wavePrev = this.customChipWave[i] - average;
                        this.customChipWaveIntegral[i] = cumulative;
                    }
                    this.customChipWaveIntegral[64] = 0.0;
                }
            }
            else if (this.type == 10) {
                if (instrumentObject["modChannels"] != undefined) {
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        this.modChannels[mod] = instrumentObject["modChannels"][mod];
                        this.modInstruments[mod] = instrumentObject["modInstruments"][mod];
                        this.modulators[mod] = instrumentObject["modSettings"][mod];
                        if (instrumentObject["modFilterTypes"] != undefined)
                            this.modFilterTypes[mod] = instrumentObject["modFilterTypes"][mod];
                    }
                }
            }
            if (this.type != 10) {
                if (this.chord == Config.chords.dictionary["arpeggio"].index && instrumentObject["arpeggioSpeed"] != undefined) {
                    this.arpeggioSpeed = instrumentObject["arpeggioSpeed"];
                }
                else {
                    this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12;
                }
                if (instrumentObject["fastTwoNoteArp"] != undefined) {
                    this.fastTwoNoteArp = instrumentObject["fastTwoNoteArp"];
                }
                else {
                    this.fastTwoNoteArp = useFastTwoNoteArp;
                }
                if (instrumentObject["clicklessTransition"] != undefined) {
                    this.clicklessTransition = instrumentObject["clicklessTransition"];
                }
                else {
                    this.clicklessTransition = false;
                }
                if (instrumentObject["aliases"] != undefined) {
                    this.aliases = instrumentObject["aliases"];
                }
                else {
                    if (format == "modbox") {
                        this.effects = (this.effects | (1 << 3));
                        this.aliases = true;
                        this.distortion = 0;
                    }
                    else {
                        this.aliases = false;
                    }
                }
                if (instrumentObject["noteFilterType"] != undefined) {
                    this.noteFilterType = instrumentObject["noteFilterType"];
                }
                if (instrumentObject["noteSimpleCut"] != undefined) {
                    this.noteFilterSimpleCut = instrumentObject["noteSimpleCut"];
                }
                if (instrumentObject["noteSimplePeak"] != undefined) {
                    this.noteFilterSimplePeak = instrumentObject["noteSimplePeak"];
                }
                if (instrumentObject["noteFilter"] != undefined) {
                    this.noteFilter.fromJsonObject(instrumentObject["noteFilter"]);
                }
                else {
                    this.noteFilter.reset();
                }
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (Array.isArray(instrumentObject["noteSubFilters" + i])) {
                        this.noteSubFilters[i] = new FilterSettings();
                        this.noteSubFilters[i].fromJsonObject(instrumentObject["noteSubFilters" + i]);
                    }
                }
                if (instrumentObject["eqFilterType"] != undefined) {
                    this.eqFilterType = instrumentObject["eqFilterType"];
                }
                if (instrumentObject["eqSimpleCut"] != undefined) {
                    this.eqFilterSimpleCut = instrumentObject["eqSimpleCut"];
                }
                if (instrumentObject["eqSimplePeak"] != undefined) {
                    this.eqFilterSimplePeak = instrumentObject["eqSimplePeak"];
                }
                if (Array.isArray(instrumentObject["eqFilter"])) {
                    this.eqFilter.fromJsonObject(instrumentObject["eqFilter"]);
                }
                else {
                    this.eqFilter.reset();
                    const legacySettings = {};
                    const filterCutoffMaxHz = 8000;
                    const filterCutoffRange = 11;
                    const filterResonanceRange = 8;
                    if (instrumentObject["filterCutoffHz"] != undefined) {
                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject["filterCutoffHz"] | 0) / filterCutoffMaxHz) / Math.LN2));
                    }
                    else {
                        legacySettings.filterCutoff = (this.type == 0) ? 6 : 10;
                    }
                    if (instrumentObject["filterResonance"] != undefined) {
                        legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject["filterResonance"] | 0) / 100));
                    }
                    else {
                        legacySettings.filterResonance = 0;
                    }
                    legacySettings.filterEnvelope = getEnvelope(instrumentObject["filterEnvelope"]);
                    legacySettings.pulseEnvelope = getEnvelope(instrumentObject["pulseEnvelope"]);
                    legacySettings.feedbackEnvelope = getEnvelope(instrumentObject["feedbackEnvelope"]);
                    if (Array.isArray(instrumentObject["operators"])) {
                        legacySettings.operatorEnvelopes = [];
                        for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {
                            let envelope;
                            if (instrumentObject["operators"][j] != undefined) {
                                envelope = getEnvelope(instrumentObject["operators"][j]["envelope"]);
                            }
                            legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary["none"];
                        }
                    }
                    if (instrumentObject["filter"] != undefined) {
                        const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];
                        const legacyToEnvelope = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"];
                        const filterNames = ["none", "bright", "medium", "soft", "decay bright", "decay medium", "decay soft"];
                        const oldFilterNames = { "sustain sharp": 1, "sustain medium": 2, "sustain soft": 3, "decay sharp": 4 };
                        let legacyFilter = oldFilterNames[instrumentObject["filter"]] != undefined ? oldFilterNames[instrumentObject["filter"]] : filterNames.indexOf(instrumentObject["filter"]);
                        if (legacyFilter == -1)
                            legacyFilter = 0;
                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                        legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);
                        legacySettings.filterResonance = 0;
                    }
                    this.convertLegacySettings(legacySettings, true);
                }
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (Array.isArray(instrumentObject["eqSubFilters" + i])) {
                        this.eqSubFilters[i] = new FilterSettings();
                        this.eqSubFilters[i].fromJsonObject(instrumentObject["eqSubFilters" + i]);
                    }
                }
                if (Array.isArray(instrumentObject["envelopes"])) {
                    const envelopeArray = instrumentObject["envelopes"];
                    for (let i = 0; i < envelopeArray.length; i++) {
                        if (this.envelopeCount >= Config.maxEnvelopeCount)
                            break;
                        const tempEnvelope = new EnvelopeSettings();
                        tempEnvelope.fromJsonObject(envelopeArray[i]);
                        this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);
                    }
                }
            }
            if (type === 0) {
                if (instrumentObject["isUsingAdvancedLoopControls"] != undefined) {
                    this.isUsingAdvancedLoopControls = instrumentObject["isUsingAdvancedLoopControls"];
                    this.chipWaveLoopStart = instrumentObject["chipWaveLoopStart"];
                    this.chipWaveLoopEnd = instrumentObject["chipWaveLoopEnd"];
                    this.chipWaveLoopMode = instrumentObject["chipWaveLoopMode"];
                    this.chipWavePlayBackwards = instrumentObject["chipWavePlayBackwards"];
                    this.chipWaveStartOffset = instrumentObject["chipWaveStartOffset"];
                }
                else {
                    this.isUsingAdvancedLoopControls = false;
                    this.chipWaveLoopStart = 0;
                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
                    this.chipWaveLoopMode = 0;
                    this.chipWavePlayBackwards = false;
                    this.chipWaveStartOffset = 0;
                }
            }
        }
        getLargestControlPointCount(forNoteFilter) {
            let largest;
            if (forNoteFilter) {
                largest = this.noteFilter.controlPointCount;
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (this.noteSubFilters[i] != null && this.noteSubFilters[i].controlPointCount > largest)
                        largest = this.noteSubFilters[i].controlPointCount;
                }
            }
            else {
                largest = this.eqFilter.controlPointCount;
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (this.eqSubFilters[i] != null && this.eqSubFilters[i].controlPointCount > largest)
                        largest = this.eqSubFilters[i].controlPointCount;
                }
            }
            return largest;
        }
        static frequencyFromPitch(pitch) {
            return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);
        }
        addEnvelope(target, index, envelope) {
            let makeEmpty = false;
            if (!this.supportsEnvelopeTarget(target, index))
                makeEmpty = true;
            if (this.envelopeCount >= Config.maxEnvelopeCount)
                throw new Error();
            while (this.envelopes.length <= this.envelopeCount)
                this.envelopes[this.envelopes.length] = new EnvelopeSettings();
            const envelopeSettings = this.envelopes[this.envelopeCount];
            envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary["none"].index : target;
            envelopeSettings.index = makeEmpty ? 0 : index;
            envelopeSettings.envelope = envelope;
            this.envelopeCount++;
        }
        supportsEnvelopeTarget(target, index) {
            const automationTarget = Config.instrumentAutomationTargets[target];
            if (automationTarget.computeIndex == null && automationTarget.name != "none") {
                return false;
            }
            if (index >= automationTarget.maxCount) {
                return false;
            }
            if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {
                return false;
            }
            if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {
                return false;
            }
            if (automationTarget.isFilter) {
                let useControlPointCount = this.noteFilter.controlPointCount;
                if (this.noteFilterType)
                    useControlPointCount = 1;
                if (index >= useControlPointCount)
                    return false;
            }
            if ((automationTarget.name == "operatorFrequency") || (automationTarget.name == "operatorAmplitude")) {
                if (index >= 4 + (this.type == 11 ? 2 : 0))
                    return false;
            }
            return true;
        }
        clearInvalidEnvelopeTargets() {
            for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {
                const target = this.envelopes[envelopeIndex].target;
                const index = this.envelopes[envelopeIndex].index;
                if (!this.supportsEnvelopeTarget(target, index)) {
                    this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary["none"].index;
                    this.envelopes[envelopeIndex].index = 0;
                }
            }
        }
        getTransition() {
            return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :
                (this.type == 10 ? Config.transitions.dictionary["interrupt"] : Config.transitions.dictionary["normal"]);
        }
        getFadeInSeconds() {
            return (this.type == 4) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);
        }
        getFadeOutTicks() {
            return (this.type == 4) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut);
        }
        getChord() {
            return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary["simultaneous"];
        }
        getDrumsetEnvelope(pitch) {
            if (this.type != 4)
                throw new Error("Can't getDrumsetEnvelope() for non-drumset.");
            return Config.envelopes[this.drumsetEnvelopes[pitch]];
        }
    }
    class Channel {
        constructor() {
            this.octave = 0;
            this.instruments = [];
            this.patterns = [];
            this.bars = [];
            this.muted = false;
            this.name = "";
        }
    }
    class Song {
        constructor(string) {
            this.scaleCustom = [];
            this.channels = [];
            this.limitDecay = 4.0;
            this.limitRise = 4000.0;
            this.compressionThreshold = 1.0;
            this.limitThreshold = 1.0;
            this.compressionRatio = 1.0;
            this.limitRatio = 1.0;
            this.masterGain = 1.0;
            this.inVolumeCap = 0.0;
            this.outVolumeCap = 0.0;
            this.getNewNoteVolume = (isMod, modChannel, modInstrument, modCount) => {
                if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)
                    return 6;
                else {
                    modCount = Config.modCount - modCount - 1;
                    let vol = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;
                    let tempoIndex = Config.modulators.dictionary["tempo"].index;
                    if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {
                        vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;
                    }
                    if (vol != undefined)
                        return vol;
                    else
                        return 6;
                }
            };
            this.getVolumeCap = (isMod, modChannel, modInstrument, modCount) => {
                if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)
                    return 6;
                else {
                    modCount = Config.modCount - modCount - 1;
                    let instrument = this.channels[modChannel].instruments[modInstrument];
                    let modulator = Config.modulators[instrument.modulators[modCount]];
                    let cap = modulator.maxRawVol;
                    if (cap != undefined) {
                        if (modulator.name == "eq filter" || modulator.name == "note filter") {
                            cap = Config.filterMorphCount - 1;
                            if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {
                                cap = Config.filterFreqRange;
                            }
                            else if (instrument.modFilterTypes[modCount] > 0) {
                                cap = Config.filterGainRange;
                            }
                        }
                        return cap;
                    }
                    else
                        return 6;
                }
            };
            this.getVolumeCapForSetting = (isMod, modSetting, filterType) => {
                if (!isMod)
                    return Config.noteSizeMax;
                else {
                    let cap = Config.modulators[modSetting].maxRawVol;
                    if (cap != undefined) {
                        if (filterType != undefined && (Config.modulators[modSetting].name == "eq filter" || Config.modulators[modSetting].name == "note filter")) {
                            cap = Config.filterMorphCount - 1;
                            if (filterType > 0 && filterType % 2) {
                                cap = Config.filterFreqRange;
                            }
                            else if (filterType > 0) {
                                cap = Config.filterGainRange;
                            }
                        }
                        return cap;
                    }
                    else
                        return Config.noteSizeMax;
                }
            };
            if (string != undefined) {
                this.fromBase64String(string);
            }
            else {
                this.initToDefault(true);
            }
        }
        getChannelCount() {
            return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;
        }
        getMaxInstrumentsPerChannel() {
            return Math.max(this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin, this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);
        }
        getMaxInstrumentsPerPattern(channelIndex) {
            return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);
        }
        getMaxInstrumentsPerPatternForChannel(channel) {
            return this.layeredInstruments
                ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)
                : 1;
        }
        getChannelIsNoise(channelIndex) {
            return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);
        }
        getChannelIsMod(channelIndex) {
            return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);
        }
        initToDefault(andResetChannels = true) {
            this.scale = 0;
            this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];
            this.key = 0;
            this.octave = 0;
            this.loopStart = 0;
            this.loopLength = 4;
            this.tempo = 120;
            this.reverb = 0;
            this.beatsPerBar = 8;
            this.barCount = 16;
            this.patternsPerChannel = 8;
            this.rhythm = 3;
            this.layeredInstruments = false;
            this.patternInstruments = false;
            this.title = "Untitled";
            document.title = this.title + " - " + EditorConfig.versionDisplayName;
            this.setSongTheme = "none";
            if (andResetChannels) {
                this.pitchChannelCount = 3;
                this.noiseChannelCount = 1;
                this.modChannelCount = 1;
                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                    const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;
                    const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;
                    if (this.channels.length <= channelIndex) {
                        this.channels[channelIndex] = new Channel();
                    }
                    const channel = this.channels[channelIndex];
                    channel.octave = Math.max(3 - channelIndex, 0);
                    for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {
                        if (channel.patterns.length <= pattern) {
                            channel.patterns[pattern] = new Pattern();
                        }
                        else {
                            channel.patterns[pattern].reset();
                        }
                    }
                    channel.patterns.length = this.patternsPerChannel;
                    for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {
                        if (channel.instruments.length <= instrument) {
                            channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);
                        }
                        channel.instruments[instrument].setTypeAndReset(isModChannel ? 10 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);
                    }
                    channel.instruments.length = Config.instrumentCountMin;
                    for (let bar = 0; bar < this.barCount; bar++) {
                        channel.bars[bar] = bar < 4 ? 1 : 0;
                    }
                    channel.bars.length = this.barCount;
                }
                this.channels.length = this.getChannelCount();
            }
        }
        toBase64String() {
            let bits;
            let buffer = [];
            buffer.push(Song._variant);
            buffer.push(base64IntToCharCode[Song._latestAbyssBoxVersion]);
            buffer.push(78);
            var encodedSongTitle = encodeURIComponent(this.title);
            buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);
            for (let i = 0; i < encodedSongTitle.length; i++) {
                buffer.push(encodedSongTitle.charCodeAt(i));
            }
            buffer.push(89);
            var encodedSongTheme = encodeURIComponent(this.setSongTheme);
            buffer.push(base64IntToCharCode[encodedSongTheme.length >> 6], base64IntToCharCode[encodedSongTheme.length & 0x3f]);
            for (let i = 0; i < encodedSongTheme.length; i++) {
                buffer.push(encodedSongTheme.charCodeAt(i));
            }
            buffer.push(110, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);
            buffer.push(115, base64IntToCharCode[this.scale]);
            if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                for (var i = 1; i < Config.pitchesPerOctave; i++) {
                    buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]);
                }
            }
            buffer.push(107, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);
            buffer.push(108, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);
            buffer.push(101, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);
            buffer.push(116, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);
            buffer.push(97, base64IntToCharCode[this.beatsPerBar - 1]);
            buffer.push(103, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);
            buffer.push(106, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);
            buffer.push(114, base64IntToCharCode[this.rhythm]);
            buffer.push(79);
            if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {
                buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]);
                buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]);
                buffer.push(base64IntToCharCode[this.limitDecay]);
                buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]);
                buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]);
                buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]);
                buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]);
            }
            else {
                buffer.push(base64IntToCharCode[0x3f]);
            }
            buffer.push(85);
            for (let channel = 0; channel < this.getChannelCount(); channel++) {
                var encodedChannelName = encodeURIComponent(this.channels[channel].name);
                buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);
                for (let i = 0; i < encodedChannelName.length; i++) {
                    buffer.push(encodedChannelName.charCodeAt(i));
                }
            }
            buffer.push(105, base64IntToCharCode[(this.layeredInstruments << 1) | this.patternInstruments]);
            if (this.layeredInstruments || this.patternInstruments) {
                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                    buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);
                }
            }
            buffer.push(111);
            for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {
                buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);
            }
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                    const instrument = this.channels[channelIndex].instruments[i];
                    buffer.push(84, base64IntToCharCode[instrument.type]);
                    buffer.push(118, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);
                    buffer.push(117, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);
                    buffer.push(102);
                    buffer.push(base64IntToCharCode[+instrument.eqFilterType]);
                    if (instrument.eqFilterType) {
                        buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);
                        buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);
                    }
                    else {
                        if (instrument.eqFilter == null) {
                            buffer.push(base64IntToCharCode[0]);
                            console.log("Null EQ filter settings detected in toBase64String for channelIndex " + channelIndex + ", instrumentIndex " + i);
                        }
                        else {
                            buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);
                            for (let j = 0; j < instrument.eqFilter.controlPointCount; j++) {
                                const point = instrument.eqFilter.controlPoints[j];
                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                            }
                        }
                        let usingSubFilterBitfield = 0;
                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                            usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);
                        }
                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);
                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                            if (usingSubFilterBitfield & (1 << j)) {
                                buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1].controlPointCount]);
                                for (let k = 0; k < instrument.eqSubFilters[j + 1].controlPointCount; k++) {
                                    const point = instrument.eqSubFilters[j + 1].controlPoints[k];
                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                }
                            }
                        }
                    }
                    buffer.push(113, base64IntToCharCode[(instrument.effects >>> (6 * 5)) & 63], base64IntToCharCode[(instrument.effects >>> (6 * 4)) & 63], base64IntToCharCode[(instrument.effects >>> (6 * 3)) & 63], base64IntToCharCode[(instrument.effects >>> (6 * 2)) & 63], base64IntToCharCode[(instrument.effects >>> (6 * 1)) & 63], base64IntToCharCode[(instrument.effects >>> (6 * 0)) & 63]);
                    if (effectsIncludeNoteFilter(instrument.effects)) {
                        buffer.push(base64IntToCharCode[+instrument.noteFilterType]);
                        if (instrument.noteFilterType) {
                            buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);
                            buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);
                        }
                        else {
                            if (instrument.noteFilter == null) {
                                buffer.push(base64IntToCharCode[0]);
                                console.log("Null note filter settings detected in toBase64String for channelIndex " + channelIndex + ", instrumentIndex " + i);
                            }
                            else {
                                buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);
                                for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {
                                    const point = instrument.noteFilter.controlPoints[j];
                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                }
                            }
                            let usingSubFilterBitfield = 0;
                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);
                            }
                            buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);
                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                if (usingSubFilterBitfield & (1 << j)) {
                                    buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1].controlPointCount]);
                                    for (let k = 0; k < instrument.noteSubFilters[j + 1].controlPointCount; k++) {
                                        const point = instrument.noteSubFilters[j + 1].controlPoints[k];
                                        buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                    }
                                }
                            }
                        }
                    }
                    if (effectsIncludeTransition(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.transition]);
                    }
                    if (effectsIncludeChord(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.chord]);
                        if (instrument.chord == Config.chords.dictionary["arpeggio"].index) {
                            buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);
                            buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]);
                        }
                    }
                    if (effectsIncludePitchShift(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.pitchShift]);
                    }
                    if (effectsIncludeDetune(instrument.effects)) {
                        buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);
                    }
                    if (effectsIncludeVibrato(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.vibrato]);
                        if (instrument.vibrato == Config.vibratos.length) {
                            buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);
                            buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);
                            buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);
                            buffer.push(base64IntToCharCode[instrument.vibratoType]);
                        }
                    }
                    if (effectsIncludeDistortion(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.distortion]);
                        buffer.push(base64IntToCharCode[+instrument.aliases]);
                    }
                    if (effectsIncludeRM(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.ringModulation]);
                        buffer.push(base64IntToCharCode[instrument.ringModulationHz]);
                        buffer.push(base64IntToCharCode[instrument.rmWaveformIndex]);
                        buffer.push(base64IntToCharCode[instrument.rmPulseWidth]);
                    }
                    if (effectsIncludePhaser(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.phaserFreq]);
                        buffer.push(base64IntToCharCode[instrument.phaserFeedback]);
                        buffer.push(base64IntToCharCode[instrument.phaserStages]);
                        buffer.push(base64IntToCharCode[instrument.phaserMix]);
                    }
                    if (effectsIncludeBitcrusher(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);
                    }
                    if (effectsIncludePanning(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);
                        buffer.push(base64IntToCharCode[instrument.panDelay]);
                    }
                    if (effectsIncludeChorus(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.chorus]);
                    }
                    if (effectsIncludeEcho(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);
                    }
                    if (effectsIncludeReverb(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.reverb]);
                    }
                    if (instrument.type != 4) {
                        buffer.push(100, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);
                        buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);
                    }
                    if (instrument.type == 5 || instrument.type == 7) {
                        buffer.push(72);
                        const harmonicsBits = new BitFieldWriter();
                        for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                            harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);
                        }
                        harmonicsBits.encodeBase64(buffer);
                    }
                    if (instrument.type == 0) {
                        if (instrument.chipWave > 186) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);
                            buffer.push(base64IntToCharCode[3]);
                        }
                        else if (instrument.chipWave > 124) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);
                            buffer.push(base64IntToCharCode[2]);
                        }
                        else if (instrument.chipWave > 62) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);
                            buffer.push(base64IntToCharCode[1]);
                        }
                        else {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave]);
                            buffer.push(base64IntToCharCode[0]);
                        }
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                        buffer.push(121);
                        const encodedLoopMode = ((clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)
                            | (instrument.isUsingAdvancedLoopControls ? 1 : 0));
                        buffer.push(base64IntToCharCode[encodedLoopMode]);
                        const encodedReleaseMode = ((clamp(0, 31 + 1, 0) << 1)
                            | (instrument.chipWavePlayBackwards ? 1 : 0));
                        buffer.push(base64IntToCharCode[encodedReleaseMode]);
                        encode32BitNumber(buffer, instrument.chipWaveLoopStart);
                        encode32BitNumber(buffer, instrument.chipWaveLoopEnd);
                        encode32BitNumber(buffer, instrument.chipWaveStartOffset);
                    }
                    else if (instrument.type == 1 || instrument.type == 11) {
                        if (instrument.type == 1) {
                            buffer.push(65, base64IntToCharCode[instrument.algorithm]);
                            buffer.push(70, base64IntToCharCode[instrument.feedbackType]);
                        }
                        else {
                            buffer.push(65, base64IntToCharCode[instrument.algorithm6Op]);
                            if (instrument.algorithm6Op == 0) {
                                buffer.push(67, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);
                                buffer.push(113);
                                for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {
                                    for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {
                                        buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);
                                    }
                                    buffer.push(82);
                                }
                                buffer.push(113);
                            }
                            buffer.push(70, base64IntToCharCode[instrument.feedbackType6Op]);
                            if (instrument.feedbackType6Op == 0) {
                                buffer.push(113);
                                for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {
                                    for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {
                                        buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);
                                    }
                                    buffer.push(82);
                                }
                                buffer.push(113);
                            }
                        }
                        buffer.push(66, base64IntToCharCode[instrument.feedbackAmplitude]);
                        buffer.push(81);
                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);
                        }
                        buffer.push(80);
                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);
                        }
                        buffer.push(82);
                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);
                            if (instrument.operators[o].waveform == 2) {
                                buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);
                            }
                        }
                    }
                    else if (instrument.type == 9) {
                        if (instrument.chipWave > 186) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);
                            buffer.push(base64IntToCharCode[3]);
                        }
                        else if (instrument.chipWave > 124) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);
                            buffer.push(base64IntToCharCode[2]);
                        }
                        else if (instrument.chipWave > 62) {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);
                            buffer.push(base64IntToCharCode[1]);
                        }
                        else {
                            buffer.push(119, base64IntToCharCode[instrument.chipWave]);
                            buffer.push(base64IntToCharCode[0]);
                        }
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                        buffer.push(77);
                        for (let j = 0; j < 64; j++) {
                            buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24)]);
                        }
                    }
                    else if (instrument.type == 2) {
                        buffer.push(119, base64IntToCharCode[instrument.chipNoise]);
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                    }
                    else if (instrument.type == 3) {
                        buffer.push(83);
                        const spectrumBits = new BitFieldWriter();
                        for (let i = 0; i < Config.spectrumControlPoints; i++) {
                            spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);
                        }
                        spectrumBits.encodeBase64(buffer);
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                    }
                    else if (instrument.type == 4) {
                        buffer.push(122);
                        for (let j = 0; j < Config.drumCount; j++) {
                            buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);
                        }
                        buffer.push(83);
                        const spectrumBits = new BitFieldWriter();
                        for (let j = 0; j < Config.drumCount; j++) {
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);
                            }
                        }
                        spectrumBits.encodeBase64(buffer);
                    }
                    else if (instrument.type == 5) {
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                    }
                    else if (instrument.type == 6) {
                        buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);
                        buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                    }
                    else if (instrument.type == 8) {
                        buffer.push(120, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);
                        buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);
                        buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);
                    }
                    else if (instrument.type == 7) {
                        if (Config.stringSustainRange > 0x20 || 2 > 2) {
                            throw new Error("Not enough bits to represent sustain value and type in same base64 character.");
                        }
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        if (instrument.unison == Config.unisons.length)
                            encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);
                        buffer.push(73, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);
                    }
                    else if (instrument.type == 10) ;
                    else {
                        throw new Error("Unknown instrument type.");
                    }
                    buffer.push(69, base64IntToCharCode[instrument.envelopeCount]);
                    buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);
                    buffer.push(base64IntToCharCode[+instrument.discreteEnvelope]);
                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {
                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);
                        if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {
                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);
                        }
                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);
                    }
                }
            }
            buffer.push(98);
            bits = new BitFieldWriter();
            let neededBits = 0;
            while ((1 << neededBits) < this.patternsPerChannel + 1)
                neededBits++;
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++)
                for (let i = 0; i < this.barCount; i++) {
                    bits.write(neededBits, this.channels[channelIndex].bars[i]);
                }
            bits.encodeBase64(buffer);
            buffer.push(112);
            bits = new BitFieldWriter();
            const shapeBits = new BitFieldWriter();
            const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                const channel = this.channels[channelIndex];
                const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);
                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                const isModChannel = this.getChannelIsMod(channelIndex);
                const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);
                const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);
                if (isModChannel) {
                    const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                        let instrument = this.channels[channelIndex].instruments[instrumentIndex];
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            const modChannel = instrument.modChannels[mod];
                            const modInstrument = instrument.modInstruments[mod];
                            const modSetting = instrument.modulators[mod];
                            const modFilter = instrument.modFilterTypes[mod];
                            let status = Config.modulators[modSetting].forSong ? 2 : 0;
                            if (modSetting == Config.modulators.dictionary["none"].index)
                                status = 3;
                            bits.write(2, status);
                            if (status == 0 || status == 1) {
                                bits.write(8, modChannel);
                                bits.write(neededModInstrumentIndexBits, modInstrument);
                            }
                            if (status != 3) {
                                bits.write(6, modSetting);
                            }
                            if (Config.modulators[instrument.modulators[mod]].name == "eq filter" || Config.modulators[instrument.modulators[mod]].name == "note filter") {
                                bits.write(6, modFilter);
                            }
                        }
                    }
                }
                const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;
                let lastPitch = (isNoiseChannel ? 4 : octaveOffset);
                const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);
                const recentShapes = [];
                for (let i = 0; i < recentPitches.length; i++) {
                    recentPitches[i] += octaveOffset;
                }
                for (const pattern of channel.patterns) {
                    if (this.patternInstruments) {
                        const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);
                        bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);
                        for (let i = 0; i < instrumentCount; i++) {
                            bits.write(neededInstrumentIndexBits, pattern.instruments[i]);
                        }
                    }
                    if (pattern.notes.length > 0) {
                        bits.write(1, 1);
                        let curPart = 0;
                        for (const note of pattern.notes) {
                            if (note.start < curPart && isModChannel) {
                                bits.write(2, 0);
                                bits.write(1, 1);
                                bits.writePartDuration(curPart - note.start);
                            }
                            if (note.start > curPart) {
                                bits.write(2, 0);
                                if (isModChannel)
                                    bits.write(1, 0);
                                bits.writePartDuration(note.start - curPart);
                            }
                            shapeBits.clear();
                            if (note.pitches.length == 1) {
                                shapeBits.write(1, 0);
                            }
                            else {
                                shapeBits.write(1, 1);
                                shapeBits.write(3, note.pitches.length - 2);
                            }
                            shapeBits.writePinCount(note.pins.length - 1);
                            if (!isModChannel) {
                                shapeBits.write(bitsPerNoteSize, note.pins[0].size);
                            }
                            else {
                                shapeBits.write(9, note.pins[0].size);
                            }
                            let shapePart = 0;
                            let startPitch = note.pitches[0];
                            let currentPitch = startPitch;
                            const pitchBends = [];
                            for (let i = 1; i < note.pins.length; i++) {
                                const pin = note.pins[i];
                                const nextPitch = startPitch + pin.interval;
                                if (currentPitch != nextPitch) {
                                    shapeBits.write(1, 1);
                                    pitchBends.push(nextPitch);
                                    currentPitch = nextPitch;
                                }
                                else {
                                    shapeBits.write(1, 0);
                                }
                                shapeBits.writePartDuration(pin.time - shapePart);
                                shapePart = pin.time;
                                if (!isModChannel) {
                                    shapeBits.write(bitsPerNoteSize, pin.size);
                                }
                                else {
                                    shapeBits.write(9, pin.size);
                                }
                            }
                            const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));
                            const shapeIndex = recentShapes.indexOf(shapeString);
                            if (shapeIndex == -1) {
                                bits.write(2, 1);
                                bits.concat(shapeBits);
                            }
                            else {
                                bits.write(1, 1);
                                bits.writeLongTail(0, 0, shapeIndex);
                                recentShapes.splice(shapeIndex, 1);
                            }
                            recentShapes.unshift(shapeString);
                            if (recentShapes.length > 10)
                                recentShapes.pop();
                            const allPitches = note.pitches.concat(pitchBends);
                            for (let i = 0; i < allPitches.length; i++) {
                                const pitch = allPitches[i];
                                const pitchIndex = recentPitches.indexOf(pitch);
                                if (pitchIndex == -1) {
                                    let interval = 0;
                                    let pitchIter = lastPitch;
                                    if (pitchIter < pitch) {
                                        while (pitchIter != pitch) {
                                            pitchIter++;
                                            if (recentPitches.indexOf(pitchIter) == -1)
                                                interval++;
                                        }
                                    }
                                    else {
                                        while (pitchIter != pitch) {
                                            pitchIter--;
                                            if (recentPitches.indexOf(pitchIter) == -1)
                                                interval--;
                                        }
                                    }
                                    bits.write(1, 0);
                                    bits.writePitchInterval(interval);
                                }
                                else {
                                    bits.write(1, 1);
                                    bits.write(4, pitchIndex);
                                    recentPitches.splice(pitchIndex, 1);
                                }
                                recentPitches.unshift(pitch);
                                if (recentPitches.length > 16)
                                    recentPitches.pop();
                                if (i == note.pitches.length - 1) {
                                    lastPitch = note.pitches[0];
                                }
                                else {
                                    lastPitch = pitch;
                                }
                            }
                            if (note.start == 0) {
                                bits.write(1, note.continuesLastPattern ? 1 : 0);
                            }
                            curPart = note.end;
                        }
                        if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {
                            bits.write(2, 0);
                            if (isModChannel)
                                bits.write(1, 0);
                            bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);
                        }
                    }
                    else {
                        bits.write(1, 0);
                    }
                }
            }
            let stringLength = bits.lengthBase64();
            let digits = [];
            while (stringLength > 0) {
                digits.unshift(base64IntToCharCode[stringLength & 0x3f]);
                stringLength = stringLength >> 6;
            }
            buffer.push(base64IntToCharCode[digits.length]);
            Array.prototype.push.apply(buffer, digits);
            bits.encodeBase64(buffer);
            const maxApplyArgs = 64000;
            let customSamplesStr = "";
            if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {
                customSamplesStr = "|" + EditorConfig.customSamples.join("|");
            }
            if (buffer.length < maxApplyArgs) {
                return String.fromCharCode.apply(null, buffer) + customSamplesStr;
            }
            else {
                let result = "";
                for (let i = 0; i < buffer.length; i += maxApplyArgs) {
                    result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));
                }
                return result + customSamplesStr;
            }
        }
        static _envelopeFromLegacyIndex(legacyIndex) {
            if (legacyIndex == 0)
                legacyIndex = 1;
            else if (legacyIndex == 1)
                legacyIndex = 0;
            return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];
        }
        fromBase64String(compressed, jsonFormat = "auto") {
            if (compressed == null || compressed == "") {
                Song._clearSamples();
                this.initToDefault(true);
                return;
            }
            let charIndex = 0;
            while (compressed.charCodeAt(charIndex) <= 32)
                charIndex++;
            if (compressed.charCodeAt(charIndex) == 35)
                charIndex++;
            if (compressed.charCodeAt(charIndex) == 123) {
                this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);
                return;
            }
            const variantTest = compressed.charCodeAt(charIndex);
            let fromBeepBox;
            let fromJummBox;
            let fromGoldBox;
            let fromUltraBox;
            let fromAbyssBox;
            if (variantTest == 0x6A) {
                fromBeepBox = false;
                fromJummBox = true;
                fromGoldBox = false;
                fromUltraBox = false;
                fromAbyssBox = false;
                charIndex++;
            }
            else if (variantTest == 0x67) {
                fromBeepBox = false;
                fromJummBox = false;
                fromGoldBox = true;
                fromUltraBox = false;
                fromAbyssBox = false;
                charIndex++;
            }
            else if (variantTest == 0x75) {
                fromBeepBox = false;
                fromJummBox = false;
                fromGoldBox = false;
                fromUltraBox = true;
                fromAbyssBox = false;
                charIndex++;
            }
            else if (variantTest == 0x61) {
                fromBeepBox = false;
                fromJummBox = false;
                fromGoldBox = false;
                fromUltraBox = false;
                fromAbyssBox = true;
                charIndex++;
            }
            else {
                fromBeepBox = true;
                fromJummBox = false;
                fromGoldBox = false;
                fromUltraBox = false;
                fromAbyssBox = false;
            }
            const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
            if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion))
                return;
            if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion))
                return;
            if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion))
                return;
            if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion))
                return;
            if (fromAbyssBox && (version == -1 || version > Song._latestAbyssBoxVersion || version < Song._oldestAbyssBoxVersion))
                return;
            const beforeTwo = version < 2;
            const beforeThree = version < 3;
            const beforeFour = version < 4;
            const beforeFive = version < 5;
            const beforeSix = version < 6;
            const beforeSeven = version < 7;
            const beforeEight = version < 8;
            const beforeNine = version < 9;
            this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));
            const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);
            let willLoadLegacySamplesForOldSongs = false;
            if (fromUltraBox || fromGoldBox || fromAbyssBox) {
                compressed = compressed.replaceAll("%7C", "|");
                var compressed_array = compressed.split("|");
                compressed = compressed_array.shift();
                if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(", ") != compressed_array.join(", ")) {
                    Song._restoreChipWaveListToDefault();
                    let willLoadLegacySamples = false;
                    let willLoadNintariboxSamples = false;
                    let willLoadMarioPaintboxSamples = false;
                    const customSampleUrls = [];
                    const customSamplePresets = [];
                    sampleLoadingState.statusTable = {};
                    sampleLoadingState.urlTable = {};
                    sampleLoadingState.totalSamples = 0;
                    sampleLoadingState.samplesLoaded = 0;
                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
                    for (const url of compressed_array) {
                        if (url.toLowerCase() === "legacysamples") {
                            if (!willLoadLegacySamples) {
                                willLoadLegacySamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(0);
                            }
                        }
                        else if (url.toLowerCase() === "nintariboxsamples") {
                            if (!willLoadNintariboxSamples) {
                                willLoadNintariboxSamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(1);
                            }
                        }
                        else if (url.toLowerCase() === "mariopaintboxsamples") {
                            if (!willLoadMarioPaintboxSamples) {
                                willLoadMarioPaintboxSamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(2);
                            }
                        }
                        else {
                            const parseOldSyntax = (fromUltraBox && beforeThree);
                            const ok = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);
                            if (!ok) {
                                continue;
                            }
                        }
                    }
                    if (customSampleUrls.length > 0) {
                        EditorConfig.customSamples = customSampleUrls;
                    }
                    if (customSamplePresets.length > 0) {
                        const customSamplePresetsMap = toNameMap(customSamplePresets);
                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {
                            name: "Custom Sample Presets",
                            presets: customSamplePresetsMap,
                            index: EditorConfig.presetCategories.length,
                        };
                    }
                }
            }
            if (beforeThree && fromBeepBox) {
                for (const channel of this.channels) {
                    channel.instruments[0].transition = Config.transitions.dictionary["interrupt"].index;
                    channel.instruments[0].effects |= 1 << 10;
                }
                this.channels[3].instruments[0].chipNoise = 0;
            }
            let legacySettingsCache = null;
            if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                legacySettingsCache = [];
                for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {
                    legacySettingsCache[i] = [];
                    for (let j = 0; j < Config.instrumentCountMin; j++)
                        legacySettingsCache[i][j] = {};
                }
            }
            let legacyGlobalReverb = 0;
            let instrumentChannelIterator = 0;
            let instrumentIndexIterator = -1;
            let command;
            let useSlowerArpSpeed = false;
            let useFastTwoNoteArp = false;
            while (charIndex < compressed.length)
                switch (command = compressed.charCodeAt(charIndex++)) {
                    case 78:
                        {
                            var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));
                            document.title = this.title + " - " + EditorConfig.versionDisplayName;
                            charIndex += songNameLength;
                        }
                        break;
                    case 89:
                        {
                            var songThemeLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            this.setSongTheme = decodeURIComponent(compressed.substring(charIndex, charIndex + songThemeLength));
                            charIndex += songThemeLength;
                        }
                        break;
                    case 110:
                        {
                            this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (fromBeepBox || (fromJummBox && beforeTwo)) {
                                this.modChannelCount = 0;
                            }
                            else {
                                this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);
                            this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);
                            this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);
                            for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {
                                this.channels[channelIndex] = new Channel();
                            }
                            this.channels.length = this.getChannelCount();
                            if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {
                                    legacySettingsCache[i] = [];
                                    for (let j = 0; j < Config.instrumentCountMin; j++)
                                        legacySettingsCache[i][j] = {};
                                }
                            }
                        }
                        break;
                    case 115:
                        {
                            this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                                for (var i = 1; i < Config.pitchesPerOctave; i++) {
                                    this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1;
                                }
                            }
                            if (fromBeepBox)
                                this.scale = 0;
                        }
                        break;
                    case 107:
                        {
                            if (beforeSeven && fromBeepBox) {
                                this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                this.octave = 0;
                            }
                            else if (fromBeepBox || fromJummBox) {
                                this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                this.octave = 0;
                            }
                            else if (fromGoldBox || (beforeThree && fromUltraBox)) {
                                const rawKeyIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const [key, octave] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);
                                this.key = key;
                                this.octave = octave;
                            }
                            else {
                                this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);
                            }
                        }
                        break;
                    case 108:
                        {
                            if (beforeFive && fromBeepBox) {
                                this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                        }
                        break;
                    case 101:
                        {
                            if (beforeFive && fromBeepBox) {
                                this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                        }
                        break;
                    case 116:
                        {
                            if (beforeFour && fromBeepBox) {
                                this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else if (beforeSeven && fromBeepBox) {
                                this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else {
                                this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);
                        }
                        break;
                    case 109:
                        {
                            if (beforeNine && fromBeepBox) {
                                legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;
                                legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);
                            }
                            else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);
                            }
                            else ;
                        }
                        break;
                    case 97:
                        {
                            if (beforeThree && fromBeepBox) {
                                this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else {
                                this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));
                        }
                        break;
                    case 103:
                        {
                            const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);
                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {
                                    this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;
                                }
                                this.channels[channelIndex].bars.length = this.barCount;
                            }
                        }
                        break;
                    case 106:
                        {
                            let patternsPerChannel;
                            if (beforeEight && fromBeepBox) {
                                patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            else {
                                patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);
                            const channelCount = this.getChannelCount();
                            for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {
                                const patterns = this.channels[channelIndex].patterns;
                                for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {
                                    patterns[pattern] = new Pattern();
                                }
                                patterns.length = this.patternsPerChannel;
                            }
                        }
                        break;
                    case 105:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);
                                this.layeredInstruments = false;
                                this.patternInstruments = (instrumentsPerChannel > 1);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;
                                    const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;
                                    for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {
                                        this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);
                                    }
                                    this.channels[channelIndex].instruments.length = instrumentsPerChannel;
                                    if (beforeSix && fromBeepBox) {
                                        for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {
                                            this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? 2 : 0, isNoiseChannel, isModChannel);
                                        }
                                    }
                                    for (let j = legacySettingsCache[channelIndex].length; j < instrumentsPerChannel; j++) {
                                        legacySettingsCache[channelIndex][j] = {};
                                    }
                                }
                            }
                            else {
                                const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;
                                this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    let instrumentCount = 1;
                                    if (this.layeredInstruments || this.patternInstruments) {
                                        instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);
                                    }
                                    const channel = this.channels[channelIndex];
                                    const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                                    const isModChannel = this.getChannelIsMod(channelIndex);
                                    for (let i = channel.instruments.length; i < instrumentCount; i++) {
                                        channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);
                                    }
                                    channel.instruments.length = instrumentCount;
                                }
                            }
                        }
                        break;
                    case 114:
                        {
                            if (!fromUltraBox && !fromAbyssBox) {
                                let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);
                                if (fromJummBox && beforeThree || fromBeepBox) {
                                    if (this.rhythm == Config.rhythms.dictionary["÷3 (triplets)"].index || this.rhythm == Config.rhythms.dictionary["÷6 (sextuplets)"].index) {
                                        useSlowerArpSpeed = true;
                                    }
                                    if (this.rhythm >= Config.rhythms.dictionary["÷6 (sextuplets)"].index) {
                                        useFastTwoNoteArp = true;
                                    }
                                }
                            }
                            else {
                                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                        }
                        break;
                    case 111:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                if (channelIndex >= this.pitchChannelCount)
                                    this.channels[channelIndex].octave = 0;
                            }
                            else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                    if (channelIndex >= this.pitchChannelCount)
                                        this.channels[channelIndex].octave = 0;
                                }
                            }
                            else {
                                for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {
                                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {
                                    this.channels[channelIndex].octave = 0;
                                }
                            }
                        }
                        break;
                    case 84:
                        {
                            instrumentIndexIterator++;
                            if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {
                                instrumentChannelIterator++;
                                instrumentIndexIterator = 0;
                            }
                            validateRange(0, this.channels.length - 1, instrumentChannelIterator);
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            let instrumentType = validateRange(0, 12 - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                if (instrumentType == 7 || instrumentType == 8) {
                                    instrumentType += 2;
                                }
                            }
                            else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {
                                if (instrumentType == 8 || instrumentType == 9 || instrumentType == 10) {
                                    instrumentType += 1;
                                }
                            }
                            instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);
                            if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == 0 || instrumentType == 9 || instrumentType == 6)) {
                                instrument.aliases = true;
                                instrument.distortion = 0;
                                instrument.effects |= 1 << 3;
                            }
                            if (useSlowerArpSpeed) {
                                instrument.arpeggioSpeed = 9;
                            }
                            if (useFastTwoNoteArp) {
                                instrument.fastTwoNoteArp = true;
                            }
                            if (beforeSeven && fromBeepBox) {
                                if (instrument.chord != Config.chords.dictionary["simultaneous"].index) {
                                    instrument.effects |= 1 << 11;
                                }
                            }
                        }
                        break;
                    case 117:
                        {
                            const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 7) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;
                                }
                            }
                            else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {
                                if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 8) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;
                                }
                                if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 10) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 11;
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 11;
                                }
                            }
                            if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue("grand piano 1")) {
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue("grand piano 3");
                            }
                        }
                        break;
                    case 119:
                        {
                            if (beforeThree && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const instrument = this.channels[channelIndex].instruments[0];
                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                instrument.convertLegacySettings(legacySettingsCache[channelIndex][0], forceSimpleFilter);
                            }
                            else if (beforeSix && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        if (channelIndex >= this.pitchChannelCount) {
                                            instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        }
                                        else {
                                            instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                        }
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                if (instrumentChannelIterator >= this.pitchChannelCount) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                else {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                }
                            }
                            else {
                                if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == 2) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                else {
                                    if (fromUltraBox || fromAbyssBox) {
                                        const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        if (chipWaveCounter == 3) {
                                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);
                                        }
                                        else if (chipWaveCounter == 2) {
                                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);
                                        }
                                        else if (chipWaveCounter == 1) {
                                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);
                                        }
                                        else {
                                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);
                                        }
                                    }
                                    else {
                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                            }
                        }
                        break;
                    case 102:
                        {
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                if (beforeSeven && fromBeepBox) {
                                    const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];
                                    const legacyToEnvelope = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"];
                                    if (beforeThree && fromBeepBox) {
                                        const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        const instrument = this.channels[channelIndex].instruments[0];
                                        const legacySettings = legacySettingsCache[channelIndex][0];
                                        const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                        legacySettings.filterResonance = 0;
                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                    }
                                    else if (beforeSix && fromBeepBox) {
                                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                                                const instrument = this.channels[channelIndex].instruments[i];
                                                const legacySettings = legacySettingsCache[channelIndex][i];
                                                const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                                if (channelIndex < this.pitchChannelCount) {
                                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                                    legacySettings.filterResonance = 0;
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                                }
                                                else {
                                                    legacySettings.filterCutoff = 10;
                                                    legacySettings.filterResonance = 0;
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary["none"];
                                                }
                                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                            }
                                        }
                                    }
                                    else {
                                        const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                        const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                        legacySettings.filterResonance = 0;
                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                    }
                                }
                                else {
                                    const filterCutoffRange = 11;
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                }
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if (fromBeepBox || typeCheck == 0) {
                                    instrument.eqFilterType = false;
                                    if (fromJummBox || fromGoldBox || fromUltraBox || fromAbyssBox)
                                        typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const originalControlPointCount = typeCheck;
                                    instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);
                                    for (let i = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {
                                        instrument.eqFilter.controlPoints[i] = new FilterControlPoint();
                                    }
                                    for (let i = 0; i < instrument.eqFilter.controlPointCount; i++) {
                                        const point = instrument.eqFilter.controlPoints[i];
                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    for (let i = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {
                                        charIndex += 3;
                                    }
                                    instrument.eqSubFilters[0] = instrument.eqFilter;
                                    if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromAbyssBox) {
                                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                            if (usingSubFilterBitfield & (1 << j)) {
                                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                                if (instrument.eqSubFilters[j + 1] == null)
                                                    instrument.eqSubFilters[j + 1] = new FilterSettings();
                                                instrument.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);
                                                for (let i = instrument.eqSubFilters[j + 1].controlPoints.length; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {
                                                    instrument.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();
                                                }
                                                for (let i = 0; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {
                                                    const point = instrument.eqSubFilters[j + 1].controlPoints[i];
                                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                }
                                                for (let i = instrument.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {
                                                    charIndex += 3;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    instrument.eqFilterType = true;
                                    instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                            }
                        }
                        break;
                    case 121:
                        {
                            if (fromUltraBox || fromAbyssBox) {
                                if (fromUltraBox && beforeThree) {
                                    const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);
                                    charIndex += 6;
                                    const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);
                                    charIndex += sampleLoopInfoEncodedLength;
                                    const sampleLoopInfo = JSON.parse(atob(sampleLoopInfoEncoded));
                                    for (const entry of sampleLoopInfo) {
                                        const channelIndex = entry["channel"];
                                        const instrumentIndex = entry["instrument"];
                                        const info = entry["info"];
                                        const instrument = this.channels[channelIndex].instruments[instrumentIndex];
                                        instrument.isUsingAdvancedLoopControls = info["isUsingAdvancedLoopControls"];
                                        instrument.chipWaveLoopStart = info["chipWaveLoopStart"];
                                        instrument.chipWaveLoopEnd = info["chipWaveLoopEnd"];
                                        instrument.chipWaveLoopMode = info["chipWaveLoopMode"];
                                        instrument.chipWavePlayBackwards = info["chipWavePlayBackwards"];
                                        instrument.chipWaveStartOffset = info["chipWaveStartOffset"];
                                    }
                                }
                                else {
                                    const encodedLoopMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const isUsingAdvancedLoopControls = Boolean(encodedLoopMode & 1);
                                    const chipWaveLoopMode = encodedLoopMode >> 1;
                                    const encodedReleaseMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const chipWavePlayBackwards = Boolean(encodedReleaseMode & 1);
                                    const chipWaveLoopStart = decode32BitNumber(compressed, charIndex);
                                    charIndex += 6;
                                    const chipWaveLoopEnd = decode32BitNumber(compressed, charIndex);
                                    charIndex += 6;
                                    const chipWaveStartOffset = decode32BitNumber(compressed, charIndex);
                                    charIndex += 6;
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;
                                    instrument.chipWaveLoopStart = chipWaveLoopStart;
                                    instrument.chipWaveLoopEnd = chipWaveLoopEnd;
                                    instrument.chipWaveLoopMode = chipWaveLoopMode;
                                    instrument.chipWavePlayBackwards = chipWavePlayBackwards;
                                    instrument.chipWaveStartOffset = chipWaveStartOffset;
                                }
                            }
                            else if (fromGoldBox && !beforeFour && beforeSix) {
                                if (document.URL.substring(document.URL.length - 13).toLowerCase() != "legacysamples") {
                                    if (!willLoadLegacySamplesForOldSongs) {
                                        willLoadLegacySamplesForOldSongs = true;
                                        Config.willReloadForCustomSamples = true;
                                        EditorConfig.customSamples = ["legacySamples"];
                                        loadBuiltInSamples(0);
                                    }
                                }
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);
                            }
                            else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const filterResonanceRange = 8;
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            else ;
                        }
                        break;
                    case 122:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                if (instrument.type == 4) {
                                    for (let i = 0; i < Config.drumCount; i++) {
                                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromAbyssBox))
                                            aa = pregoldToEnvelope[aa];
                                        instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;
                                    }
                                }
                                else {
                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromAbyssBox))
                                        aa = pregoldToEnvelope[aa];
                                    legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);
                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                }
                            }
                            else {
                                for (let i = 0; i < Config.drumCount; i++) {
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromAbyssBox))
                                        aa = pregoldToEnvelope[aa];
                                    instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);
                                }
                            }
                        }
                        break;
                    case 87:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            if (fromBeepBox) {
                                instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);
                            }
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromAbyssBox))
                                    aa = pregoldToEnvelope[aa];
                                legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            if ((fromUltraBox && !beforeFour) || fromAbyssBox) {
                                instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 73:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            const sustainValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);
                            instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, 2, sustainValue >> 5) : 0;
                        }
                        break;
                    case 100:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const legacySettings = [
                                    { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                                    { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                                    { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                    { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                    { transition: "normal", fadeInSeconds: 0.04, fadeOutTicks: 6 },
                                    { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: 48 },
                                    { transition: "normal", fadeInSeconds: 0.0125, fadeOutTicks: 72 },
                                    { transition: "normal", fadeInSeconds: 0.06, fadeOutTicks: 96 },
                                    { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                ];
                                if (beforeThree && fromBeepBox) {
                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[channelIndex].instruments[0];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                                else if (beforeSix && fromBeepBox) {
                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                        for (const instrument of this.channels[channelIndex].instruments) {
                                            const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                            instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                            instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                            instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                            if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                                instrument.effects |= 1 << 10;
                                            }
                                        }
                                    }
                                }
                                else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromAbyssBox) || fromBeepBox) {
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                                else {
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {
                                        instrument.legacyTieOver = true;
                                    }
                                    instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index || instrument.clicklessTransition) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (fromJummBox || fromGoldBox || fromUltraBox || fromAbyssBox)
                                    instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                            }
                        }
                        break;
                    case 99:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                if (beforeSeven && fromBeepBox) {
                                    if (beforeThree && fromBeepBox) {
                                        const legacyEffects = [0, 3, 2, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "tremolo2"];
                                        const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[channelIndex].instruments[0];
                                        const legacySettings = legacySettingsCache[channelIndex][0];
                                        instrument.vibrato = legacyEffects[effect];
                                        if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                        }
                                        if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                            instrument.effects |= 1 << 9;
                                        }
                                    }
                                    else if (beforeSix && fromBeepBox) {
                                        const legacyEffects = [0, 1, 2, 3, 0, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "none", "tremolo5", "tremolo2"];
                                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                                                const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                const instrument = this.channels[channelIndex].instruments[i];
                                                const legacySettings = legacySettingsCache[channelIndex][i];
                                                instrument.vibrato = legacyEffects[effect];
                                                if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                                }
                                                if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                                    instrument.effects |= 1 << 9;
                                                }
                                                if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {
                                                    instrument.effects |= 1 << 0;
                                                    instrument.reverb = legacyGlobalReverb;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        const legacyEffects = [0, 1, 2, 3, 0, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "none", "tremolo5", "tremolo2"];
                                        const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                        const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                        instrument.vibrato = legacyEffects[effect];
                                        if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                        }
                                        if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                            instrument.effects |= 1 << 9;
                                        }
                                        if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                            instrument.effects |= 1 << 0;
                                            instrument.reverb = legacyGlobalReverb;
                                        }
                                    }
                                }
                                else {
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.vibrato = vibrato;
                                    if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                        instrument.effects |= 1 << 9;
                                    }
                                    if (vibrato == Config.vibratos.length) {
                                        instrument.vibratoDepth = clamp(0, Config.modulators.dictionary["vibrato depth"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;
                                        instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary["vibrato speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoDelay = clamp(0, Config.modulators.dictionary["vibrato delay"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;
                                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.effects |= 1 << 9;
                                    }
                                    else {
                                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;
                                        instrument.vibratoSpeed = 10;
                                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;
                                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;
                                    }
                                }
                            }
                        }
                        break;
                    case 71:
                        {
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary["arp speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                            }
                        }
                        break;
                    case 104:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                const instrument = this.channels[channelIndex].instruments[0];
                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                                instrument.unisonSign = Config.unisons[instrument.unison].sign;
                            }
                            else if (beforeSix && fromBeepBox) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        let unison = clamp(0, Config.unisons.length, originalValue);
                                        if (originalValue == 8) {
                                            unison = 2;
                                            instrument.chord = 3;
                                        }
                                        instrument.unison = unison;
                                        instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                                        instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                                        instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                                        instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                                        instrument.unisonSign = Config.unisons[instrument.unison].sign;
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                let unison = clamp(0, Config.unisons.length, originalValue);
                                if (originalValue == 8) {
                                    unison = 2;
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;
                                }
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                                instrument.unisonSign = Config.unisons[instrument.unison].sign;
                            }
                            else {
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (((fromUltraBox && !beforeFour) || fromAbyssBox) && (instrument.unison == Config.unisons.length)) {
                                instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const unisonSpread = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);
                                const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const unisonOffset = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);
                                const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const unisonExpression = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);
                                const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const unisonSign = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);
                                instrument.unisonSpread = unisonSpread / 1000;
                                if (unisonSpreadNegative == 0)
                                    instrument.unisonSpread *= -1;
                                instrument.unisonOffset = unisonOffset / 1000;
                                if (unisonOffsetNegative == 0)
                                    instrument.unisonOffset *= -1;
                                instrument.unisonExpression = unisonExpression / 1000;
                                if (unisonExpressionNegative == 0)
                                    instrument.unisonExpression *= -1;
                                instrument.unisonSign = unisonSign / 1000;
                                if (unisonSignNegative == 0)
                                    instrument.unisonSign *= -1;
                            }
                            else {
                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                                instrument.unisonSign = Config.unisons[instrument.unison].sign;
                            }
                        }
                        break;
                    case 67:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (instrument.chord != Config.chords.dictionary["simultaneous"].index) {
                                    instrument.effects |= 1 << 11;
                                }
                            }
                        }
                        break;
                    case 113:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << 14) - 1));
                                if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                    instrument.effects &= ~(1 << 0);
                                }
                                else if (effectsIncludeReverb(instrument.effects)) {
                                    instrument.reverb = legacyGlobalReverb;
                                }
                                instrument.effects |= 1 << 2;
                                if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                    instrument.effects |= 1 << 9;
                                }
                                if (instrument.detune != Config.detuneCenter) {
                                    instrument.effects |= 1 << 8;
                                }
                                if (instrument.aliases)
                                    instrument.effects |= 1 << 3;
                                else
                                    instrument.effects &= ~(1 << 3);
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            else {
                                if ((fromAbyssBox && beforeTwo) || fromUltraBox || fromGoldBox || fromJummBox || fromBeepBox) {
                                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                else {
                                    instrument.effects = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5))
                                        | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4))
                                        | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3))
                                        | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2))
                                        | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1))
                                        | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0))) >>> 0;
                                }
                                if (effectsIncludeNoteFilter(instrument.effects)) {
                                    let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if (fromBeepBox || typeCheck == 0) {
                                        instrument.noteFilterType = false;
                                        if (fromJummBox || fromGoldBox || fromUltraBox || fromAbyssBox)
                                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);
                                        for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {
                                            instrument.noteFilter.controlPoints[i] = new FilterControlPoint();
                                        }
                                        for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {
                                            const point = instrument.noteFilter.controlPoints[i];
                                            point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        }
                                        for (let i = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {
                                            charIndex += 3;
                                        }
                                        instrument.noteSubFilters[0] = instrument.noteFilter;
                                        if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox) || (fromAbyssBox)) {
                                            let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                                if (usingSubFilterBitfield & (1 << j)) {
                                                    const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                                    if (instrument.noteSubFilters[j + 1] == null)
                                                        instrument.noteSubFilters[j + 1] = new FilterSettings();
                                                    instrument.noteSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);
                                                    for (let i = instrument.noteSubFilters[j + 1].controlPoints.length; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {
                                                        instrument.noteSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();
                                                    }
                                                    for (let i = 0; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {
                                                        const point = instrument.noteSubFilters[j + 1].controlPoints[i];
                                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    }
                                                    for (let i = instrument.noteSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {
                                                        charIndex += 3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        instrument.noteFilterType = true;
                                        instrument.noteFilter.reset();
                                        instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeTransition(instrument.effects)) {
                                    instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeChord(instrument.effects)) {
                                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (instrument.chord == Config.chords.dictionary["arpeggio"].index && (fromJummBox || fromGoldBox || fromUltraBox || fromAbyssBox)) {
                                        instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;
                                    }
                                }
                                if (effectsIncludePitchShift(instrument.effects)) {
                                    instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeDetune(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);
                                    }
                                    else {
                                        instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeVibrato(instrument.effects)) {
                                    instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromAbyssBox)) {
                                        instrument.vibratoDepth = clamp(0, Config.modulators.dictionary["vibrato depth"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;
                                        instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary["vibrato speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoDelay = clamp(0, Config.modulators.dictionary["vibrato delay"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    else {
                                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;
                                        instrument.vibratoSpeed = 10;
                                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;
                                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;
                                    }
                                }
                                if (effectsIncludeDistortion(instrument.effects)) {
                                    instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromAbyssBox)
                                        instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                                }
                                if (effectsIncludeRM(instrument.effects)) {
                                    instrument.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.rmWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.rmPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludePhaser(instrument.effects)) {
                                    instrument.phaserFreq = clamp(0, Config.phaserFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.phaserFeedback = clamp(0, Config.phaserFeedbackRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.phaserStages = clamp(0, Config.phaserMaxStages + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.phaserMix = clamp(0, Config.phaserMixRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeBitcrusher(instrument.effects)) {
                                    instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludePanning(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));
                                    }
                                    else {
                                        instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromAbyssBox)
                                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                }
                                if (effectsIncludeChorus(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;
                                    }
                                    else {
                                        instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeEcho(instrument.effects)) {
                                    instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeReverb(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));
                                    }
                                    else {
                                        instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                            }
                            instrument.effects &= (1 << 14) - 1;
                        }
                        break;
                    case 118:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const instrument = this.channels[channelIndex].instruments[0];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                            }
                            else if (beforeSix && fromBeepBox) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                            }
                            else if (fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));
                            }
                        }
                        break;
                    case 76:
                        {
                            if (beforeNine && fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));
                            }
                            else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox || fromAbyssBox) {
                                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                }
                            }
                            else ;
                        }
                        break;
                    case 68:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);
                                instrument.effects |= 1 << 8;
                            }
                        }
                        break;
                    case 77:
                        {
                            let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            for (let j = 0; j < 64; j++) {
                                instrument.customChipWave[j]
                                    = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);
                            }
                            let sum = 0.0;
                            for (let i = 0; i < instrument.customChipWave.length; i++) {
                                sum += instrument.customChipWave[i];
                            }
                            const average = sum / instrument.customChipWave.length;
                            let cumulative = 0;
                            let wavePrev = 0;
                            for (let i = 0; i < instrument.customChipWave.length; i++) {
                                cumulative += wavePrev;
                                wavePrev = instrument.customChipWave[i] - average;
                                instrument.customChipWaveIntegral[i] = cumulative;
                            }
                            instrument.customChipWaveIntegral[64] = 0.0;
                        }
                        break;
                    case 79:
                        {
                            let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (nextValue == 0x3f) {
                                this.restoreLimiterDefaults();
                            }
                            else {
                                this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));
                                nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));
                                this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;
                                this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;
                                this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;
                                this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;
                            }
                        }
                        break;
                    case 85:
                        {
                            for (let channel = 0; channel < this.getChannelCount(); channel++) {
                                var channelNameLength;
                                if (beforeFour && !fromGoldBox && !fromUltraBox && !fromAbyssBox)
                                    channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                else
                                    channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));
                                charIndex += channelNameLength;
                            }
                        }
                        break;
                    case 65:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 1) {
                                instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else {
                                instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);
                                if (compressed.charCodeAt(charIndex) == 67) {
                                    let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);
                                    charIndex++;
                                    let tempModArray = [];
                                    if (compressed.charCodeAt(charIndex + 1) == 113) {
                                        charIndex++;
                                        let j = 0;
                                        charIndex++;
                                        while (compressed.charCodeAt(charIndex) != 113) {
                                            tempModArray[j] = [];
                                            let o = 0;
                                            while (compressed.charCodeAt(charIndex) != 82) {
                                                tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);
                                                o++;
                                                charIndex++;
                                            }
                                            j++;
                                            charIndex++;
                                        }
                                        instrument.customAlgorithm.set(carrierCountTemp, tempModArray);
                                        charIndex++;
                                    }
                                }
                            }
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 120:
                        {
                            if (fromGoldBox && !beforeFour && beforeSix) {
                                const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if ((chipWaveForCompat + 62) > 85) {
                                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != "legacysamples") {
                                        if (!willLoadLegacySamplesForOldSongs) {
                                            willLoadLegacySamplesForOldSongs = true;
                                            Config.willReloadForCustomSamples = true;
                                            EditorConfig.customSamples = ["legacySamples"];
                                            loadBuiltInSamples(0);
                                        }
                                    }
                                }
                                if ((chipWaveForCompat + 62) > 78) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);
                                }
                                else if ((chipWaveForCompat + 62) > 67) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);
                                }
                                else if ((chipWaveForCompat + 62) == 67) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;
                                }
                                else {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);
                                }
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 70:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 1) {
                                instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else {
                                instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);
                                let tempModArray = [];
                                if (compressed.charCodeAt(charIndex) == 113) {
                                    let j = 0;
                                    charIndex++;
                                    while (compressed.charCodeAt(charIndex) != 113) {
                                        tempModArray[j] = [];
                                        let o = 0;
                                        while (compressed.charCodeAt(charIndex) != 82) {
                                            tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);
                                            o++;
                                            charIndex++;
                                        }
                                        j++;
                                        charIndex++;
                                    }
                                    instrument.customFeedbackType.set(tempModArray);
                                    charIndex++;
                                }
                            }
                        }
                        break;
                    case 66:
                        {
                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                        }
                        break;
                    case 86:
                        {
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromAbyssBox))
                                    aa = pregoldToEnvelope[aa];
                                legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 81:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (beforeThree && fromGoldBox) {
                                const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];
                                for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                }
                            }
                            else if (!fromGoldBox && !fromUltraBox && !fromAbyssBox) {
                                const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];
                                for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                    instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                }
                            }
                            else {
                                for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                            }
                        }
                        break;
                    case 80:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 69:
                        {
                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                            const jummToUltraEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                legacySettings.operatorEnvelopes = [];
                                for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (fromBeepBox))
                                        aa = pregoldToEnvelope[aa];
                                    if (fromJummBox)
                                        aa = jummToUltraEnvelope[aa];
                                    legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);
                                }
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            else {
                                const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromAbyssBox)) {
                                    instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary["envelope speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.discreteEnvelope = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;
                                }
                                for (let i = 0; i < envelopeCount; i++) {
                                    const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    let index = 0;
                                    const maxCount = Config.instrumentAutomationTargets[target].maxCount;
                                    if (maxCount > 1) {
                                        index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (fromBeepBox))
                                        aa = pregoldToEnvelope[aa];
                                    if (fromJummBox)
                                        aa = jummToUltraEnvelope[aa];
                                    const envelope = clamp(0, Config.envelopes.length, aa);
                                    instrument.addEnvelope(target, index, envelope);
                                }
                            }
                        }
                        break;
                    case 82:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (beforeThree && fromGoldBox) {
                                for (let o = 0; o < Config.operatorCount; o++) {
                                    const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];
                                    const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (old == 3) {
                                        instrument.operators[o].pulseWidth = 5;
                                    }
                                    else if (old == 4) {
                                        instrument.operators[o].pulseWidth = 4;
                                    }
                                    else if (old == 5) {
                                        instrument.operators[o].pulseWidth = 6;
                                    }
                                    instrument.operators[o].waveform = pre3To3g[old];
                                }
                            }
                            else {
                                for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {
                                    if (fromJummBox) {
                                        const jummToG = [0, 1, 3, 2, 4, 5];
                                        instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    }
                                    else {
                                        instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    if (instrument.operators[o].waveform == 2) {
                                        instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                            }
                        }
                        break;
                    case 83:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 3) {
                                const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                    instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);
                                }
                                instrument.spectrumWave.markCustomWaveDirty();
                                charIndex += byteCount;
                            }
                            else if (instrument.type == 4) {
                                const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                                for (let j = 0; j < Config.drumCount; j++) {
                                    for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                        instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);
                                    }
                                    instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();
                                }
                                charIndex += byteCount;
                            }
                            else {
                                throw new Error("Unhandled instrument type for spectrum song tag code.");
                            }
                        }
                        break;
                    case 72:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);
                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                            for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                                instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);
                            }
                            instrument.harmonicsWave.markCustomWaveDirty();
                            charIndex += byteCount;
                        }
                        break;
                    case 88:
                        {
                            if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;
                                if (instrument.aliases) {
                                    instrument.distortion = 0;
                                    instrument.effects |= 1 << 3;
                                }
                            }
                            else {
                                if (fromUltraBox || fromAbyssBox) {
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                            }
                        }
                        break;
                    case 98:
                        {
                            let subStringLength;
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                subStringLength = Math.ceil(barCount * 0.5);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let i = 0; i < barCount; i++) {
                                    this.channels[channelIndex].bars[i] = bits.read(3) + 1;
                                }
                            }
                            else if (beforeFive && fromBeepBox) {
                                let neededBits = 0;
                                while ((1 << neededBits) < this.patternsPerChannel)
                                    neededBits++;
                                subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (let i = 0; i < this.barCount; i++) {
                                        this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;
                                    }
                                }
                            }
                            else {
                                let neededBits = 0;
                                while ((1 << neededBits) < this.patternsPerChannel + 1)
                                    neededBits++;
                                subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (let i = 0; i < this.barCount; i++) {
                                        this.channels[channelIndex].bars[i] = bits.read(neededBits);
                                    }
                                }
                            }
                            charIndex += subStringLength;
                        }
                        break;
                    case 112:
                        {
                            let bitStringLength = 0;
                            let channelIndex;
                            let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);
                            let recentPitchBitLength = (largerChords ? 4 : 3);
                            let recentPitchLength = (largerChords ? 16 : 8);
                            if (beforeThree && fromBeepBox) {
                                channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                charIndex++;
                                bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                bitStringLength = bitStringLength << 6;
                                bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                channelIndex = 0;
                                let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                while (bitStringLengthLength > 0) {
                                    bitStringLength = bitStringLength << 6;
                                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    bitStringLengthLength--;
                                }
                            }
                            const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);
                            charIndex += bitStringLength;
                            const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);
                            let songReverbChannel = -1;
                            let songReverbInstrument = -1;
                            let songReverbIndex = -1;
                            const shouldCorrectTempoMods = fromJummBox;
                            const jummboxTempoMin = 30;
                            while (true) {
                                const channel = this.channels[channelIndex];
                                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                                const isModChannel = this.getChannelIsMod(channelIndex);
                                const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);
                                const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);
                                const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);
                                if (isModChannel) {
                                    let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox);
                                    const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                                        let instrument = channel.instruments[instrumentIndex];
                                        for (let mod = 0; mod < Config.modCount; mod++) {
                                            let status = bits.read(2);
                                            switch (status) {
                                                case 0:
                                                    instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));
                                                    instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));
                                                    break;
                                                case 1:
                                                    instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));
                                                    instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));
                                                    break;
                                                case 2:
                                                    instrument.modChannels[mod] = -1;
                                                    break;
                                                case 3:
                                                    instrument.modChannels[mod] = -2;
                                                    break;
                                            }
                                            if (status != 3) {
                                                instrument.modulators[mod] = bits.read(6);
                                            }
                                            if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == "eq filter" || Config.modulators[instrument.modulators[mod]].name == "note filter")) {
                                                instrument.modFilterTypes[mod] = bits.read(6);
                                            }
                                            if (jumfive && instrument.modChannels[mod] >= 0) {
                                                let forNoteFilter = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);
                                                if (instrument.modulators[mod] == 7) {
                                                    if (forNoteFilter) {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["note filt cut"].index;
                                                    }
                                                    else {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["eq filt cut"].index;
                                                    }
                                                    instrument.modFilterTypes[mod] = 1;
                                                }
                                                else if (instrument.modulators[mod] == 8) {
                                                    if (forNoteFilter) {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["note filt peak"].index;
                                                    }
                                                    else {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["eq filt peak"].index;
                                                    }
                                                    instrument.modFilterTypes[mod] = 2;
                                                }
                                            }
                                            else if (jumfive) {
                                                if (instrument.modulators[mod] == Config.modulators.dictionary["song reverb"].index) {
                                                    songReverbChannel = channelIndex;
                                                    songReverbInstrument = instrumentIndex;
                                                    songReverbIndex = mod;
                                                }
                                            }
                                            if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != 14) {
                                                this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;
                                            }
                                        }
                                    }
                                }
                                const detuneScaleNotes = [];
                                for (let j = 0; j < channel.instruments.length; j++) {
                                    detuneScaleNotes[j] = [];
                                    for (let i = 0; i < Config.modCount; i++) {
                                        detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary["detune"].index));
                                    }
                                }
                                const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;
                                let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);
                                const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);
                                const recentShapes = [];
                                for (let i = 0; i < recentPitches.length; i++) {
                                    recentPitches[i] += octaveOffset;
                                }
                                for (let i = 0; i < this.patternsPerChannel; i++) {
                                    const newPattern = channel.patterns[i];
                                    if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                        newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));
                                        newPattern.instruments.length = 1;
                                    }
                                    else {
                                        if (this.patternInstruments) {
                                            const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);
                                            for (let j = 0; j < instrumentCount; j++) {
                                                newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));
                                            }
                                            newPattern.instruments.length = instrumentCount;
                                        }
                                        else {
                                            newPattern.instruments[0] = 0;
                                            newPattern.instruments.length = Config.instrumentCountMin;
                                        }
                                    }
                                    if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {
                                        newPattern.notes.length = 0;
                                        continue;
                                    }
                                    let curPart = 0;
                                    const newNotes = newPattern.notes;
                                    let noteCount = 0;
                                    while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {
                                        const useOldShape = bits.read(1) == 1;
                                        let newNote = false;
                                        let shapeIndex = 0;
                                        if (useOldShape) {
                                            shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));
                                        }
                                        else {
                                            newNote = bits.read(1) == 1;
                                        }
                                        if (!useOldShape && !newNote) {
                                            if (isModChannel) {
                                                const isBackwards = bits.read(1) == 1;
                                                const restLength = bits.readPartDuration();
                                                if (isBackwards) {
                                                    curPart -= restLength;
                                                }
                                                else {
                                                    curPart += restLength;
                                                }
                                            }
                                            else {
                                                const restLength = (beforeSeven && fromBeepBox)
                                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat
                                                    : bits.readPartDuration();
                                                curPart += restLength;
                                            }
                                        }
                                        else {
                                            let shape;
                                            if (useOldShape) {
                                                shape = recentShapes[shapeIndex];
                                                recentShapes.splice(shapeIndex, 1);
                                            }
                                            else {
                                                shape = {};
                                                if (!largerChords) {
                                                    shape.pitchCount = 1;
                                                    while (shape.pitchCount < 4 && bits.read(1) == 1)
                                                        shape.pitchCount++;
                                                }
                                                else {
                                                    if (bits.read(1) == 1) {
                                                        shape.pitchCount = bits.read(3) + 2;
                                                    }
                                                    else {
                                                        shape.pitchCount = 1;
                                                    }
                                                }
                                                shape.pinCount = bits.readPinCount();
                                                if (fromBeepBox) {
                                                    shape.initialSize = bits.read(2) * 2;
                                                }
                                                else if (!isModChannel) {
                                                    shape.initialSize = bits.read(bitsPerNoteSize);
                                                }
                                                else {
                                                    shape.initialSize = bits.read(9);
                                                }
                                                shape.pins = [];
                                                shape.length = 0;
                                                shape.bendCount = 0;
                                                for (let j = 0; j < shape.pinCount; j++) {
                                                    let pinObj = {};
                                                    pinObj.pitchBend = bits.read(1) == 1;
                                                    if (pinObj.pitchBend)
                                                        shape.bendCount++;
                                                    shape.length += (beforeSeven && fromBeepBox)
                                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat
                                                        : bits.readPartDuration();
                                                    pinObj.time = shape.length;
                                                    if (fromBeepBox) {
                                                        pinObj.size = bits.read(2) * 2;
                                                    }
                                                    else if (!isModChannel) {
                                                        pinObj.size = bits.read(bitsPerNoteSize);
                                                    }
                                                    else {
                                                        pinObj.size = bits.read(9);
                                                    }
                                                    shape.pins.push(pinObj);
                                                }
                                            }
                                            recentShapes.unshift(shape);
                                            if (recentShapes.length > 10)
                                                recentShapes.pop();
                                            let note;
                                            if (newNotes.length <= noteCount) {
                                                note = new Note(0, curPart, curPart + shape.length, shape.initialSize);
                                                newNotes[noteCount++] = note;
                                            }
                                            else {
                                                note = newNotes[noteCount++];
                                                note.start = curPart;
                                                note.end = curPart + shape.length;
                                                note.pins[0].size = shape.initialSize;
                                            }
                                            let pitch;
                                            let pitchCount = 0;
                                            const pitchBends = [];
                                            for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {
                                                const useOldPitch = bits.read(1) == 1;
                                                if (!useOldPitch) {
                                                    const interval = bits.readPitchInterval();
                                                    pitch = lastPitch;
                                                    let intervalIter = interval;
                                                    while (intervalIter > 0) {
                                                        pitch++;
                                                        while (recentPitches.indexOf(pitch) != -1)
                                                            pitch++;
                                                        intervalIter--;
                                                    }
                                                    while (intervalIter < 0) {
                                                        pitch--;
                                                        while (recentPitches.indexOf(pitch) != -1)
                                                            pitch--;
                                                        intervalIter++;
                                                    }
                                                }
                                                else {
                                                    const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));
                                                    pitch = recentPitches[pitchIndex];
                                                    recentPitches.splice(pitchIndex, 1);
                                                }
                                                recentPitches.unshift(pitch);
                                                if (recentPitches.length > recentPitchLength)
                                                    recentPitches.pop();
                                                if (j < shape.pitchCount) {
                                                    note.pitches[pitchCount++] = pitch;
                                                }
                                                else {
                                                    pitchBends.push(pitch);
                                                }
                                                if (j == shape.pitchCount - 1) {
                                                    lastPitch = note.pitches[0];
                                                }
                                                else {
                                                    lastPitch = pitch;
                                                }
                                            }
                                            note.pitches.length = pitchCount;
                                            pitchBends.unshift(note.pitches[0]);
                                            const noteIsForTempoMod = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary["tempo"].index;
                                            let tempoOffset = 0;
                                            if (shouldCorrectTempoMods && noteIsForTempoMod) {
                                                note.pins[0].size += tempoOffset;
                                                tempoOffset = jummboxTempoMin - Config.tempoMin;
                                            }
                                            if (isModChannel) {
                                                note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];
                                            }
                                            let pinCount = 1;
                                            for (const pinObj of shape.pins) {
                                                if (pinObj.pitchBend)
                                                    pitchBends.shift();
                                                const interval = pitchBends[0] - note.pitches[0];
                                                if (note.pins.length <= pinCount) {
                                                    if (isModChannel) {
                                                        note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);
                                                    }
                                                    else {
                                                        note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);
                                                    }
                                                }
                                                else {
                                                    const pin = note.pins[pinCount++];
                                                    pin.interval = interval;
                                                    pin.time = pinObj.time;
                                                    if (isModChannel) {
                                                        pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;
                                                    }
                                                    else {
                                                        pin.size = pinObj.size;
                                                    }
                                                }
                                            }
                                            note.pins.length = pinCount;
                                            if (note.start == 0) {
                                                if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {
                                                    note.continuesLastPattern = (bits.read(1) == 1);
                                                }
                                                else {
                                                    if ((beforeFour && !fromUltraBox && !fromAbyssBox) || fromBeepBox) {
                                                        note.continuesLastPattern = false;
                                                    }
                                                    else {
                                                        note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;
                                                    }
                                                }
                                            }
                                            curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);
                                        }
                                    }
                                    newNotes.length = noteCount;
                                }
                                if (beforeThree && fromBeepBox) {
                                    break;
                                }
                                else {
                                    channelIndex++;
                                    if (channelIndex >= this.getChannelCount())
                                        break;
                                }
                            }
                            if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {
                                for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {
                                    for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {
                                        const instrument = this.channels[channelIndex].instruments[instrumentIndex];
                                        if (effectsIncludeReverb(instrument.effects)) {
                                            instrument.reverb = Config.reverbRange - 1;
                                        }
                                        if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {
                                            const patternIndex = this.channels[channelIndex].bars[0];
                                            if (patternIndex > 0) {
                                                const pattern = this.channels[channelIndex].patterns[patternIndex - 1];
                                                let lowestPart = 6;
                                                for (const note of pattern.notes) {
                                                    if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {
                                                        lowestPart = Math.min(lowestPart, note.start);
                                                    }
                                                }
                                                if (lowestPart > 0) {
                                                    pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));
                                                }
                                            }
                                            else {
                                                if (this.channels[channelIndex].patterns.length < Config.barCountMax) {
                                                    const pattern = new Pattern();
                                                    this.channels[channelIndex].patterns.push(pattern);
                                                    this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;
                                                    if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {
                                                        for (let chn = 0; chn < this.channels.length; chn++) {
                                                            if (this.channels[chn].patterns.length <= this.patternsPerChannel) {
                                                                this.channels[chn].patterns.push(new Pattern());
                                                            }
                                                        }
                                                        this.patternsPerChannel++;
                                                    }
                                                    pattern.instruments.length = 1;
                                                    pattern.instruments[0] = songReverbInstrument;
                                                    pattern.notes.length = 0;
                                                    pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    default:
                        {
                            throw new Error("Unrecognized song tag code " + String.fromCharCode(command) + " at index " + (charIndex - 1) + " " + compressed.substring(0, charIndex));
                        }
                }
            if (Config.willReloadForCustomSamples) {
                window.location.hash = this.toBase64String();
                setTimeout(() => { location.reload(); }, 50);
            }
        }
        static _isProperUrl(string) {
            try {
                return Boolean(new URL(string));
            }
            catch (x) {
                return false;
            }
        }
        static _parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax) {
            const defaultIndex = 0;
            const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;
            const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;
            const customSampleUrlIndex = customSampleUrls.length;
            customSampleUrls.push(url);
            const chipWaveIndex = Config.chipWaves.length;
            let urlSliced = url;
            let customSampleRate = 44100;
            let isCustomPercussive = false;
            let customRootKey = 60;
            let presetIsUsingAdvancedLoopControls = false;
            let presetChipWaveLoopStart = null;
            let presetChipWaveLoopEnd = null;
            let presetChipWaveStartOffset = null;
            let presetChipWaveLoopMode = null;
            let presetChipWavePlayBackwards = false;
            let parsedSampleOptions = false;
            let optionsStartIndex = url.indexOf("!");
            let optionsEndIndex = -1;
            if (optionsStartIndex === 0) {
                optionsEndIndex = url.indexOf("!", optionsStartIndex + 1);
                if (optionsEndIndex !== -1) {
                    const rawOptions = url.slice(optionsStartIndex + 1, optionsEndIndex).split(",");
                    for (const rawOption of rawOptions) {
                        const optionCode = rawOption.charAt(0);
                        const optionData = rawOption.slice(1, rawOption.length);
                        if (optionCode === "s") {
                            customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));
                        }
                        else if (optionCode === "r") {
                            customRootKey = parseFloatWithDefault(optionData, 60);
                        }
                        else if (optionCode === "p") {
                            isCustomPercussive = true;
                        }
                        else if (optionCode === "a") {
                            presetChipWaveLoopStart = parseIntWithDefault(optionData, null);
                            if (presetChipWaveLoopStart != null) {
                                presetIsUsingAdvancedLoopControls = true;
                            }
                        }
                        else if (optionCode === "b") {
                            presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);
                            if (presetChipWaveLoopEnd != null) {
                                presetIsUsingAdvancedLoopControls = true;
                            }
                        }
                        else if (optionCode === "c") {
                            presetChipWaveStartOffset = parseIntWithDefault(optionData, null);
                            if (presetChipWaveStartOffset != null) {
                                presetIsUsingAdvancedLoopControls = true;
                            }
                        }
                        else if (optionCode === "d") {
                            presetChipWaveLoopMode = parseIntWithDefault(optionData, null);
                            if (presetChipWaveLoopMode != null) {
                                presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);
                                presetIsUsingAdvancedLoopControls = true;
                            }
                        }
                        else if (optionCode === "e") {
                            presetChipWavePlayBackwards = true;
                            presetIsUsingAdvancedLoopControls = true;
                        }
                    }
                    urlSliced = url.slice(optionsEndIndex + 1, url.length);
                    parsedSampleOptions = true;
                }
            }
            let parsedUrl = null;
            if (Song._isProperUrl(urlSliced)) {
                parsedUrl = new URL(urlSliced);
            }
            else {
                alert(url + " is not a valid url");
                return false;
            }
            if (parseOldSyntax) {
                if (!parsedSampleOptions && parsedUrl != null) {
                    if (url.indexOf("@") != -1) {
                        urlSliced = url.replaceAll("@", "");
                        parsedUrl = new URL(urlSliced);
                        isCustomPercussive = true;
                    }
                    function sliceForSampleRate() {
                        urlSliced = url.slice(0, url.indexOf(","));
                        parsedUrl = new URL(urlSliced);
                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(",") + 1), 44100));
                    }
                    function sliceForRootKey() {
                        urlSliced = url.slice(0, url.indexOf("!"));
                        parsedUrl = new URL(urlSliced);
                        customRootKey = parseFloatWithDefault(url.slice(url.indexOf("!") + 1), 60);
                    }
                    if (url.indexOf(",") != -1 && url.indexOf("!") != -1) {
                        if (url.indexOf(",") < url.indexOf("!")) {
                            sliceForRootKey();
                            sliceForSampleRate();
                        }
                        else {
                            sliceForSampleRate();
                            sliceForRootKey();
                        }
                    }
                    else {
                        if (url.indexOf(",") != -1) {
                            sliceForSampleRate();
                        }
                        if (url.indexOf("!") != -1) {
                            sliceForRootKey();
                        }
                    }
                }
            }
            if (parsedUrl != null) {
                let urlWithNamedOptions = urlSliced;
                const namedOptions = [];
                if (customSampleRate !== 44100)
                    namedOptions.push("s" + customSampleRate);
                if (customRootKey !== 60)
                    namedOptions.push("r" + customRootKey);
                if (isCustomPercussive)
                    namedOptions.push("p");
                if (presetIsUsingAdvancedLoopControls) {
                    if (presetChipWaveLoopStart != null)
                        namedOptions.push("a" + presetChipWaveLoopStart);
                    if (presetChipWaveLoopEnd != null)
                        namedOptions.push("b" + presetChipWaveLoopEnd);
                    if (presetChipWaveStartOffset != null)
                        namedOptions.push("c" + presetChipWaveStartOffset);
                    if (presetChipWaveLoopMode != null)
                        namedOptions.push("d" + presetChipWaveLoopMode);
                    if (presetChipWavePlayBackwards)
                        namedOptions.push("e");
                }
                if (namedOptions.length > 0) {
                    urlWithNamedOptions = "!" + namedOptions.join(",") + "!" + urlSliced;
                }
                customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;
                const name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\/]*\/)+/, ""));
                const expression = 1.0;
                Config.chipWaves[chipWaveIndex] = {
                    name: name,
                    expression: expression,
                    isCustomSampled: true,
                    isPercussion: isCustomPercussive,
                    rootKey: customRootKey,
                    sampleRate: customSampleRate,
                    samples: defaultIntegratedSamples,
                    index: chipWaveIndex,
                };
                Config.rawChipWaves[chipWaveIndex] = {
                    name: name,
                    expression: expression,
                    isCustomSampled: true,
                    isPercussion: isCustomPercussive,
                    rootKey: customRootKey,
                    sampleRate: customSampleRate,
                    samples: defaultSamples,
                    index: chipWaveIndex,
                };
                Config.rawRawChipWaves[chipWaveIndex] = {
                    name: name,
                    expression: expression,
                    isCustomSampled: true,
                    isPercussion: isCustomPercussive,
                    rootKey: customRootKey,
                    sampleRate: customSampleRate,
                    samples: defaultSamples,
                    index: chipWaveIndex,
                };
                const customSamplePresetSettings = {
                    "type": "chip",
                    "eqFilter": [],
                    "effects": [],
                    "transition": "normal",
                    "fadeInSeconds": 0,
                    "fadeOutTicks": -3,
                    "chord": "harmony",
                    "wave": name,
                    "unison": "none",
                    "envelopes": [],
                };
                if (presetIsUsingAdvancedLoopControls) {
                    customSamplePresetSettings["isUsingAdvancedLoopControls"] = true;
                    customSamplePresetSettings["chipWaveLoopStart"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;
                    customSamplePresetSettings["chipWaveLoopEnd"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;
                    customSamplePresetSettings["chipWaveLoopMode"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;
                    customSamplePresetSettings["chipWavePlayBackwards"] = presetChipWavePlayBackwards;
                    customSamplePresetSettings["chipWaveStartOffset"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;
                }
                const customSamplePreset = {
                    index: 0,
                    name: name,
                    midiProgram: 80,
                    settings: customSamplePresetSettings,
                };
                customSamplePresets.push(customSamplePreset);
                if (!Config.willReloadForCustomSamples) {
                    const rawLoopOptions = {
                        "isUsingAdvancedLoopControls": presetIsUsingAdvancedLoopControls,
                        "chipWaveLoopStart": presetChipWaveLoopStart,
                        "chipWaveLoopEnd": presetChipWaveLoopEnd,
                        "chipWaveLoopMode": presetChipWaveLoopMode,
                        "chipWavePlayBackwards": presetChipWavePlayBackwards,
                        "chipWaveStartOffset": presetChipWaveStartOffset,
                    };
                    startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);
                }
                sampleLoadingState.statusTable[chipWaveIndex] = 0;
                sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;
                sampleLoadingState.totalSamples++;
            }
            return true;
        }
        static _restoreChipWaveListToDefault() {
            Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));
            Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));
            Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));
        }
        static _clearSamples() {
            EditorConfig.customSamples = null;
            Song._restoreChipWaveListToDefault();
            sampleLoadingState.statusTable = {};
            sampleLoadingState.urlTable = {};
            sampleLoadingState.totalSamples = 0;
            sampleLoadingState.samplesLoaded = 0;
            sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));
        }
        toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true) {
            const channelArray = [];
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                const channel = this.channels[channelIndex];
                const instrumentArray = [];
                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                const isModChannel = this.getChannelIsMod(channelIndex);
                for (const instrument of channel.instruments) {
                    instrumentArray.push(instrument.toJsonObject());
                }
                const patternArray = [];
                for (const pattern of channel.patterns) {
                    patternArray.push(pattern.toJsonObject(this, channel, isModChannel));
                }
                const sequenceArray = [];
                if (enableIntro)
                    for (let i = 0; i < this.loopStart; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                for (let l = 0; l < loopCount; l++)
                    for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                if (enableOutro)
                    for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                const channelObject = {
                    "type": isModChannel ? "mod" : (isNoiseChannel ? "drum" : "pitch"),
                    "name": channel.name,
                    "instruments": instrumentArray,
                    "patterns": patternArray,
                    "sequence": sequenceArray,
                };
                if (!isNoiseChannel) {
                    channelObject["octaveScrollBar"] = channel.octave - 1;
                }
                channelArray.push(channelObject);
            }
            const result = {
                "name": this.title,
                "theme": this.setSongTheme,
                "format": Song._format,
                "version": Song._latestAbyssBoxVersion,
                "scale": Config.scales[this.scale].name,
                "customScale": this.scaleCustom,
                "key": Config.keys[this.key].name,
                "keyOctave": this.octave,
                "introBars": this.loopStart,
                "loopBars": this.loopLength,
                "beatsPerBar": this.beatsPerBar,
                "ticksPerBeat": Config.rhythms[this.rhythm].stepsPerBeat,
                "beatsPerMinute": this.tempo,
                "reverb": this.reverb,
                "masterGain": this.masterGain,
                "compressionThreshold": this.compressionThreshold,
                "limitThreshold": this.limitThreshold,
                "limitDecay": this.limitDecay,
                "limitRise": this.limitRise,
                "limitRatio": this.limitRatio,
                "compressionRatio": this.compressionRatio,
                "layeredInstruments": this.layeredInstruments,
                "patternInstruments": this.patternInstruments,
                "channels": channelArray,
            };
            if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {
                result["customSamples"] = EditorConfig.customSamples;
            }
            return result;
        }
        fromJsonObject(jsonObject, jsonFormat = "auto") {
            this.initToDefault(true);
            if (!jsonObject)
                return;
            if (jsonFormat == "auto") {
                if (jsonObject["format"] == "BeepBox") {
                    if (jsonObject["riff"] != undefined) {
                        jsonFormat = "modbox";
                    }
                    if (jsonObject["masterGain"] != undefined) {
                        jsonFormat = "jummbox";
                    }
                }
            }
            const format = (jsonFormat == "auto" ? jsonObject["format"] : jsonFormat).toLowerCase();
            if (jsonObject["name"] != undefined) {
                this.title = jsonObject["name"];
            }
            if (jsonObject["theme"] != undefined) {
                this.setSongTheme = jsonObject["theme"];
            }
            if (jsonObject["customSamples"] != undefined) {
                const customSamples = jsonObject["customSamples"];
                if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(", ") != customSamples.join(", ")) {
                    Config.willReloadForCustomSamples = true;
                    Song._restoreChipWaveListToDefault();
                    let willLoadLegacySamples = false;
                    let willLoadNintariboxSamples = false;
                    let willLoadMarioPaintboxSamples = false;
                    const customSampleUrls = [];
                    const customSamplePresets = [];
                    for (const url of customSamples) {
                        if (url.toLowerCase() === "legacysamples") {
                            if (!willLoadLegacySamples) {
                                willLoadLegacySamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(0);
                            }
                        }
                        else if (url.toLowerCase() === "nintariboxsamples") {
                            if (!willLoadNintariboxSamples) {
                                willLoadNintariboxSamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(1);
                            }
                        }
                        else if (url.toLowerCase() === "mariopaintboxsamples") {
                            if (!willLoadMarioPaintboxSamples) {
                                willLoadMarioPaintboxSamples = true;
                                customSampleUrls.push(url);
                                loadBuiltInSamples(2);
                            }
                        }
                        else {
                            const parseOldSyntax = false;
                            Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);
                        }
                    }
                    if (customSampleUrls.length > 0) {
                        EditorConfig.customSamples = customSampleUrls;
                    }
                    if (customSamplePresets.length > 0) {
                        const customSamplePresetsMap = toNameMap(customSamplePresets);
                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {
                            name: "Custom Sample Presets",
                            presets: customSamplePresetsMap,
                            index: EditorConfig.presetCategories.length,
                        };
                    }
                }
            }
            else {
                let shouldLoadLegacySamples = false;
                if (jsonObject["channels"] != undefined) {
                    for (let channelIndex = 0; channelIndex < jsonObject["channels"].length; channelIndex++) {
                        const channelObject = jsonObject["channels"][channelIndex];
                        if (channelObject["type"] !== "pitch") {
                            continue;
                        }
                        if (Array.isArray(channelObject["instruments"])) {
                            const instrumentObjects = channelObject["instruments"];
                            for (let i = 0; i < instrumentObjects.length; i++) {
                                const instrumentObject = instrumentObjects[i];
                                if (instrumentObject["type"] !== "chip") {
                                    continue;
                                }
                                if (instrumentObject["wave"] == null) {
                                    continue;
                                }
                                const waveName = instrumentObject["wave"];
                                const names = [
                                    "paandorasbox kick",
                                    "paandorasbox snare",
                                    "paandorasbox piano1",
                                    "paandorasbox WOW",
                                    "paandorasbox overdrive",
                                    "paandorasbox trumpet",
                                    "paandorasbox saxophone",
                                    "paandorasbox orchestrahit",
                                    "paandorasbox detatched violin",
                                    "paandorasbox synth",
                                    "paandorasbox sonic3snare",
                                    "paandorasbox come on",
                                    "paandorasbox choir",
                                    "paandorasbox overdriveguitar",
                                    "paandorasbox flute",
                                    "paandorasbox legato violin",
                                    "paandorasbox tremolo violin",
                                    "paandorasbox amen break",
                                    "paandorasbox pizzicato violin",
                                    "paandorasbox tim allen grunt",
                                    "paandorasbox tuba",
                                    "paandorasbox loopingcymbal",
                                    "paandorasbox standardkick",
                                    "paandorasbox standardsnare",
                                    "paandorasbox closedhihat",
                                    "paandorasbox foothihat",
                                    "paandorasbox openhihat",
                                    "paandorasbox crashcymbal",
                                    "paandorasbox pianoC4",
                                    "paandorasbox liver pad",
                                    "paandorasbox marimba",
                                    "paandorasbox susdotwav",
                                    "paandorasbox wackyboxtts",
                                    "paandorasbox peppersteak_1",
                                    "paandorasbox peppersteak_2",
                                    "paandorasbox vinyl_noise",
                                    "paandorasbeta slap bass",
                                    "paandorasbeta HD EB overdrive guitar",
                                    "paandorasbeta sunsoft bass",
                                    "paandorasbeta masculine choir",
                                    "paandorasbeta feminine choir",
                                    "paandorasbeta tololoche",
                                    "paandorasbeta harp",
                                    "paandorasbeta pan flute",
                                    "paandorasbeta krumhorn",
                                    "paandorasbeta timpani",
                                    "paandorasbeta crowd hey",
                                    "paandorasbeta wario land 4 brass",
                                    "paandorasbeta wario land 4 rock organ",
                                    "paandorasbeta wario land 4 DAOW",
                                    "paandorasbeta wario land 4 hour chime",
                                    "paandorasbeta wario land 4 tick",
                                    "paandorasbeta kirby kick",
                                    "paandorasbeta kirby snare",
                                    "paandorasbeta kirby bongo",
                                    "paandorasbeta kirby click",
                                    "paandorasbeta sonor kick",
                                    "paandorasbeta sonor snare",
                                    "paandorasbeta sonor snare (left hand)",
                                    "paandorasbeta sonor snare (right hand)",
                                    "paandorasbeta sonor high tom",
                                    "paandorasbeta sonor low tom",
                                    "paandorasbeta sonor hihat (closed)",
                                    "paandorasbeta sonor hihat (half opened)",
                                    "paandorasbeta sonor hihat (open)",
                                    "paandorasbeta sonor hihat (open tip)",
                                    "paandorasbeta sonor hihat (pedal)",
                                    "paandorasbeta sonor crash",
                                    "paandorasbeta sonor crash (tip)",
                                    "paandorasbeta sonor ride"
                                ];
                                const oldNames = [
                                    "pandoraasbox kick",
                                    "pandoraasbox snare",
                                    "pandoraasbox piano1",
                                    "pandoraasbox WOW",
                                    "pandoraasbox overdrive",
                                    "pandoraasbox trumpet",
                                    "pandoraasbox saxophone",
                                    "pandoraasbox orchestrahit",
                                    "pandoraasbox detatched violin",
                                    "pandoraasbox synth",
                                    "pandoraasbox sonic3snare",
                                    "pandoraasbox come on",
                                    "pandoraasbox choir",
                                    "pandoraasbox overdriveguitar",
                                    "pandoraasbox flute",
                                    "pandoraasbox legato violin",
                                    "pandoraasbox tremolo violin",
                                    "pandoraasbox amen break",
                                    "pandoraasbox pizzicato violin",
                                    "pandoraasbox tim allen grunt",
                                    "pandoraasbox tuba",
                                    "pandoraasbox loopingcymbal",
                                    "pandoraasbox standardkick",
                                    "pandoraasbox standardsnare",
                                    "pandoraasbox closedhihat",
                                    "pandoraasbox foothihat",
                                    "pandoraasbox openhihat",
                                    "pandoraasbox crashcymbal",
                                    "pandoraasbox pianoC4",
                                    "pandoraasbox liver pad",
                                    "pandoraasbox marimba",
                                    "pandoraasbox susdotwav",
                                    "pandoraasbox wackyboxtts",
                                    "pandoraasbox peppersteak_1",
                                    "pandoraasbox peppersteak_2",
                                    "pandoraasbox vinyl_noise",
                                    "pandoraasbeta slap bass",
                                    "pandoraasbeta HD EB overdrive guitar",
                                    "pandoraasbeta sunsoft bass",
                                    "pandoraasbeta masculine choir",
                                    "pandoraasbeta feminine choir",
                                    "pandoraasbeta tololoche",
                                    "pandoraasbeta harp",
                                    "pandoraasbeta pan flute",
                                    "pandoraasbeta krumhorn",
                                    "pandoraasbeta timpani",
                                    "pandoraasbeta crowd hey",
                                    "pandoraasbeta wario land 4 brass",
                                    "pandoraasbeta wario land 4 rock organ",
                                    "pandoraasbeta wario land 4 DAOW",
                                    "pandoraasbeta wario land 4 hour chime",
                                    "pandoraasbeta wario land 4 tick",
                                    "pandoraasbeta kirby kick",
                                    "pandoraasbeta kirby snare",
                                    "pandoraasbeta kirby bongo",
                                    "pandoraasbeta kirby click",
                                    "pandoraasbeta sonor kick",
                                    "pandoraasbeta sonor snare",
                                    "pandoraasbeta sonor snare (left hand)",
                                    "pandoraasbeta sonor snare (right hand)",
                                    "pandoraasbeta sonor high tom",
                                    "pandoraasbeta sonor low tom",
                                    "pandoraasbeta sonor hihat (closed)",
                                    "pandoraasbeta sonor hihat (half opened)",
                                    "pandoraasbeta sonor hihat (open)",
                                    "pandoraasbeta sonor hihat (open tip)",
                                    "pandoraasbeta sonor hihat (pedal)",
                                    "pandoraasbeta sonor crash",
                                    "pandoraasbeta sonor crash (tip)",
                                    "pandoraasbeta sonor ride"
                                ];
                                const veryOldNames = [
                                    "kick",
                                    "snare",
                                    "piano1",
                                    "WOW",
                                    "overdrive",
                                    "trumpet",
                                    "saxophone",
                                    "orchestrahit",
                                    "detatched violin",
                                    "synth",
                                    "sonic3snare",
                                    "come on",
                                    "choir",
                                    "overdriveguitar",
                                    "flute",
                                    "legato violin",
                                    "tremolo violin",
                                    "amen break",
                                    "pizzicato violin",
                                    "tim allen grunt",
                                    "tuba",
                                    "loopingcymbal",
                                    "standardkick",
                                    "standardsnare",
                                    "closedhihat",
                                    "foothihat",
                                    "openhihat",
                                    "crashcymbal",
                                    "pianoC4",
                                    "liver pad",
                                    "marimba",
                                    "susdotwav",
                                    "wackyboxtts"
                                ];
                                if (names.includes(waveName)) {
                                    shouldLoadLegacySamples = true;
                                }
                                else if (oldNames.includes(waveName)) {
                                    shouldLoadLegacySamples = true;
                                    instrumentObject["wave"] = names[oldNames.findIndex(x => x === waveName)];
                                }
                                else if (veryOldNames.includes(waveName)) {
                                    if ((waveName === "trumpet" || waveName === "flute") && (format != "paandorasbox")) ;
                                    else {
                                        shouldLoadLegacySamples = true;
                                        instrumentObject["wave"] = names[veryOldNames.findIndex(x => x === waveName)];
                                    }
                                }
                            }
                        }
                    }
                }
                if (shouldLoadLegacySamples) {
                    Config.willReloadForCustomSamples = true;
                    Song._restoreChipWaveListToDefault();
                    loadBuiltInSamples(0);
                    EditorConfig.customSamples = ["legacySamples"];
                }
                else {
                    if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {
                        Config.willReloadForCustomSamples = true;
                        Song._clearSamples();
                    }
                }
            }
            this.scale = 0;
            if (jsonObject["scale"] != undefined) {
                const oldScaleNames = {
                    "romani :)": "double harmonic :)",
                    "romani :(": "double harmonic :(",
                    "dbl harmonic :)": "double harmonic :)",
                    "dbl harmonic :(": "double harmonic :(",
                    "enigma": "strange",
                };
                const scaleName = (oldScaleNames[jsonObject["scale"]] != undefined) ? oldScaleNames[jsonObject["scale"]] : jsonObject["scale"];
                const scale = Config.scales.findIndex(scale => scale.name == scaleName);
                if (scale != -1)
                    this.scale = scale;
                if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                    if (jsonObject["customScale"] != undefined) {
                        for (var i of jsonObject["customScale"].keys()) {
                            this.scaleCustom[i] = jsonObject["customScale"][i];
                        }
                    }
                }
            }
            if (jsonObject["key"] != undefined) {
                if (typeof (jsonObject["key"]) == "number") {
                    this.key = ((jsonObject["key"] + 1200) >>> 0) % Config.keys.length;
                }
                else if (typeof (jsonObject["key"]) == "string") {
                    const key = jsonObject["key"];
                    if (key === "C+") {
                        this.key = 0;
                        this.octave = 1;
                    }
                    else if (key === "G- (actually F#-)") {
                        this.key = 6;
                        this.octave = -1;
                    }
                    else if (key === "C-") {
                        this.key = 0;
                        this.octave = -1;
                    }
                    else if (key === "oh no (F-)") {
                        this.key = 5;
                        this.octave = -1;
                    }
                    else {
                        const letter = key.charAt(0).toUpperCase();
                        const symbol = key.charAt(1).toLowerCase();
                        const letterMap = { "C": 0, "D": 2, "E": 4, "F": 5, "G": 7, "A": 9, "B": 11 };
                        const accidentalMap = { "#": 1, "♯": 1, "b": -1, "♭": -1 };
                        let index = letterMap[letter];
                        const offset = accidentalMap[symbol];
                        if (index != undefined) {
                            if (offset != undefined)
                                index += offset;
                            if (index < 0)
                                index += 12;
                            index = index % 12;
                            this.key = index;
                        }
                    }
                }
            }
            if (jsonObject["beatsPerMinute"] != undefined) {
                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject["beatsPerMinute"] | 0);
            }
            if (jsonObject["keyOctave"] != undefined) {
                this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject["keyOctave"] | 0);
            }
            let legacyGlobalReverb = 0;
            if (jsonObject["reverb"] != undefined) {
                legacyGlobalReverb = clamp(0, 32, jsonObject["reverb"] | 0);
            }
            if (jsonObject["beatsPerBar"] != undefined) {
                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject["beatsPerBar"] | 0));
            }
            let importedPartsPerBeat = 4;
            if (jsonObject["ticksPerBeat"] != undefined) {
                importedPartsPerBeat = (jsonObject["ticksPerBeat"] | 0) || 4;
                this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);
                if (this.rhythm == -1) {
                    this.rhythm = 1;
                }
            }
            if (jsonObject["masterGain"] != undefined) {
                this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject["masterGain"] || 0));
            }
            else {
                this.masterGain = 1.0;
            }
            if (jsonObject["limitThreshold"] != undefined) {
                this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject["limitThreshold"] || 0));
            }
            else {
                this.limitThreshold = 1.0;
            }
            if (jsonObject["compressionThreshold"] != undefined) {
                this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject["compressionThreshold"] || 0));
            }
            else {
                this.compressionThreshold = 1.0;
            }
            if (jsonObject["limitRise"] != undefined) {
                this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject["limitRise"] || 0));
            }
            else {
                this.limitRise = 4000.0;
            }
            if (jsonObject["limitDecay"] != undefined) {
                this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject["limitDecay"] || 0));
            }
            else {
                this.limitDecay = 4.0;
            }
            if (jsonObject["limitRatio"] != undefined) {
                this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject["limitRatio"] || 0));
            }
            else {
                this.limitRatio = 1.0;
            }
            if (jsonObject["compressionRatio"] != undefined) {
                this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject["compressionRatio"] || 0));
            }
            else {
                this.compressionRatio = 1.0;
            }
            let maxInstruments = 1;
            let maxPatterns = 1;
            let maxBars = 1;
            if (jsonObject["channels"] != undefined) {
                for (const channelObject of jsonObject["channels"]) {
                    if (channelObject["instruments"])
                        maxInstruments = Math.max(maxInstruments, channelObject["instruments"].length | 0);
                    if (channelObject["patterns"])
                        maxPatterns = Math.max(maxPatterns, channelObject["patterns"].length | 0);
                    if (channelObject["sequence"])
                        maxBars = Math.max(maxBars, channelObject["sequence"].length | 0);
                }
            }
            if (jsonObject["layeredInstruments"] != undefined) {
                this.layeredInstruments = !!jsonObject["layeredInstruments"];
            }
            else {
                this.layeredInstruments = false;
            }
            if (jsonObject["patternInstruments"] != undefined) {
                this.patternInstruments = !!jsonObject["patternInstruments"];
            }
            else {
                this.patternInstruments = (maxInstruments > 1);
            }
            this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);
            this.barCount = Math.min(maxBars, Config.barCountMax);
            if (jsonObject["introBars"] != undefined) {
                this.loopStart = clamp(0, this.barCount, jsonObject["introBars"] | 0);
            }
            if (jsonObject["loopBars"] != undefined) {
                this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject["loopBars"] | 0);
            }
            const newPitchChannels = [];
            const newNoiseChannels = [];
            const newModChannels = [];
            if (jsonObject["channels"] != undefined) {
                for (let channelIndex = 0; channelIndex < jsonObject["channels"].length; channelIndex++) {
                    let channelObject = jsonObject["channels"][channelIndex];
                    const channel = new Channel();
                    let isNoiseChannel = false;
                    let isModChannel = false;
                    if (channelObject["type"] != undefined) {
                        isNoiseChannel = (channelObject["type"] == "drum");
                        isModChannel = (channelObject["type"] == "mod");
                    }
                    else {
                        isNoiseChannel = (channelIndex >= 3);
                    }
                    if (isNoiseChannel) {
                        newNoiseChannels.push(channel);
                    }
                    else if (isModChannel) {
                        newModChannels.push(channel);
                    }
                    else {
                        newPitchChannels.push(channel);
                    }
                    if (channelObject["octaveScrollBar"] != undefined) {
                        channel.octave = clamp(0, Config.pitchOctaves, (channelObject["octaveScrollBar"] | 0) + 1);
                        if (isNoiseChannel)
                            channel.octave = 0;
                    }
                    if (channelObject["name"] != undefined) {
                        channel.name = channelObject["name"];
                    }
                    else {
                        channel.name = "";
                    }
                    if (Array.isArray(channelObject["instruments"])) {
                        const instrumentObjects = channelObject["instruments"];
                        for (let i = 0; i < instrumentObjects.length; i++) {
                            if (i >= this.getMaxInstrumentsPerChannel())
                                break;
                            const instrument = new Instrument(isNoiseChannel, isModChannel);
                            channel.instruments[i] = instrument;
                            instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);
                        }
                    }
                    for (let i = 0; i < this.patternsPerChannel; i++) {
                        const pattern = new Pattern();
                        channel.patterns[i] = pattern;
                        let patternObject = undefined;
                        if (channelObject["patterns"])
                            patternObject = channelObject["patterns"][i];
                        if (patternObject == undefined)
                            continue;
                        pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);
                    }
                    channel.patterns.length = this.patternsPerChannel;
                    for (let i = 0; i < this.barCount; i++) {
                        channel.bars[i] = (channelObject["sequence"] != undefined) ? Math.min(this.patternsPerChannel, channelObject["sequence"][i] >>> 0) : 0;
                    }
                    channel.bars.length = this.barCount;
                }
            }
            if (newPitchChannels.length > Config.pitchChannelCountMax)
                newPitchChannels.length = Config.pitchChannelCountMax;
            if (newNoiseChannels.length > Config.noiseChannelCountMax)
                newNoiseChannels.length = Config.noiseChannelCountMax;
            if (newModChannels.length > Config.modChannelCountMax)
                newModChannels.length = Config.modChannelCountMax;
            this.pitchChannelCount = newPitchChannels.length;
            this.noiseChannelCount = newNoiseChannels.length;
            this.modChannelCount = newModChannels.length;
            this.channels.length = 0;
            Array.prototype.push.apply(this.channels, newPitchChannels);
            Array.prototype.push.apply(this.channels, newNoiseChannels);
            Array.prototype.push.apply(this.channels, newModChannels);
            if (Config.willReloadForCustomSamples) {
                window.location.hash = this.toBase64String();
                setTimeout(() => { location.reload(); }, 50);
            }
        }
        getPattern(channelIndex, bar) {
            if (bar < 0 || bar >= this.barCount)
                return null;
            const patternIndex = this.channels[channelIndex].bars[bar];
            if (patternIndex == 0)
                return null;
            return this.channels[channelIndex].patterns[patternIndex - 1];
        }
        getBeatsPerMinute() {
            return this.tempo;
        }
        static getNeededBits(maxValue) {
            return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);
        }
        restoreLimiterDefaults() {
            this.compressionRatio = 1.0;
            this.limitRatio = 1.0;
            this.limitRise = 4000.0;
            this.limitDecay = 4.0;
            this.limitThreshold = 1.0;
            this.compressionThreshold = 1.0;
            this.masterGain = 1.0;
        }
    }
    Song._format = Config.jsonFormat;
    Song._oldestBeepboxVersion = 2;
    Song._latestBeepboxVersion = 9;
    Song._oldestJummBoxVersion = 1;
    Song._latestJummBoxVersion = 6;
    Song._oldestGoldBoxVersion = 1;
    Song._latestGoldBoxVersion = 4;
    Song._oldestUltraBoxVersion = 1;
    Song._latestUltraBoxVersion = 5;
    Song._oldestAbyssBoxVersion = 1;
    Song._latestAbyssBoxVersion = 2;
    Song._variant = 0x61;
    class PickedString {
        constructor() {
            this.delayLine = null;
            this.allPassG = 0.0;
            this.allPassGDelta = 0.0;
            this.sustainFilterA1 = 0.0;
            this.sustainFilterA1Delta = 0.0;
            this.sustainFilterA2 = 0.0;
            this.sustainFilterA2Delta = 0.0;
            this.sustainFilterB0 = 0.0;
            this.sustainFilterB0Delta = 0.0;
            this.sustainFilterB1 = 0.0;
            this.sustainFilterB1Delta = 0.0;
            this.sustainFilterB2 = 0.0;
            this.sustainFilterB2Delta = 0.0;
            this.reset();
        }
        reset() {
            this.delayIndex = -1;
            this.allPassSample = 0.0;
            this.allPassPrevInput = 0.0;
            this.sustainFilterSample = 0.0;
            this.sustainFilterPrevOutput2 = 0.0;
            this.sustainFilterPrevInput1 = 0.0;
            this.sustainFilterPrevInput2 = 0.0;
            this.fractionalDelaySample = 0.0;
            this.prevDelayLength = -1.0;
            this.delayResetOffset = 0;
        }
        update(synth, instrumentState, tone, stringIndex, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, sustainType) {
            const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;
            const prevDelayLength = this.prevDelayLength;
            const phaseDeltaStart = tone.phaseDeltas[stringIndex];
            const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];
            const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);
            const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;
            const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;
            const centerHarmonicStart = radiansPerSampleStart * 2.0;
            const centerHarmonicEnd = radiansPerSampleEnd * 2.0;
            const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));
            const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));
            const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;
            const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;
            const decayCurveEnd = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;
            const register = sustainType == 1 ? 0.25 : 0.0;
            const registerShelfCenter = 15.6;
            const registerLowpassCenter = 3.0 * synth.samplesPerSecond / 48000;
            const decayRateStart = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);
            const decayRateEnd = Math.pow(0.5, decayCurveEnd * Math.pow(shelfRadians / (radiansPerSampleEnd * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);
            const expressionDecayStart = Math.pow(decayRateStart, 0.002);
            const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);
            Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);
            const allPassGStart = Synth.tempFilterStartCoefficients.b[0];
            const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;
            Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);
            const allPassGEnd = Synth.tempFilterEndCoefficients.b[0];
            const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;
            const brightnessType = sustainType == 0 ? 0 : 1;
            if (brightnessType == 0) {
                const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);
                const shelfGainEnd = Math.pow(decayRateEnd, Config.stringDecayRate);
                Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);
                Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);
            }
            else {
                const cornerHardness = Math.pow(brightnessType == 1 ? 0.0 : 1.0, 0.25);
                const lowpass1stOrderCutoffRadiansStart = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);
                const lowpass1stOrderCutoffRadiansEnd = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd, .5);
                const lowpass2ndOrderCutoffRadiansStart = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));
                const lowpass2ndOrderCutoffRadiansEnd = lowpass1stOrderCutoffRadiansEnd * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));
                const lowpass2ndOrderGainStart = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));
                const lowpass2ndOrderGainEnd = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));
                Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);
                Synth.tempFilterEndCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd), lowpass2ndOrderGainEnd);
            }
            synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);
            const sustainFilterA1Start = Synth.tempFilterStartCoefficients.a[1];
            const sustainFilterA2Start = Synth.tempFilterStartCoefficients.a[2];
            const sustainFilterB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;
            const sustainFilterB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;
            const sustainFilterB2Start = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;
            const sustainFilterPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;
            synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);
            const sustainFilterA1End = Synth.tempFilterEndCoefficients.a[1];
            const sustainFilterA2End = Synth.tempFilterEndCoefficients.a[2];
            const sustainFilterB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;
            const sustainFilterB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;
            const sustainFilterB2End = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;
            const sustainFilterPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;
            const periodLengthStart = 1.0 / phaseDeltaStart;
            const periodLengthEnd = 1.0 / phaseDeltaEnd;
            const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);
            const delayLength = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;
            const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;
            this.prevDelayLength = delayLength;
            this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;
            this.allPassG = allPassGStart;
            this.sustainFilterA1 = sustainFilterA1Start;
            this.sustainFilterA2 = sustainFilterA2Start;
            this.sustainFilterB0 = sustainFilterB0Start;
            this.sustainFilterB1 = sustainFilterB1Start;
            this.sustainFilterB2 = sustainFilterB2Start;
            this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;
            this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;
            this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;
            this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;
            this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;
            this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;
            const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;
            const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);
            if (this.delayLine == null || this.delayLine.length <= minBufferLength) {
                const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));
                const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));
                if (!reinitializeImpulse && this.delayLine != null) {
                    const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;
                    const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;
                    this.delayIndex = this.delayLine.length - this.delayResetOffset;
                    for (let i = 0; i < this.delayLine.length; i++) {
                        newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];
                    }
                }
                this.delayLine = newDelayLine;
            }
            const delayLine = this.delayLine;
            const delayBufferMask = (delayLine.length - 1) >> 0;
            if (reinitializeImpulse) {
                this.delayIndex = 0;
                this.allPassSample = 0.0;
                this.allPassPrevInput = 0.0;
                this.sustainFilterSample = 0.0;
                this.sustainFilterPrevOutput2 = 0.0;
                this.sustainFilterPrevInput1 = 0.0;
                this.sustainFilterPrevInput2 = 0.0;
                this.fractionalDelaySample = 0.0;
                const startImpulseFrom = -delayLength;
                const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);
                const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);
                this.delayResetOffset = stopZerosAt;
                for (let i = startZerosFrom; i <= stopZerosAt; i++) {
                    delayLine[i & delayBufferMask] = 0.0;
                }
                const impulseWave = instrumentState.wave;
                const impulseWaveLength = impulseWave.length - 1;
                const impulsePhaseDelta = impulseWaveLength / periodLengthStart;
                const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);
                const startImpulseFromSample = Math.ceil(startImpulseFrom);
                const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;
                const stopImpulseAtSample = stopImpulseAt;
                let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;
                let prevWaveIntegral = 0.0;
                for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {
                    const impulsePhaseInt = impulsePhase | 0;
                    const index = impulsePhaseInt % impulseWaveLength;
                    let nextWaveIntegral = impulseWave[index];
                    const phaseRatio = impulsePhase - impulsePhaseInt;
                    nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;
                    const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;
                    const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);
                    const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);
                    const combinedFade = fadeIn * fadeOut;
                    const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade);
                    delayLine[i & delayBufferMask] += sample * curvedFade;
                    prevWaveIntegral = nextWaveIntegral;
                    impulsePhase += impulsePhaseDelta;
                }
            }
        }
    }
    class EnvelopeComputer {
        constructor() {
            this.noteSecondsStart = 0.0;
            this.noteSecondsStartUnscaled = 0.0;
            this.noteSecondsEnd = 0.0;
            this.noteSecondsEndUnscaled = 0.0;
            this.noteTicksStart = 0.0;
            this.noteTicksEnd = 0.0;
            this.noteSizeStart = Config.noteSizeMax;
            this.noteSizeEnd = Config.noteSizeMax;
            this.prevNoteSize = Config.noteSizeMax;
            this.nextNoteSize = Config.noteSizeMax;
            this._noteSizeFinal = Config.noteSizeMax;
            this.prevNoteSecondsStart = 0.0;
            this.prevNoteSecondsStartUnscaled = 0.0;
            this.prevNoteSecondsEnd = 0.0;
            this.prevNoteSecondsEndUnscaled = 0.0;
            this.prevNoteTicksStart = 0.0;
            this.prevNoteTicksEnd = 0.0;
            this._prevNoteSizeFinal = Config.noteSizeMax;
            this.prevSlideStart = false;
            this.prevSlideEnd = false;
            this.nextSlideStart = false;
            this.nextSlideEnd = false;
            this.prevSlideRatioStart = 0.0;
            this.prevSlideRatioEnd = 0.0;
            this.nextSlideRatioStart = 0.0;
            this.nextSlideRatioEnd = 0.0;
            this.envelopeStarts = [];
            this.envelopeEnds = [];
            this._modifiedEnvelopeIndices = [];
            this._modifiedEnvelopeCount = 0;
            this.lowpassCutoffDecayVolumeCompensation = 1.0;
            const length = 45;
            for (let i = 0; i < length; i++) {
                this.envelopeStarts[i] = 1.0;
                this.envelopeEnds[i] = 1.0;
            }
            this.reset();
        }
        reset() {
            this.noteSecondsEnd = 0.0;
            this.noteSecondsEndUnscaled = 0.0;
            this.noteTicksEnd = 0.0;
            this._noteSizeFinal = Config.noteSizeMax;
            this.prevNoteSecondsEnd = 0.0;
            this.prevNoteSecondsEndUnscaled = 0.0;
            this.prevNoteTicksEnd = 0.0;
            this._prevNoteSizeFinal = Config.noteSizeMax;
            this._modifiedEnvelopeCount = 0;
        }
        computeEnvelopes(instrument, currentPart, tickTimeStart, tickTimeStartReal, secondsPerTick, tone, timeScale, song, instrumentState) {
            const secondsPerTickUnscaled = secondsPerTick;
            secondsPerTick *= timeScale;
            const transition = instrument.getTransition();
            if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {
                this.prevNoteSecondsEnd = this.noteSecondsEnd;
                this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;
                this.prevNoteTicksEnd = this.noteTicksEnd;
                this._prevNoteSizeFinal = this._noteSizeFinal;
                this.noteSecondsEnd = 0.0;
                this.noteSecondsEndUnscaled = 0.0;
                this.noteTicksEnd = 0.0;
            }
            if (tone != null) {
                if (tone.note != null) {
                    this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;
                }
                else {
                    this._noteSizeFinal = Config.noteSizeMax;
                }
            }
            const tickTimeEnd = tickTimeStart + timeScale;
            const tickTimeEndReal = tickTimeStartReal + 1.0;
            const noteSecondsStart = this.noteSecondsEnd;
            const noteSecondsStartUnscaled = this.noteSecondsEndUnscaled;
            const noteSecondsEnd = noteSecondsStart + secondsPerTick;
            const noteSecondsEndUnscaled = noteSecondsStartUnscaled + secondsPerTickUnscaled;
            const noteTicksStart = this.noteTicksEnd;
            const noteTicksEnd = noteTicksStart + 1.0;
            const prevNoteSecondsStart = this.prevNoteSecondsEnd;
            const prevNoteSecondsStartUnscaled = this.prevNoteSecondsEndUnscaled;
            const prevNoteSecondsEnd = prevNoteSecondsStart + secondsPerTick;
            const prevNoteSecondsEndUnscaled = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;
            const prevNoteTicksStart = this.prevNoteTicksEnd;
            const prevNoteTicksEnd = prevNoteTicksStart + 1.0;
            const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);
            const beatTimeStart = beatsPerTick * tickTimeStart;
            const beatTimeEnd = beatsPerTick * tickTimeEnd;
            let noteSizeStart = this._noteSizeFinal;
            let noteSizeEnd = this._noteSizeFinal;
            let prevNoteSize = this._prevNoteSizeFinal;
            let nextNoteSize = 0;
            let prevSlideStart = false;
            let prevSlideEnd = false;
            let nextSlideStart = false;
            let nextSlideEnd = false;
            let prevSlideRatioStart = 0.0;
            let prevSlideRatioEnd = 0.0;
            let nextSlideRatioStart = 0.0;
            let nextSlideRatioEnd = 0.0;
            if (tone != null && tone.note != null && !tone.passedEndOfNote) {
                const endPinIndex = tone.note.getEndPinIndex(currentPart);
                const startPin = tone.note.pins[endPinIndex - 1];
                const endPin = tone.note.pins[endPinIndex];
                const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;
                const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;
                const ratioStart = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);
                const ratioEnd = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);
                noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;
                noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;
                if (transition.slides) {
                    const noteStartTick = tone.noteStartPart * Config.ticksPerPart;
                    const noteEndTick = tone.noteEndPart * Config.ticksPerPart;
                    const noteLengthTicks = noteEndTick - noteStartTick;
                    const maximumSlideTicks = noteLengthTicks * 0.5;
                    const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);
                    if (tone.prevNote != null && !tone.forceContinueAtStart) {
                        if (tickTimeStartReal - noteStartTick < slideTicks) {
                            prevSlideStart = true;
                            prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);
                        }
                        if (tickTimeEndReal - noteStartTick < slideTicks) {
                            prevSlideEnd = true;
                            prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);
                        }
                    }
                    if (tone.nextNote != null && !tone.forceContinueAtEnd) {
                        nextNoteSize = tone.nextNote.pins[0].size;
                        if (noteEndTick - tickTimeStartReal < slideTicks) {
                            nextSlideStart = true;
                            nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);
                        }
                        if (noteEndTick - tickTimeEndReal < slideTicks) {
                            nextSlideEnd = true;
                            nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);
                        }
                    }
                }
            }
            let lowpassCutoffDecayVolumeCompensation = 1.0;
            let usedNoteSize = false;
            for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {
                let automationTarget;
                let targetIndex;
                let envelope;
                if (envelopeIndex == instrument.envelopeCount) {
                    if (usedNoteSize)
                        break;
                    automationTarget = Config.instrumentAutomationTargets.dictionary["noteVolume"];
                    targetIndex = 0;
                    envelope = Config.envelopes.dictionary["note size"];
                }
                else {
                    let envelopeSettings = instrument.envelopes[envelopeIndex];
                    automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];
                    targetIndex = envelopeSettings.index;
                    envelope = Config.envelopes[envelopeSettings.envelope];
                    if (envelope.type == 0)
                        usedNoteSize = true;
                }
                if (automationTarget.computeIndex != null) {
                    const computeIndex = automationTarget.computeIndex + targetIndex;
                    let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);
                    if (prevSlideStart) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);
                        envelopeStart += (other - envelopeStart) * prevSlideRatioStart;
                    }
                    if (nextSlideStart) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);
                        envelopeStart += (other - envelopeStart) * nextSlideRatioStart;
                    }
                    let envelopeEnd = envelopeStart;
                    if (instrument.discreteEnvelope == false) {
                        envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);
                        if (prevSlideEnd) {
                            const other = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);
                            envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;
                        }
                        if (nextSlideEnd) {
                            const other = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);
                            envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;
                        }
                    }
                    this.envelopeStarts[computeIndex] *= envelopeStart;
                    this.envelopeEnds[computeIndex] *= envelopeEnd;
                    this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;
                    if (automationTarget.isFilter) {
                        const filterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;
                        if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == 0) {
                            lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));
                        }
                    }
                }
            }
            this.noteSecondsStart = noteSecondsStart;
            this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;
            this.noteSecondsEnd = noteSecondsEnd;
            this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;
            this.noteTicksStart = noteTicksStart;
            this.noteTicksEnd = noteTicksEnd;
            this.prevNoteSecondsStart = prevNoteSecondsStart;
            this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;
            this.prevNoteSecondsEnd = prevNoteSecondsEnd;
            this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;
            this.prevNoteTicksStart = prevNoteTicksStart;
            this.prevNoteTicksEnd = prevNoteTicksEnd;
            this.prevNoteSize = prevNoteSize;
            this.nextNoteSize = nextNoteSize;
            this.noteSizeStart = noteSizeStart;
            this.noteSizeEnd = noteSizeEnd;
            this.prevSlideStart = prevSlideStart;
            this.prevSlideEnd = prevSlideEnd;
            this.nextSlideStart = nextSlideStart;
            this.nextSlideEnd = nextSlideEnd;
            this.prevSlideRatioStart = prevSlideRatioStart;
            this.prevSlideRatioEnd = prevSlideRatioEnd;
            this.nextSlideRatioStart = nextSlideRatioStart;
            this.nextSlideRatioEnd = nextSlideRatioEnd;
            this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;
        }
        clearEnvelopes() {
            for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {
                const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];
                this.envelopeStarts[computeIndex] = 1.0;
                this.envelopeEnds[computeIndex] = 1.0;
            }
            this._modifiedEnvelopeCount = 0;
        }
        static computeEnvelope(envelope, time, beats, noteSize) {
            switch (envelope.type) {
                case 0: return Synth.noteSizeToVolumeMult(noteSize);
                case 1: return 1.0;
                case 4: return 1.0 / (1.0 + time * envelope.speed);
                case 5: return 1.0 - 1.0 / (1.0 + time * envelope.speed);
                case 6: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;
                case 7: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;
                case 2: return Math.max(1.0, 2.0 - time * 10.0);
                case 3:
                    const attack = 0.25 / Math.sqrt(envelope.speed);
                    return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);
                case 8: return Math.pow(2, -envelope.speed * time);
                case 13: return 1.0 * +(time < (0.25 / Math.sqrt(envelope.speed)));
                case 9:
                    let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;
                    temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));
                    temp = temp > 0.0 ? temp : 0.0;
                    return temp;
                case 11: {
                    let lin = (1.0 - (time / (16 / envelope.speed)));
                    lin = lin > 0.0 ? lin : 0.0;
                    return lin;
                }
                case 12: {
                    let lin = (time / (16 / envelope.speed));
                    lin = lin < 1.0 ? lin : 1.0;
                    return lin;
                }
                default: throw new Error("Unrecognized operator envelope type.");
            }
        }
        static getLowpassCutoffDecayVolumeCompensation(envelope) {
            if (envelope.type == 8)
                return 1.25 + 0.025 * envelope.speed;
            if (envelope.type == 4)
                return 1.0 + 0.02 * envelope.speed;
            return 1.0;
        }
    }
    class Tone {
        constructor() {
            this.pitches = Array(Config.maxChordSize + 2).fill(0);
            this.pitchCount = 0;
            this.chordSize = 0;
            this.drumsetPitch = null;
            this.note = null;
            this.prevNote = null;
            this.nextNote = null;
            this.prevNotePitchIndex = 0;
            this.nextNotePitchIndex = 0;
            this.freshlyAllocated = true;
            this.atNoteStart = false;
            this.isOnLastTick = false;
            this.passedEndOfNote = false;
            this.forceContinueAtStart = false;
            this.forceContinueAtEnd = false;
            this.noteStartPart = 0;
            this.noteEndPart = 0;
            this.ticksSinceReleased = 0;
            this.liveInputSamplesHeld = 0;
            this.lastInterval = 0;
            this.noiseSample = 0.0;
            this.noiseSampleA = 0.0;
            this.noiseSampleB = 0.0;
            this.stringSustainStart = 0;
            this.stringSustainEnd = 0;
            this.phases = [];
            this.operatorWaves = [];
            this.phaseDeltas = [];
            this.directions = [];
            this.chipWaveCompletions = [];
            this.chipWavePrevWaves = [];
            this.chipWaveCompletionsLastWave = [];
            this.phaseDeltaScales = [];
            this.expression = 0.0;
            this.expressionDelta = 0.0;
            this.operatorExpressions = [];
            this.operatorExpressionDeltas = [];
            this.prevPitchExpressions = Array(Config.maxPitchOrOperatorCount).fill(null);
            this.prevVibrato = null;
            this.prevStringDecay = null;
            this.pulseWidth = 0.0;
            this.pulseWidthDelta = 0.0;
            this.decimalOffset = 0.0;
            this.supersawDynamism = 0.0;
            this.supersawDynamismDelta = 0.0;
            this.supersawUnisonDetunes = [];
            this.supersawShape = 0.0;
            this.supersawShapeDelta = 0.0;
            this.supersawDelayLength = 0.0;
            this.supersawDelayLengthDelta = 0.0;
            this.supersawDelayLine = null;
            this.supersawDelayIndex = -1;
            this.supersawPrevPhaseDelta = null;
            this.pickedStrings = [];
            this.noteFilters = [];
            this.noteFilterCount = 0;
            this.initialNoteFilterInput1 = 0.0;
            this.initialNoteFilterInput2 = 0.0;
            this.specialIntervalExpressionMult = 1.0;
            this.feedbackOutputs = [];
            this.feedbackMult = 0.0;
            this.feedbackDelta = 0.0;
            this.stereoVolumeLStart = 0.0;
            this.stereoVolumeRStart = 0.0;
            this.stereoVolumeLDelta = 0.0;
            this.stereoVolumeRDelta = 0.0;
            this.stereoDelayStart = 0.0;
            this.stereoDelayEnd = 0.0;
            this.stereoDelayDelta = 0.0;
            this.customVolumeStart = 0.0;
            this.customVolumeEnd = 0.0;
            this.filterResonanceStart = 0.0;
            this.filterResonanceDelta = 0.0;
            this.isFirstOrder = false;
            this.envelopeComputer = new EnvelopeComputer();
            this.reset();
        }
        reset() {
            this.noiseSample = 0.0;
            this.noiseSampleA = 0.0;
            this.noiseSampleB = 0.0;
            for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                this.phases[i] = 0.0;
                this.directions[i] = 1;
                this.chipWaveCompletions[i] = 0;
                this.chipWavePrevWaves[i] = 0;
                this.chipWaveCompletionsLastWave[i] = 0;
                this.operatorWaves[i] = Config.operatorWaves[0];
                this.feedbackOutputs[i] = 0.0;
                this.prevPitchExpressions[i] = null;
            }
            for (let i = 0; i < this.noteFilterCount; i++) {
                this.noteFilters[i].resetOutput();
            }
            this.noteFilterCount = 0;
            this.initialNoteFilterInput1 = 0.0;
            this.initialNoteFilterInput2 = 0.0;
            this.liveInputSamplesHeld = 0;
            this.supersawDelayIndex = -1;
            for (const pickedString of this.pickedStrings) {
                pickedString.reset();
            }
            this.envelopeComputer.reset();
            this.prevVibrato = null;
            this.prevStringDecay = null;
            this.supersawPrevPhaseDelta = null;
            this.drumsetPitch = null;
        }
    }
    class InstrumentState {
        constructor() {
            this.awake = false;
            this.computed = false;
            this.tonesAddedInThisTick = false;
            this.flushingDelayLines = false;
            this.deactivateAfterThisTick = false;
            this.attentuationProgress = 0.0;
            this.flushedSamples = 0;
            this.activeTones = new Deque();
            this.activeModTones = new Deque();
            this.releasedTones = new Deque();
            this.liveInputTones = new Deque();
            this.type = 0;
            this.synthesizer = null;
            this.wave = null;
            this.isUsingAdvancedLoopControls = false;
            this.chipWaveLoopStart = 0;
            this.chipWaveLoopEnd = 0;
            this.chipWaveLoopMode = 0;
            this.chipWavePlayBackwards = false;
            this.chipWaveStartOffset = 0;
            this.noisePitchFilterMult = 1.0;
            this.unison = null;
            this.unisonVoices = 1;
            this.unisonSpread = 0.0;
            this.unisonOffset = 0.0;
            this.unisonExpression = 1.4;
            this.unisonSign = 1.0;
            this.chord = null;
            this.effects = 0;
            this.volumeScale = 0;
            this.aliases = false;
            this.arpTime = 0;
            this.vibratoTime = 0;
            this.nextVibratoTime = 0;
            this.envelopeTime = 0;
            this.eqFilterVolume = 1.0;
            this.eqFilterVolumeDelta = 0.0;
            this.mixVolume = 1.0;
            this.mixVolumeDelta = 0.0;
            this.delayInputMult = 0.0;
            this.delayInputMultDelta = 0.0;
            this.distortion = 0.0;
            this.distortionDelta = 0.0;
            this.distortionDrive = 0.0;
            this.distortionDriveDelta = 0.0;
            this.distortionFractionalInput1 = 0.0;
            this.distortionFractionalInput2 = 0.0;
            this.distortionFractionalInput3 = 0.0;
            this.distortionPrevInput = 0.0;
            this.distortionNextOutput = 0.0;
            this.bitcrusherPrevInput = 0.0;
            this.bitcrusherCurrentOutput = 0.0;
            this.bitcrusherPhase = 1.0;
            this.bitcrusherPhaseDelta = 0.0;
            this.bitcrusherPhaseDeltaScale = 1.0;
            this.bitcrusherScale = 1.0;
            this.bitcrusherScaleScale = 1.0;
            this.bitcrusherFoldLevel = 1.0;
            this.bitcrusherFoldLevelScale = 1.0;
            this.eqFilters = [];
            this.eqFilterCount = 0;
            this.initialEqFilterInput1 = 0.0;
            this.initialEqFilterInput2 = 0.0;
            this.panningDelayLine = null;
            this.panningDelayPos = 0;
            this.panningVolumeL = 0.0;
            this.panningVolumeR = 0.0;
            this.panningVolumeDeltaL = 0.0;
            this.panningVolumeDeltaR = 0.0;
            this.panningOffsetL = 0.0;
            this.panningOffsetR = 0.0;
            this.panningOffsetDeltaL = 0.0;
            this.panningOffsetDeltaR = 0.0;
            this.chorusDelayLineL = null;
            this.chorusDelayLineR = null;
            this.chorusDelayLineDirty = false;
            this.chorusDelayPos = 0;
            this.chorusPhase = 0;
            this.chorusVoiceMult = 0;
            this.chorusVoiceMultDelta = 0;
            this.chorusCombinedMult = 0;
            this.chorusCombinedMultDelta = 0;
            this.ringModMix = 0;
            this.ringModMixDelta = 0;
            this.ringModPhase = 0;
            this.ringModPhaseDelta = 0;
            this.ringModPhaseDeltaScale = 1.0;
            this.rmWaveformIndex = 0.0;
            this.rmPulseWidth = 0.0;
            this.echoDelayLineL = null;
            this.echoDelayLineR = null;
            this.echoDelayLineDirty = false;
            this.echoDelayPos = 0;
            this.echoDelayOffsetStart = 0;
            this.echoDelayOffsetEnd = null;
            this.echoDelayOffsetRatio = 0.0;
            this.echoDelayOffsetRatioDelta = 0.0;
            this.echoMult = 0.0;
            this.echoMultDelta = 0.0;
            this.echoShelfA1 = 0.0;
            this.echoShelfB0 = 0.0;
            this.echoShelfB1 = 0.0;
            this.echoShelfSampleL = 0.0;
            this.echoShelfSampleR = 0.0;
            this.echoShelfPrevInputL = 0.0;
            this.echoShelfPrevInputR = 0.0;
            this.reverbDelayLine = null;
            this.reverbDelayLineDirty = false;
            this.reverbDelayPos = 0;
            this.reverbMult = 0.0;
            this.reverbMultDelta = 0.0;
            this.reverbShelfA1 = 0.0;
            this.reverbShelfB0 = 0.0;
            this.reverbShelfB1 = 0.0;
            this.reverbShelfSample0 = 0.0;
            this.reverbShelfSample1 = 0.0;
            this.reverbShelfSample2 = 0.0;
            this.reverbShelfSample3 = 0.0;
            this.reverbShelfPrevInput0 = 0.0;
            this.reverbShelfPrevInput1 = 0.0;
            this.reverbShelfPrevInput2 = 0.0;
            this.reverbShelfPrevInput3 = 0.0;
            this.phaserSamples = null;
            this.phaserPrevInputs = null;
            this.phaserFeedbackMult = 0.0;
            this.phaserFeedbackMultDelta = 0.0;
            this.phaserMix = 0.0;
            this.phaserMixDelta = 0.0;
            this.phaserBreakCoef = 0.0;
            this.phaserBreakCoefDelta = 0.0;
            this.phaserStages = 0;
            this.phaserStagesDelta = 0;
            this.envelopeComputer = new EnvelopeComputer();
            this.spectrumWave = new SpectrumWaveState();
            this.harmonicsWave = new HarmonicsWaveState();
            this.drumsetSpectrumWaves = [];
            for (let i = 0; i < Config.drumCount; i++) {
                this.drumsetSpectrumWaves[i] = new SpectrumWaveState();
            }
        }
        allocateNecessaryBuffers(synth, instrument, samplesPerTick) {
            if (effectsIncludePanning(instrument.effects)) {
                if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {
                    this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);
                }
            }
            if (effectsIncludeChorus(instrument.effects)) {
                if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {
                    this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);
                }
                if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {
                    this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);
                }
            }
            if (effectsIncludeEcho(instrument.effects)) {
                const safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1));
                const baseEchoDelayBufferSize = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);
                const safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2;
                if (this.echoDelayLineL == null || this.echoDelayLineR == null) {
                    this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);
                    this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);
                }
                else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {
                    const newDelayLineL = new Float32Array(safeEchoDelayBufferSize);
                    const newDelayLineR = new Float32Array(safeEchoDelayBufferSize);
                    const oldMask = this.echoDelayLineL.length - 1;
                    for (let i = 0; i < this.echoDelayLineL.length; i++) {
                        newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];
                        newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];
                    }
                    this.echoDelayPos = this.echoDelayLineL.length;
                    this.echoDelayLineL = newDelayLineL;
                    this.echoDelayLineR = newDelayLineR;
                }
            }
            if (effectsIncludeReverb(instrument.effects)) {
                if (this.reverbDelayLine == null) {
                    this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);
                }
            }
            if (effectsIncludePhaser(instrument.effects)) {
                if (this.phaserSamples == null) {
                    this.phaserSamples = new Float32Array(Config.phaserMaxStages);
                    this.phaserPrevInputs = new Float32Array(Config.phaserMaxStages);
                }
            }
        }
        deactivate() {
            this.bitcrusherPrevInput = 0.0;
            this.bitcrusherCurrentOutput = 0.0;
            this.bitcrusherPhase = 1.0;
            for (let i = 0; i < this.eqFilterCount; i++) {
                this.eqFilters[i].resetOutput();
            }
            this.eqFilterCount = 0;
            this.initialEqFilterInput1 = 0.0;
            this.initialEqFilterInput2 = 0.0;
            this.distortionFractionalInput1 = 0.0;
            this.distortionFractionalInput2 = 0.0;
            this.distortionFractionalInput3 = 0.0;
            this.distortionPrevInput = 0.0;
            this.distortionNextOutput = 0.0;
            this.panningDelayPos = 0;
            if (this.panningDelayLine != null)
                for (let i = 0; i < this.panningDelayLine.length; i++)
                    this.panningDelayLine[i] = 0.0;
            this.echoDelayOffsetEnd = null;
            this.echoShelfSampleL = 0.0;
            this.echoShelfSampleR = 0.0;
            this.echoShelfPrevInputL = 0.0;
            this.echoShelfPrevInputR = 0.0;
            this.reverbShelfSample0 = 0.0;
            this.reverbShelfSample1 = 0.0;
            this.reverbShelfSample2 = 0.0;
            this.reverbShelfSample3 = 0.0;
            this.reverbShelfPrevInput0 = 0.0;
            this.reverbShelfPrevInput1 = 0.0;
            this.reverbShelfPrevInput2 = 0.0;
            this.reverbShelfPrevInput3 = 0.0;
            if (this.phaserSamples != null)
                for (let i = 0; i < this.phaserSamples.length; i++)
                    this.phaserSamples[i] = 0.0;
            if (this.phaserPrevInputs != null)
                for (let i = 0; i < this.phaserPrevInputs.length; i++)
                    this.phaserPrevInputs[i] = 0.0;
            this.volumeScale = 1.0;
            this.aliases = false;
            this.awake = false;
            this.flushingDelayLines = false;
            this.deactivateAfterThisTick = false;
            this.attentuationProgress = 0.0;
            this.flushedSamples = 0;
        }
        resetAllEffects() {
            this.deactivate();
            this.vibratoTime = 0;
            this.nextVibratoTime = 0;
            this.arpTime = 0;
            this.envelopeTime = 0;
            this.envelopeComputer.reset();
            if (this.chorusDelayLineDirty) {
                for (let i = 0; i < this.chorusDelayLineL.length; i++)
                    this.chorusDelayLineL[i] = 0.0;
                for (let i = 0; i < this.chorusDelayLineR.length; i++)
                    this.chorusDelayLineR[i] = 0.0;
            }
            if (this.echoDelayLineDirty) {
                for (let i = 0; i < this.echoDelayLineL.length; i++)
                    this.echoDelayLineL[i] = 0.0;
                for (let i = 0; i < this.echoDelayLineR.length; i++)
                    this.echoDelayLineR[i] = 0.0;
            }
            if (this.reverbDelayLineDirty) {
                for (let i = 0; i < this.reverbDelayLine.length; i++)
                    this.reverbDelayLine[i] = 0.0;
            }
            this.chorusPhase = 0.0;
            this.ringModPhase = 0.0;
        }
        compute(synth, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex) {
            this.computed = true;
            this.type = instrument.type;
            this.synthesizer = Synth.getInstrumentSynthFunction(instrument);
            this.unison = Config.unisons[instrument.unison];
            this.chord = instrument.getChord();
            this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;
            this.effects = instrument.effects;
            this.aliases = instrument.aliases;
            this.volumeScale = 1.0;
            this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);
            const samplesPerSecond = synth.samplesPerSecond;
            this.updateWaves(instrument, samplesPerSecond);
            const ticksIntoBar = synth.getTicksIntoBar();
            const tickTimeStart = ticksIntoBar;
            const secondsPerTick = samplesPerTick / synth.samplesPerSecond;
            const currentPart = synth.getCurrentPart();
            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];
            if (synth.isModActive(Config.modulators.dictionary["envelope speed"].index, channelIndex, instrumentIndex)) {
                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary["envelope speed"].index, channelIndex, instrumentIndex, false)));
                if (Number.isInteger(useEnvelopeSpeed)) {
                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];
                }
                else {
                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];
                }
            }
            this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, useEnvelopeSpeed, synth.song, this);
            const envelopeStarts = this.envelopeComputer.envelopeStarts;
            const envelopeEnds = this.envelopeComputer.envelopeEnds;
            const usesDistortion = effectsIncludeDistortion(this.effects);
            const usesBitcrusher = effectsIncludeBitcrusher(this.effects);
            const usesPanning = effectsIncludePanning(this.effects);
            const usesChorus = effectsIncludeChorus(this.effects);
            const usesEcho = effectsIncludeEcho(this.effects);
            const usesReverb = effectsIncludeReverb(this.effects);
            const usesRingModulation = effectsIncludeRM(this.effects);
            const usesPhaser = effectsIncludePhaser(this.effects);
            if (usesDistortion) {
                let useDistortionStart = instrument.distortion;
                let useDistortionEnd = instrument.distortion;
                if (synth.isModActive(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex)) {
                    useDistortionStart = synth.getModValue(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex, false);
                    useDistortionEnd = synth.getModValue(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song distortion"].index, channelIndex, instrumentIndex)) {
                    useDistortionStart = clamp(0, Config.distortionRange, useDistortionStart * (synth.getModValue(Config.modulators.dictionary["song distortion"].index, undefined, undefined, false) - Config.modulators.dictionary["song distortion"].convertRealFactor) / Config.distortionRange);
                    useDistortionEnd = clamp(0, Config.distortionRange, useDistortionEnd * (synth.getModValue(Config.modulators.dictionary["song distortion"].index, undefined, undefined, true) - Config.modulators.dictionary["song distortion"].convertRealFactor) / Config.distortionRange);
                }
                const distortionSliderStart = Math.min(1.0, useDistortionStart / (Config.distortionRange - 1));
                const distortionSliderEnd = Math.min(1.0, useDistortionEnd / (Config.distortionRange - 1));
                const distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);
                const distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);
                const distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;
                const distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;
                this.distortion = distortionStart;
                this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;
                this.distortionDrive = distortionDriveStart;
                this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;
            }
            if (usesBitcrusher) {
                let freqSettingStart = instrument.bitcrusherFreq;
                let freqSettingEnd = instrument.bitcrusherFreq;
                if (synth.isModActive(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex)) {
                    freqSettingStart = synth.getModValue(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex, false);
                    freqSettingEnd = synth.getModValue(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex, true);
                }
                let quantizationSettingStart = instrument.bitcrusherQuantization;
                let quantizationSettingEnd = instrument.bitcrusherQuantization;
                if (synth.isModActive(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex)) {
                    quantizationSettingStart = synth.getModValue(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex, false);
                    quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song bitcrush"].index, channelIndex, instrumentIndex)) {
                    quantizationSettingStart = clamp(0, Config.bitcrusherQuantizationRange, quantizationSettingStart * (synth.getModValue(Config.modulators.dictionary["song bitcrush"].index, undefined, undefined, false) - Config.modulators.dictionary["song bitcrush"].convertRealFactor) / Config.bitcrusherQuantizationRange);
                    quantizationSettingEnd = clamp(0, Config.bitcrusherQuantizationRange, quantizationSettingEnd * (synth.getModValue(Config.modulators.dictionary["song bitcrush"].index, undefined, undefined, true) - Config.modulators.dictionary["song bitcrush"].convertRealFactor) / Config.bitcrusherQuantizationRange);
                }
                if (synth.isModActive(Config.modulators.dictionary["song freqcrush"].index, channelIndex, instrumentIndex)) {
                    freqSettingStart = clamp(0, Config.bitcrusherFreqRange, freqSettingStart * (synth.getModValue(Config.modulators.dictionary["song freqcrush"].index, undefined, undefined, false) - Config.modulators.dictionary["song freqcrush"].convertRealFactor) / Config.bitcrusherFreqRange);
                    freqSettingEnd = clamp(0, Config.bitcrusherFreqRange, freqSettingEnd * (synth.getModValue(Config.modulators.dictionary["song freqcrush"].index, undefined, undefined, true) - Config.modulators.dictionary["song freqcrush"].convertRealFactor) / Config.bitcrusherFreqRange);
                }
                const basePitch = Config.keys[synth.song.key].basePitch + (Config.pitchesPerOctave * synth.song.octave);
                const freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);
                const freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);
                const phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);
                const phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);
                this.bitcrusherPhaseDelta = phaseDeltaStart;
                this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);
                const scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));
                const scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));
                this.bitcrusherScale = scaleStart;
                this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);
                const foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);
                const foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);
                this.bitcrusherFoldLevel = foldLevelStart;
                this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);
            }
            let eqFilterVolume = 1.0;
            if (instrument.eqFilterType) {
                const eqFilterSettingsStart = instrument.eqFilter;
                if (instrument.eqSubFilters[1] == null)
                    instrument.eqSubFilters[1] = new FilterSettings();
                const eqFilterSettingsEnd = instrument.eqSubFilters[1];
                let startSimpleFreq = instrument.eqFilterSimpleCut;
                let startSimpleGain = instrument.eqFilterSimplePeak;
                let endSimpleFreq = instrument.eqFilterSimpleCut;
                let endSimpleGain = instrument.eqFilterSimplePeak;
                let filterChanges = false;
                if (synth.isModActive(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex)) {
                    startSimpleFreq = synth.getModValue(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex, false);
                    endSimpleFreq = synth.getModValue(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex, true);
                    filterChanges = true;
                }
                if (synth.isModActive(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex)) {
                    startSimpleGain = synth.getModValue(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex, false);
                    endSimpleGain = synth.getModValue(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex, true);
                    filterChanges = true;
                }
                let startPoint;
                if (filterChanges) {
                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);
                    eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);
                    startPoint = eqFilterSettingsStart.controlPoints[0];
                    let endPoint = eqFilterSettingsEnd.controlPoints[0];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length < 1)
                        this.eqFilters[0] = new DynamicBiquadFilter();
                    this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                }
                else {
                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);
                    startPoint = eqFilterSettingsStart.controlPoints[0];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length < 1)
                        this.eqFilters[0] = new DynamicBiquadFilter();
                    this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                }
                eqFilterVolume *= startPoint.getVolumeCompensationMult();
                this.eqFilterCount = 1;
                eqFilterVolume = Math.min(3.0, eqFilterVolume);
            }
            else {
                const eqFilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;
                for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {
                    let startPoint = eqFilterSettings.controlPoints[i];
                    let endPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];
                    if (startPoint.type != endPoint.type) {
                        startPoint = endPoint;
                    }
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length <= i)
                        this.eqFilters[i] = new DynamicBiquadFilter();
                    this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                    eqFilterVolume *= startPoint.getVolumeCompensationMult();
                }
                this.eqFilterCount = eqFilterSettings.controlPointCount;
                eqFilterVolume = Math.min(3.0, eqFilterVolume);
            }
            const mainInstrumentVolume = Synth.instrumentVolumeToVolumeMult(instrument.volume);
            this.mixVolume = mainInstrumentVolume;
            let mixVolumeEnd = mainInstrumentVolume;
            if (synth.isModActive(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex)) {
                const startVal = synth.getModValue(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex, false);
                const endVal = synth.getModValue(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex, true);
                this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
            }
            if (synth.isModActive(Config.modulators.dictionary["song volume"].index)) {
                this.mixVolume *= (synth.getModValue(Config.modulators.dictionary["song volume"].index, undefined, undefined, false)) / 100.0;
                mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary["song volume"].index, undefined, undefined, true)) / 100.0;
            }
            this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;
            let eqFilterVolumeStart = eqFilterVolume;
            let eqFilterVolumeEnd = eqFilterVolume;
            let delayInputMultStart = 1.0;
            let delayInputMultEnd = 1.0;
            if (usesPanning) {
                let usePanStart = instrument.pan;
                let usePanEnd = instrument.pan;
                if (synth.isModActive(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex)) {
                    usePanStart = synth.getModValue(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex, false);
                    usePanEnd = synth.getModValue(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song panning"].index, channelIndex, instrumentIndex)) {
                    usePanStart = clamp(-Config.panMax / 2, Config.panMax, usePanStart + synth.getModValue(Config.modulators.dictionary["song panning"].index, undefined, undefined, false));
                    usePanEnd = clamp(-Config.panMax / 2, Config.panMax, usePanEnd + synth.getModValue(Config.modulators.dictionary["song panning"].index, undefined, undefined, true));
                }
                let panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter));
                let panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter));
                const volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;
                const volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;
                const volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;
                const volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;
                const maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;
                let usePanDelayStart = instrument.panDelay;
                let usePanDelayEnd = instrument.panDelay;
                if (synth.isModActive(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex)) {
                    usePanDelayStart = synth.getModValue(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex, false);
                    usePanDelayEnd = synth.getModValue(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex, true);
                }
                const delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;
                const delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;
                const delayStartL = Math.max(0.0, delayStart);
                const delayStartR = Math.max(0.0, -delayStart);
                const delayEndL = Math.max(0.0, delayEnd);
                const delayEndR = Math.max(0.0, -delayEnd);
                this.panningVolumeL = volumeStartL;
                this.panningVolumeR = volumeStartR;
                this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;
                this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;
                this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;
                this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;
                this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;
                this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;
            }
            if (usesChorus) {
                let useChorusStart = instrument.chorus;
                let useChorusEnd = instrument.chorus;
                if (synth.isModActive(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex)) {
                    useChorusStart = synth.getModValue(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex, false);
                    useChorusEnd = synth.getModValue(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song chorus"].index, channelIndex, instrumentIndex)) {
                    useChorusStart = clamp(0, Config.chorusRange, useChorusStart * (synth.getModValue(Config.modulators.dictionary["song chorus"].index, undefined, undefined, false) - Config.modulators.dictionary["song chorus"].convertRealFactor) / Config.chorusRange);
                    useChorusEnd = clamp(0, Config.chorusRange, useChorusEnd * (synth.getModValue(Config.modulators.dictionary["song chorus"].index, undefined, undefined, true) - Config.modulators.dictionary["song chorus"].convertRealFactor) / Config.chorusRange);
                }
                let chorusStart = Math.min(1.0, useChorusStart / (Config.chorusRange - 1));
                let chorusEnd = Math.min(1.0, useChorusEnd / (Config.chorusRange - 1));
                chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;
                chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;
                const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);
                const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);
                this.chorusVoiceMult = chorusStart;
                this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;
                this.chorusCombinedMult = chorusCombinedMultStart;
                this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;
            }
            if (usesRingModulation) {
                let useRingModStart = instrument.ringModulation;
                let useRingModEnd = instrument.ringModulation;
                let useRingModHzStart = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));
                let useRingModHzEnd = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));
                let ringModMinHz = 20;
                let ringModMaxHz = 4400;
                if (synth.isModActive(Config.modulators.dictionary["ring modulation"].index, channelIndex, instrumentIndex)) {
                    useRingModStart = (synth.getModValue(Config.modulators.dictionary["ring modulation"].index, channelIndex, instrumentIndex, false));
                    useRingModEnd = (synth.getModValue(Config.modulators.dictionary["ring modulation"].index, channelIndex, instrumentIndex, true));
                }
                if (synth.isModActive(Config.modulators.dictionary["song ring modulation"].index, channelIndex, instrumentIndex)) {
                    useRingModStart = clamp(0, Config.ringModRange, useRingModStart * (synth.getModValue(Config.modulators.dictionary["song ring modulation"].index, undefined, undefined, false) - Config.modulators.dictionary["song ring modulation"].convertRealFactor) / Config.ringModRange);
                    useRingModEnd = clamp(0, Config.ringModRange, useRingModEnd * (synth.getModValue(Config.modulators.dictionary["song ring modulation"].index, undefined, undefined, true) - Config.modulators.dictionary["song ring modulation"].convertRealFactor) / Config.ringModRange);
                }
                if (synth.isModActive(Config.modulators.dictionary["ring mod hertz"].index, channelIndex, instrumentIndex)) {
                    useRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary["ring mod hertz"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));
                    useRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary["ring mod hertz"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));
                }
                let ringModStart = Math.min(1.0, useRingModStart / (Config.ringModRange - 1));
                let ringModEnd = Math.min(1.0, useRingModEnd / (Config.ringModRange - 1));
                this.ringModMix = ringModStart;
                this.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;
                let ringModPhaseDeltaStart = (ringModMinHz * Math.pow(ringModMaxHz / ringModMinHz, useRingModHzStart)) / synth.samplesPerSecond;
                let ringModPhaseDeltaEnd = (ringModMinHz * Math.pow(ringModMaxHz / ringModMinHz, useRingModHzEnd)) / synth.samplesPerSecond;
                this.ringModPhaseDelta = ringModPhaseDeltaStart;
                this.ringModPhaseDeltaScale = Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);
                this.rmWaveformIndex = instrument.rmWaveformIndex;
                this.rmPulseWidth = instrument.rmPulseWidth;
            }
            let maxEchoMult = 0.0;
            let averageEchoDelaySeconds = 0.0;
            if (usesEcho) {
                let useEchoSustainStart = instrument.echoSustain;
                let useEchoSustainEnd = instrument.echoSustain;
                if (synth.isModActive(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex)) {
                    useEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex, false));
                    useEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex, true));
                }
                const echoMultStart = Math.min(1.0, Math.pow(useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;
                const echoMultEnd = Math.min(1.0, Math.pow(useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;
                this.echoMult = echoMultStart;
                this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);
                maxEchoMult = Math.max(echoMultStart, echoMultEnd);
                let useEchoDelayStart = instrument.echoDelay;
                let useEchoDelayEnd = instrument.echoDelay;
                let ignoreTicks = false;
                if (synth.isModActive(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex)) {
                    useEchoDelayStart = synth.getModValue(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex, false);
                    useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex, true);
                    ignoreTicks = true;
                }
                const tmpEchoDelayOffsetStart = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);
                const tmpEchoDelayOffsetEnd = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);
                if (this.echoDelayOffsetEnd != null && !ignoreTicks) {
                    this.echoDelayOffsetStart = this.echoDelayOffsetEnd;
                }
                else {
                    this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;
                }
                this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;
                averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;
                this.echoDelayOffsetRatio = 0.0;
                this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;
                const shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;
                Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);
                this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];
                this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];
                this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];
            }
            let maxReverbMult = 0.0;
            if (usesPhaser) {
                const phaserMinFeedback = 0.0;
                const phaserMaxFeedback = 0.95;
                const phaserFeedbackMultSlider = instrument.phaserFeedback / Config.phaserFeedbackRange;
                const phaserFeedbackMultEnvelopeStart = envelopeStarts[43];
                const phaserFeedbackMultEnvelopeEnd = envelopeEnds[43];
                let phaserFeedbackMultRawStart = phaserFeedbackMultSlider * phaserFeedbackMultEnvelopeStart;
                let phaserFeedbackMultRawEnd = phaserFeedbackMultSlider * phaserFeedbackMultEnvelopeEnd;
                if (synth.isModActive(Config.modulators.dictionary["phaser feedback"].index, channelIndex, instrumentIndex)) {
                    phaserFeedbackMultRawStart = synth.getModValue(Config.modulators.dictionary["phaser feedback"].index, channelIndex, instrumentIndex, false) / (Config.phaserFeedbackRange);
                    phaserFeedbackMultRawEnd = synth.getModValue(Config.modulators.dictionary["phaser feedback"].index, channelIndex, instrumentIndex, true) / (Config.phaserFeedbackRange);
                }
                const phaserFeedbackMultStart = Math.max(phaserMinFeedback, Math.min(phaserMaxFeedback, phaserFeedbackMultRawStart));
                const phaserFeedbackMultEnd = Math.max(phaserMinFeedback, Math.min(phaserMaxFeedback, phaserFeedbackMultRawEnd));
                this.phaserFeedbackMult = phaserFeedbackMultStart;
                this.phaserFeedbackMultDelta = (phaserFeedbackMultEnd - phaserFeedbackMultStart) / roundedSamplesPerTick;
                const phaserMixSlider = instrument.phaserMix / (Config.phaserMixRange - 1);
                const phaserMixEnvelopeStart = envelopeStarts[42];
                const phaserMixEnvelopeEnd = envelopeEnds[42];
                let phaserMixStart = phaserMixSlider * phaserMixEnvelopeStart;
                let phaserMixEnd = phaserMixSlider * phaserMixEnvelopeEnd;
                if (synth.isModActive(Config.modulators.dictionary["phaser"].index, channelIndex, instrumentIndex)) {
                    phaserMixStart = Math.max(0, Math.min(Config.phaserMixRange - 1, synth.getModValue(Config.modulators.dictionary["phaser"].index, channelIndex, instrumentIndex, false))) / (Config.phaserMixRange - 1);
                    phaserMixEnd = Math.max(0, Math.min(Config.phaserMixRange - 1, synth.getModValue(Config.modulators.dictionary["phaser"].index, channelIndex, instrumentIndex, true))) / (Config.phaserMixRange - 1);
                }
                this.phaserMix = phaserMixStart;
                this.phaserMixDelta = (phaserMixEnd - phaserMixStart) / roundedSamplesPerTick;
                const phaserBreakFreqSlider = instrument.phaserFreq / (Config.phaserFreqRange - 1);
                let phaserBreakFreqEnvelopeStart = envelopeStarts[41];
                let phaserBreakFreqEnvelopeEnd = envelopeEnds[41];
                let phaserBreakFreqRawStart = phaserBreakFreqSlider * phaserBreakFreqEnvelopeStart;
                let phaserBreakFreqRawEnd = phaserBreakFreqSlider * phaserBreakFreqEnvelopeEnd;
                if (synth.isModActive(Config.modulators.dictionary["phaser frequency"].index, channelIndex, instrumentIndex)) {
                    phaserBreakFreqRawStart = synth.getModValue(Config.modulators.dictionary["phaser frequency"].index, channelIndex, instrumentIndex, false) / (Config.phaserFreqRange);
                    phaserBreakFreqRawEnd = synth.getModValue(Config.modulators.dictionary["phaser frequency"].index, channelIndex, instrumentIndex, true) / (Config.phaserFreqRange);
                }
                const phaserBreakFreqRemappedStart = Config.phaserMinFreq * Math.pow(Config.phaserMaxFreq / Config.phaserMinFreq, phaserBreakFreqRawStart);
                const phaserBreakFreqRemappedEnd = Config.phaserMinFreq * Math.pow(Config.phaserMaxFreq / Config.phaserMinFreq, phaserBreakFreqRawEnd);
                const phaserBreakFreqStart = Math.max(Config.phaserMinFreq, Math.min(Config.phaserMaxFreq, phaserBreakFreqRemappedStart));
                const phaserBreakFreqStartT = Math.tan(Math.PI * phaserBreakFreqStart / samplesPerSecond);
                const phaserBreakCoefStart = (phaserBreakFreqStartT - 1) / (phaserBreakFreqStartT + 1);
                const phaserBreakFreqEnd = Math.max(Config.phaserMinFreq, Math.min(Config.phaserMaxFreq, phaserBreakFreqRemappedEnd));
                const phaserBreakFreqEndT = Math.tan(Math.PI * phaserBreakFreqEnd / samplesPerSecond);
                const phaserBreakCoefEnd = (phaserBreakFreqEndT - 1) / (phaserBreakFreqEndT + 1);
                this.phaserBreakCoef = phaserBreakCoefStart;
                this.phaserBreakCoefDelta = (phaserBreakCoefEnd - phaserBreakCoefStart) / roundedSamplesPerTick;
                const phaserStagesEnvelopeStart = envelopeStarts[44];
                const phaserStagesEnvelopeEnd = envelopeEnds[44];
                const phaserStagesSlider = instrument.phaserStages;
                let phaserStagesStart = Math.max(Config.phaserMinStages, Math.min(Config.phaserMaxStages, phaserStagesSlider * phaserStagesEnvelopeStart));
                let phaserStagesEnd = Math.max(Config.phaserMinStages, Math.min(Config.phaserMaxStages, phaserStagesSlider * phaserStagesEnvelopeEnd));
                if (synth.isModActive(Config.modulators.dictionary["phaser stages"].index, channelIndex, instrumentIndex)) {
                    phaserStagesStart = Math.round(synth.getModValue(Config.modulators.dictionary["phaser stages"].index, channelIndex, instrumentIndex, false));
                    phaserStagesEnd = Math.round(synth.getModValue(Config.modulators.dictionary["phaser stages"].index, channelIndex, instrumentIndex, false));
                }
                this.phaserStages = phaserStagesStart;
                this.phaserStagesDelta = (phaserStagesEnd - phaserStagesStart) / roundedSamplesPerTick;
            }
            if (usesReverb) {
                let useReverbStart = instrument.reverb;
                let useReverbEnd = instrument.reverb;
                if (synth.isModActive(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex)) {
                    useReverbStart = synth.getModValue(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex, false);
                    useReverbEnd = synth.getModValue(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song reverb"].index, channelIndex, instrumentIndex)) {
                    useReverbStart *= (synth.getModValue(Config.modulators.dictionary["song reverb"].index, undefined, undefined, false) - Config.modulators.dictionary["song reverb"].convertRealFactor) / Config.reverbRange;
                    useReverbEnd *= (synth.getModValue(Config.modulators.dictionary["song reverb"].index, undefined, undefined, true) - Config.modulators.dictionary["song reverb"].convertRealFactor) / Config.reverbRange;
                }
                const reverbStart = Math.min(1.0, Math.pow(useReverbStart / Config.reverbRange, 0.667)) * 0.425;
                const reverbEnd = Math.min(1.0, Math.pow(useReverbEnd / Config.reverbRange, 0.667)) * 0.425;
                this.reverbMult = reverbStart;
                this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;
                maxReverbMult = Math.max(reverbStart, reverbEnd);
                const shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;
                Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);
                this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];
                this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];
                this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];
            }
            if (this.tonesAddedInThisTick) {
                this.attentuationProgress = 0.0;
                this.flushedSamples = 0;
                this.flushingDelayLines = false;
            }
            else if (!this.flushingDelayLines) {
                if (this.attentuationProgress == 0.0) {
                    eqFilterVolumeEnd = 0.0;
                }
                else {
                    eqFilterVolumeStart = 0.0;
                    eqFilterVolumeEnd = 0.0;
                }
                const attenuationThreshold = 1.0 / 256.0;
                const halfLifeMult = -Math.log2(attenuationThreshold);
                let delayDuration = 0.0;
                if (usesChorus) {
                    delayDuration += Config.chorusMaxDelay;
                }
                if (usesEcho) {
                    const attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);
                    const halfLife = -1.0 / Math.log2(attenuationPerSecond);
                    const echoDuration = halfLife * halfLifeMult;
                    delayDuration += echoDuration;
                }
                if (usesReverb) {
                    const averageMult = maxReverbMult * 2.0;
                    const averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;
                    const attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);
                    const halfLife = -1.0 / Math.log2(attenuationPerSecond);
                    const reverbDuration = halfLife * halfLifeMult;
                    delayDuration += reverbDuration;
                }
                const secondsInTick = samplesPerTick / samplesPerSecond;
                const progressInTick = secondsInTick / delayDuration;
                const progressAtEndOfTick = this.attentuationProgress + progressInTick;
                if (progressAtEndOfTick >= 1.0) {
                    delayInputMultEnd = 0.0;
                }
                this.attentuationProgress = progressAtEndOfTick;
                if (this.attentuationProgress >= 1.0) {
                    this.flushingDelayLines = true;
                }
            }
            else {
                eqFilterVolumeStart = 0.0;
                eqFilterVolumeEnd = 0.0;
                delayInputMultStart = 0.0;
                delayInputMultEnd = 0.0;
                let totalDelaySamples = 0;
                if (usesChorus)
                    totalDelaySamples += synth.chorusDelayBufferSize;
                if (usesEcho)
                    totalDelaySamples += this.echoDelayLineL.length;
                if (usesReverb)
                    totalDelaySamples += Config.reverbDelayBufferSize;
                this.flushedSamples += roundedSamplesPerTick;
                if (this.flushedSamples >= totalDelaySamples) {
                    this.deactivateAfterThisTick = true;
                }
            }
            this.eqFilterVolume = eqFilterVolumeStart;
            this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;
            this.delayInputMult = delayInputMultStart;
            this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;
        }
        updateWaves(instrument, samplesPerSecond) {
            this.volumeScale = 1.0;
            if (instrument.type == 0) {
                this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;
                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;
                this.chipWaveLoopStart = instrument.chipWaveLoopStart;
                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;
                this.chipWaveLoopMode = instrument.chipWaveLoopMode;
                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;
                this.chipWaveStartOffset = instrument.chipWaveStartOffset;
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 6) {
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 9) {
                this.wave = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;
                this.volumeScale = 0.05;
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 2) {
                this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 5) {
                this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 7) {
                this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 3) {
                this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);
                this.unisonVoices = instrument.unisonVoices;
                this.unisonSpread = instrument.unisonSpread;
                this.unisonOffset = instrument.unisonOffset;
                this.unisonExpression = instrument.unisonExpression;
                this.unisonSign = instrument.unisonSign;
            }
            else if (instrument.type == 4) {
                for (let i = 0; i < Config.drumCount; i++) {
                    this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));
                }
                this.wave = null;
            }
            else {
                this.wave = null;
            }
        }
        getDrumsetWave(pitch) {
            if (this.type == 4) {
                return this.drumsetSpectrumWaves[pitch].wave;
            }
            else {
                throw new Error("Unhandled instrument type in getDrumsetWave");
            }
        }
        static drumsetIndexReferenceDelta(index) {
            return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;
        }
        static _drumsetIndexToSpectrumOctave(index) {
            return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));
        }
    }
    class ChannelState {
        constructor() {
            this.instruments = [];
            this.muted = false;
            this.singleSeamlessInstrument = null;
        }
    }
    class Synth {
        syncSongState() {
            const channelCount = this.song.getChannelCount();
            for (let i = this.channels.length; i < channelCount; i++) {
                this.channels[i] = new ChannelState();
            }
            this.channels.length = channelCount;
            for (let i = 0; i < channelCount; i++) {
                const channel = this.song.channels[i];
                const channelState = this.channels[i];
                for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {
                    channelState.instruments[j] = new InstrumentState();
                }
                channelState.instruments.length = channel.instruments.length;
                if (channelState.muted != channel.muted) {
                    channelState.muted = channel.muted;
                    if (channelState.muted) {
                        for (const instrumentState of channelState.instruments) {
                            instrumentState.resetAllEffects();
                        }
                    }
                }
            }
        }
        initModFilters(song) {
            if (song != null) {
                for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {
                    for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {
                        const instrument = song.channels[channelIndex].instruments[instrumentIndex];
                        instrument.tmpEqFilterStart = instrument.eqFilter;
                        instrument.tmpEqFilterEnd = null;
                        instrument.tmpNoteFilterStart = instrument.noteFilter;
                        instrument.tmpNoteFilterEnd = null;
                    }
                }
            }
        }
        warmUpSynthesizer(song) {
            if (song != null) {
                this.syncSongState();
                const samplesPerTick = this.getSamplesPerTick();
                for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {
                    for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {
                        const instrument = song.channels[channelIndex].instruments[instrumentIndex];
                        const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];
                        Synth.getInstrumentSynthFunction(instrument);
                        instrumentState.vibratoTime = 0;
                        instrumentState.nextVibratoTime = 0;
                        instrumentState.envelopeTime = 0;
                        instrumentState.arpTime = 0;
                        instrumentState.updateWaves(instrument, this.samplesPerSecond);
                        instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);
                    }
                }
            }
            var dummyArray = new Float32Array(1);
            this.isPlayingSong = true;
            this.synthesize(dummyArray, dummyArray, 1, true);
            this.isPlayingSong = false;
        }
        computeLatestModValues() {
            if (this.song != null && this.song.modChannelCount > 0) {
                let latestModTimes = [];
                let latestModInsTimes = [];
                this.modValues = [];
                this.nextModValues = [];
                this.modInsValues = [];
                this.nextModInsValues = [];
                this.heldMods = [];
                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                    latestModInsTimes[channel] = [];
                    this.modInsValues[channel] = [];
                    this.nextModInsValues[channel] = [];
                    for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {
                        this.modInsValues[channel][instrument] = [];
                        this.nextModInsValues[channel][instrument] = [];
                        latestModInsTimes[channel][instrument] = [];
                    }
                }
                let currentPart = this.beat * Config.partsPerBeat + this.part;
                for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {
                    if (!(this.song.channels[channelIndex].muted)) {
                        let pattern;
                        for (let currentBar = this.bar; currentBar >= 0; currentBar--) {
                            pattern = this.song.getPattern(channelIndex, currentBar);
                            if (pattern != null) {
                                let instrumentIdx = pattern.instruments[0];
                                let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];
                                let latestPinParts = [];
                                let latestPinValues = [];
                                let partsInBar = (currentBar == this.bar)
                                    ? currentPart
                                    : this.findPartsInBar(currentBar);
                                for (const note of pattern.notes) {
                                    if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {
                                        if (note.start == partsInBar) {
                                            latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;
                                            latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;
                                        }
                                        if (note.end <= partsInBar) {
                                            latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;
                                            latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;
                                        }
                                        else {
                                            latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;
                                            for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {
                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                    const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;
                                                    const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;
                                                    const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;
                                                    latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);
                                                    pinIdx = note.pins.length;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (let mod = 0; mod < Config.modCount; mod++) {
                                    if (latestPinParts[mod] != null) {
                                        if (Config.modulators[instrument.modulators[mod]].forSong) {
                                            if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModTimes[instrument.modulators[mod]]) {
                                                this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);
                                                latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];
                                            }
                                        }
                                        else {
                                            let usedInstruments = [];
                                            if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {
                                                for (let i = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {
                                                    usedInstruments.push(i);
                                                }
                                            }
                                            else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {
                                                const tgtPattern = this.song.getPattern(instrument.modChannels[mod], currentBar);
                                                if (tgtPattern != null)
                                                    usedInstruments = tgtPattern.instruments;
                                            }
                                            else {
                                                usedInstruments.push(instrument.modInstruments[mod]);
                                            }
                                            for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {
                                                const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary["eq filter"].index;
                                                const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary["note filter"].index;
                                                let modulatorAdjust = instrument.modulators[mod];
                                                if (eqFilterParam) {
                                                    modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);
                                                }
                                                else if (noteFilterParam) {
                                                    modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);
                                                }
                                                if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null
                                                    || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]) {
                                                    if (eqFilterParam) {
                                                        let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                                                        if (instrument.modFilterTypes[mod] == 0) {
                                                            tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];
                                                        }
                                                        else {
                                                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                                                if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {
                                                                    tgtInstrument.tmpEqFilterStart = new FilterSettings();
                                                                    tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());
                                                                    i = Config.filterMorphCount;
                                                                }
                                                            }
                                                            if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {
                                                                if (instrument.modFilterTypes[mod] % 2)
                                                                    tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];
                                                                else
                                                                    tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];
                                                            }
                                                        }
                                                        tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;
                                                    }
                                                    else if (noteFilterParam) {
                                                        let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                                                        if (instrument.modFilterTypes[mod] == 0) {
                                                            tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];
                                                        }
                                                        else {
                                                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                                                if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {
                                                                    tgtInstrument.tmpNoteFilterStart = new FilterSettings();
                                                                    tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());
                                                                    i = Config.filterMorphCount;
                                                                }
                                                            }
                                                            if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {
                                                                if (instrument.modFilterTypes[mod] % 2)
                                                                    tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];
                                                                else
                                                                    tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];
                                                            }
                                                        }
                                                        tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;
                                                    }
                                                    else
                                                        this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);
                                                    latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        determineInvalidModulators(instrument) {
            if (this.song == null)
                return;
            for (let mod = 0; mod < Config.modCount; mod++) {
                instrument.invalidModulators[mod] = true;
                if (instrument.modChannels[mod] == -1) {
                    if (instrument.modulators[mod] != 0)
                        instrument.invalidModulators[mod] = false;
                    continue;
                }
                const channel = this.song.channels[instrument.modChannels[mod]];
                if (channel == null)
                    continue;
                let tgtInstrumentList = [];
                if (instrument.modInstruments[mod] >= channel.instruments.length) {
                    tgtInstrumentList = channel.instruments;
                }
                else {
                    tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];
                }
                for (let i = 0; i < tgtInstrumentList.length; i++) {
                    const tgtInstrument = tgtInstrumentList[i];
                    if (tgtInstrument == null)
                        continue;
                    const str = Config.modulators[instrument.modulators[mod]].name;
                    if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != 14 && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))
                        || ((tgtInstrument.type != 1 && tgtInstrument.type != 11) && (str == "fm slider 1" || str == "fm slider 2" || str == "fm slider 3" || str == "fm slider 4" || str == "fm feedback"))
                        || tgtInstrument.type != 11 && (str == "fm slider 5" || str == "fm slider 6")
                        || ((tgtInstrument.type != 6 && tgtInstrument.type != 8) && (str == "pulse width" || str == "decimal offset"))
                        || ((tgtInstrument.type != 8) && (str == "dynamism" || str == "spread" || str == "saw shape"))
                        || (!tgtInstrument.getChord().arpeggiates && (str == "arp speed" || str == "reset arp"))
                        || (tgtInstrument.eqFilterType && str == "eq filter")
                        || (!tgtInstrument.eqFilterType && (str == "eq filt cut" || str == "eq filt peak"))
                        || (str == "eq filter" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))
                        || (tgtInstrument.noteFilterType && str == "note filter")
                        || (!tgtInstrument.noteFilterType && (str == "note filt cut" || str == "note filt peak"))
                        || (str == "note filter" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {
                        instrument.invalidModulators[mod] = false;
                        i = tgtInstrumentList.length;
                    }
                }
            }
        }
        static operatorAmplitudeCurve(amplitude) {
            return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;
        }
        get playing() {
            return this.isPlayingSong;
        }
        get recording() {
            return this.isRecording;
        }
        get playhead() {
            return this.playheadInternal;
        }
        set playhead(value) {
            if (this.song != null) {
                this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));
                let remainder = this.playheadInternal;
                this.bar = Math.floor(remainder);
                remainder = this.song.beatsPerBar * (remainder - this.bar);
                this.beat = Math.floor(remainder);
                remainder = Config.partsPerBeat * (remainder - this.beat);
                this.part = Math.floor(remainder);
                remainder = Config.ticksPerPart * (remainder - this.part);
                this.tick = Math.floor(remainder);
                this.tickSampleCountdown = 0;
                this.isAtStartOfTick = true;
                this.prevBar = null;
            }
        }
        getSamplesPerBar() {
            if (this.song == null)
                throw new Error();
            return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;
        }
        getTicksIntoBar() {
            return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;
        }
        getCurrentPart() {
            return (this.beat * Config.partsPerBeat + this.part);
        }
        findPartsInBar(bar) {
            if (this.song == null)
                return 0;
            let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;
            for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {
                let pattern = this.song.getPattern(channel, bar);
                if (pattern != null) {
                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        if (instrument.modulators[mod] == Config.modulators.dictionary["next bar"].index) {
                            for (const note of pattern.notes) {
                                if (note.pitches[0] == (Config.modCount - 1 - mod)) {
                                    if (partsInBar > note.start)
                                        partsInBar = note.start;
                                }
                            }
                        }
                    }
                }
            }
            return partsInBar;
        }
        getTotalSamples(enableIntro, enableOutro, loop) {
            if (this.song == null)
                return -1;
            let startBar = enableIntro ? 0 : this.song.loopStart;
            let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);
            let hasTempoMods = false;
            let hasNextBarMods = false;
            let prevTempo = this.song.tempo;
            for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {
                for (let bar = startBar; bar < endBar; bar++) {
                    let pattern = this.song.getPattern(channel, bar);
                    if (pattern != null) {
                        let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            if (instrument.modulators[mod] == Config.modulators.dictionary["tempo"].index) {
                                hasTempoMods = true;
                            }
                            if (instrument.modulators[mod] == Config.modulators.dictionary["next bar"].index) {
                                hasNextBarMods = true;
                            }
                        }
                    }
                }
            }
            if (startBar > 0) {
                let latestTempoPin = null;
                let latestTempoValue = 0;
                for (let bar = startBar - 1; bar >= 0; bar--) {
                    for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {
                        let pattern = this.song.getPattern(channel, bar);
                        if (pattern != null) {
                            let instrumentIdx = pattern.instruments[0];
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            let partsInBar = this.findPartsInBar(bar);
                            for (const note of pattern.notes) {
                                if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary["tempo"].index) {
                                    if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {
                                        if (note.end <= partsInBar) {
                                            latestTempoPin = note.end;
                                            latestTempoValue = note.pins[note.pins.length - 1].size;
                                        }
                                        else {
                                            latestTempoPin = partsInBar;
                                            for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {
                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                    const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;
                                                    const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;
                                                    const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;
                                                    latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);
                                                    pinIdx = note.pins.length;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (latestTempoPin != null) {
                        prevTempo = latestTempoValue + Config.modulators.dictionary["tempo"].convertRealFactor;
                        bar = -1;
                    }
                }
            }
            if (hasTempoMods || hasNextBarMods) {
                let bar = startBar;
                let ended = false;
                let totalSamples = 0;
                while (!ended) {
                    let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;
                    let currentPart = 0;
                    if (hasNextBarMods) {
                        partsInBar = this.findPartsInBar(bar);
                    }
                    if (hasTempoMods) {
                        let foundMod = false;
                        for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {
                            if (foundMod == false) {
                                let pattern = this.song.getPattern(channel, bar);
                                if (pattern != null) {
                                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                                    for (let mod = 0; mod < Config.modCount; mod++) {
                                        if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary["tempo"].index
                                            && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {
                                            foundMod = true;
                                            pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                                            for (const note of pattern.notes) {
                                                if (note.pitches[0] == (Config.modCount - 1 - mod)) {
                                                    totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);
                                                    if (note.start < partsInBar) {
                                                        for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {
                                                            if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {
                                                                const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);
                                                                const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                                    currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                }
                                                                let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;
                                                                if (currPinTempo != prevPinTempo) {
                                                                    totalSamples += -this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));
                                                                }
                                                                else {
                                                                    totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);
                                                                }
                                                                prevTempo = currPinTempo;
                                                            }
                                                            currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);
                    bar++;
                    if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {
                        bar = this.song.loopStart;
                        if (loop > 0)
                            loop--;
                    }
                    if (bar >= endBar) {
                        ended = true;
                    }
                }
                return Math.ceil(totalSamples);
            }
            else {
                return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);
            }
        }
        getTotalBars(enableIntro, enableOutro, useLoopCount = this.loopRepeatCount) {
            if (this.song == null)
                throw new Error();
            let bars = this.song.loopLength * (useLoopCount + 1);
            if (enableIntro)
                bars += this.song.loopStart;
            if (enableOutro)
                bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);
            return bars;
        }
        constructor(song = null) {
            this.samplesPerSecond = 44100;
            this.song = null;
            this.preferLowerLatency = false;
            this.anticipatePoorPerformance = false;
            this.liveInputDuration = 0;
            this.liveBassInputDuration = 0;
            this.liveInputStarted = false;
            this.liveBassInputStarted = false;
            this.liveInputPitches = [];
            this.liveBassInputPitches = [];
            this.liveInputChannel = 0;
            this.liveBassInputChannel = 0;
            this.liveInputInstruments = [];
            this.liveBassInputInstruments = [];
            this.loopRepeatCount = -1;
            this.volume = 1.0;
            this.oscRefreshEventTimer = 0;
            this.oscEnabled = true;
            this.enableMetronome = false;
            this.countInMetronome = false;
            this.renderingSong = false;
            this.heldMods = [];
            this.wantToSkip = false;
            this.playheadInternal = 0.0;
            this.bar = 0;
            this.prevBar = null;
            this.nextBar = null;
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.isAtStartOfTick = true;
            this.isAtEndOfTick = true;
            this.tickSampleCountdown = 0;
            this.modValues = [];
            this.modInsValues = [];
            this.nextModValues = [];
            this.nextModInsValues = [];
            this.isPlayingSong = false;
            this.isRecording = false;
            this.liveInputEndTime = 0.0;
            this.browserAutomaticallyClearsAudioBuffer = true;
            this.tempDrumSetControlPoint = new FilterControlPoint();
            this.tempFrequencyResponse = new FrequencyResponse();
            this.loopBarStart = -1;
            this.loopBarEnd = -1;
            this.channels = [];
            this.tonePool = new Deque();
            this.tempMatchedPitchTones = Array(Config.maxChordSize).fill(null);
            this.startedMetronome = false;
            this.metronomeSamplesRemaining = -1;
            this.metronomeAmplitude = 0.0;
            this.metronomePrevAmplitude = 0.0;
            this.metronomeFilter = 0.0;
            this.limit = 0.0;
            this.tempMonoInstrumentSampleBuffer = null;
            this.audioCtx = null;
            this.scriptNode = null;
            this.audioProcessCallback = (audioProcessingEvent) => {
                const outputBuffer = audioProcessingEvent.outputBuffer;
                const outputDataL = outputBuffer.getChannelData(0);
                const outputDataR = outputBuffer.getChannelData(1);
                if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {
                    this.browserAutomaticallyClearsAudioBuffer = false;
                }
                if (!this.browserAutomaticallyClearsAudioBuffer) {
                    const length = outputBuffer.length;
                    for (let i = 0; i < length; i++) {
                        outputDataL[i] = 0.0;
                        outputDataR[i] = 0.0;
                    }
                }
                if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {
                    this.deactivateAudio();
                }
                else {
                    this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);
                    if (this.oscEnabled) {
                        if (this.oscRefreshEventTimer <= 0) {
                            events.raise("oscillascopeUpdate", outputDataL, outputDataR);
                            this.oscRefreshEventTimer = 2;
                        }
                        else {
                            this.oscRefreshEventTimer--;
                        }
                    }
                }
            };
            this.computeDelayBufferSizes();
            if (song != null)
                this.setSong(song);
        }
        setSong(song) {
            if (typeof (song) == "string") {
                this.song = new Song(song);
            }
            else if (song instanceof Song) {
                this.song = song;
            }
            this.prevBar = null;
        }
        computeDelayBufferSizes() {
            this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);
            this.panningDelayBufferMask = this.panningDelayBufferSize - 1;
            this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);
            this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;
        }
        activateAudio() {
            const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);
            if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {
                if (this.scriptNode != null)
                    this.deactivateAudio();
                const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? "balanced" : "playback") : (this.preferLowerLatency ? "interactive" : "balanced");
                this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });
                this.samplesPerSecond = this.audioCtx.sampleRate;
                this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2);
                this.scriptNode.onaudioprocess = this.audioProcessCallback;
                this.scriptNode.channelCountMode = 'explicit';
                this.scriptNode.channelInterpretation = 'speakers';
                this.scriptNode.connect(this.audioCtx.destination);
                this.computeDelayBufferSizes();
            }
            this.audioCtx.resume();
        }
        deactivateAudio() {
            if (this.audioCtx != null && this.scriptNode != null) {
                this.scriptNode.disconnect(this.audioCtx.destination);
                this.scriptNode = null;
                if (this.audioCtx.close)
                    this.audioCtx.close();
                this.audioCtx = null;
            }
        }
        maintainLiveInput() {
            this.activateAudio();
            this.liveInputEndTime = performance.now() + 10000.0;
        }
        play() {
            if (this.isPlayingSong)
                return;
            this.initModFilters(this.song);
            this.computeLatestModValues();
            this.activateAudio();
            this.warmUpSynthesizer(this.song);
            this.isPlayingSong = true;
        }
        pause() {
            if (!this.isPlayingSong)
                return;
            this.isPlayingSong = false;
            this.isRecording = false;
            this.modValues = [];
            this.nextModValues = [];
            this.heldMods = [];
            if (this.song != null) {
                this.song.inVolumeCap = 0.0;
                this.song.outVolumeCap = 0.0;
                for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {
                    this.modInsValues[channelIndex] = [];
                    this.nextModInsValues[channelIndex] = [];
                }
            }
            this.preferLowerLatency = false;
        }
        startRecording() {
            this.preferLowerLatency = true;
            this.isRecording = true;
            this.play();
        }
        resetEffects() {
            this.limit = 0.0;
            this.freeAllTones();
            if (this.song != null) {
                for (const channelState of this.channels) {
                    for (const instrumentState of channelState.instruments) {
                        instrumentState.resetAllEffects();
                    }
                }
            }
        }
        setModValue(volumeStart, volumeEnd, channelIndex, instrumentIndex, setting) {
            let val = volumeStart + Config.modulators[setting].convertRealFactor;
            let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;
            if (Config.modulators[setting].forSong) {
                if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {
                    this.modValues[setting] = val;
                    this.nextModValues[setting] = nextVal;
                }
            }
            else {
                if (this.modInsValues[channelIndex][instrumentIndex][setting] == null
                    || this.modInsValues[channelIndex][instrumentIndex][setting] != val
                    || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {
                    this.modInsValues[channelIndex][instrumentIndex][setting] = val;
                    this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;
                }
            }
            return val;
        }
        getModValue(setting, channel, instrument, nextVal) {
            const forSong = Config.modulators[setting].forSong;
            if (forSong) {
                if (this.modValues[setting] != null && this.nextModValues[setting] != null) {
                    return nextVal ? this.nextModValues[setting] : this.modValues[setting];
                }
            }
            else if (channel != undefined && instrument != undefined) {
                if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {
                    return nextVal ? this.nextModInsValues[channel][instrument][setting] : this.modInsValues[channel][instrument][setting];
                }
            }
            return -1;
        }
        isAnyModActive(channel, instrument) {
            for (let setting = 0; setting < Config.modulators.length; setting++) {
                if ((this.modValues != undefined && this.modValues[setting] != null)
                    || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {
                    return true;
                }
            }
            return false;
        }
        unsetMod(setting, channel, instrument) {
            if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {
                this.modValues[setting] = null;
                this.nextModValues[setting] = null;
                for (let i = 0; i < this.heldMods.length; i++) {
                    if (channel != undefined && instrument != undefined) {
                        if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)
                            this.heldMods.splice(i, 1);
                    }
                    else {
                        if (this.heldMods[i].setting == setting)
                            this.heldMods.splice(i, 1);
                    }
                }
                if (channel != undefined && instrument != undefined) {
                    this.modInsValues[channel][instrument][setting] = null;
                    this.nextModInsValues[channel][instrument][setting] = null;
                }
            }
        }
        isFilterModActive(forNoteFilter, channelIdx, instrumentIdx) {
            const instrument = this.song.channels[channelIdx].instruments[instrumentIdx];
            if (forNoteFilter) {
                if (instrument.noteFilterType)
                    return false;
                if (instrument.tmpNoteFilterEnd != null)
                    return true;
            }
            else {
                if (instrument.eqFilterType)
                    return false;
                if (instrument.tmpEqFilterEnd != null)
                    return true;
            }
            return false;
        }
        isModActive(setting, channel, instrument) {
            const forSong = Config.modulators[setting].forSong;
            if (forSong) {
                return (this.modValues != undefined && this.modValues[setting] != null);
            }
            else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {
                return (this.modInsValues[channel][instrument][setting] != null);
            }
            return false;
        }
        forceHoldMods(volumeStart, channelIndex, instrumentIndex, setting) {
            let found = false;
            for (let i = 0; i < this.heldMods.length; i++) {
                if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {
                    this.heldMods[i].volume = volumeStart;
                    this.heldMods[i].holdFor = 24;
                    found = true;
                }
            }
            if (!found)
                this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });
        }
        snapToStart() {
            this.bar = 0;
            this.resetEffects();
            this.snapToBar();
        }
        goToBar(bar) {
            this.bar = bar;
            this.resetEffects();
            this.playheadInternal = this.bar;
        }
        snapToBar() {
            this.playheadInternal = this.bar;
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.tickSampleCountdown = 0;
        }
        jumpIntoLoop() {
            if (!this.song)
                return;
            if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {
                const oldBar = this.bar;
                this.bar = this.song.loopStart;
                this.playheadInternal += this.bar - oldBar;
                if (this.playing)
                    this.computeLatestModValues();
            }
        }
        goToNextBar() {
            if (!this.song)
                return;
            this.prevBar = this.bar;
            const oldBar = this.bar;
            this.bar++;
            if (this.bar >= this.song.barCount) {
                this.bar = 0;
            }
            this.playheadInternal += this.bar - oldBar;
            if (this.playing)
                this.computeLatestModValues();
        }
        goToPrevBar() {
            if (!this.song)
                return;
            this.prevBar = null;
            const oldBar = this.bar;
            this.bar--;
            if (this.bar < 0 || this.bar >= this.song.barCount) {
                this.bar = this.song.barCount - 1;
            }
            this.playheadInternal += this.bar - oldBar;
            if (this.playing)
                this.computeLatestModValues();
        }
        getNextBar() {
            let nextBar = this.bar + 1;
            if (_loopType != 2) {
                if (this.isRecording) {
                    if (nextBar >= this.song.barCount) {
                        nextBar = this.song.barCount - 1;
                    }
                }
                else if ((this.bar == this.loopBarEnd && !this.renderingSong)) {
                    nextBar = this.loopBarStart;
                }
                else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song.loopStart + this.song.loopLength)) {
                    nextBar = this.song.loopStart;
                }
            }
            else if (_loopType == 2 && (this.bar == this.song.barCount - 1)) {
                nextBar = 0;
            }
            return nextBar;
        }
        skipBar() {
            if (!this.song)
                return;
            const samplesPerTick = this.getSamplesPerTick();
            this.prevBar = this.bar;
            if (this.loopBarEnd != this.bar)
                this.bar++;
            else {
                this.bar = this.loopBarStart;
            }
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.tickSampleCountdown = samplesPerTick;
            this.isAtStartOfTick = true;
            if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {
                this.bar = this.song.loopStart;
                if (this.loopBarStart != -1)
                    this.bar = this.loopBarStart;
                if (this.loopRepeatCount > 0)
                    this.loopRepeatCount--;
            }
        }
        synthesize(outputDataL, outputDataR, outputBufferLength, playSong = true) {
            if (this.song == null) {
                for (let i = 0; i < outputBufferLength; i++) {
                    outputDataL[i] = 0.0;
                    outputDataR[i] = 0.0;
                }
                this.deactivateAudio();
                return;
            }
            const song = this.song;
            this.song.inVolumeCap = 0.0;
            this.song.outVolumeCap = 0.0;
            let samplesPerTick = this.getSamplesPerTick();
            let ended = false;
            if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {
                this.tickSampleCountdown = samplesPerTick;
                this.isAtStartOfTick = true;
            }
            if (playSong) {
                if (this.beat >= song.beatsPerBar) {
                    this.beat = 0;
                    this.part = 0;
                    this.tick = 0;
                    this.tickSampleCountdown = samplesPerTick;
                    this.isAtStartOfTick = true;
                    this.prevBar = this.bar;
                    this.bar = this.getNextBar();
                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0)
                        this.loopRepeatCount--;
                }
                if (this.bar >= song.barCount) {
                    this.bar = 0;
                    if (this.loopRepeatCount != -1) {
                        ended = true;
                        this.pause();
                    }
                }
            }
            this.syncSongState();
            if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {
                this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);
            }
            const volume = +this.volume;
            const limitDecay = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);
            const limitRise = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);
            let limit = +this.limit;
            let skippedBars = [];
            let firstSkippedBufferIndex = -1;
            let bufferIndex = 0;
            while (bufferIndex < outputBufferLength && !ended) {
                this.nextBar = this.getNextBar();
                if (this.nextBar >= song.barCount)
                    this.nextBar = null;
                const samplesLeftInBuffer = outputBufferLength - bufferIndex;
                const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);
                const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);
                const runEnd = bufferIndex + runLength;
                if (this.isPlayingSong || this.renderingSong) {
                    for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {
                        const channel = song.channels[channelIndex];
                        const channelState = this.channels[channelIndex];
                        this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);
                        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                            const instrumentState = channelState.instruments[instrumentIndex];
                            for (let i = 0; i < instrumentState.activeModTones.count(); i++) {
                                const tone = instrumentState.activeModTones.get(i);
                                const channel = song.channels[channelIndex];
                                const instrument = channel.instruments[tone.instrumentIndex];
                                let mod = Config.modCount - 1 - tone.pitches[0];
                                if ((instrument.modulators[mod] == Config.modulators.dictionary["note filter"].index
                                    || instrument.modulators[mod] == Config.modulators.dictionary["eq filter"].index)
                                    && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {
                                    continue;
                                }
                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);
                            }
                        }
                    }
                    for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {
                        const channel = song.channels[channelIndex];
                        const channelState = this.channels[channelIndex];
                        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                            const instrumentState = channelState.instruments[instrumentIndex];
                            for (let i = 0; i < instrumentState.activeModTones.count(); i++) {
                                const tone = instrumentState.activeModTones.get(i);
                                const channel = song.channels[channelIndex];
                                const instrument = channel.instruments[tone.instrumentIndex];
                                let mod = Config.modCount - 1 - tone.pitches[0];
                                if ((instrument.modulators[mod] == Config.modulators.dictionary["note filter"].index
                                    || instrument.modulators[mod] == Config.modulators.dictionary["eq filter"].index)
                                    && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {
                                    this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);
                                }
                            }
                        }
                    }
                }
                if (this.wantToSkip) {
                    let barVisited = skippedBars.includes(this.bar);
                    if (barVisited && bufferIndex == firstSkippedBufferIndex) {
                        this.pause();
                        return;
                    }
                    if (firstSkippedBufferIndex == -1) {
                        firstSkippedBufferIndex = bufferIndex;
                    }
                    if (!barVisited)
                        skippedBars.push(this.bar);
                    this.wantToSkip = false;
                    this.skipBar();
                    continue;
                }
                for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {
                    const channel = song.channels[channelIndex];
                    const channelState = this.channels[channelIndex];
                    if (this.isAtStartOfTick) {
                        this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);
                        this.determineLiveInputTones(song, channelIndex, samplesPerTick);
                    }
                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                        const instrument = channel.instruments[instrumentIndex];
                        const instrumentState = channelState.instruments[instrumentIndex];
                        if (this.isAtStartOfTick) {
                            let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();
                            for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                                const tone = instrumentState.releasedTones.get(i);
                                if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {
                                    this.freeReleasedTone(instrumentState, i);
                                    i--;
                                    continue;
                                }
                                const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);
                                this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);
                                tonesPlayedInThisInstrument++;
                            }
                            if (instrumentState.awake) {
                                if (!instrumentState.computed) {
                                    instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);
                                }
                                instrumentState.computed = false;
                                instrumentState.envelopeComputer.clearEnvelopes();
                            }
                        }
                        for (let i = 0; i < instrumentState.activeTones.count(); i++) {
                            const tone = instrumentState.activeTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {
                            const tone = instrumentState.liveInputTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                            const tone = instrumentState.releasedTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        if (instrumentState.awake) {
                            Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);
                        }
                        const tickSampleCountdown = this.tickSampleCountdown;
                        const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;
                        const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;
                        const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;
                        const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;
                        const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;
                        const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;
                        const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;
                        let useVibratoSpeed = instrument.vibratoSpeed;
                        instrumentState.vibratoTime = instrumentState.nextVibratoTime;
                        if (this.isModActive(Config.modulators.dictionary["vibrato speed"].index, channelIndex, instrumentIndex)) {
                            useVibratoSpeed = this.getModValue(Config.modulators.dictionary["vibrato speed"].index, channelIndex, instrumentIndex);
                        }
                        if (useVibratoSpeed == 0) {
                            instrumentState.vibratoTime = 0;
                            instrumentState.nextVibratoTime = 0;
                        }
                        else {
                            instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);
                        }
                    }
                }
                if (this.enableMetronome || this.countInMetronome) {
                    if (this.part == 0) {
                        if (!this.startedMetronome) {
                            const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);
                            const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;
                            const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;
                            const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;
                            const samplesPerPeriod = this.samplesPerSecond / hz;
                            const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;
                            this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);
                            this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);
                            this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);
                            this.metronomePrevAmplitude = 0.0;
                            this.startedMetronome = true;
                        }
                        if (this.metronomeSamplesRemaining > 0) {
                            const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);
                            this.metronomeSamplesRemaining -= stopIndex - bufferIndex;
                            for (let i = bufferIndex; i < stopIndex; i++) {
                                outputDataL[i] += this.metronomeAmplitude;
                                outputDataR[i] += this.metronomeAmplitude;
                                const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;
                                this.metronomePrevAmplitude = this.metronomeAmplitude;
                                this.metronomeAmplitude = tempAmplitude;
                            }
                        }
                    }
                    else {
                        this.startedMetronome = false;
                    }
                }
                for (let i = bufferIndex; i < runEnd; i++) {
                    const sampleL = outputDataL[i] * song.masterGain * song.masterGain;
                    const sampleR = outputDataR[i] * song.masterGain * song.masterGain;
                    const absL = sampleL < 0.0 ? -sampleL : sampleL;
                    const absR = sampleR < 0.0 ? -sampleR : sampleR;
                    const abs = absL > absR ? absL : absR;
                    this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs);
                    const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));
                    const limitTarget = (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))
                        + (+(limitRange == 1)) * (1.05)
                        + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));
                    limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));
                    const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);
                    outputDataL[i] = sampleL * limitedVolume;
                    outputDataR[i] = sampleR * limitedVolume;
                    this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume);
                }
                bufferIndex += runLength;
                this.isAtStartOfTick = false;
                this.tickSampleCountdown -= runLength;
                if (this.tickSampleCountdown <= 0) {
                    this.isAtStartOfTick = true;
                    for (const channelState of this.channels) {
                        for (const instrumentState of channelState.instruments) {
                            for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                                const tone = instrumentState.releasedTones.get(i);
                                if (tone.isOnLastTick) {
                                    this.freeReleasedTone(instrumentState, i);
                                    i--;
                                }
                                else {
                                    tone.ticksSinceReleased++;
                                }
                            }
                            if (instrumentState.deactivateAfterThisTick) {
                                instrumentState.deactivate();
                            }
                            instrumentState.tonesAddedInThisTick = false;
                        }
                    }
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            let instrumentState = this.channels[channel].instruments[instrumentIdx];
                            let useArpeggioSpeed = instrument.arpeggioSpeed;
                            if (this.isModActive(Config.modulators.dictionary["arp speed"].index, channel, instrumentIdx)) {
                                useArpeggioSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary["arp speed"].index, channel, instrumentIdx, false)));
                                if (Number.isInteger(useArpeggioSpeed)) {
                                    instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];
                                }
                                else {
                                    instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];
                                }
                            }
                            else {
                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];
                            }
                            let useEnvelopeSpeed = instrument.envelopeSpeed;
                            if (this.isModActive(Config.modulators.dictionary["envelope speed"].index, channel, instrumentIdx)) {
                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary["envelope speed"].index, channel, instrumentIdx, false)));
                                if (Number.isInteger(useEnvelopeSpeed)) {
                                    instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];
                                }
                                else {
                                    instrumentState.envelopeTime += (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];
                                }
                            }
                            else {
                                instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];
                            }
                        }
                    }
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            if (instrument.tmpEqFilterEnd != null) {
                                instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;
                            }
                            else {
                                instrument.tmpEqFilterStart = instrument.eqFilter;
                            }
                            if (instrument.tmpNoteFilterEnd != null) {
                                instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;
                            }
                            else {
                                instrument.tmpNoteFilterStart = instrument.noteFilter;
                            }
                        }
                    }
                    this.tick++;
                    this.tickSampleCountdown += samplesPerTick;
                    if (this.tick == Config.ticksPerPart) {
                        this.tick = 0;
                        this.part++;
                        this.liveInputDuration--;
                        this.liveBassInputDuration--;
                        for (let i = 0; i < this.heldMods.length; i++) {
                            this.heldMods[i].holdFor--;
                            if (this.heldMods[i].holdFor <= 0) {
                                this.heldMods.splice(i, 1);
                            }
                        }
                        if (this.part == Config.partsPerBeat) {
                            this.part = 0;
                            if (playSong) {
                                this.beat++;
                                if (this.beat == song.beatsPerBar) {
                                    this.beat = 0;
                                    if (this.countInMetronome) {
                                        this.countInMetronome = false;
                                    }
                                    else {
                                        this.prevBar = this.bar;
                                        this.bar = this.getNextBar();
                                        if (this.bar <= this.prevBar && this.loopRepeatCount > 0)
                                            this.loopRepeatCount--;
                                        if (this.bar >= song.barCount) {
                                            this.bar = 0;
                                            if (this.loopRepeatCount != -1) {
                                                ended = true;
                                                this.resetEffects();
                                                this.pause();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (let setting = 0; setting < Config.modulators.length; setting++) {
                    if (this.nextModValues != null && this.nextModValues[setting] != null)
                        this.modValues[setting] = this.nextModValues[setting];
                }
                if (this.isModActive(Config.modulators.dictionary["tempo"].index)) {
                    samplesPerTick = this.getSamplesPerTick();
                    this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);
                }
                for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {
                    for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {
                        const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];
                        const instrument = this.song.channels[channelIndex].instruments[instrumentIndex];
                        instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));
                        instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio));
                        instrumentState.envelopeTime = (instrumentState.envelopeTime % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));
                    }
                }
                for (let setting = 0; setting < Config.modulators.length; setting++) {
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrument = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {
                            if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {
                                this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];
                            }
                        }
                    }
                }
            }
            if (!Number.isFinite(limit) || Math.abs(limit) < epsilon)
                limit = 0.0;
            this.limit = limit;
            if (playSong && !this.countInMetronome) {
                this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;
            }
        }
        freeTone(tone) {
            this.tonePool.pushBack(tone);
        }
        newTone() {
            if (this.tonePool.count() > 0) {
                const tone = this.tonePool.popBack();
                tone.freshlyAllocated = true;
                return tone;
            }
            return new Tone();
        }
        releaseTone(instrumentState, tone) {
            instrumentState.releasedTones.pushFront(tone);
            tone.atNoteStart = false;
            tone.passedEndOfNote = true;
        }
        freeReleasedTone(instrumentState, toneIndex) {
            this.freeTone(instrumentState.releasedTones.get(toneIndex));
            instrumentState.releasedTones.remove(toneIndex);
        }
        freeAllTones() {
            for (const channelState of this.channels) {
                for (const instrumentState of channelState.instruments) {
                    while (instrumentState.activeTones.count() > 0)
                        this.freeTone(instrumentState.activeTones.popBack());
                    while (instrumentState.activeModTones.count() > 0)
                        this.freeTone(instrumentState.activeModTones.popBack());
                    while (instrumentState.releasedTones.count() > 0)
                        this.freeTone(instrumentState.releasedTones.popBack());
                    while (instrumentState.liveInputTones.count() > 0)
                        this.freeTone(instrumentState.liveInputTones.popBack());
                }
            }
        }
        determineLiveInputTones(song, channelIndex, samplesPerTick) {
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const pitches = this.liveInputPitches;
            const bassPitches = this.liveBassInputPitches;
            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                const instrumentState = channelState.instruments[instrumentIndex];
                const toneList = instrumentState.liveInputTones;
                let toneCount = 0;
                if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {
                    const instrument = channel.instruments[instrumentIndex];
                    if (instrument.getChord().singleTone) {
                        let tone;
                        if (toneList.count() <= toneCount) {
                            tone = this.newTone();
                            toneList.pushBack(tone);
                        }
                        else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {
                            this.releaseTone(instrumentState, toneList.get(toneCount));
                            tone = this.newTone();
                            toneList.set(toneCount, tone);
                        }
                        else {
                            tone = toneList.get(toneCount);
                        }
                        toneCount++;
                        for (let i = 0; i < pitches.length; i++) {
                            tone.pitches[i] = pitches[i];
                        }
                        tone.pitchCount = pitches.length;
                        tone.chordSize = 1;
                        tone.instrumentIndex = instrumentIndex;
                        tone.note = tone.prevNote = tone.nextNote = null;
                        tone.atNoteStart = this.liveInputStarted;
                        tone.forceContinueAtStart = false;
                        tone.forceContinueAtEnd = false;
                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                    }
                    else {
                        this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);
                        for (let i = 0; i < pitches.length; i++) {
                            let tone;
                            if (this.tempMatchedPitchTones[toneCount] != null) {
                                tone = this.tempMatchedPitchTones[toneCount];
                                this.tempMatchedPitchTones[toneCount] = null;
                                if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {
                                    this.releaseTone(instrumentState, tone);
                                    tone = this.newTone();
                                }
                                toneList.pushBack(tone);
                            }
                            else {
                                tone = this.newTone();
                                toneList.pushBack(tone);
                            }
                            toneCount++;
                            tone.pitches[0] = pitches[i];
                            tone.pitchCount = 1;
                            tone.chordSize = pitches.length;
                            tone.instrumentIndex = instrumentIndex;
                            tone.note = tone.prevNote = tone.nextNote = null;
                            tone.atNoteStart = this.liveInputStarted;
                            tone.forceContinueAtStart = false;
                            tone.forceContinueAtEnd = false;
                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                        }
                    }
                }
                if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {
                    const instrument = channel.instruments[instrumentIndex];
                    if (instrument.getChord().singleTone) {
                        let tone;
                        if (toneList.count() <= toneCount) {
                            tone = this.newTone();
                            toneList.pushBack(tone);
                        }
                        else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {
                            this.releaseTone(instrumentState, toneList.get(toneCount));
                            tone = this.newTone();
                            toneList.set(toneCount, tone);
                        }
                        else {
                            tone = toneList.get(toneCount);
                        }
                        toneCount++;
                        for (let i = 0; i < bassPitches.length; i++) {
                            tone.pitches[i] = bassPitches[i];
                        }
                        tone.pitchCount = bassPitches.length;
                        tone.chordSize = 1;
                        tone.instrumentIndex = instrumentIndex;
                        tone.note = tone.prevNote = tone.nextNote = null;
                        tone.atNoteStart = this.liveBassInputStarted;
                        tone.forceContinueAtStart = false;
                        tone.forceContinueAtEnd = false;
                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                    }
                    else {
                        this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);
                        for (let i = 0; i < bassPitches.length; i++) {
                            let tone;
                            if (this.tempMatchedPitchTones[toneCount] != null) {
                                tone = this.tempMatchedPitchTones[toneCount];
                                this.tempMatchedPitchTones[toneCount] = null;
                                if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {
                                    this.releaseTone(instrumentState, tone);
                                    tone = this.newTone();
                                }
                                toneList.pushBack(tone);
                            }
                            else {
                                tone = this.newTone();
                                toneList.pushBack(tone);
                            }
                            toneCount++;
                            tone.pitches[0] = bassPitches[i];
                            tone.pitchCount = 1;
                            tone.chordSize = bassPitches.length;
                            tone.instrumentIndex = instrumentIndex;
                            tone.note = tone.prevNote = tone.nextNote = null;
                            tone.atNoteStart = this.liveBassInputStarted;
                            tone.forceContinueAtStart = false;
                            tone.forceContinueAtEnd = false;
                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                        }
                    }
                }
                while (toneList.count() > toneCount) {
                    this.releaseTone(instrumentState, toneList.popBack());
                }
                this.clearTempMatchedPitchTones(toneCount, instrumentState);
            }
            this.liveInputStarted = false;
            this.liveBassInputStarted = false;
        }
        adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, otherPattern, instrumentIndex, transition, chord, note, otherNote, forceContinue) {
            if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {
                if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {
                    return null;
                }
                const otherInstrument = channel.instruments[otherPattern.instruments[0]];
                if (forceContinue) {
                    return otherInstrument.getChord();
                }
                const otherTransition = otherInstrument.getTransition();
                if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {
                    return otherInstrument.getChord();
                }
                else {
                    return null;
                }
            }
            else {
                return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;
            }
        }
        static adjacentNotesHaveMatchingPitches(firstNote, secondNote) {
            if (firstNote.pitches.length != secondNote.pitches.length)
                return false;
            const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;
            for (const pitch of firstNote.pitches) {
                if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1)
                    return false;
            }
            return true;
        }
        moveTonesIntoOrderedTempMatchedList(toneList, notePitches) {
            for (let i = 0; i < toneList.count(); i++) {
                const tone = toneList.get(i);
                const pitch = tone.pitches[0] + tone.lastInterval;
                for (let j = 0; j < notePitches.length; j++) {
                    if (notePitches[j] == pitch) {
                        this.tempMatchedPitchTones[j] = tone;
                        toneList.remove(i);
                        i--;
                        break;
                    }
                }
            }
            while (toneList.count() > 0) {
                const tone = toneList.popFront();
                for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {
                    if (this.tempMatchedPitchTones[j] == null) {
                        this.tempMatchedPitchTones[j] = tone;
                        break;
                    }
                }
            }
        }
        determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong) {
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const pattern = song.getPattern(channelIndex, this.bar);
            const currentPart = this.getCurrentPart();
            const currentTick = this.tick + Config.ticksPerPart * currentPart;
            if (playSong && song.getChannelIsMod(channelIndex)) {
                let notes = [];
                let prevNotes = [];
                let nextNotes = [];
                let fillCount = Config.modCount;
                while (fillCount--) {
                    notes.push(null);
                    prevNotes.push(null);
                    nextNotes.push(null);
                }
                if (pattern != null && !channel.muted) {
                    for (let i = 0; i < pattern.notes.length; i++) {
                        if (pattern.notes[i].end <= currentPart) {
                            if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > prevNotes[pattern.notes[i].pitches[0]].start) {
                                prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                            }
                        }
                        else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {
                            notes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start > currentPart) {
                            if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < nextNotes[pattern.notes[i].pitches[0]].start) {
                                nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                            }
                        }
                    }
                }
                let modToneCount = 0;
                const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern.instruments[0] : 0;
                const instrumentState = channelState.instruments[newInstrumentIndex];
                const toneList = instrumentState.activeModTones;
                for (let mod = 0; mod < Config.modCount; mod++) {
                    if (notes[mod] != null) {
                        if (prevNotes[mod] != null && prevNotes[mod].end != notes[mod].start)
                            prevNotes[mod] = null;
                        if (nextNotes[mod] != null && nextNotes[mod].start != notes[mod].end)
                            nextNotes[mod] = null;
                    }
                    if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {
                        const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];
                        const destInstrumentState = channelState.instruments[newInstrumentIndex];
                        while (sourceInstrumentState.activeModTones.count() > 0) {
                            destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());
                        }
                    }
                    channelState.singleSeamlessInstrument = newInstrumentIndex;
                    if (notes[mod] != null) {
                        let prevNoteForThisInstrument = prevNotes[mod];
                        let nextNoteForThisInstrument = nextNotes[mod];
                        let forceContinueAtStart = false;
                        let forceContinueAtEnd = false;
                        const atNoteStart = (Config.ticksPerPart * notes[mod].start == currentTick) && this.isAtStartOfTick;
                        let tone;
                        if (toneList.count() <= modToneCount) {
                            tone = this.newTone();
                            toneList.pushBack(tone);
                        }
                        else if (atNoteStart && (prevNoteForThisInstrument == null)) {
                            const oldTone = toneList.get(modToneCount);
                            if (oldTone.isOnLastTick) {
                                this.freeTone(oldTone);
                            }
                            else {
                                this.releaseTone(instrumentState, oldTone);
                            }
                            tone = this.newTone();
                            toneList.set(modToneCount, tone);
                        }
                        else {
                            tone = toneList.get(modToneCount);
                        }
                        modToneCount++;
                        for (let i = 0; i < notes[mod].pitches.length; i++) {
                            tone.pitches[i] = notes[mod].pitches[i];
                        }
                        tone.pitchCount = notes[mod].pitches.length;
                        tone.chordSize = 1;
                        tone.instrumentIndex = newInstrumentIndex;
                        tone.note = notes[mod];
                        tone.noteStartPart = notes[mod].start;
                        tone.noteEndPart = notes[mod].end;
                        tone.prevNote = prevNoteForThisInstrument;
                        tone.nextNote = nextNoteForThisInstrument;
                        tone.prevNotePitchIndex = 0;
                        tone.nextNotePitchIndex = 0;
                        tone.atNoteStart = atNoteStart;
                        tone.passedEndOfNote = false;
                        tone.forceContinueAtStart = forceContinueAtStart;
                        tone.forceContinueAtEnd = forceContinueAtEnd;
                    }
                }
                while (toneList.count() > modToneCount) {
                    const tone = toneList.popBack();
                    const channel = song.channels[channelIndex];
                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {
                        const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];
                        this.releaseTone(instrumentState, tone);
                    }
                    else {
                        this.freeTone(tone);
                    }
                }
            }
            else if (!song.getChannelIsMod(channelIndex)) {
                let note = null;
                let prevNote = null;
                let nextNote = null;
                if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {
                    for (let i = 0; i < pattern.notes.length; i++) {
                        if (pattern.notes[i].end <= currentPart) {
                            prevNote = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {
                            note = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start > currentPart) {
                            nextNote = pattern.notes[i];
                            break;
                        }
                    }
                    if (note != null) {
                        if (prevNote != null && prevNote.end != note.start)
                            prevNote = null;
                        if (nextNote != null && nextNote.start != note.end)
                            nextNote = null;
                    }
                }
                if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {
                    const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;
                    if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {
                        const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];
                        const destInstrumentState = channelState.instruments[newInstrumentIndex];
                        while (sourceInstrumentState.activeTones.count() > 0) {
                            destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());
                        }
                    }
                    channelState.singleSeamlessInstrument = newInstrumentIndex;
                }
                else {
                    channelState.singleSeamlessInstrument = null;
                }
                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                    const instrumentState = channelState.instruments[instrumentIndex];
                    const toneList = instrumentState.activeTones;
                    let toneCount = 0;
                    if ((note != null) && (!song.patternInstruments || (pattern.instruments.indexOf(instrumentIndex) != -1))) {
                        const instrument = channel.instruments[instrumentIndex];
                        let prevNoteForThisInstrument = prevNote;
                        let nextNoteForThisInstrument = nextNote;
                        const partsPerBar = Config.partsPerBeat * song.beatsPerBar;
                        const transition = instrument.getTransition();
                        const chord = instrument.getChord();
                        let forceContinueAtStart = false;
                        let forceContinueAtEnd = false;
                        let tonesInPrevNote = 0;
                        let tonesInNextNote = 0;
                        if (note.start == 0) {
                            let prevPattern = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);
                            if (prevPattern != null) {
                                const lastNote = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];
                                if (lastNote != null && lastNote.end == partsPerBar) {
                                    const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);
                                    const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);
                                    if (chordOfCompatibleInstrument != null) {
                                        prevNoteForThisInstrument = lastNote;
                                        tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;
                                        forceContinueAtStart = patternForcesContinueAtStart;
                                    }
                                }
                            }
                        }
                        else if (prevNoteForThisInstrument != null) {
                            tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;
                        }
                        if (note.end == partsPerBar) {
                            let nextPattern = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);
                            if (nextPattern != null) {
                                const firstNote = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];
                                if (firstNote != null && firstNote.start == 0) {
                                    const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);
                                    const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);
                                    if (chordOfCompatibleInstrument != null) {
                                        nextNoteForThisInstrument = firstNote;
                                        tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;
                                        forceContinueAtEnd = nextPatternForcesContinueAtStart;
                                    }
                                }
                            }
                        }
                        else if (nextNoteForThisInstrument != null) {
                            tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;
                        }
                        if (chord.singleTone) {
                            const atNoteStart = (Config.ticksPerPart * note.start == currentTick);
                            let tone;
                            if (toneList.count() <= toneCount) {
                                tone = this.newTone();
                                toneList.pushBack(tone);
                            }
                            else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {
                                const oldTone = toneList.get(toneCount);
                                if (oldTone.isOnLastTick) {
                                    this.freeTone(oldTone);
                                }
                                else {
                                    this.releaseTone(instrumentState, oldTone);
                                }
                                tone = this.newTone();
                                toneList.set(toneCount, tone);
                            }
                            else {
                                tone = toneList.get(toneCount);
                            }
                            toneCount++;
                            for (let i = 0; i < note.pitches.length; i++) {
                                tone.pitches[i] = note.pitches[i];
                            }
                            tone.pitchCount = note.pitches.length;
                            tone.chordSize = 1;
                            tone.instrumentIndex = instrumentIndex;
                            tone.note = note;
                            tone.noteStartPart = note.start;
                            tone.noteEndPart = note.end;
                            tone.prevNote = prevNoteForThisInstrument;
                            tone.nextNote = nextNoteForThisInstrument;
                            tone.prevNotePitchIndex = 0;
                            tone.nextNotePitchIndex = 0;
                            tone.atNoteStart = atNoteStart;
                            tone.passedEndOfNote = false;
                            tone.forceContinueAtStart = forceContinueAtStart;
                            tone.forceContinueAtEnd = forceContinueAtEnd;
                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                        }
                        else {
                            const transition = instrument.getTransition();
                            if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {
                                this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);
                            }
                            let strumOffsetParts = 0;
                            for (let i = 0; i < note.pitches.length; i++) {
                                let prevNoteForThisTone = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;
                                let noteForThisTone = note;
                                let nextNoteForThisTone = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;
                                let noteStartPart = noteForThisTone.start + strumOffsetParts;
                                let passedEndOfNote = false;
                                if (noteStartPart > currentPart) {
                                    if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {
                                        nextNoteForThisTone = noteForThisTone;
                                        noteForThisTone = prevNoteForThisTone;
                                        prevNoteForThisTone = null;
                                        noteStartPart = noteForThisTone.start + strumOffsetParts;
                                        passedEndOfNote = true;
                                    }
                                    else {
                                        break;
                                    }
                                }
                                let noteEndPart = noteForThisTone.end;
                                if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {
                                    noteEndPart = Math.min(Config.partsPerBeat * this.song.beatsPerBar, noteEndPart + strumOffsetParts);
                                }
                                if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {
                                    strumOffsetParts += chord.strumParts;
                                }
                                const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);
                                let tone;
                                if (this.tempMatchedPitchTones[toneCount] != null) {
                                    tone = this.tempMatchedPitchTones[toneCount];
                                    this.tempMatchedPitchTones[toneCount] = null;
                                    toneList.pushBack(tone);
                                }
                                else if (toneList.count() <= toneCount) {
                                    tone = this.newTone();
                                    toneList.pushBack(tone);
                                }
                                else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {
                                    const oldTone = toneList.get(toneCount);
                                    if (oldTone.isOnLastTick) {
                                        this.freeTone(oldTone);
                                    }
                                    else {
                                        this.releaseTone(instrumentState, oldTone);
                                    }
                                    tone = this.newTone();
                                    toneList.set(toneCount, tone);
                                }
                                else {
                                    tone = toneList.get(toneCount);
                                }
                                toneCount++;
                                tone.pitches[0] = noteForThisTone.pitches[i];
                                tone.pitchCount = 1;
                                tone.chordSize = noteForThisTone.pitches.length;
                                tone.instrumentIndex = instrumentIndex;
                                tone.note = noteForThisTone;
                                tone.noteStartPart = noteStartPart;
                                tone.noteEndPart = noteEndPart;
                                tone.prevNote = prevNoteForThisTone;
                                tone.nextNote = nextNoteForThisTone;
                                tone.prevNotePitchIndex = i;
                                tone.nextNotePitchIndex = i;
                                tone.atNoteStart = atNoteStart;
                                tone.passedEndOfNote = passedEndOfNote;
                                tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;
                                tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;
                                this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                            }
                        }
                    }
                    while (toneList.count() > toneCount) {
                        const tone = toneList.popBack();
                        const channel = song.channels[channelIndex];
                        if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {
                            const instrumentState = channelState.instruments[tone.instrumentIndex];
                            this.releaseTone(instrumentState, tone);
                        }
                        else {
                            this.freeTone(tone);
                        }
                    }
                    this.clearTempMatchedPitchTones(toneCount, instrumentState);
                }
            }
        }
        clearTempMatchedPitchTones(toneCount, instrumentState) {
            for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {
                const oldTone = this.tempMatchedPitchTones[i];
                if (oldTone != null) {
                    if (oldTone.isOnLastTick) {
                        this.freeTone(oldTone);
                    }
                    else {
                        this.releaseTone(instrumentState, oldTone);
                    }
                    this.tempMatchedPitchTones[i] = null;
                }
            }
        }
        playTone(channelIndex, bufferIndex, runLength, tone) {
            const channelState = this.channels[channelIndex];
            const instrumentState = channelState.instruments[tone.instrumentIndex];
            if (instrumentState.synthesizer != null)
                instrumentState.synthesizer(this, bufferIndex, runLength, tone, instrumentState);
            tone.envelopeComputer.clearEnvelopes();
        }
        playModTone(song, channelIndex, samplesPerTick, bufferIndex, roundedSamplesPerTick, tone, released, shouldFadeOutFast) {
            const channel = song.channels[channelIndex];
            const instrument = channel.instruments[tone.instrumentIndex];
            if (tone.note != null) {
                const ticksIntoBar = this.getTicksIntoBar();
                const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;
                const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;
                const tickSampleCountdown = this.tickSampleCountdown;
                const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;
                const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;
                const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;
                const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;
                const tickTimeStart = Config.ticksPerPart * partTimeStart;
                const tickTimeEnd = Config.ticksPerPart * partTimeEnd;
                const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());
                const startPin = tone.note.pins[endPinIndex - 1];
                const endPin = tone.note.pins[endPinIndex];
                const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;
                const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;
                const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);
                const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);
                tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;
                tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;
                Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);
            }
        }
        static computeChordExpression(chordSize) {
            return 1.0 / ((chordSize - 1) * 0.25 + 1.0);
        }
        computeTone(song, channelIndex, samplesPerTick, tone, released, shouldFadeOutFast) {
            const roundedSamplesPerTick = Math.ceil(samplesPerTick);
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const instrument = channel.instruments[tone.instrumentIndex];
            const instrumentState = channelState.instruments[tone.instrumentIndex];
            instrumentState.awake = true;
            instrumentState.tonesAddedInThisTick = true;
            if (!instrumentState.computed) {
                instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);
            }
            const transition = instrument.getTransition();
            const chord = instrument.getChord();
            const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);
            const isNoiseChannel = song.getChannelIsNoise(channelIndex);
            const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;
            const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;
            const sampleTime = 1.0 / this.samplesPerSecond;
            const beatsPerPart = 1.0 / Config.partsPerBeat;
            const ticksIntoBar = this.getTicksIntoBar();
            const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;
            const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;
            const currentPart = this.getCurrentPart();
            let specialIntervalMult = 1.0;
            tone.specialIntervalExpressionMult = 1.0;
            let toneIsOnLastTick = shouldFadeOutFast;
            let intervalStart = 0.0;
            let intervalEnd = 0.0;
            let fadeExpressionStart = 1.0;
            let fadeExpressionEnd = 1.0;
            let chordExpressionStart = chordExpression;
            let chordExpressionEnd = chordExpression;
            let expressionReferencePitch = 16;
            let basePitch = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);
            let baseExpression = 1.0;
            let pitchDamping = 48;
            if (instrument.type == 3) {
                baseExpression = Config.spectrumBaseExpression;
                if (isNoiseChannel) {
                    basePitch = Config.spectrumBasePitch;
                    baseExpression *= 2.0;
                }
                expressionReferencePitch = Config.spectrumBasePitch;
                pitchDamping = 28;
            }
            else if (instrument.type == 4) {
                basePitch = Config.spectrumBasePitch;
                baseExpression = Config.drumsetBaseExpression;
                expressionReferencePitch = basePitch;
            }
            else if (instrument.type == 2) {
                basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;
                baseExpression = Config.noiseBaseExpression;
                expressionReferencePitch = basePitch;
                pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;
            }
            else if (instrument.type == 1 || instrument.type == 11) {
                baseExpression = Config.fmBaseExpression;
            }
            else if (instrument.type == 0) {
                baseExpression = Config.chipBaseExpression;
                if (Config.chipWaves[instrument.chipWave].isCustomSampled) {
                    if (Config.chipWaves[instrument.chipWave].isPercussion) {
                        basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);
                    }
                    else {
                        basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);
                    }
                }
                else {
                    if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {
                        basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune;
                    }
                    else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {
                        basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune;
                    }
                }
            }
            else if (instrument.type == 9) {
                baseExpression = Config.chipBaseExpression;
            }
            else if (instrument.type == 5) {
                baseExpression = Config.harmonicsBaseExpression;
            }
            else if (instrument.type == 6) {
                baseExpression = Config.pwmBaseExpression;
            }
            else if (instrument.type == 8) {
                baseExpression = Config.supersawBaseExpression;
            }
            else if (instrument.type == 7) {
                baseExpression = Config.pickedStringBaseExpression;
            }
            else if (instrument.type == 10) {
                baseExpression = 1.0;
                expressionReferencePitch = 0;
                pitchDamping = 1.0;
                basePitch = 0;
            }
            else {
                throw new Error("Unknown instrument type in computeTone.");
            }
            if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {
                tone.reset();
                if (instrument.type == 0 && instrument.isUsingAdvancedLoopControls) {
                    const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;
                    const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;
                    const lastOffset = 0.999999999999999;
                    for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                        tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);
                        tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;
                        tone.chipWaveCompletions[i] = 0;
                        tone.chipWavePrevWaves[i] = 0;
                        tone.chipWaveCompletionsLastWave[i] = 0;
                    }
                }
            }
            tone.freshlyAllocated = false;
            for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                tone.phaseDeltas[i] = 0.0;
                tone.phaseDeltaScales[i] = 0.0;
                tone.operatorExpressions[i] = 0.0;
                tone.operatorExpressionDeltas[i] = 0.0;
            }
            tone.expression = 0.0;
            tone.expressionDelta = 0.0;
            for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {
                tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);
            }
            if (released) {
                const startTicksSinceReleased = tone.ticksSinceReleased;
                const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;
                intervalStart = intervalEnd = tone.lastInterval;
                const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());
                fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);
                fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);
                if (shouldFadeOutFast) {
                    fadeExpressionEnd = 0.0;
                }
                if (tone.ticksSinceReleased + 1 >= fadeOutTicks)
                    toneIsOnLastTick = true;
            }
            else if (tone.note == null) {
                fadeExpressionStart = fadeExpressionEnd = 1.0;
                tone.lastInterval = 0;
                tone.ticksSinceReleased = 0;
                tone.liveInputSamplesHeld += roundedSamplesPerTick;
            }
            else {
                const note = tone.note;
                const nextNote = tone.nextNote;
                const noteStartPart = tone.noteStartPart;
                const noteEndPart = tone.noteEndPart;
                const endPinIndex = note.getEndPinIndex(currentPart);
                const startPin = note.pins[endPinIndex - 1];
                const endPin = note.pins[endPinIndex];
                const noteStartTick = noteStartPart * Config.ticksPerPart;
                const noteEndTick = noteEndPart * Config.ticksPerPart;
                const pinStart = (note.start + startPin.time) * Config.ticksPerPart;
                const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;
                tone.ticksSinceReleased = 0;
                const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;
                const tickTimeEnd = tickTimeStart + 1.0;
                const noteTicksPassedTickStart = tickTimeStart - noteStartTick;
                const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;
                const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));
                const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));
                fadeExpressionStart = 1.0;
                fadeExpressionEnd = 1.0;
                intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;
                intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;
                tone.lastInterval = intervalEnd;
                if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {
                    const fadeOutTicks = -instrument.getFadeOutTicks();
                    if (fadeOutTicks > 0.0) {
                        const noteLengthTicks = noteEndTick - noteStartTick;
                        fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);
                        fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);
                        if (tickTimeEnd >= noteStartTick + noteLengthTicks)
                            toneIsOnLastTick = true;
                    }
                }
            }
            tone.isOnLastTick = toneIsOnLastTick;
            let tmpNoteFilter = instrument.noteFilter;
            let startPoint;
            let endPoint;
            if (instrument.noteFilterType) {
                const noteFilterSettingsStart = instrument.noteFilter;
                if (instrument.noteSubFilters[1] == null)
                    instrument.noteSubFilters[1] = new FilterSettings();
                const noteFilterSettingsEnd = instrument.noteSubFilters[1];
                let startSimpleFreq = instrument.noteFilterSimpleCut;
                let startSimpleGain = instrument.noteFilterSimplePeak;
                let endSimpleFreq = instrument.noteFilterSimpleCut;
                let endSimpleGain = instrument.noteFilterSimplePeak;
                let filterChanges = false;
                if (this.isModActive(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex)) {
                    startSimpleFreq = this.getModValue(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex, false);
                    endSimpleFreq = this.getModValue(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex, true);
                    filterChanges = true;
                }
                if (this.isModActive(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex)) {
                    startSimpleGain = this.getModValue(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex, false);
                    endSimpleGain = this.getModValue(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex, true);
                    filterChanges = true;
                }
                noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);
                noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);
                startPoint = noteFilterSettingsStart.controlPoints[0];
                endPoint = noteFilterSettingsEnd.controlPoints[0];
                instrument.noteFilter = noteFilterSettingsStart;
                instrument.tmpNoteFilterStart = noteFilterSettingsStart;
            }
            const envelopeComputer = tone.envelopeComputer;
            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];
            if (this.isModActive(Config.modulators.dictionary["envelope speed"].index, channelIndex, tone.instrumentIndex)) {
                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary["envelope speed"].index, channelIndex, tone.instrumentIndex, false)));
                if (Number.isInteger(useEnvelopeSpeed)) {
                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];
                }
                else {
                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];
                }
            }
            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, useEnvelopeSpeed, this.song, instrumentState);
            const envelopeStarts = tone.envelopeComputer.envelopeStarts;
            const envelopeEnds = tone.envelopeComputer.envelopeEnds;
            instrument.noteFilter = tmpNoteFilter;
            if (tone.note != null && transition.slides) {
                const prevNote = tone.prevNote;
                const nextNote = tone.nextNote;
                if (prevNote != null) {
                    const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];
                    if (envelopeComputer.prevSlideStart)
                        intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;
                    if (envelopeComputer.prevSlideEnd)
                        intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;
                    if (!chord.singleTone) {
                        const chordSizeDiff = prevNote.pitches.length - tone.chordSize;
                        if (envelopeComputer.prevSlideStart)
                            chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);
                        if (envelopeComputer.prevSlideEnd)
                            chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);
                    }
                }
                if (nextNote != null) {
                    const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);
                    if (envelopeComputer.nextSlideStart)
                        intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;
                    if (envelopeComputer.nextSlideEnd)
                        intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;
                    if (!chord.singleTone) {
                        const chordSizeDiff = nextNote.pitches.length - tone.chordSize;
                        if (envelopeComputer.nextSlideStart)
                            chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);
                        if (envelopeComputer.nextSlideEnd)
                            chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);
                    }
                }
            }
            if (effectsIncludePitchShift(instrument.effects)) {
                let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;
                let pitchShiftScalarStart = 1.0;
                let pitchShiftScalarEnd = 1.0;
                if (this.isModActive(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex)) {
                    pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];
                    pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);
                    pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);
                }
                const envelopeStart = envelopeStarts[18];
                const envelopeEnd = envelopeEnds[18];
                intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;
                intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;
            }
            if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex)) {
                const envelopeStart = envelopeStarts[19];
                const envelopeEnd = envelopeEnds[19];
                let modDetuneStart = instrument.detune;
                let modDetuneEnd = instrument.detune;
                if (this.isModActive(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex)) {
                    modDetuneStart = this.getModValue(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;
                    modDetuneEnd = this.getModValue(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;
                }
                if (this.isModActive(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex)) {
                    modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex, false);
                    modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex, true);
                }
                intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);
                intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);
            }
            if (effectsIncludeVibrato(instrument.effects)) {
                let delayTicks;
                let vibratoAmplitudeStart;
                let vibratoAmplitudeEnd;
                if (instrument.vibrato == Config.vibratos.length) {
                    delayTicks = instrument.vibratoDelay * 2;
                    if (instrument.vibratoDelay == Config.modulators.dictionary["vibrato delay"].maxRawVol)
                        delayTicks = Number.POSITIVE_INFINITY;
                    vibratoAmplitudeStart = instrument.vibratoDepth;
                    vibratoAmplitudeEnd = vibratoAmplitudeStart;
                }
                else {
                    delayTicks = Config.vibratos[instrument.vibrato].delayTicks;
                    vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;
                    vibratoAmplitudeEnd = vibratoAmplitudeStart;
                }
                if (this.isModActive(Config.modulators.dictionary["vibrato delay"].index, channelIndex, tone.instrumentIndex)) {
                    delayTicks = this.getModValue(Config.modulators.dictionary["vibrato delay"].index, channelIndex, tone.instrumentIndex, false) * 2;
                    if (delayTicks == Config.modulators.dictionary["vibrato delay"].maxRawVol * 2)
                        delayTicks = Number.POSITIVE_INFINITY;
                }
                if (this.isModActive(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex)) {
                    vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex, false) / 25;
                    vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex, true) / 25;
                }
                let vibratoStart;
                if (tone.prevVibrato != null) {
                    vibratoStart = tone.prevVibrato;
                }
                else {
                    let vibratoLfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);
                    const vibratoDepthEnvelopeStart = envelopeStarts[20];
                    vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;
                    if (delayTicks > 0.0) {
                        const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;
                        vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));
                    }
                }
                let vibratoLfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);
                const vibratoDepthEnvelopeEnd = envelopeEnds[20];
                if (instrument.type != 10) {
                    let vibratoEnd = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;
                    if (delayTicks > 0.0) {
                        const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;
                        vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));
                    }
                    tone.prevVibrato = vibratoEnd;
                    intervalStart += vibratoStart;
                    intervalEnd += vibratoEnd;
                }
            }
            if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {
                const fadeInSeconds = instrument.getFadeInSeconds();
                if (fadeInSeconds > 0.0) {
                    fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);
                    fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);
                }
            }
            if (instrument.type == 4 && tone.drumsetPitch == null) {
                tone.drumsetPitch = tone.pitches[0];
                if (tone.note != null)
                    tone.drumsetPitch += tone.note.pickMainInterval();
                tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));
            }
            let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;
            if (!effectsIncludeNoteFilter(instrument.effects)) {
                tone.noteFilterCount = 0;
            }
            else {
                const noteAllFreqsEnvelopeStart = envelopeStarts[1];
                const noteAllFreqsEnvelopeEnd = envelopeEnds[1];
                if (instrument.noteFilterType) {
                    const noteFreqEnvelopeStart = envelopeStarts[21];
                    const noteFreqEnvelopeEnd = envelopeEnds[21];
                    const notePeakEnvelopeStart = envelopeStarts[29];
                    const notePeakEnvelopeEnd = envelopeEnds[29];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);
                    if (tone.noteFilters.length < 1)
                        tone.noteFilters[0] = new DynamicBiquadFilter();
                    tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                    noteFilterExpression *= startPoint.getVolumeCompensationMult();
                    tone.noteFilterCount = 1;
                }
                else {
                    const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;
                    for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {
                        const noteFreqEnvelopeStart = envelopeStarts[21 + i];
                        const noteFreqEnvelopeEnd = envelopeEnds[21 + i];
                        const notePeakEnvelopeStart = envelopeStarts[29 + i];
                        const notePeakEnvelopeEnd = envelopeEnds[29 + i];
                        let startPoint = noteFilterSettings.controlPoints[i];
                        const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];
                        if (startPoint.type != endPoint.type) {
                            startPoint = endPoint;
                        }
                        startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);
                        endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);
                        if (tone.noteFilters.length <= i)
                            tone.noteFilters[i] = new DynamicBiquadFilter();
                        tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                        noteFilterExpression *= startPoint.getVolumeCompensationMult();
                    }
                    tone.noteFilterCount = noteFilterSettings.controlPointCount;
                }
            }
            if (instrument.type == 4) {
                const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch);
                noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);
                let drumsetFilterEnvelopeStart = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);
                if (envelopeComputer.prevSlideStart) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);
                    drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;
                }
                if (envelopeComputer.nextSlideStart) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);
                    drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;
                }
                let drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeStart;
                if (instrument.discreteEnvelope == false) {
                    drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);
                    if (envelopeComputer.prevSlideEnd) {
                        const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);
                        drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;
                    }
                    if (envelopeComputer.nextSlideEnd) {
                        const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);
                        drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;
                    }
                }
                const point = this.tempDrumSetControlPoint;
                point.type = 0;
                point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);
                point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);
                point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);
                point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);
                if (tone.noteFilters.length == tone.noteFilterCount)
                    tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();
                tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);
                tone.noteFilterCount++;
            }
            noteFilterExpression = Math.min(3.0, noteFilterExpression);
            if (instrument.type == 1 || instrument.type == 11) {
                let sineExpressionBoost = 1.0;
                let totalCarrierExpression = 0.0;
                let arpeggioInterval = 0;
                const arpeggiates = chord.arpeggiates;
                if (tone.pitchCount > 1 && arpeggiates) {
                    const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);
                    arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];
                }
                const carrierCount = (instrument.type == 11 ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);
                for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {
                    const associatedCarrierIndex = (instrument.type == 11 ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);
                    const pitch = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];
                    const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;
                    const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;
                    const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;
                    const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;
                    const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);
                    const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);
                    const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;
                    const targetFreqStart = freqMult * baseFreqStart + hzOffset;
                    const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;
                    const freqEnvelopeStart = envelopeStarts[5 + i];
                    const freqEnvelopeEnd = envelopeEnds[5 + i];
                    let freqStart;
                    let freqEnd;
                    if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {
                        freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;
                        freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;
                    }
                    else {
                        freqStart = targetFreqStart;
                        freqEnd = targetFreqEnd;
                    }
                    tone.phaseDeltas[i] = freqStart * sampleTime;
                    tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);
                    let amplitudeStart = instrument.operators[i].amplitude;
                    let amplitudeEnd = instrument.operators[i].amplitude;
                    if (i < 4) {
                        if (this.isModActive(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex)) {
                            amplitudeStart *= this.getModValue(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;
                            amplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;
                        }
                    }
                    else {
                        if (this.isModActive(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex)) {
                            amplitudeStart *= this.getModValue(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;
                            amplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;
                        }
                    }
                    const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);
                    const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);
                    const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;
                    const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;
                    let expressionStart = amplitudeMultStart;
                    let expressionEnd = amplitudeMultEnd;
                    if (i < carrierCount) {
                        let pitchExpressionStart;
                        if (tone.prevPitchExpressions[i] != null) {
                            pitchExpressionStart = tone.prevPitchExpressions[i];
                        }
                        else {
                            pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);
                        }
                        const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);
                        tone.prevPitchExpressions[i] = pitchExpressionEnd;
                        expressionStart *= pitchExpressionStart;
                        expressionEnd *= pitchExpressionEnd;
                        totalCarrierExpression += amplitudeCurveEnd;
                    }
                    else {
                        expressionStart *= Config.sineWaveLength * 1.5;
                        expressionEnd *= Config.sineWaveLength * 1.5;
                        sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);
                    }
                    expressionStart *= envelopeStarts[11 + i];
                    expressionEnd *= envelopeEnds[11 + i];
                    if (this.isModActive(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex)) {
                        const startVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, false);
                        const endVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, true);
                        expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                        expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
                    }
                    tone.operatorExpressions[i] = expressionStart;
                    tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                }
                sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;
                sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);
                sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;
                const expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[0];
                const expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[0];
                tone.expression = expressionStart;
                tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;
                let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;
                if (this.isModActive(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex)) {
                    useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex, false) / 15.0;
                    useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex, true) / 15.0;
                }
                let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;
                const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;
                let feedbackStart = feedbackAmplitudeStart * envelopeStarts[17];
                let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[17];
                tone.feedbackMult = feedbackStart;
                tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;
            }
            else {
                const freqEndRatio = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);
                const basePhaseDeltaScale = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);
                let pitch = tone.pitches[0];
                if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {
                    const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);
                    if (chord.customInterval) {
                        const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];
                        specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);
                        tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);
                    }
                    else {
                        pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];
                    }
                }
                const startPitch = basePitch + (pitch + intervalStart) * intervalScale;
                const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;
                let pitchExpressionStart;
                if (tone.prevPitchExpressions[0] != null) {
                    pitchExpressionStart = tone.prevPitchExpressions[0];
                }
                else {
                    pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);
                }
                const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);
                tone.prevPitchExpressions[0] = pitchExpressionEnd;
                let settingsExpressionMult = baseExpression * noteFilterExpression;
                if (instrument.type == 2) {
                    settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;
                }
                if (instrument.type == 0) {
                    settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;
                }
                if (instrument.type == 6) {
                    const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);
                    let pulseWidthModStart = basePulseWidth;
                    let pulseWidthModEnd = basePulseWidth;
                    if (this.isModActive(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex)) {
                        pulseWidthModStart = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);
                        pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);
                    }
                    const pulseWidthStart = pulseWidthModStart * envelopeStarts[2];
                    const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];
                    tone.pulseWidth = pulseWidthStart;
                    tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;
                    let decimalOffsetModStart = instrument.decimalOffset;
                    if (this.isModActive(Config.modulators.dictionary["decimal offset"].index, channelIndex, tone.instrumentIndex)) {
                        decimalOffsetModStart = this.getModValue(Config.modulators.dictionary["decimal offset"].index, channelIndex, tone.instrumentIndex, false);
                    }
                    const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];
                    tone.decimalOffset = decimalOffsetStart;
                    tone.pulseWidth -= (tone.decimalOffset) / 10000;
                }
                if (instrument.type == 7) {
                    let useSustainStart = instrument.stringSustain;
                    let useSustainEnd = instrument.stringSustain;
                    if (this.isModActive(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex)) {
                        useSustainStart = this.getModValue(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex, false);
                        useSustainEnd = this.getModValue(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex, true);
                    }
                    tone.stringSustainStart = useSustainStart;
                    tone.stringSustainEnd = useSustainEnd;
                    settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));
                }
                const startFreq = Instrument.frequencyFromPitch(startPitch);
                if (instrument.type == 0 || instrument.type == 9 || instrument.type == 5 || instrument.type == 7 || instrument.type == 3 || instrument.type == 6 || instrument.type == 2) {
                    const unisonVoices = instrument.unisonVoices;
                    const unisonSpread = instrument.unisonSpread;
                    const unisonOffset = instrument.unisonOffset;
                    const unisonExpression = instrument.unisonExpression;
                    const voiceCountExpression = (instrument.type == 7) ? 1 : unisonVoices / 2.0;
                    settingsExpressionMult *= unisonExpression * voiceCountExpression;
                    const unisonEnvelopeStart = envelopeStarts[4];
                    const unisonEnvelopeEnd = envelopeEnds[4];
                    const unisonAStart = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);
                    const unisonAEnd = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);
                    const unisonBStart = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;
                    const unisonBEnd = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;
                    tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;
                    tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;
                    tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);
                    tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);
                }
                else {
                    tone.phaseDeltas[0] = startFreq * sampleTime;
                    tone.phaseDeltaScales[0] = basePhaseDeltaScale;
                }
                let supersawExpressionStart = 1.0;
                let supersawExpressionEnd = 1.0;
                if (instrument.type == 8) {
                    const minFirstVoiceAmplitude = 1.0 / Math.sqrt(Config.supersawVoiceCount);
                    let useDynamismStart = instrument.supersawDynamism / Config.supersawDynamismMax;
                    let useDynamismEnd = instrument.supersawDynamism / Config.supersawDynamismMax;
                    if (this.isModActive(Config.modulators.dictionary["dynamism"].index, channelIndex, tone.instrumentIndex)) {
                        useDynamismStart = (this.getModValue(Config.modulators.dictionary["dynamism"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;
                        useDynamismEnd = (this.getModValue(Config.modulators.dictionary["dynamism"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;
                    }
                    const curvedDynamismStart = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[38]), 0.2);
                    const curvedDynamismEnd = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[38]), 0.2);
                    const firstVoiceAmplitudeStart = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);
                    const firstVoiceAmplitudeEnd = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);
                    const dynamismStart = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));
                    const dynamismEnd = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));
                    tone.supersawDynamism = dynamismStart;
                    tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;
                    const initializeSupersaw = (tone.supersawDelayIndex == -1);
                    if (initializeSupersaw) {
                        let accumulator = 0.0;
                        for (let i = 0; i < Config.supersawVoiceCount; i++) {
                            tone.phases[i] = accumulator;
                            accumulator += -Math.log(Math.random());
                        }
                        const amplitudeSum = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;
                        const slope = amplitudeSum;
                        let sample = 0.0;
                        for (let i = 0; i < Config.supersawVoiceCount; i++) {
                            const amplitude = (i == 0) ? 1.0 : dynamismStart;
                            const normalizedPhase = tone.phases[i] / accumulator;
                            tone.phases[i] = normalizedPhase;
                            sample += (normalizedPhase - 0.5) * amplitude;
                        }
                        let zeroCrossingPhase = 1.0;
                        let prevDrop = 0.0;
                        for (let i = Config.supersawVoiceCount - 1; i >= 0; i--) {
                            const nextDrop = 1.0 - tone.phases[i];
                            const phaseDelta = nextDrop - prevDrop;
                            if (sample < 0.0) {
                                const distanceToZeroCrossing = -sample / slope;
                                if (distanceToZeroCrossing < phaseDelta) {
                                    zeroCrossingPhase = prevDrop + distanceToZeroCrossing;
                                    break;
                                }
                            }
                            const amplitude = (i == 0) ? 1.0 : dynamismStart;
                            sample += phaseDelta * slope - amplitude;
                            prevDrop = nextDrop;
                        }
                        for (let i = 0; i < Config.supersawVoiceCount; i++) {
                            tone.phases[i] += zeroCrossingPhase;
                        }
                        for (let i = 1; i < Config.supersawVoiceCount - 1; i++) {
                            const swappedIndex = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));
                            const temp = tone.phases[i];
                            tone.phases[i] = tone.phases[swappedIndex];
                            tone.phases[swappedIndex] = temp;
                        }
                    }
                    const baseSpreadSlider = instrument.supersawSpread / Config.supersawSpreadMax;
                    let useSpreadStart = baseSpreadSlider;
                    let useSpreadEnd = baseSpreadSlider;
                    if (this.isModActive(Config.modulators.dictionary["spread"].index, channelIndex, tone.instrumentIndex)) {
                        useSpreadStart = (this.getModValue(Config.modulators.dictionary["spread"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;
                        useSpreadEnd = (this.getModValue(Config.modulators.dictionary["spread"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;
                    }
                    const spreadSliderStart = useSpreadStart * envelopeStarts[39];
                    const spreadSliderEnd = useSpreadEnd * envelopeEnds[39];
                    const averageSpreadSlider = (spreadSliderStart + spreadSliderEnd) * 0.5;
                    const curvedSpread = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);
                    for (let i = 0; i < Config.supersawVoiceCount; i++) {
                        const offset = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);
                        tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);
                    }
                    const baseShape = instrument.supersawShape / Config.supersawShapeMax;
                    let useShapeStart = baseShape * envelopeStarts[40];
                    let useShapeEnd = baseShape * envelopeEnds[40];
                    if (this.isModActive(Config.modulators.dictionary["saw shape"].index, channelIndex, tone.instrumentIndex)) {
                        useShapeStart = (this.getModValue(Config.modulators.dictionary["saw shape"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;
                        useShapeEnd = (this.getModValue(Config.modulators.dictionary["saw shape"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;
                    }
                    const shapeStart = useShapeStart * envelopeStarts[40];
                    const shapeEnd = useShapeEnd * envelopeEnds[40];
                    tone.supersawShape = shapeStart;
                    tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;
                    let decimalOffsetModStart = instrument.decimalOffset;
                    if (this.isModActive(Config.modulators.dictionary["decimal offset"].index, channelIndex, tone.instrumentIndex)) {
                        decimalOffsetModStart = this.getModValue(Config.modulators.dictionary["decimal offset"].index, channelIndex, tone.instrumentIndex, false);
                    }
                    const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];
                    tone.decimalOffset = decimalOffsetStart;
                    const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);
                    let pulseWidthModStart = basePulseWidth;
                    let pulseWidthModEnd = basePulseWidth;
                    if (this.isModActive(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex)) {
                        pulseWidthModStart = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);
                        pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);
                    }
                    let pulseWidthStart = pulseWidthModStart * envelopeStarts[2];
                    let pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];
                    pulseWidthStart -= decimalOffsetStart / 10000;
                    pulseWidthEnd -= decimalOffsetStart / 10000;
                    const phaseDeltaStart = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;
                    const phaseDeltaEnd = startFreq * sampleTime * freqEndRatio;
                    tone.supersawPrevPhaseDelta = phaseDeltaEnd;
                    const delayLengthStart = pulseWidthStart / phaseDeltaStart;
                    const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;
                    tone.supersawDelayLength = delayLengthStart;
                    tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;
                    const minBufferLength = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;
                    if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {
                        const likelyMaximumLength = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));
                        const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));
                        if (!initializeSupersaw && tone.supersawDelayLine != null) {
                            const oldDelayBufferMask = (tone.supersawDelayLine.length - 1) >> 0;
                            const startCopyingFromIndex = tone.supersawDelayIndex;
                            for (let i = 0; i < tone.supersawDelayLine.length; i++) {
                                newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];
                            }
                        }
                        tone.supersawDelayLine = newDelayLine;
                        tone.supersawDelayIndex = tone.supersawDelayLine.length;
                    }
                    else if (initializeSupersaw) {
                        tone.supersawDelayLine.fill(0.0);
                        tone.supersawDelayIndex = tone.supersawDelayLine.length;
                    }
                    const pulseExpressionRatio = Config.pwmBaseExpression / Config.supersawBaseExpression;
                    supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);
                    supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);
                }
                let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[0] * supersawExpressionStart;
                let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[0] * supersawExpressionEnd;
                if (this.isModActive(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex)) {
                    const startVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, false);
                    const endVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, true);
                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
                }
                tone.expression = expressionStart;
                tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                if (instrument.type == 7) {
                    let stringDecayStart;
                    if (tone.prevStringDecay != null) {
                        stringDecayStart = tone.prevStringDecay;
                    }
                    else {
                        const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[3];
                        stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));
                    }
                    const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[3];
                    let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));
                    tone.prevStringDecay = stringDecayEnd;
                    const unisonVoices = instrument.unisonVoices;
                    for (let i = tone.pickedStrings.length; i < unisonVoices; i++) {
                        tone.pickedStrings[i] = new PickedString();
                    }
                    if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {
                        for (const pickedString of tone.pickedStrings) {
                            pickedString.delayIndex = -1;
                        }
                    }
                    for (let i = 0; i < unisonVoices; i++) {
                        tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);
                    }
                }
            }
        }
        static getLFOAmplitude(instrument, secondsIntoBar) {
            let effect = 0.0;
            for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {
                effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);
            }
            return effect;
        }
        static getInstrumentSynthFunction(instrument) {
            if (instrument.type == 1) {
                const fingerprint = instrument.algorithm + "_" + instrument.feedbackType;
                if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {
                    const synthSource = [];
                    for (const line of Synth.fmSourceTemplate) {
                        if (line.indexOf("// CARRIER OUTPUTS") != -1) {
                            const outputs = [];
                            for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {
                                outputs.push("operator" + j + "Scaled");
                            }
                            synthSource.push(line.replace("/*operator#Scaled*/", outputs.join(" + ")));
                        }
                        else if (line.indexOf("// INSERT OPERATOR COMPUTATION HERE") != -1) {
                            for (let j = Config.operatorCount - 1; j >= 0; j--) {
                                for (const operatorLine of Synth.operatorSourceTemplate) {
                                    if (operatorLine.indexOf("/* + operator@Scaled*/") != -1) {
                                        let modulators = "";
                                        for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {
                                            modulators += " + operator" + (modulatorNumber - 1) + "Scaled";
                                        }
                                        const feedbackIndices = Config.feedbacks[instrument.feedbackType].indices[j];
                                        if (feedbackIndices.length > 0) {
                                            modulators += " + feedbackMult * (";
                                            const feedbacks = [];
                                            for (const modulatorNumber of feedbackIndices) {
                                                feedbacks.push("operator" + (modulatorNumber - 1) + "Output");
                                            }
                                            modulators += feedbacks.join(" + ") + ")";
                                        }
                                        synthSource.push(operatorLine.replace(/\#/g, j + "").replace("/* + operator@Scaled*/", modulators));
                                    }
                                    else {
                                        synthSource.push(operatorLine.replace(/\#/g, j + ""));
                                    }
                                }
                            }
                        }
                        else if (line.indexOf("#") != -1) {
                            for (let j = 0; j < Config.operatorCount; j++) {
                                synthSource.push(line.replace(/\#/g, j + ""));
                            }
                        }
                        else {
                            synthSource.push(line);
                        }
                    }
                    const wrappedFmSynth = "return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {" + synthSource.join("\n") + "}";
                    Synth.fmSynthFunctionCache[fingerprint] = new Function("Config", "Synth", wrappedFmSynth)(Config, Synth);
                }
                return Synth.fmSynthFunctionCache[fingerprint];
            }
            else if (instrument.type == 0) {
                if (instrument.isUsingAdvancedLoopControls) {
                    return Synth.loopableChipSynth;
                }
                return Synth.chipSynth;
            }
            else if (instrument.type == 9) {
                return Synth.chipSynth;
            }
            else if (instrument.type == 5) {
                return Synth.harmonicsSynth;
            }
            else if (instrument.type == 6) {
                return Synth.pulseWidthSynth;
            }
            else if (instrument.type == 8) {
                return Synth.supersawSynth;
            }
            else if (instrument.type == 7) {
                return Synth.pickedStringSynth;
            }
            else if (instrument.type == 2) {
                return Synth.noiseSynth;
            }
            else if (instrument.type == 3) {
                return Synth.spectrumSynth;
            }
            else if (instrument.type == 4) {
                return Synth.drumsetSynth;
            }
            else if (instrument.type == 10) {
                return Synth.modSynth;
            }
            else if (instrument.type == 11) {
                const fingerprint = instrument.customAlgorithm.name + "_" + instrument.customFeedbackType.name;
                if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {
                    const synthSource = [];
                    for (const line of Synth.fmSourceTemplate) {
                        if (line.indexOf("// CARRIER OUTPUTS") != -1) {
                            const outputs = [];
                            for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {
                                outputs.push("operator" + j + "Scaled");
                            }
                            synthSource.push(line.replace("/*operator#Scaled*/", outputs.join(" + ")));
                        }
                        else if (line.indexOf("// INSERT OPERATOR COMPUTATION HERE") != -1) {
                            for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {
                                for (const operatorLine of Synth.operatorSourceTemplate) {
                                    if (operatorLine.indexOf("/* + operator@Scaled*/") != -1) {
                                        let modulators = "";
                                        for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {
                                            modulators += " + operator" + (modulatorNumber - 1) + "Scaled";
                                        }
                                        const feedbackIndices = instrument.customFeedbackType.indices[j];
                                        if (feedbackIndices.length > 0) {
                                            modulators += " + feedbackMult * (";
                                            const feedbacks = [];
                                            for (const modulatorNumber of feedbackIndices) {
                                                feedbacks.push("operator" + (modulatorNumber - 1) + "Output");
                                            }
                                            modulators += feedbacks.join(" + ") + ")";
                                        }
                                        synthSource.push(operatorLine.replace(/\#/g, j + "").replace("/* + operator@Scaled*/", modulators));
                                    }
                                    else {
                                        synthSource.push(operatorLine.replace(/\#/g, j + ""));
                                    }
                                }
                            }
                        }
                        else if (line.indexOf("#") != -1) {
                            for (let j = 0; j < Config.operatorCount + 2; j++) {
                                synthSource.push(line.replace(/\#/g, j + ""));
                            }
                        }
                        else {
                            synthSource.push(line);
                        }
                    }
                    const wrappedFm6Synth = "return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {" + synthSource.join("\n") + "}";
                    Synth.fm6SynthFunctionCache[fingerprint] = new Function("Config", "Synth", wrappedFm6Synth)(Config, Synth);
                }
                return Synth.fm6SynthFunctionCache[fingerprint];
            }
            else {
                throw new Error("Unrecognized instrument type: " + instrument.type);
            }
        }
        static wrap(x, b) {
            return (x % b + b) % b;
        }
        static loopableChipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const volumeScale = instrumentState.volumeScale;
            const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;
            let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));
            let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));
            let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;
            if (chipWaveLoopLength < 2) {
                chipWaveLoopStart = 0;
                chipWaveLoopEnd = waveLength;
                chipWaveLoopLength = waveLength;
            }
            const chipWaveLoopMode = instrumentState.chipWaveLoopMode;
            const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            let directionA = tone.directions[0];
            let directionB = tone.directions[1];
            let chipWaveCompletionA = tone.chipWaveCompletions[0];
            let chipWaveCompletionB = tone.chipWaveCompletions[1];
            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {
                if (!chipWavePlayBackwards) {
                    directionA = 1;
                    directionB = 1;
                }
                else {
                    directionA = -1;
                    directionB = -1;
                }
            }
            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {
                chipWaveCompletionA = 0;
                chipWaveCompletionB = 0;
            }
            let lastWaveA = tone.chipWaveCompletionsLastWave[0];
            let lastWaveB = tone.chipWaveCompletionsLastWave[1];
            const chipWaveCompletionFadeLength = 1000;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = Synth.wrap(tone.phases[0], 1) * waveLength;
            let phaseB = Synth.wrap(tone.phases[1], 1) * waveLength;
            let prevWaveIntegralA = 0;
            let prevWaveIntegralB = 0;
            if (!aliases) {
                const phaseAInt = Math.floor(phaseA);
                const phaseBInt = Math.floor(phaseB);
                const indexA = Synth.wrap(phaseAInt, waveLength);
                const indexB = Synth.wrap(phaseBInt, waveLength);
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                prevWaveIntegralA = +wave[indexA];
                prevWaveIntegralB = +wave[indexB];
                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;
                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;
            }
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            let prevWaveA = tone.chipWavePrevWaves[0];
            let prevWaveB = tone.chipWavePrevWaves[1];
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {
                    chipWaveCompletionA++;
                }
                if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {
                    chipWaveCompletionB++;
                }
                let wrapped = 0;
                phaseA += phaseDeltaA * directionA;
                phaseB += phaseDeltaB * directionB;
                if (chipWaveLoopMode === 2) {
                    if (directionA === 1) {
                        if (phaseA > waveLength) {
                            if (chipWaveCompletionA <= 0) {
                                lastWaveA = prevWaveA;
                                chipWaveCompletionA++;
                            }
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseA < 0) {
                            if (chipWaveCompletionA <= 0) {
                                lastWaveA = prevWaveA;
                                chipWaveCompletionA++;
                            }
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > waveLength) {
                            if (chipWaveCompletionB <= 0) {
                                lastWaveB = prevWaveB;
                                chipWaveCompletionB++;
                            }
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseB < 0) {
                            if (chipWaveCompletionB <= 0) {
                                lastWaveB = prevWaveB;
                                chipWaveCompletionB++;
                            }
                            wrapped = 1;
                        }
                    }
                }
                else if (chipWaveLoopMode === 3) {
                    if (directionA === 1) {
                        if (phaseA > chipWaveLoopEnd) {
                            if (chipWaveCompletionA <= 0) {
                                lastWaveA = prevWaveA;
                                chipWaveCompletionA++;
                            }
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseA < chipWaveLoopStart) {
                            if (chipWaveCompletionA <= 0) {
                                lastWaveA = prevWaveA;
                                chipWaveCompletionA++;
                            }
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > chipWaveLoopEnd) {
                            if (chipWaveCompletionB <= 0) {
                                lastWaveB = prevWaveB;
                                chipWaveCompletionB++;
                            }
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseB < chipWaveLoopStart) {
                            if (chipWaveCompletionB <= 0) {
                                lastWaveB = prevWaveB;
                                chipWaveCompletionB++;
                            }
                            wrapped = 1;
                        }
                    }
                }
                else if (chipWaveLoopMode === 0) {
                    if (directionA === 1) {
                        if (phaseA > chipWaveLoopEnd) {
                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseA < chipWaveLoopStart) {
                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > chipWaveLoopEnd) {
                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);
                            wrapped = 1;
                        }
                    }
                    else if (directionB === -1) {
                        if (phaseB < chipWaveLoopStart) {
                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);
                            wrapped = 1;
                        }
                    }
                }
                else if (chipWaveLoopMode === 1) {
                    if (directionA === 1) {
                        if (phaseA > chipWaveLoopEnd) {
                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);
                            directionA = -1;
                            wrapped = 1;
                        }
                    }
                    else if (directionA === -1) {
                        if (phaseA < chipWaveLoopStart) {
                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);
                            directionA = 1;
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > chipWaveLoopEnd) {
                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);
                            directionB = -1;
                            wrapped = 1;
                        }
                    }
                    else if (directionB === -1) {
                        if (phaseB < chipWaveLoopStart) {
                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);
                            directionB = 1;
                            wrapped = 1;
                        }
                    }
                }
                let waveA = 0;
                let waveB = 0;
                let inputSample = 0;
                if (aliases) {
                    waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];
                    waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];
                    prevWaveA = waveA;
                    prevWaveB = waveB;
                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;
                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;
                    inputSample = 0;
                    if (chipWaveCompletionA > 0) {
                        inputSample += lastWaveA * completionFadeA;
                    }
                    else {
                        inputSample += waveA;
                    }
                    if (chipWaveCompletionB > 0) {
                        inputSample += lastWaveB * completionFadeB;
                    }
                    else {
                        inputSample += waveB;
                    }
                }
                else {
                    const phaseAInt = Math.floor(phaseA);
                    const phaseBInt = Math.floor(phaseB);
                    const indexA = Synth.wrap(phaseAInt, waveLength);
                    const indexB = Synth.wrap(phaseBInt, waveLength);
                    let nextWaveIntegralA = wave[indexA];
                    let nextWaveIntegralB = wave[indexB];
                    const phaseRatioA = phaseA - phaseAInt;
                    const phaseRatioB = phaseB - phaseBInt;
                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;
                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;
                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {
                        let pwia = 0;
                        let pwib = 0;
                        const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);
                        const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);
                        const phaseAInt = Math.floor(phaseA_);
                        const phaseBInt = Math.floor(phaseB_);
                        const indexA = Synth.wrap(phaseAInt, waveLength);
                        const indexB = Synth.wrap(phaseBInt, waveLength);
                        pwia = wave[indexA];
                        pwib = wave[indexB];
                        pwia += (wave[Synth.wrap(indexA + 1, waveLength)] - pwia) * (phaseA_ - phaseAInt) * directionA;
                        pwib += (wave[Synth.wrap(indexB + 1, waveLength)] - pwib) * (phaseB_ - phaseBInt) * directionB;
                        prevWaveIntegralA = pwia;
                        prevWaveIntegralB = pwib;
                    }
                    if (chipWaveLoopMode === 1 && wrapped !== 0) {
                        waveA = prevWaveA;
                        waveB = prevWaveB;
                    }
                    else {
                        waveA = (nextWaveIntegralA - prevWaveIntegralA) / (phaseDeltaA * directionA);
                        waveB = (nextWaveIntegralB - prevWaveIntegralB) / (phaseDeltaB * directionB);
                    }
                    prevWaveA = waveA;
                    prevWaveB = waveB;
                    prevWaveIntegralA = nextWaveIntegralA;
                    prevWaveIntegralB = nextWaveIntegralB;
                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;
                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;
                    if (chipWaveCompletionA > 0) {
                        inputSample += lastWaveA * completionFadeA;
                    }
                    else {
                        inputSample += waveA;
                    }
                    if (chipWaveCompletionB > 0) {
                        inputSample += lastWaveB * completionFadeB;
                    }
                    else {
                        inputSample += waveB * unisonSign;
                    }
                }
                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample * volumeScale;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.directions[0] = directionA;
            tone.directions[1] = directionB;
            tone.chipWaveCompletions[0] = chipWaveCompletionA;
            tone.chipWaveCompletions[1] = chipWaveCompletionB;
            tone.chipWavePrevWaves[0] = prevWaveA;
            tone.chipWavePrevWaves[1] = prevWaveB;
            tone.chipWaveCompletionsLastWave[0] = lastWaveA;
            tone.chipWaveCompletionsLastWave[1] = lastWaveB;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static chipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const volumeScale = instrumentState.volumeScale;
            const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1) * waveLength;
            let phaseB = (tone.phases[1] % 1) * waveLength;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let prevWaveIntegralA = 0;
            let prevWaveIntegralB = 0;
            if (!aliases) {
                const phaseAInt = phaseA | 0;
                const phaseBInt = phaseB | 0;
                const indexA = phaseAInt % waveLength;
                const indexB = phaseBInt % waveLength;
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                prevWaveIntegralA = +wave[indexA];
                prevWaveIntegralB = +wave[indexB];
                prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;
                prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;
            }
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                let waveA;
                let waveB;
                let inputSample;
                if (aliases) {
                    waveA = wave[(0 | phaseA) % waveLength];
                    waveB = wave[(0 | phaseB) % waveLength];
                    inputSample = waveA + waveB;
                }
                else {
                    const phaseAInt = phaseA | 0;
                    const phaseBInt = phaseB | 0;
                    const indexA = phaseAInt % waveLength;
                    const indexB = phaseBInt % waveLength;
                    let nextWaveIntegralA = wave[indexA];
                    let nextWaveIntegralB = wave[indexB];
                    const phaseRatioA = phaseA - phaseAInt;
                    const phaseRatioB = phaseB - phaseBInt;
                    nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;
                    nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;
                    waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;
                    waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;
                    prevWaveIntegralA = nextWaveIntegralA;
                    prevWaveIntegralB = nextWaveIntegralB;
                    inputSample = waveA + waveB * unisonSign;
                }
                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample * volumeScale;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static harmonicsSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const waveLength = wave.length - 1;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1) * waveLength;
            let phaseB = (tone.phases[1] % 1) * waveLength;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const phaseAInt = phaseA | 0;
            const phaseBInt = phaseB | 0;
            const indexA = phaseAInt % waveLength;
            const indexB = phaseBInt % waveLength;
            const phaseRatioA = phaseA - phaseAInt;
            const phaseRatioB = phaseB - phaseBInt;
            let prevWaveIntegralA = +wave[indexA];
            let prevWaveIntegralB = +wave[indexB];
            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;
            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                const phaseAInt = phaseA | 0;
                const phaseBInt = phaseB | 0;
                const indexA = phaseAInt % waveLength;
                const indexB = phaseBInt % waveLength;
                let nextWaveIntegralA = wave[indexA];
                let nextWaveIntegralB = wave[indexB];
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;
                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;
                const waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;
                const waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;
                prevWaveIntegralA = nextWaveIntegralA;
                prevWaveIntegralB = nextWaveIntegralB;
                const inputSample = waveA + waveB * unisonSign;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static pickedStringSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const voiceCount = instrumentState.unisonVoices;
            let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];
            if (pickedStringFunction == undefined) {
                let pickedStringSource = "return (synth, bufferIndex, runLength, tone, instrumentState) => {";
                pickedStringSource += `
				const Config = beepbox.Config;
				const Synth = beepbox.Synth;
				const data = synth.tempMonoInstrumentSampleBuffer;
				
				let pickedString# = tone.pickedStrings[#];
				let allPassSample# = +pickedString#.allPassSample;
				let allPassPrevInput# = +pickedString#.allPassPrevInput;
				let sustainFilterSample# = +pickedString#.sustainFilterSample;
				let sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;
				let sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;
				let sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;
				let fractionalDelaySample# = +pickedString#.fractionalDelaySample;
				const delayLine# = pickedString#.delayLine;
				const delayBufferMask# = (delayLine#.length - 1) >> 0;
				let delayIndex# = pickedString#.delayIndex|0;
				delayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;
				let delayLength# = +pickedString#.prevDelayLength;
				const delayLengthDelta# = +pickedString#.delayLengthDelta;
				let allPassG# = +pickedString#.allPassG;
				let sustainFilterA1# = +pickedString#.sustainFilterA1;
				let sustainFilterA2# = +pickedString#.sustainFilterA2;
				let sustainFilterB0# = +pickedString#.sustainFilterB0;
				let sustainFilterB1# = +pickedString#.sustainFilterB1;
				let sustainFilterB2# = +pickedString#.sustainFilterB2;
				const allPassGDelta# = +pickedString#.allPassGDelta;
				const sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;
				const sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;
				const sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;
				const sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;
				const sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;
				
				let expression = +tone.expression;
				const expressionDelta = +tone.expressionDelta;
				
				const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
				const delayResetOffset# = pickedString#.delayResetOffset|0;
				
				const filters = tone.noteFilters;
				const filterCount = tone.noteFilterCount|0;
				let initialFilterInput1 = +tone.initialNoteFilterInput1;
				let initialFilterInput2 = +tone.initialNoteFilterInput2;
				const applyFilters = Synth.applyFilters;
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					const targetSampleTime# = delayIndex# - delayLength#;
					const lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.
					const upperIndex# = lowerIndex# + 1;
					const fractionalDelay# = upperIndex# - targetSampleTime#;
					const fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
					const prevInput# = delayLine#[lowerIndex# & delayBufferMask#];
					const input# = delayLine#[upperIndex# & delayBufferMask#];
					fractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;
					
					allPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;
					allPassPrevInput# = fractionalDelaySample#;
					
					const sustainFilterPrevOutput1# = sustainFilterSample#;
					sustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;
					sustainFilterPrevOutput2# = sustainFilterPrevOutput1#;
					sustainFilterPrevInput2# = sustainFilterPrevInput1#;
					sustainFilterPrevInput1# = allPassSample#;
					
					delayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;
					delayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;
					delayIndex#++;
					
					const inputSample = (`;
                const sampleList = [];
                for (let voice = 0; voice < voiceCount; voice++) {
                    sampleList.push("fractionalDelaySample" + voice + (voice == 1 ? " * unisonSign" : ""));
                }
                pickedStringSource += sampleList.join(" + ");
                pickedStringSource += `) * expression;
					const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;
					data[sampleIndex] += sample;
					
					expression += expressionDelta;
					delayLength# += delayLengthDelta#;
					allPassG# += allPassGDelta#;
					sustainFilterA1# += sustainFilterA1Delta#;
					sustainFilterA2# += sustainFilterA2Delta#;
					sustainFilterB0# += sustainFilterB0Delta#;
					sustainFilterB1# += sustainFilterB1Delta#;
					sustainFilterB2# += sustainFilterB2Delta#;
				}
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);
				if (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;
				if (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;
				if (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;
				if (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;
				if (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;
				if (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;
				if (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;
				pickedString#.allPassSample = allPassSample#;
				pickedString#.allPassPrevInput = allPassPrevInput#;
				pickedString#.sustainFilterSample = sustainFilterSample#;
				pickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;
				pickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;
				pickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;
				pickedString#.fractionalDelaySample = fractionalDelaySample#;
				pickedString#.delayIndex = delayIndex#;
				pickedString#.prevDelayLength = delayLength#;
				pickedString#.allPassG = allPassG#;
				pickedString#.sustainFilterA1 = sustainFilterA1#;
				pickedString#.sustainFilterA2 = sustainFilterA2#;
				pickedString#.sustainFilterB0 = sustainFilterB0#;
				pickedString#.sustainFilterB1 = sustainFilterB1#;
				pickedString#.sustainFilterB2 = sustainFilterB2#;
				
				tone.expression = expression;
				
				synth.sanitizeFilters(filters);
				tone.initialNoteFilterInput1 = initialFilterInput1;
				tone.initialNoteFilterInput2 = initialFilterInput2;
			}`;
                pickedStringSource = pickedStringSource.replace(/^.*\#.*$/mg, line => {
                    const lines = [];
                    for (let voice = 0; voice < voiceCount; voice++) {
                        lines.push(line.replace(/\#/g, String(voice)));
                    }
                    return lines.join("\n");
                });
                pickedStringFunction = new Function("Config", "Synth", pickedStringSource)(Config, Synth);
                Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;
            }
            pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);
        }
        static effectsSynth(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) {
            const usesDistortion = effectsIncludeDistortion(instrumentState.effects);
            const usesBitcrusher = effectsIncludeBitcrusher(instrumentState.effects);
            const usesEqFilter = instrumentState.eqFilterCount > 0;
            const usesPanning = effectsIncludePanning(instrumentState.effects);
            const usesChorus = effectsIncludeChorus(instrumentState.effects);
            const usesEcho = effectsIncludeEcho(instrumentState.effects);
            const usesReverb = effectsIncludeReverb(instrumentState.effects);
            const usesRingModulation = effectsIncludeRM(instrumentState.effects);
            const usesPhaser = effectsIncludePhaser(instrumentState.effects);
            let signature = 0;
            if (usesDistortion)
                signature = signature | 1;
            signature = signature << 1;
            if (usesBitcrusher)
                signature = signature | 1;
            signature = signature << 1;
            if (usesEqFilter)
                signature = signature | 1;
            signature = signature << 1;
            if (usesPanning)
                signature = signature | 1;
            signature = signature << 1;
            if (usesChorus)
                signature = signature | 1;
            signature = signature << 1;
            if (usesEcho)
                signature = signature | 1;
            signature = signature << 1;
            if (usesReverb)
                signature = signature | 1;
            signature = signature << 1;
            if (usesRingModulation)
                signature = signature | 1;
            signature = signature << 1;
            if (usesPhaser)
                signature = signature | 1;
            let effectsFunction = Synth.effectsFunctionCache[signature];
            if (effectsFunction == undefined) {
                let effectsSource = "return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {";
                const usesDelays = usesChorus || usesReverb || usesEcho;
                effectsSource += `
				const tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;
				
				let mixVolume = +instrumentState.mixVolume;
				const mixVolumeDelta = +instrumentState.mixVolumeDelta;`;
                if (usesDelays) {
                    effectsSource += `
				
				let delayInputMult = +instrumentState.delayInputMult;
				const delayInputMultDelta = +instrumentState.delayInputMultDelta;`;
                }
                if (usesDistortion) {
                    effectsSource += `
				
				const distortionBaseVolume = +Config.distortionBaseVolume;
				let distortion = instrumentState.distortion;
				const distortionDelta = instrumentState.distortionDelta;
				let distortionDrive = instrumentState.distortionDrive;
				const distortionDriveDelta = instrumentState.distortionDriveDelta;
				const distortionFractionalResolution = 4.0;
				const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;
				const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;
				const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;
				const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;
				const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;
				const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;
				const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;
				const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;
				const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;
				const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;
				
				let distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;
				let distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;
				let distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;
				let distortionPrevInput = +instrumentState.distortionPrevInput;
				let distortionNextOutput = +instrumentState.distortionNextOutput;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `

				let bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;
				let bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;
				let bitcrusherPhase = +instrumentState.bitcrusherPhase;
				let bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;
				const bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;
				let bitcrusherScale = +instrumentState.bitcrusherScale;
				const bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;
				let bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;
				const bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`;
                }
                if (usesRingModulation) {
                    effectsSource += `
                let ringModMix = +instrumentState.ringModMix;
                let ringModMixDelta = +instrumentState.ringModMixDelta;
                let ringModPhase = +instrumentState.ringModPhase;
                let ringModPhaseDelta = +instrumentState.ringModPhaseDelta;
                let ringModPhaseDeltaScale = +instrumentState.ringModPhaseDeltaScale;
                let rmWaveformIndex = +instrumentState.rmWaveformIndex;
                let rmPulseWidth = +instrumentState.rmPulseWidth;

                let waveform = Config.operatorWaves[rmWaveformIndex].samples; // index presumably comes from a dropdown
                if (rmWaveformIndex == 2) {
                    waveform = Synth.getOperatorWave(rmWaveformIndex, rmPulseWidth).samples; 
                }
                const waveformLength = waveform.length - 1;
                `;
                }
                if (usesPhaser) {
                    effectsSource += `
                
                const phaserSamples = instrumentState.phaserSamples;
                const phaserPrevInputs = instrumentState.phaserPrevInputs;
                let phaserStages = instrumentState.phaserStages;
                let phaserStagesInt = Math.floor(phaserStages);
                const phaserStagesDelta = instrumentState.phaserStagesDelta;
                const phaserFeedbackMultDelta = +instrumentState.phaserFeedbackMultDelta;
                let phaserFeedbackMult = +instrumentState.phaserFeedbackMult;
                const phaserMixDelta = +instrumentState.phaserMixDelta;
                let phaserMix = +instrumentState.phaserMix;
                const phaserBreakCoefDelta = +instrumentState.phaserBreakCoefDelta;
                let phaserBreakCoef = +instrumentState.phaserBreakCoef;
                `;
                }
                if (usesEqFilter) {
                    effectsSource += `
				
				let filters = instrumentState.eqFilters;
				const filterCount = instrumentState.eqFilterCount|0;
				let initialFilterInput1 = +instrumentState.initialEqFilterInput1;
				let initialFilterInput2 = +instrumentState.initialEqFilterInput2;
				const applyFilters = Synth.applyFilters;`;
                }
                effectsSource += `
				
				let eqFilterVolume = +instrumentState.eqFilterVolume;
				const eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`;
                if (usesPanning) {
                    effectsSource += `
				
				const panningMask = synth.panningDelayBufferMask >>> 0;
				const panningDelayLine = instrumentState.panningDelayLine;
				let panningDelayPos = instrumentState.panningDelayPos & panningMask;
				let   panningVolumeL      = +instrumentState.panningVolumeL;
				let   panningVolumeR      = +instrumentState.panningVolumeR;
				const panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;
				const panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;
				let   panningOffsetL      = +instrumentState.panningOffsetL;
				let   panningOffsetR      = +instrumentState.panningOffsetR;
				const panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;
				const panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`;
                }
                if (usesChorus) {
                    effectsSource += `
				
				const chorusMask = synth.chorusDelayBufferMask >>> 0;
				const chorusDelayLineL = instrumentState.chorusDelayLineL;
				const chorusDelayLineR = instrumentState.chorusDelayLineR;
				instrumentState.chorusDelayLineDirty = true;
				let chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;
				
				let chorusVoiceMult = +instrumentState.chorusVoiceMult;
				const chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;
				let chorusCombinedMult = +instrumentState.chorusCombinedMult;
				const chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;
				
				const chorusDuration = +beepbox.Config.chorusPeriodSeconds;
				const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);
				const chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;
				const chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;
				const chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;
				const chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;
				const chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;
				const chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;
				const chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;
				let chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);
				let chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);
				let chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);
				let chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);
				let chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);
				let chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);
				let chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);
				chorusPhase += chorusAngle * runLength;
				const chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;
				const chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;
				const chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;
				const chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;
				const chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;
				const chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;
				const chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;
				const chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;
				const chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;
				const chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;
				const chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;
				const chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`;
                }
                if (usesEcho) {
                    effectsSource += `
				
				let echoMult = +instrumentState.echoMult;
				const echoMultDelta = +instrumentState.echoMultDelta;
				
				const echoDelayLineL = instrumentState.echoDelayLineL;
				const echoDelayLineR = instrumentState.echoDelayLineR;
				const echoMask = (echoDelayLineL.length - 1) >>> 0;
				instrumentState.echoDelayLineDirty = true;
				
				let echoDelayPos = instrumentState.echoDelayPos & echoMask;
				const echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;
				const echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;
				let echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;
				const echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;
				
				const echoShelfA1 = +instrumentState.echoShelfA1;
				const echoShelfB0 = +instrumentState.echoShelfB0;
				const echoShelfB1 = +instrumentState.echoShelfB1;
				let echoShelfSampleL = +instrumentState.echoShelfSampleL;
				let echoShelfSampleR = +instrumentState.echoShelfSampleR;
				let echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;
				let echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`;
                }
                if (usesReverb) {
                    effectsSource += `
				
				const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.
				const reverbDelayLine = instrumentState.reverbDelayLine;
				instrumentState.reverbDelayLineDirty = true;
				let reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;
				
				let reverb = +instrumentState.reverbMult;
				const reverbDelta = +instrumentState.reverbMultDelta;
				
				const reverbShelfA1 = +instrumentState.reverbShelfA1;
				const reverbShelfB0 = +instrumentState.reverbShelfB0;
				const reverbShelfB1 = +instrumentState.reverbShelfB1;
				let reverbShelfSample0 = +instrumentState.reverbShelfSample0;
				let reverbShelfSample1 = +instrumentState.reverbShelfSample1;
				let reverbShelfSample2 = +instrumentState.reverbShelfSample2;
				let reverbShelfSample3 = +instrumentState.reverbShelfSample3;
				let reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;
				let reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;
				let reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;
				let reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`;
                }
                effectsSource += `
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					let sample = tempMonoInstrumentSampleBuffer[sampleIndex];
					tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`;
                if (usesDistortion) {
                    effectsSource += `
					
					const distortionReverse = 1.0 - distortion;
					const distortionNextInput = sample * distortionDrive;
					sample = distortionNextOutput;
					distortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);
					distortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;
					distortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;
					distortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;
					const distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);
					const distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);
					const distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);
					distortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;
					sample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;
					sample *= distortionOversampleCompensation;
					distortionPrevInput = distortionNextInput;
					distortion += distortionDelta;
					distortionDrive += distortionDriveDelta;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `
					
					bitcrusherPhase += bitcrusherPhaseDelta;
					if (bitcrusherPhase < 1.0) {
						bitcrusherPrevInput = sample;
						sample = bitcrusherCurrentOutput;
					} else {
						bitcrusherPhase = bitcrusherPhase % 1.0;
						const ratio = bitcrusherPhase / bitcrusherPhaseDelta;
						
						const lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;
						bitcrusherPrevInput = sample;
						
						const bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;
						const wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;
						const foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);
						const scaledSample = foldedSample / bitcrusherScale;
						const oldValue = bitcrusherCurrentOutput;
						const newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;
						
						sample = oldValue + (newValue - oldValue) * ratio;
						bitcrusherCurrentOutput = newValue;
					}
					bitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;
					bitcrusherScale *= bitcrusherScaleScale;
					bitcrusherFoldLevel *= bitcrusherFoldLevelScale;`;
                }
                if (usesRingModulation) {
                    effectsSource += ` 

                const ringModOutput = sample * waveform[(ringModPhase*waveformLength)|0];
                sample = sample * (1 - ringModMix) + ringModOutput * ringModMix;

                ringModMix += ringModMixDelta;
                ringModPhase += ringModPhaseDelta;
                ringModPhase = ringModPhase % 1.0;
                ringModPhaseDelta *= ringModPhaseDeltaScale;

                `;
                }
                if (usesPhaser) {
                    effectsSource += `
                        const phaserFeedback = phaserSamples[Math.max(0,phaserStagesInt - 1)] * phaserFeedbackMult;
                        for (let stage = 0; stage < phaserStagesInt; stage++) {
                            const phaserInput = stage === 0 ? sample + phaserFeedback : phaserSamples[stage - 1];
                            const phaserPrevInput = phaserPrevInputs[stage];
                            const phaserSample = phaserSamples[stage];
                            const phaserNextOutput = phaserBreakCoef * phaserInput + phaserPrevInput - phaserBreakCoef * phaserSample;
                            phaserPrevInputs[stage] = phaserInput;
                            phaserSamples[stage] = phaserNextOutput;
                        }
                        const phaserOutput = phaserSamples[Math.max(0,phaserStagesInt - 1)];
                        sample = sample + phaserOutput * phaserMix;
                        phaserFeedbackMult += phaserFeedbackMultDelta;
                        phaserBreakCoef += phaserBreakCoefDelta;
                        phaserMix += phaserMixDelta;
                        phaserStages += phaserStagesDelta;
                        /*phaserStagesInt = Math.floor(phaserStages);*/
                    `;
                }
                if (usesEqFilter) {
                    effectsSource += `
					
					const inputSample = sample;
					sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;`;
                }
                effectsSource += `
					
					sample *= eqFilterVolume;
					eqFilterVolume += eqFilterVolumeDelta;`;
                if (usesPanning) {
                    effectsSource += `
					
					panningDelayLine[panningDelayPos] = sample;
					const panningRatioL  = panningOffsetL % 1;
					const panningRatioR  = panningOffsetR % 1;
					const panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];
					const panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];
					const panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];
					const panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];
					const panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;
					const panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;
					let sampleL = panningTapL * panningVolumeL;
					let sampleR = panningTapR * panningVolumeR;
					panningDelayPos = (panningDelayPos + 1) & panningMask;
					panningVolumeL += panningVolumeDeltaL;
					panningVolumeR += panningVolumeDeltaR;
					panningOffsetL += panningOffsetDeltaL;
					panningOffsetR += panningOffsetDeltaR;`;
                }
                else {
                    effectsSource += `
					
					let sampleL = sample;
					let sampleR = sample;`;
                }
                if (usesChorus) {
                    effectsSource += `
					
					const chorusTap0Ratio = chorusTap0Index % 1;
					const chorusTap1Ratio = chorusTap1Index % 1;
					const chorusTap2Ratio = chorusTap2Index % 1;
					const chorusTap3Ratio = chorusTap3Index % 1;
					const chorusTap4Ratio = chorusTap4Index % 1;
					const chorusTap5Ratio = chorusTap5Index % 1;
					const chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];
					const chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];
					const chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];
					const chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];
					const chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];
					const chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];
					const chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];
					const chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];
					const chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];
					const chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];
					const chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];
					const chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];
					const chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;
					const chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;
					const chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;
					const chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;
					const chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;
					const chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;
					chorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;
					chorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;
					sampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));
					sampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));
					chorusDelayPos = (chorusDelayPos + 1) & chorusMask;
					chorusTap0Index += chorusTap0Delta;
					chorusTap1Index += chorusTap1Delta;
					chorusTap2Index += chorusTap2Delta;
					chorusTap3Index += chorusTap3Delta;
					chorusTap4Index += chorusTap4Delta;
					chorusTap5Index += chorusTap5Delta;
					chorusVoiceMult += chorusVoiceMultDelta;
					chorusCombinedMult += chorusCombinedMultDelta;`;
                }
                if (usesEcho) {
                    effectsSource += `
					
					const echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;
					const echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;
					const echoTapStartL = echoDelayLineL[echoTapStartIndex];
					const echoTapEndL   = echoDelayLineL[echoTapEndIndex];
					const echoTapStartR = echoDelayLineR[echoTapStartIndex];
					const echoTapEndR   = echoDelayLineR[echoTapEndIndex];
					const echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;
					const echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;
					
					echoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;
					echoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;
					echoShelfPrevInputL = echoTapL;
					echoShelfPrevInputR = echoTapR;
					sampleL += echoShelfSampleL;
					sampleR += echoShelfSampleR;
					
					echoDelayLineL[echoDelayPos] = sampleL * delayInputMult;
					echoDelayLineR[echoDelayPos] = sampleR * delayInputMult;
					echoDelayPos = (echoDelayPos + 1) & echoMask;
					echoDelayOffsetRatio += echoDelayOffsetRatioDelta;
					echoMult += echoMultDelta;
                    `;
                }
                if (usesReverb) {
                    effectsSource += `
					
					// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.
					// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268
					// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14
					// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384
					const reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;
					const reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;
					const reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;
					const reverbSample0 = (reverbDelayLine[reverbDelayPos]);
					const reverbSample1 = reverbDelayLine[reverbDelayPos1];
					const reverbSample2 = reverbDelayLine[reverbDelayPos2];
					const reverbSample3 = reverbDelayLine[reverbDelayPos3];
					const reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;
					const reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;
					const reverbTemp2 = -reverbSample2 + reverbSample3;
					const reverbTemp3 = -reverbSample2 - reverbSample3;
					const reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;
					const reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;
					const reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;
					const reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;
					reverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;
					reverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;
					reverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;
					reverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;
					reverbShelfPrevInput0 = reverbShelfInput0;
					reverbShelfPrevInput1 = reverbShelfInput1;
					reverbShelfPrevInput2 = reverbShelfInput2;
					reverbShelfPrevInput3 = reverbShelfInput3;
					reverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;
					reverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;
					reverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;
					reverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;
					reverbDelayPos = (reverbDelayPos + 1) & reverbMask;
					sampleL += reverbSample1 + reverbSample2 + reverbSample3;
					sampleR += reverbSample0 + reverbSample2 - reverbSample3;
					reverb += reverbDelta;`;
                }
                effectsSource += `
					
					outputDataL[sampleIndex] += sampleL * mixVolume;
					outputDataR[sampleIndex] += sampleR * mixVolume;
					mixVolume += mixVolumeDelta;`;
                if (usesDelays) {
                    effectsSource += `
					
					delayInputMult += delayInputMultDelta;`;
                }
                effectsSource += `
				}
				
				instrumentState.mixVolume = mixVolume;
				instrumentState.eqFilterVolume = eqFilterVolume;
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);`;
                if (usesDelays) {
                    effectsSource += `
				
				instrumentState.delayInputMult = delayInputMult;`;
                }
                if (usesDistortion) {
                    effectsSource += `
				
				instrumentState.distortion = distortion;
				instrumentState.distortionDrive = distortionDrive;
				
				if (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;
				if (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;
				if (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;
				if (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;
				if (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;
				
				instrumentState.distortionFractionalInput1 = distortionFractionalInput1;
				instrumentState.distortionFractionalInput2 = distortionFractionalInput2;
				instrumentState.distortionFractionalInput3 = distortionFractionalInput3;
				instrumentState.distortionPrevInput = distortionPrevInput;
				instrumentState.distortionNextOutput = distortionNextOutput;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `
					
				if (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;
				if (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;
				instrumentState.bitcrusherPrevInput = bitcrusherPrevInput;
				instrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;
				instrumentState.bitcrusherPhase = bitcrusherPhase;
				instrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;
				instrumentState.bitcrusherScale = bitcrusherScale;
				instrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`;
                }
                if (usesRingModulation) {
                    effectsSource += ` 

                instrumentState.ringModMix = ringModMix;
                instrumentState.ringModMixDelta = ringModMixDelta;
                instrumentState.ringModPhase = ringModPhase;
                instrumentState.ringModPhaseDelta = ringModPhaseDelta;
                instrumentState.ringModPhaseDeltaScale = ringModPhaseDeltaScale;
                instrumentState.rmWaveformIndex = rmWaveformIndex;
                instrumentState.rmPulseWidth = rmPulseWidth;
                `;
                }
                if (usesPhaser) {
                    effectsSource += `
                
                for (let stage = 0; stage < phaserStages; stage++) {
                    if (!Number.isFinite(phaserPrevInputs[stage]) || Math.abs(phaserPrevInputs[stage]) < epsilon) phaserPrevInputs[stage] = 0.0;
                    if (!Number.isFinite(phaserSamples[stage]) || Math.abs(phaserSamples[stage]) < epsilon) phaserSamples[stage] = 0.0;
                }
                
                instrumentState.phaserMix = phaserMix;
                instrumentState.phaserFeedbackMult = phaserFeedbackMult;
                instrumentState.phaserBreakCoef = phaserBreakCoef;
                `;
                }
                if (usesEqFilter) {
                    effectsSource += `
					
				synth.sanitizeFilters(filters);
				// The filter input here is downstream from another filter so we
				// better make sure it's safe too.
				if (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {
					initialFilterInput1 = 0.0;
					initialFilterInput2 = 0.0;
				}
				if (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;
				if (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;
				instrumentState.initialEqFilterInput1 = initialFilterInput1;
				instrumentState.initialEqFilterInput2 = initialFilterInput2;`;
                }
                if (usesPanning) {
                    effectsSource += `
				
				Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);
				instrumentState.panningDelayPos = panningDelayPos;
				instrumentState.panningVolumeL = panningVolumeL;
				instrumentState.panningVolumeR = panningVolumeR;
				instrumentState.panningOffsetL = panningOffsetL;
				instrumentState.panningOffsetR = panningOffsetR;`;
                }
                if (usesChorus) {
                    effectsSource += `
				
				Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);
				Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);
				instrumentState.chorusPhase = chorusPhase;
				instrumentState.chorusDelayPos = chorusDelayPos;
				instrumentState.chorusVoiceMult = chorusVoiceMult;
				instrumentState.chorusCombinedMult = chorusCombinedMult;`;
                }
                if (usesEcho) {
                    effectsSource += `
				
				Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);
				Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);
				instrumentState.echoDelayPos = echoDelayPos;
				instrumentState.echoMult = echoMult;
				instrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;
				
				if (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;
				if (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;
				if (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;
				if (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;
				instrumentState.echoShelfSampleL = echoShelfSampleL;
				instrumentState.echoShelfSampleR = echoShelfSampleR;
				instrumentState.echoShelfPrevInputL = echoShelfPrevInputL;
				instrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`;
                }
                if (usesReverb) {
                    effectsSource += `
				
				Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);
				Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);
				Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);
				Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);
				instrumentState.reverbDelayPos = reverbDelayPos;
				instrumentState.reverbMult = reverb;
				
				if (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;
				if (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;
				if (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;
				if (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;
				instrumentState.reverbShelfSample0 = reverbShelfSample0;
				instrumentState.reverbShelfSample1 = reverbShelfSample1;
				instrumentState.reverbShelfSample2 = reverbShelfSample2;
				instrumentState.reverbShelfSample3 = reverbShelfSample3;
				instrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;
				instrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;
				instrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;
				instrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`;
                }
                effectsSource += "}";
                effectsFunction = new Function("Config", "Synth", effectsSource)(Config, Synth);
                Synth.effectsFunctionCache[signature] = effectsFunction;
            }
            effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);
        }
        static pulseWidthSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0];
            let phaseDeltaB = tone.phaseDeltas[1];
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1);
            let phaseB = (tone.phases[1] % 1);
            let pulseWidth = tone.pulseWidth;
            const pulseWidthDelta = tone.pulseWidthDelta;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const sawPhaseA = phaseA % 1;
                const sawPhaseB = (phaseA + pulseWidth) % 1;
                const sawPhaseC = phaseB % 1;
                const sawPhaseD = (phaseB + pulseWidth) % 1;
                let pulseWaveA = sawPhaseB - sawPhaseA;
                let pulseWaveB = sawPhaseD - sawPhaseC;
                if (!instrumentState.aliases) {
                    if (sawPhaseA < phaseDeltaA) {
                        var t = sawPhaseA / phaseDeltaA;
                        pulseWaveA += (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseA > 1.0 - phaseDeltaA) {
                        var t = (sawPhaseA - 1.0) / phaseDeltaA;
                        pulseWaveA += (t + t + t * t + 1) * 0.5;
                    }
                    if (sawPhaseB < phaseDeltaA) {
                        var t = sawPhaseB / phaseDeltaA;
                        pulseWaveA -= (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseB > 1.0 - phaseDeltaA) {
                        var t = (sawPhaseB - 1.0) / phaseDeltaA;
                        pulseWaveA -= (t + t + t * t + 1) * 0.5;
                    }
                    if (sawPhaseC < phaseDeltaB) {
                        var t = sawPhaseC / phaseDeltaB;
                        pulseWaveB += (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseC > 1.0 - phaseDeltaB) {
                        var t = (sawPhaseC - 1.0) / phaseDeltaB;
                        pulseWaveB += (t + t + t * t + 1) * 0.5;
                    }
                    if (sawPhaseD < phaseDeltaB) {
                        var t = sawPhaseD / phaseDeltaB;
                        pulseWaveB -= (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseD > 1.0 - phaseDeltaB) {
                        var t = (sawPhaseD - 1.0) / phaseDeltaB;
                        pulseWaveB -= (t + t + t * t + 1) * 0.5;
                    }
                }
                const inputSample = pulseWaveA + pulseWaveB * unisonSign;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                pulseWidth += pulseWidthDelta;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA;
            tone.phases[1] = phaseB;
            tone.phaseDeltas[0] = phaseDeltaA;
            tone.phaseDeltas[1] = phaseDeltaB;
            tone.expression = expression;
            tone.pulseWidth = pulseWidth;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static supersawSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const voiceCount = Config.supersawVoiceCount | 0;
            let phaseDelta = tone.phaseDeltas[0];
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phases = tone.phases;
            let dynamism = +tone.supersawDynamism;
            const dynamismDelta = +tone.supersawDynamismDelta;
            const unisonDetunes = tone.supersawUnisonDetunes;
            let shape = +tone.supersawShape;
            const shapeDelta = +tone.supersawShapeDelta;
            let delayLength = +tone.supersawDelayLength;
            const delayLengthDelta = +tone.supersawDelayLengthDelta;
            const delayLine = tone.supersawDelayLine;
            const delayBufferMask = (delayLine.length - 1) >> 0;
            let delayIndex = tone.supersawDelayIndex | 0;
            delayIndex = (delayIndex & delayBufferMask) + delayLine.length;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                let phase = (phases[0] + phaseDelta) % 1.0;
                let supersawSample = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);
                if (!instrumentState.aliases) {
                    if (phase < phaseDelta) {
                        var t = phase / phaseDelta;
                        supersawSample -= (t + t - t * t - 1) * 0.5;
                    }
                    else if (phase > 1.0 - phaseDelta) {
                        var t = (phase - 1.0) / phaseDelta;
                        supersawSample -= (t + t + t * t + 1) * 0.5;
                    }
                }
                phases[0] = phase;
                for (let i = 1; i < voiceCount; i++) {
                    const detunedPhaseDelta = phaseDelta * unisonDetunes[i];
                    let phase = (phases[i] + detunedPhaseDelta) % 1.0;
                    supersawSample += phase * dynamism;
                    if (!instrumentState.aliases) {
                        if (phase < detunedPhaseDelta) {
                            const t = phase / detunedPhaseDelta;
                            supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;
                        }
                        else if (phase > 1.0 - detunedPhaseDelta) {
                            const t = (phase - 1.0) / detunedPhaseDelta;
                            supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;
                        }
                    }
                    phases[i] = phase;
                }
                delayLine[delayIndex & delayBufferMask] = supersawSample;
                const delaySampleTime = delayIndex - delayLength;
                const lowerIndex = delaySampleTime | 0;
                const upperIndex = lowerIndex + 1;
                const delayRatio = delaySampleTime - lowerIndex;
                const prevDelaySample = delayLine[lowerIndex & delayBufferMask];
                const nextDelaySample = delayLine[upperIndex & delayBufferMask];
                const delaySample = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;
                delayIndex++;
                const inputSample = supersawSample - delaySample * shape;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseDelta *= phaseDeltaScale;
                dynamism += dynamismDelta;
                shape += shapeDelta;
                delayLength += delayLengthDelta;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phaseDeltas[0] = phaseDelta;
            tone.expression = expression;
            tone.supersawDynamism = dynamism;
            tone.supersawShape = shape;
            tone.supersawDelayLength = delayLength;
            tone.supersawDelayIndex = delayIndex;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static noiseSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0];
            let phaseDeltaB = tone.phaseDeltas[1];
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1) * Config.chipNoiseLength;
            let phaseB = (tone.phases[1] % 1) * Config.chipNoiseLength;
            if (tone.phases[0] == 0.0) {
                phaseA = Math.random() * Config.chipNoiseLength;
                if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                    phaseB = phaseA;
            }
            if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {
                phaseB = Math.random() * Config.chipNoiseLength;
            }
            const phaseMask = Config.chipNoiseLength - 1;
            let noiseSampleA = +tone.noiseSampleA;
            let noiseSampleB = +tone.noiseSampleB;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const pitchRelativefilterA = Math.min(1.0, phaseDeltaA * instrumentState.noisePitchFilterMult);
            const pitchRelativefilterB = Math.min(1.0, phaseDeltaB * instrumentState.noisePitchFilterMult);
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const waveSampleA = wave[phaseA & phaseMask];
                const waveSampleB = wave[phaseB & phaseMask];
                noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;
                noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;
                const inputSample = noiseSampleA + noiseSampleB * unisonSign;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / Config.chipNoiseLength;
            tone.phases[1] = phaseB / Config.chipNoiseLength;
            tone.phaseDeltas[0] = phaseDeltaA;
            tone.phaseDeltas[1] = phaseDeltaB;
            tone.expression = expression;
            tone.noiseSampleA = noiseSampleA;
            tone.noiseSampleB = noiseSampleB;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static spectrumSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const samplesInPeriod = (1 << 7);
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;
            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * samplesInPeriod;
            let phaseDeltaB = tone.phaseDeltas[1] * samplesInPeriod;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let noiseSampleA = +tone.noiseSampleA;
            let noiseSampleB = +tone.noiseSampleB;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let phaseA = (tone.phases[0] % 1) * Config.spectrumNoiseLength;
            let phaseB = (tone.phases[1] % 1) * Config.spectrumNoiseLength;
            if (tone.phases[0] == 0.0) {
                phaseA = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaA;
                if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)
                    phaseB = phaseA;
            }
            if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {
                phaseB = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaB;
            }
            const phaseMask = Config.spectrumNoiseLength - 1;
            const pitchRelativefilterA = Math.min(1.0, phaseDeltaA);
            const pitchRelativefilterB = Math.min(1.0, phaseDeltaB);
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const phaseAInt = phaseA | 0;
                const phaseBInt = phaseB | 0;
                const indexA = phaseAInt & phaseMask;
                const indexB = phaseBInt & phaseMask;
                let waveSampleA = wave[indexA];
                let waveSampleB = wave[indexB];
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                waveSampleA += (wave[indexA + 1] - waveSampleA) * phaseRatioA;
                waveSampleB += (wave[indexB + 1] - waveSampleB) * phaseRatioB;
                noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;
                noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;
                const inputSample = noiseSampleA + noiseSampleB * unisonSign;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / Config.spectrumNoiseLength;
            tone.phases[1] = phaseB / Config.spectrumNoiseLength;
            tone.phaseDeltas[0] = phaseDeltaA / samplesInPeriod;
            tone.phaseDeltas[1] = phaseDeltaB / samplesInPeriod;
            tone.expression = expression;
            tone.noiseSampleA = noiseSampleA;
            tone.noiseSampleB = noiseSampleB;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static drumsetSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);
            const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);
            let phaseDelta = tone.phaseDeltas[0] / referenceDelta;
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let phase = (tone.phases[0] % 1) * Config.spectrumNoiseLength;
            if (tone.phases[0] == 0.0)
                phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;
            const phaseMask = Config.spectrumNoiseLength - 1;
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const phaseInt = phase | 0;
                const index = phaseInt & phaseMask;
                let noiseSample = wave[index];
                const phaseRatio = phase - phaseInt;
                noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;
                const inputSample = noiseSample;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phase += phaseDelta;
                phaseDelta *= phaseDeltaScale;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phase / Config.spectrumNoiseLength;
            tone.phaseDeltas[0] = phaseDelta * referenceDelta;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static modSynth(synth, stereoBufferIndex, roundedSamplesPerTick, tone, instrument) {
            if (!synth.song)
                return;
            let mod = Config.modCount - 1 - tone.pitches[0];
            if (instrument.invalidModulators[mod])
                return;
            let setting = instrument.modulators[mod];
            let usedInstruments = [];
            if (Config.modulators[instrument.modulators[mod]].forSong) {
                usedInstruments.push(0);
            }
            else {
                if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {
                    for (let i = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {
                        usedInstruments.push(i);
                    }
                }
                else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {
                    if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)
                        usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar).instruments;
                }
                else {
                    usedInstruments.push(instrument.modInstruments[mod]);
                }
            }
            for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {
                synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);
                for (let i = 0; i < synth.heldMods.length; i++) {
                    if (Config.modulators[instrument.modulators[mod]].forSong) {
                        if (synth.heldMods[i].setting == setting)
                            synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);
                    }
                    else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {
                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);
                    }
                }
                if (setting == Config.modulators.dictionary["reset arp"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {
                    synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;
                }
                else if (setting == Config.modulators.dictionary["next bar"].index) {
                    synth.wantToSkip = true;
                }
                else if (setting == Config.modulators.dictionary["eq filter"].index) {
                    const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                    if (!tgtInstrument.eqFilterType) {
                        let dotTarget = instrument.modFilterTypes[mod] | 0;
                        if (dotTarget == 0) {
                            let pinIdx = 0;
                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;
                            while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)
                                pinIdx++;
                            let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);
                            if (tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size] != null) {
                                tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);
                            }
                            else {
                                tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;
                            }
                        }
                        else {
                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {
                                    tgtInstrument.tmpEqFilterEnd = new FilterSettings();
                                    tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());
                                }
                            }
                            if (tgtInstrument.tmpEqFilterEnd == null) {
                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();
                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());
                            }
                            if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {
                                if (dotTarget % 2) {
                                    tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;
                                }
                                else {
                                    tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;
                                }
                            }
                        }
                    }
                }
                else if (setting == Config.modulators.dictionary["note filter"].index) {
                    const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                    if (!tgtInstrument.noteFilterType) {
                        let dotTarget = instrument.modFilterTypes[mod] | 0;
                        if (dotTarget == 0) {
                            let pinIdx = 0;
                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;
                            while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)
                                pinIdx++;
                            let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);
                            if (tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size] != null) {
                                tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);
                            }
                            else {
                                tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;
                            }
                        }
                        else {
                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {
                                    tgtInstrument.tmpNoteFilterEnd = new FilterSettings();
                                    tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());
                                }
                            }
                            if (tgtInstrument.tmpNoteFilterEnd == null) {
                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();
                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());
                            }
                            if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {
                                if (dotTarget % 2) {
                                    tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;
                                }
                                else {
                                    tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;
                                }
                            }
                        }
                    }
                }
            }
        }
        static findRandomZeroCrossing(wave, waveLength) {
            let phase = Math.random() * waveLength;
            const phaseMask = waveLength - 1;
            let indexPrev = phase & phaseMask;
            let wavePrev = wave[indexPrev];
            const stride = 16;
            for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {
                const indexNext = (indexPrev + stride) & phaseMask;
                const waveNext = wave[indexNext];
                if (wavePrev * waveNext <= 0.0) {
                    for (let i = 0; i < stride; i++) {
                        const innerIndexNext = (indexPrev + 1) & phaseMask;
                        const innerWaveNext = wave[innerIndexNext];
                        if (wavePrev * innerWaveNext <= 0.0) {
                            const slope = innerWaveNext - wavePrev;
                            phase = indexPrev;
                            if (Math.abs(slope) > 0.00000001) {
                                phase += -wavePrev / slope;
                            }
                            phase = Math.max(0, phase) % waveLength;
                            break;
                        }
                        else {
                            indexPrev = innerIndexNext;
                            wavePrev = innerWaveNext;
                        }
                    }
                    break;
                }
                else {
                    indexPrev = indexNext;
                    wavePrev = waveNext;
                }
            }
            return phase;
        }
        static instrumentVolumeToVolumeMult(instrumentVolume) {
            return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);
        }
        static volumeMultToInstrumentVolume(volumeMult) {
            return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);
        }
        static noteSizeToVolumeMult(size) {
            return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);
        }
        static volumeMultToNoteSize(volumeMult) {
            return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;
        }
        static fadeInSettingToSeconds(setting) {
            return 0.0125 * (0.95 * setting + 0.05 * setting * setting);
        }
        static secondsToFadeInSetting(seconds) {
            return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));
        }
        static fadeOutSettingToTicks(setting) {
            return Config.fadeOutTicks[setting];
        }
        static ticksToFadeOutSetting(ticks) {
            let lower = Config.fadeOutTicks[0];
            if (ticks <= lower)
                return 0;
            for (let i = 1; i < Config.fadeOutTicks.length; i++) {
                let upper = Config.fadeOutTicks[i];
                if (ticks <= upper)
                    return (ticks < (lower + upper) / 2) ? i - 1 : i;
                lower = upper;
            }
            return Config.fadeOutTicks.length - 1;
        }
        static detuneToCents(detune) {
            return detune - Config.detuneCenter;
        }
        static centsToDetune(cents) {
            return cents + Config.detuneCenter;
        }
        static getOperatorWave(waveform, pulseWidth) {
            if (waveform != 2) {
                return Config.operatorWaves[waveform];
            }
            else {
                return Config.pwmOperatorWaves[pulseWidth];
            }
        }
        getSamplesPerTick() {
            if (this.song == null)
                return 0;
            let beatsPerMinute = this.song.getBeatsPerMinute();
            if (this.isModActive(Config.modulators.dictionary["tempo"].index)) {
                beatsPerMinute = this.getModValue(Config.modulators.dictionary["tempo"].index);
            }
            return this.getSamplesPerTickSpecificBPM(beatsPerMinute);
        }
        getSamplesPerTickSpecificBPM(beatsPerMinute) {
            const beatsPerSecond = beatsPerMinute / 60.0;
            const partsPerSecond = Config.partsPerBeat * beatsPerSecond;
            const tickPerSecond = Config.ticksPerPart * partsPerSecond;
            return this.samplesPerSecond / tickPerSecond;
        }
        static fittingPowerOfTwo(x) {
            return 1 << (32 - Math.clz32(Math.ceil(x) - 1));
        }
        sanitizeFilters(filters) {
            let reset = false;
            for (const filter of filters) {
                const output1 = Math.abs(filter.output1);
                const output2 = Math.abs(filter.output2);
                if (!(output1 < 100) || !(output2 < 100)) {
                    reset = true;
                    break;
                }
                if (output1 < epsilon)
                    filter.output1 = 0.0;
                if (output2 < epsilon)
                    filter.output2 = 0.0;
            }
            if (reset) {
                for (const filter of filters) {
                    filter.output1 = 0.0;
                    filter.output2 = 0.0;
                }
            }
        }
        static sanitizeDelayLine(delayLine, lastIndex, mask) {
            while (true) {
                lastIndex--;
                const index = lastIndex & mask;
                const sample = Math.abs(delayLine[index]);
                if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon))
                    break;
                delayLine[index] = 0.0;
            }
        }
        static applyFilters(sample, input1, input2, filterCount, filters) {
            for (let i = 0; i < filterCount; i++) {
                const filter = filters[i];
                const output1 = filter.output1;
                const output2 = filter.output2;
                const a1 = filter.a1;
                const a2 = filter.a2;
                const b0 = filter.b0;
                const b1 = filter.b1;
                const b2 = filter.b2;
                sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;
                filter.a1 = a1 + filter.a1Delta;
                filter.a2 = a2 + filter.a2Delta;
                if (filter.useMultiplicativeInputCoefficients) {
                    filter.b0 = b0 * filter.b0Delta;
                    filter.b1 = b1 * filter.b1Delta;
                    filter.b2 = b2 * filter.b2Delta;
                }
                else {
                    filter.b0 = b0 + filter.b0Delta;
                    filter.b1 = b1 + filter.b1Delta;
                    filter.b2 = b2 + filter.b2Delta;
                }
                filter.output2 = output1;
                filter.output1 = sample;
                input2 = output2;
                input1 = output1;
            }
            return sample;
        }
    }
    Synth.tempFilterStartCoefficients = new FilterCoefficients();
    Synth.tempFilterEndCoefficients = new FilterCoefficients();
    Synth.fmSynthFunctionCache = {};
    Synth.fm6SynthFunctionCache = {};
    Synth.effectsFunctionCache = Array(1 << 7).fill(undefined);
    Synth.pickedStringFunctionCache = Array(3).fill(undefined);
    Synth.fmSourceTemplate = (`
		const data = synth.tempMonoInstrumentSampleBuffer;
		const sineWave = Config.sineWave;
			
		// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.
		let operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;
		let operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;
		let operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];
		let operator#OutputMult  = +tone.operatorExpressions[#];
		const operator#OutputDelta = +tone.operatorExpressionDeltas[#];
		let operator#Output      = +tone.feedbackOutputs[#];
        const operator#Wave      = tone.operatorWaves[#].samples;
		let feedbackMult         = +tone.feedbackMult;
		const feedbackDelta        = +tone.feedbackDelta;
        let expression = +tone.expression;
		const expressionDelta = +tone.expressionDelta;
		
		const filters = tone.noteFilters;
		const filterCount = tone.noteFilterCount|0;
		let initialFilterInput1 = +tone.initialNoteFilterInput1;
		let initialFilterInput2 = +tone.initialNoteFilterInput2;
		const applyFilters = Synth.applyFilters;
		
		const stopIndex = bufferIndex + roundedSamplesPerTick;
		for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
				// INSERT OPERATOR COMPUTATION HERE
				const fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS
				
			const inputSample = fmOutput;
			const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
			initialFilterInput2 = initialFilterInput1;
			initialFilterInput1 = inputSample;
				
				feedbackMult += feedbackDelta;
				operator#OutputMult += operator#OutputDelta;
				operator#Phase += operator#PhaseDelta;
			operator#PhaseDelta *= operator#PhaseDeltaScale;
			
			const output = sample * expression;
			expression += expressionDelta;

			data[sampleIndex] += output;
			}
			
			tone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;
			tone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;
			tone.operatorExpressions[#] = operator#OutputMult;
		    tone.feedbackOutputs[#] = operator#Output;
		    tone.feedbackMult = feedbackMult;
		    tone.expression = expression;
			
		synth.sanitizeFilters(filters);
		tone.initialNoteFilterInput1 = initialFilterInput1;
		tone.initialNoteFilterInput2 = initialFilterInput2;
		`).split("\n");
    Synth.operatorSourceTemplate = (`
				const operator#PhaseMix = operator#Phase/* + operator@Scaled*/;
				const operator#PhaseInt = operator#PhaseMix|0;
				const operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;
                const operator#Sample   = operator#Wave[operator#Index];
                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);
				const operator#Scaled   = operator#OutputMult * operator#Output;
		`).split("\n");

    class Change {
        constructor() {
            this._noop = true;
        }
        _didSomething() {
            this._noop = false;
        }
        isNoop() {
            return this._noop;
        }
        commit() { }
    }
    class UndoableChange extends Change {
        constructor(reversed) {
            super();
            this._reversed = reversed;
            this._doneForwards = !reversed;
        }
        undo() {
            if (this._reversed) {
                this._doForwards();
                this._doneForwards = true;
            }
            else {
                this._doBackwards();
                this._doneForwards = false;
            }
        }
        redo() {
            if (this._reversed) {
                this._doBackwards();
                this._doneForwards = false;
            }
            else {
                this._doForwards();
                this._doneForwards = true;
            }
        }
        _isDoneForwards() {
            return this._doneForwards;
        }
        _doForwards() {
            throw new Error("Change.doForwards(): Override me.");
        }
        _doBackwards() {
            throw new Error("Change.doBackwards(): Override me.");
        }
    }
    class ChangeGroup extends Change {
        constructor() {
            super();
        }
        append(change) {
            if (change.isNoop())
                return;
            this._didSomething();
        }
    }
    class ChangeSequence extends UndoableChange {
        constructor(changes) {
            super(false);
            if (changes == undefined) {
                this._changes = [];
            }
            else {
                this._changes = changes.concat();
            }
            this._committed = false;
        }
        checkFirst() {
            if (this._changes.length > 0)
                return this._changes[0];
            return null;
        }
        append(change) {
            if (change.isNoop())
                return;
            this._changes[this._changes.length] = change;
            this._didSomething();
        }
        _doForwards() {
            for (let i = 0; i < this._changes.length; i++) {
                this._changes[i].redo();
            }
        }
        _doBackwards() {
            for (let i = this._changes.length - 1; i >= 0; i--) {
                this._changes[i].undo();
            }
        }
        isCommitted() {
            return this._committed;
        }
        commit() {
            this._committed = true;
        }
    }

    function patternsContainSameInstruments(pattern1Instruments, pattern2Instruments) {
        const pattern2Has1Instruments = pattern1Instruments.every(instrument => pattern2Instruments.indexOf(instrument) != -1);
        const pattern1Has2Instruments = pattern2Instruments.every(instrument => pattern1Instruments.indexOf(instrument) != -1);
        return pattern2Has1Instruments && pattern1Has2Instruments && pattern2Instruments.length == pattern1Instruments.length;
    }
    function discardInvalidPatternInstruments(instruments, song, channelIndex) {
        const uniqueInstruments = new Set(instruments);
        instruments.length = 0;
        instruments.push(...uniqueInstruments);
        for (let i = 0; i < instruments.length; i++) {
            if (instruments[i] >= song.channels[channelIndex].instruments.length) {
                instruments.splice(i, 1);
                i--;
            }
        }
        if (instruments.length > song.getMaxInstrumentsPerPattern(channelIndex)) {
            instruments.length = song.getMaxInstrumentsPerPattern(channelIndex);
        }
        if (instruments.length <= 0) {
            instruments[0] = 0;
        }
    }
    function unionOfUsedNotes(pattern, flags) {
        for (const note of pattern.notes) {
            for (const pitch of note.pitches) {
                for (const pin of note.pins) {
                    const key = (pitch + pin.interval) % 12;
                    if (!flags[key]) {
                        flags[key] = true;
                    }
                }
            }
        }
    }
    function generateScaleMap(oldScaleFlags, newScaleValue, customScaleFlags) {
        const newScaleFlags = newScaleValue == Config.scales["dictionary"]["Custom"].index ? customScaleFlags : Config.scales[newScaleValue].flags;
        const oldScale = [];
        const newScale = [];
        for (let i = 0; i < 12; i++) {
            if (oldScaleFlags[i])
                oldScale.push(i);
            if (newScaleFlags[i])
                newScale.push(i);
        }
        const largerToSmaller = oldScale.length > newScale.length;
        const smallerScale = largerToSmaller ? newScale : oldScale;
        const largerScale = largerToSmaller ? oldScale : newScale;
        const roles = ["root", "second", "second", "third", "third", "fourth", "tritone", "fifth", "sixth", "sixth", "seventh", "seventh", "root"];
        let bestScore = Number.MAX_SAFE_INTEGER;
        let bestIndexMap = [];
        const stack = [[0]];
        while (stack.length > 0) {
            const indexMap = stack.pop();
            if (indexMap.length == smallerScale.length) {
                let score = 0;
                for (let i = 0; i < indexMap.length; i++) {
                    score += Math.abs(smallerScale[i] - largerScale[indexMap[i]]);
                    if (roles[smallerScale[i]] != roles[largerScale[indexMap[i]]]) {
                        score += 0.75;
                    }
                }
                if (bestScore > score) {
                    bestScore = score;
                    bestIndexMap = indexMap;
                }
            }
            else {
                const lowIndex = indexMap[indexMap.length - 1] + 1;
                const highIndex = largerScale.length - smallerScale.length + indexMap.length;
                for (let i = lowIndex; i <= highIndex; i++) {
                    stack.push(indexMap.concat(i));
                }
            }
        }
        const sparsePitchMap = [];
        for (let i = 0; i < bestIndexMap.length; i++) {
            const smallerScalePitch = smallerScale[i];
            const largerScalePitch = largerScale[bestIndexMap[i]];
            sparsePitchMap[i] = largerToSmaller
                ? [largerScalePitch, smallerScalePitch]
                : [smallerScalePitch, largerScalePitch];
        }
        sparsePitchMap.push([12, 12]);
        newScale.push(12);
        let sparseIndex = 0;
        const fullPitchMap = [];
        for (let i = 0; i < 12; i++) {
            const oldLow = sparsePitchMap[sparseIndex][0];
            const newLow = sparsePitchMap[sparseIndex][1];
            const oldHigh = sparsePitchMap[sparseIndex + 1][0];
            const newHigh = sparsePitchMap[sparseIndex + 1][1];
            if (i == oldHigh - 1)
                sparseIndex++;
            const transformedPitch = (i - oldLow) * (newHigh - newLow) / (oldHigh - oldLow) + newLow;
            let nearestPitch = 0;
            let nearestPitchDistance = Number.MAX_SAFE_INTEGER;
            for (const newPitch of newScale) {
                let distance = Math.abs(newPitch - transformedPitch);
                if (roles[newPitch] != roles[i]) {
                    distance += 0.1;
                }
                if (nearestPitchDistance > distance) {
                    nearestPitchDistance = distance;
                    nearestPitch = newPitch;
                }
            }
            fullPitchMap[i] = nearestPitch;
        }
        return fullPitchMap;
    }
    function removeRedundantPins(pins) {
        for (let i = 1; i < pins.length - 1;) {
            if (pins[i - 1].interval == pins[i].interval &&
                pins[i].interval == pins[i + 1].interval &&
                pins[i - 1].size == pins[i].size &&
                pins[i].size == pins[i + 1].size) {
                pins.splice(i, 1);
            }
            else {
                i++;
            }
        }
    }
    function projectNoteIntoBar(oldNote, timeOffset, noteStartPart, noteEndPart, newNotes) {
        const newNote = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, false);
        newNote.pins.length = 0;
        newNote.pitches.length = 0;
        const newNoteLength = noteEndPart - noteStartPart;
        for (const pitch of oldNote.pitches) {
            newNote.pitches.push(pitch);
        }
        for (let pinIndex = 0; pinIndex < oldNote.pins.length; pinIndex++) {
            const pin = oldNote.pins[pinIndex];
            const newPinTime = pin.time + timeOffset;
            if (newPinTime < 0) {
                if (pinIndex + 1 >= oldNote.pins.length)
                    throw new Error("Error converting pins in note overflow.");
                const nextPin = oldNote.pins[pinIndex + 1];
                const nextPinTime = nextPin.time + timeOffset;
                if (nextPinTime > 0) {
                    const ratio = (-newPinTime) / (nextPinTime - newPinTime);
                    newNote.pins.push(makeNotePin(Math.round(pin.interval + ratio * (nextPin.interval - pin.interval)), 0, Math.round(pin.size + ratio * (nextPin.size - pin.size))));
                }
            }
            else if (newPinTime <= newNoteLength) {
                newNote.pins.push(makeNotePin(pin.interval, newPinTime, pin.size));
            }
            else {
                if (pinIndex < 1)
                    throw new Error("Error converting pins in note overflow.");
                const prevPin = oldNote.pins[pinIndex - 1];
                const prevPinTime = prevPin.time + timeOffset;
                if (prevPinTime < newNoteLength) {
                    const ratio = (newNoteLength - prevPinTime) / (newPinTime - prevPinTime);
                    newNote.pins.push(makeNotePin(Math.round(prevPin.interval + ratio * (pin.interval - prevPin.interval)), newNoteLength, Math.round(prevPin.size + ratio * (pin.size - prevPin.size))));
                }
            }
        }
        const offsetInterval = newNote.pins[0].interval;
        for (let pitchIdx = 0; pitchIdx < newNote.pitches.length; pitchIdx++) {
            newNote.pitches[pitchIdx] += offsetInterval;
        }
        for (let pinIdx = 0; pinIdx < newNote.pins.length; pinIdx++) {
            newNote.pins[pinIdx].interval -= offsetInterval;
        }
        let joinedWithPrevNote = false;
        if (newNote.start == 0) {
            newNote.continuesLastPattern = (timeOffset < 0 || oldNote.continuesLastPattern);
        }
        else {
            newNote.continuesLastPattern = false;
            if (newNotes.length > 0 && oldNote.continuesLastPattern) {
                const prevNote = newNotes[newNotes.length - 1];
                if (prevNote.end == newNote.start && Synth.adjacentNotesHaveMatchingPitches(prevNote, newNote)) {
                    joinedWithPrevNote = true;
                    const newIntervalOffset = prevNote.pins[prevNote.pins.length - 1].interval;
                    const newTimeOffset = prevNote.end - prevNote.start;
                    for (let pinIndex = 1; pinIndex < newNote.pins.length; pinIndex++) {
                        const tempPin = newNote.pins[pinIndex];
                        const transformedPin = makeNotePin(tempPin.interval + newIntervalOffset, tempPin.time + newTimeOffset, tempPin.size);
                        prevNote.pins.push(transformedPin);
                        prevNote.end = prevNote.start + transformedPin.time;
                    }
                    removeRedundantPins(prevNote.pins);
                }
            }
        }
        if (!joinedWithPrevNote) {
            newNotes.push(newNote);
        }
    }
    function mod(a, b) {
        return (a % b + b) % b;
    }
    function sigma(a, b, c) {
        let result = 0;
        for (let i = c; i <= a; i++) {
            result += b(i);
        }
        return result;
    }
    function randomSineWave(wave) {
        let randomRoundWave = new Float32Array(64);
        let waveLength = 64;
        let foundNonZero = false;
        const roundedWaveType = (Math.random() * 2 + 1) | 0;
        if (roundedWaveType == 1 || roundedWaveType == 3) {
            let randomNumber1 = Math.random() * 2 + 0.5;
            let randomNumber2 = Math.random() * 13 + 3;
            let randomNumber3 = Math.random() * 48 - 24;
            for (let i = 0; i < waveLength; i++) {
                randomRoundWave[i] = clamp(-24, 24 + 1, Math.round(mod(randomNumber3 + ((Math.sin((i + randomNumber3) / randomNumber2) * 24) + i * randomNumber1), 48) - 24));
            }
        }
        else if (roundedWaveType == 2) {
            let randomNumber1 = Math.random() * 0.19 + 0.06;
            let randomNumber2 = Math.random() * 2 + 1;
            let randomNumber3 = Math.random() * 48 - 24;
            let randomNumber4 = Math.random() * 2 - 1;
            for (let i = 0; i < waveLength; i++) {
                randomRoundWave[i] = clamp(-24, 24 + 1, Math.round(randomNumber4 * Math.abs(2 * Math.floor((Math.sin((i / randomNumber2) * randomNumber1 + randomNumber3) * Math.cos((i * randomNumber2) * (randomNumber1 / 2)) * 24))) - randomNumber4 * 24));
            }
        }
        for (let i = 0; i < waveLength; i++) {
            wave[i] = randomRoundWave[i];
            let minimum = Infinity;
            let maximum = -Infinity;
            for (let i = 0; i < waveLength; i++) {
                minimum = Math.min(minimum, wave[i]);
                maximum = Math.max(maximum, wave[i]);
            }
            const distance = maximum - minimum;
            if (distance >= 7) {
                foundNonZero = true;
            }
        }
        if (!foundNonZero)
            randomSineWave(wave);
    }
    function randomPulses(wave) {
        let randomPulse = new Float32Array(64);
        let waveLength = 64;
        let foundNonZero = false;
        let randomNumber2 = Math.round(Math.random() * 15 + 15);
        let randomNumber3 = Math.round(Math.random() * 3 + 1);
        let randomNumber4 = Math.round(Math.random() * 13 + 2);
        for (let i = 0; i < waveLength; i++) {
            let randomNumber1 = sigma(mod(i, randomNumber2), (i) => 1, randomNumber4);
            randomPulse[i] = clamp(-24, 24 + 1, Math.round(mod(24 * (sigma(i, (i) => randomNumber1, Math.round(randomNumber2 / randomNumber3))), 24.0000000000001)));
        }
        for (let i = 0; i < waveLength; i++) {
            wave[i] = randomPulse[i];
            let minimum = Infinity;
            let maximum = -Infinity;
            for (let i = 0; i < waveLength; i++) {
                minimum = Math.min(minimum, wave[i]);
                maximum = Math.max(maximum, wave[i]);
            }
            const distance = maximum - minimum;
            if (distance >= 7) {
                foundNonZero = true;
            }
        }
        if (!foundNonZero)
            randomPulses(wave);
    }
    function randomChipWave(wave) {
        let randomChip = new Float32Array(64);
        let waveLength = 64;
        let foundNonZero = false;
        const chipType = (Math.random() * 2 + 1) | 0;
        if (chipType == 1) {
            let randomNumber1 = Math.random() * 3;
            let randomNumber2 = Math.random() * 0.99 - 1;
            let randomNumber3 = Math.random() * 9 + 2;
            let randomNumber4 = Math.random() * 2 - 1;
            for (let i = 0; i < waveLength; i++) {
                randomChip[i] = clamp(-24, 24 + 1, (Math.round(Math.abs(randomNumber4 * mod(((randomNumber2 / randomNumber3) * randomNumber3) + (sigma(i / (randomNumber1 * randomNumber1), (i) => randomNumber3, randomNumber1 * -randomNumber2)) * randomNumber4, 24)))) * 2 - 24);
            }
        }
        else if (chipType == 2) {
            let randomNumber1 = Math.random() * 3;
            let randomNumber2 = Math.random() * 2 - 1;
            let randomNumber3 = Math.random() * 100;
            for (let i = 0; i < waveLength; i++) {
                randomChip[i] = clamp(-24, 24 + 1, mod(Math.round(mod((sigma(i / randomNumber1, (i) => (randomNumber1 * randomNumber3), 0)), 25 + randomNumber2) * 24), 48) - 24);
            }
        }
        for (let i = 0; i < waveLength; i++) {
            wave[i] = randomChip[i];
            let minimum = Infinity;
            let maximum = -Infinity;
            for (let i = 0; i < waveLength; i++) {
                minimum = Math.min(minimum, wave[i]);
                maximum = Math.max(maximum, wave[i]);
            }
            const distance = maximum - minimum;
            if (distance >= 7) {
                foundNonZero = true;
            }
        }
        if (!foundNonZero)
            randomChipWave(wave);
    }
    function biasedFullyRandom(wave) {
        let fullyRandomWave = new Float32Array(64);
        let waveLength = 64;
        let foundNonZero = false;
        for (let i = 0; i < waveLength; i++) {
            const v = Math.random() * 2 - 1;
            const bias = 6;
            const biased = v > 0 ? Math.pow(v, bias) : -Math.pow(-v, bias);
            fullyRandomWave[i] = clamp(-24, 24 + 1, Math.floor(biased * 24));
        }
        for (let i = 0; i < waveLength; i++) {
            wave[i] = fullyRandomWave[i];
            let minimum = Infinity;
            let maximum = -Infinity;
            for (let i = 0; i < waveLength; i++) {
                minimum = Math.min(minimum, wave[i]);
                maximum = Math.max(maximum, wave[i]);
            }
            const distance = maximum - minimum;
            if (distance >= 7) {
                foundNonZero = true;
            }
        }
        if (!foundNonZero)
            biasedFullyRandom(wave);
    }
    function fullyRandom(wave) {
        let fullyRandomWave = new Float32Array(64);
        let waveLength = 64;
        for (let i = 0; i < waveLength; i++) {
            fullyRandomWave[i] = clamp(-24, 24 + 1, ((Math.random() * 48) | 0) - 24);
        }
        for (let i = 0; i < waveLength; i++) {
            wave[i] = fullyRandomWave[i];
        }
    }
    class ChangeMoveAndOverflowNotes extends ChangeGroup {
        constructor(doc, newBeatsPerBar, partsToMove) {
            super();
            const pitchChannels = [];
            const noiseChannels = [];
            const modChannels = [];
            for (let channelIndex = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                const oldChannel = doc.song.channels[channelIndex];
                const newChannel = new Channel();
                if (channelIndex < doc.song.pitchChannelCount) {
                    pitchChannels.push(newChannel);
                }
                else if (channelIndex < doc.song.pitchChannelCount + doc.song.noiseChannelCount) {
                    noiseChannels.push(newChannel);
                }
                else {
                    modChannels.push(newChannel);
                }
                newChannel.muted = oldChannel.muted;
                newChannel.octave = oldChannel.octave;
                newChannel.name = oldChannel.name;
                for (const instrument of oldChannel.instruments) {
                    newChannel.instruments.push(instrument);
                }
                const oldPartsPerBar = Config.partsPerBeat * doc.song.beatsPerBar;
                const newPartsPerBar = Config.partsPerBeat * newBeatsPerBar;
                let currentBar = -1;
                let pattern = null;
                for (let oldBar = 0; oldBar < doc.song.barCount; oldBar++) {
                    const oldPattern = doc.song.getPattern(channelIndex, oldBar);
                    if (oldPattern != null) {
                        const oldBarStart = oldBar * oldPartsPerBar;
                        for (const oldNote of oldPattern.notes) {
                            const absoluteNoteStart = oldNote.start + oldBarStart + partsToMove;
                            const absoluteNoteEnd = oldNote.end + oldBarStart + partsToMove;
                            const startBar = Math.floor(absoluteNoteStart / newPartsPerBar);
                            const endBar = Math.ceil(absoluteNoteEnd / newPartsPerBar);
                            for (let bar = startBar; bar < endBar; bar++) {
                                const barStartPart = bar * newPartsPerBar;
                                const noteStartPart = Math.max(0, absoluteNoteStart - barStartPart);
                                const noteEndPart = Math.min(newPartsPerBar, absoluteNoteEnd - barStartPart);
                                if (noteStartPart < noteEndPart) {
                                    if (currentBar < bar || pattern == null) {
                                        currentBar++;
                                        while (currentBar < bar) {
                                            newChannel.bars[currentBar] = 0;
                                            currentBar++;
                                        }
                                        pattern = new Pattern();
                                        newChannel.patterns.push(pattern);
                                        newChannel.bars[currentBar] = newChannel.patterns.length;
                                        pattern.instruments.length = 0;
                                        pattern.instruments.push(...oldPattern.instruments);
                                    }
                                    pattern = newChannel.patterns[newChannel.bars[bar] - 1];
                                    projectNoteIntoBar(oldNote, absoluteNoteStart - barStartPart - noteStartPart, noteStartPart, noteEndPart, pattern.notes);
                                }
                            }
                        }
                    }
                }
            }
            removeDuplicatePatterns(pitchChannels);
            removeDuplicatePatterns(noiseChannels);
            removeDuplicatePatterns(modChannels);
            this.append(new ChangeReplacePatterns(doc, pitchChannels, noiseChannels, modChannels));
        }
    }
    class ChangePins extends UndoableChange {
        constructor(_doc, _note) {
            super(false);
            this._doc = _doc;
            this._note = _note;
            this._oldStart = this._note.start;
            this._oldEnd = this._note.end;
            this._newStart = this._note.start;
            this._newEnd = this._note.end;
            this._oldPins = this._note.pins;
            this._newPins = [];
            this._oldPitches = this._note.pitches;
            this._newPitches = [];
            this._oldContinuesLastPattern = this._note.continuesLastPattern;
            this._newContinuesLastPattern = this._note.continuesLastPattern;
        }
        _finishSetup(continuesLastPattern) {
            for (let i = 0; i < this._newPins.length - 1;) {
                if (this._newPins[i].time >= this._newPins[i + 1].time) {
                    this._newPins.splice(i, 1);
                }
                else {
                    i++;
                }
            }
            removeRedundantPins(this._newPins);
            const firstInterval = this._newPins[0].interval;
            const firstTime = this._newPins[0].time;
            for (let i = 0; i < this._oldPitches.length; i++) {
                this._newPitches[i] = this._oldPitches[i] + firstInterval;
            }
            for (let i = 0; i < this._newPins.length; i++) {
                this._newPins[i].interval -= firstInterval;
                this._newPins[i].time -= firstTime;
            }
            this._newStart = this._oldStart + firstTime;
            this._newEnd = this._newStart + this._newPins[this._newPins.length - 1].time;
            if (continuesLastPattern != undefined) {
                this._newContinuesLastPattern = continuesLastPattern;
            }
            if (this._newStart != 0) {
                this._newContinuesLastPattern = false;
            }
            this._doForwards();
            this._didSomething();
        }
        _doForwards() {
            this._note.pins = this._newPins;
            this._note.pitches = this._newPitches;
            this._note.start = this._newStart;
            this._note.end = this._newEnd;
            this._note.continuesLastPattern = this._newContinuesLastPattern;
            if (this._doc != null)
                this._doc.notifier.changed();
        }
        _doBackwards() {
            this._note.pins = this._oldPins;
            this._note.pitches = this._oldPitches;
            this._note.start = this._oldStart;
            this._note.end = this._oldEnd;
            this._note.continuesLastPattern = this._oldContinuesLastPattern;
            if (this._doc != null)
                this._doc.notifier.changed();
        }
    }
    class ChangeCustomWave extends Change {
        constructor(doc, newArray) {
            super();
            const oldArray = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].customChipWave;
            var comparisonResult = true;
            for (let i = 0; i < oldArray.length; i++) {
                if (oldArray[i] != newArray[i]) {
                    comparisonResult = false;
                    i = oldArray.length;
                }
            }
            if (comparisonResult == false) {
                let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
                for (let i = 0; i < newArray.length; i++) {
                    instrument.customChipWave[i] = newArray[i];
                }
                let sum = 0.0;
                for (let i = 0; i < instrument.customChipWave.length; i++) {
                    sum += instrument.customChipWave[i];
                }
                const average = sum / instrument.customChipWave.length;
                let cumulative = 0;
                let wavePrev = 0;
                for (let i = 0; i < instrument.customChipWave.length; i++) {
                    cumulative += wavePrev;
                    wavePrev = instrument.customChipWave[i] - average;
                    instrument.customChipWaveIntegral[i] = cumulative;
                }
                instrument.customChipWaveIntegral[64] = 0.0;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeCustomAlgorythmorFeedback extends Change {
        constructor(doc, newArray, carry, mode) {
            super();
            if (mode == "algorithm") {
                const oldArray = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].customAlgorithm.modulatedBy;
                const oldCarriercount = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].customAlgorithm.carrierCount;
                var comparisonResult = true;
                if (carry != oldCarriercount) {
                    comparisonResult = false;
                }
                else {
                    for (let i = 0; i < oldArray.length; i++) {
                        if (oldArray[i].length != newArray[i].length) {
                            comparisonResult = false;
                            break;
                        }
                        else {
                            for (let j = 0; j < oldArray[i].length; j++) {
                                if (oldArray[i][j] != newArray[i][j]) {
                                    comparisonResult = false;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (comparisonResult == false) {
                    let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
                    instrument.customAlgorithm.set(carry, newArray);
                    instrument.algorithm6Op = 0;
                    doc.notifier.changed();
                    this._didSomething();
                }
            }
            else if (mode == "feedback") {
                const oldArray = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].customFeedbackType.indices;
                var comparisonResult = true;
                for (let i = 0; i < oldArray.length; i++) {
                    if (oldArray[i].length != newArray[i].length) {
                        comparisonResult = false;
                        break;
                    }
                    else {
                        for (let j = 0; j < oldArray[i].length; j++) {
                            if (oldArray[i][j] != newArray[i][j]) {
                                comparisonResult = false;
                                break;
                            }
                        }
                    }
                }
                if (!comparisonResult) {
                    let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
                    instrument.customFeedbackType.set(newArray);
                    instrument.feedbackType6Op = 0;
                    doc.notifier.changed();
                    this._didSomething();
                }
            }
        }
    }
    class ChangePreset extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.preset;
            if (oldValue != newValue) {
                const preset1 = EditorConfig.instrumentToPreset(newValue);
                const preset = preset1 !== null && preset1 !== void 0 ? preset1 : EditorConfig.valueToPreset(newValue);
                if (preset != null) {
                    if (preset.customType != undefined) {
                        instrument.type = preset.customType;
                        if (!Config.instrumentTypeHasSpecialInterval[instrument.type] && Config.chords[instrument.chord].customInterval) {
                            instrument.chord = 0;
                        }
                        instrument.clearInvalidEnvelopeTargets();
                    }
                    else if (preset.settings != undefined) {
                        const tempVolume = instrument.volume;
                        const tempPan = instrument.pan;
                        const tempPanDelay = instrument.panDelay;
                        instrument.fromJsonObject(preset.settings, doc.song.getChannelIsNoise(doc.channel), doc.song.getChannelIsMod(doc.channel), doc.song.rhythm == 0 || doc.song.rhythm == 2, doc.song.rhythm >= 2);
                        instrument.volume = tempVolume;
                        instrument.pan = tempPan;
                        instrument.panDelay = tempPanDelay;
                        instrument.effects = (instrument.effects | (1 << 2));
                    }
                }
                instrument.preset = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeRandomGeneratedInstrument extends Change {
        constructor(doc) {
            super();
            function selectWeightedRandom(entries) {
                let total = 0;
                for (const entry of entries) {
                    total += entry.weight;
                }
                let random = Math.random() * total;
                for (const entry of entries) {
                    random -= entry.weight;
                    if (random <= 0.0)
                        return entry.item;
                }
                return entries[(Math.random() * entries.length) | 0].item;
            }
            function selectCurvedDistribution(min, max, peak, width) {
                const entries = [];
                for (let i = min; i <= max; i++) {
                    entries.push({ item: i, weight: 1.0 / (Math.pow((i - peak) / width, 2.0) + 1.0) });
                }
                return selectWeightedRandom(entries);
            }
            class PotentialFilterPoint {
                constructor(chance, type, minFreq, maxFreq, centerHz, centerGain) {
                    this.chance = chance;
                    this.type = type;
                    this.minFreq = minFreq;
                    this.maxFreq = maxFreq;
                    this.centerHz = centerHz;
                    this.centerGain = centerGain;
                }
                ;
            }
            function applyFilterPoints(filter, potentialPoints) {
                filter.reset();
                const usedFreqs = [];
                for (const potentialPoint of potentialPoints) {
                    if (Math.random() > potentialPoint.chance)
                        continue;
                    const point = new FilterControlPoint();
                    point.type = potentialPoint.type;
                    point.freq = selectCurvedDistribution(potentialPoint.minFreq, potentialPoint.maxFreq, FilterControlPoint.getRoundedSettingValueFromHz(potentialPoint.centerHz), 1.0 / Config.filterFreqStep);
                    point.gain = selectCurvedDistribution(0, Config.filterGainRange - 1, Config.filterGainCenter + potentialPoint.centerGain, 2.0 / Config.filterGainStep);
                    if (point.type == 2 && point.gain == Config.filterGainCenter)
                        continue;
                    if (usedFreqs.includes(point.freq))
                        continue;
                    usedFreqs.push(point.freq);
                    filter.controlPoints[filter.controlPointCount] = point;
                    filter.controlPointCount++;
                }
            }
            const isNoise = doc.song.getChannelIsNoise(doc.channel);
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            instrument.effects = 1 << 2;
            instrument.aliases = false;
            instrument.envelopeCount = 0;
            const midFreq = FilterControlPoint.getRoundedSettingValueFromHz(700.0);
            const maxFreq = Config.filterFreqRange - 1;
            applyFilterPoints(instrument.eqFilter, [
                new PotentialFilterPoint(0.8, 0, midFreq, maxFreq, 4000.0, -1),
                new PotentialFilterPoint(0.4, 1, 0, midFreq - 1, 250.0, -1),
                new PotentialFilterPoint(0.5, 2, 0, maxFreq, 2000.0, 0),
                new PotentialFilterPoint(0.4, 2, 0, maxFreq, 1400.0, 0),
                new PotentialFilterPoint(0.3, 2, 0, maxFreq, 1000.0, 0),
                new PotentialFilterPoint(0.2, 2, 0, maxFreq, 500.0, 0),
            ]);
            if (isNoise) {
                const type = selectWeightedRandom([
                    { item: 2, weight: 3 },
                    { item: 3, weight: 3 },
                    { item: 4, weight: 1 },
                ]);
                instrument.preset = instrument.type = type;
                if (type != 4) {
                    instrument.fadeIn = (Math.random() < 0.8) ? 0 : selectCurvedDistribution(0, Config.fadeInRange - 1, 0, 2);
                    instrument.fadeOut = selectCurvedDistribution(0, Config.fadeOutTicks.length - 1, Config.fadeOutNeutral, 2);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 10;
                    instrument.transition = Config.transitions.dictionary[selectWeightedRandom([
                        { item: "normal", weight: 30 },
                        { item: "interrupt", weight: 1 },
                        { item: "slide", weight: 2 },
                    ])].index;
                }
                if (Math.random() < 0.2) {
                    instrument.effects |= 1 << 11;
                    instrument.chord = Config.chords.dictionary[selectWeightedRandom([
                        { item: "strum", weight: 2 },
                        { item: "arpeggio", weight: 1 },
                    ])].index;
                }
                if (Math.random() < 0.1) {
                    instrument.pitchShift = selectCurvedDistribution(0, Config.pitchShiftRange - 1, Config.pitchShiftCenter, 2);
                    if (instrument.pitchShift != Config.pitchShiftCenter) {
                        instrument.effects |= 1 << 7;
                        instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["pitchShift"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                            { item: "flare 1", weight: 2 },
                            { item: "flare 2", weight: 1 },
                            { item: "flare 3", weight: 1 },
                            { item: "twang 1", weight: 16 },
                            { item: "twang 2", weight: 8 },
                            { item: "twang 3", weight: 4 },
                            { item: "tremolo1", weight: 1 },
                            { item: "tremolo2", weight: 1 },
                            { item: "tremolo3", weight: 1 },
                            { item: "decay 1", weight: 4 },
                            { item: "decay 2", weight: 2 },
                            { item: "decay 3", weight: 1 },
                        ])].index);
                    }
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 9;
                    instrument.vibrato = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);
                    instrument.vibrato = Config.vibratos.dictionary[selectWeightedRandom([
                        { item: "light", weight: 2 },
                        { item: "delayed", weight: 2 },
                        { item: "heavy", weight: 1 },
                        { item: "shaky", weight: 2 },
                    ])].index;
                }
                if (Math.random() < 0.8) {
                    instrument.effects |= 1 << 5;
                    applyFilterPoints(instrument.noteFilter, [
                        new PotentialFilterPoint(1.0, 0, midFreq, maxFreq, 8000.0, -1),
                    ]);
                    instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteFilterAllFreqs"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                        { item: "punch", weight: 4 },
                        { item: "flare 1", weight: 2 },
                        { item: "flare 2", weight: 2 },
                        { item: "flare 3", weight: 2 },
                        { item: "twang 1", weight: 8 },
                        { item: "twang 2", weight: 8 },
                        { item: "twang 3", weight: 8 },
                        { item: "swell 1", weight: 2 },
                        { item: "swell 2", weight: 2 },
                        { item: "swell 3", weight: 1 },
                        { item: "tremolo1", weight: 1 },
                        { item: "tremolo2", weight: 1 },
                        { item: "tremolo3", weight: 1 },
                        { item: "tremolo4", weight: 1 },
                        { item: "tremolo5", weight: 1 },
                        { item: "tremolo6", weight: 1 },
                        { item: "decay 1", weight: 4 },
                        { item: "decay 2", weight: 4 },
                        { item: "decay 3", weight: 4 },
                        { item: "wibble 1", weight: 2 },
                        { item: "wibble 2", weight: 2 },
                        { item: "wibble 3", weight: 2 },
                        { item: "linear 1", weight: 2 },
                        { item: "linear 2", weight: 2 },
                        { item: "linear 3", weight: 2 },
                        { item: "linear-1", weight: 1 },
                    ])].index);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 3;
                    instrument.distortion = selectCurvedDistribution(1, Config.distortionRange - 1, Config.distortionRange - 1, 2);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 4;
                    instrument.bitcrusherFreq = selectCurvedDistribution(0, Config.bitcrusherFreqRange - 1, Config.bitcrusherFreqRange >> 1, 2);
                    instrument.bitcrusherQuantization = selectCurvedDistribution(0, Config.bitcrusherQuantizationRange - 1, Config.bitcrusherQuantizationRange >> 1, 2);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 1;
                    instrument.chorus = selectCurvedDistribution(1, Config.chorusRange - 1, Config.chorusRange - 1, 1);
                }
                if (Math.random() < 0.1) {
                    instrument.echoSustain = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);
                    instrument.echoDelay = selectCurvedDistribution(0, Config.echoDelayRange - 1, Config.echoDelayRange >> 1, 2);
                    if (instrument.echoSustain != 0 || instrument.echoDelay != 0) {
                        instrument.effects |= 1 << 6;
                    }
                }
                if (Math.random() < 0.5) {
                    instrument.effects |= 1 << 0;
                    instrument.reverb = selectCurvedDistribution(1, Config.reverbRange - 1, 1, 1);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 12;
                    instrument.ringModulation = selectCurvedDistribution(1, Config.ringModRange - 1, Config.ringModRange - 1, 1);
                }
                if (type == 2 || type == 3) {
                    instrument.unison = Config.unisons.dictionary[selectWeightedRandom([
                        { item: "none", weight: 100 },
                        { item: "shimmer", weight: 10 },
                        { item: "hum", weight: 8 },
                        { item: "honky tonk", weight: 6 },
                        { item: "dissonant", weight: 2 },
                        { item: "fifth", weight: 4 },
                        { item: "octave", weight: 5 },
                        { item: "bowed", weight: 4 },
                        { item: "piano", weight: 10 },
                        { item: "warbled", weight: 5 },
                        { item: "hecking gosh", weight: 3 },
                        { item: "spinner", weight: 6 },
                        { item: "detune", weight: 4 },
                        { item: "rising", weight: 2 },
                        { item: "vibrate", weight: 3 },
                        { item: "bass", weight: 2 },
                        { item: "recurve", weight: 3 },
                        { item: "inject", weight: 2 },
                        { item: "FART", weight: 1 },
                    ])].index;
                    if (instrument.unison != Config.unisons.dictionary["none"].index && Math.random() > 0.4)
                        instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["unison"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                            { item: "twang -1", weight: 3 },
                            { item: "twang 1", weight: 3 },
                            { item: "twang 2", weight: 2 },
                            { item: "swell 1", weight: 1 },
                            { item: "decay -1", weight: 3 },
                            { item: "decay 1", weight: 3 },
                            { item: "decay 2", weight: 2 },
                            { item: "wibble-1", weight: 2 },
                            { item: "wibble 1", weight: 2 },
                            { item: "wibble 2", weight: 1 },
                            { item: "wibble 3", weight: 1 },
                            { item: "linear-2", weight: 2 },
                            { item: "linear-1", weight: 2 },
                            { item: "linear 1", weight: 2 },
                            { item: "linear 2", weight: 1 },
                            { item: "linear 3", weight: 1 },
                            { item: "rise 1", weight: 1 },
                            { item: "rise 2", weight: 1 },
                        ])].index);
                }
                function normalize(harmonics) {
                    let max = 0;
                    for (const value of harmonics) {
                        if (value > max)
                            max = value;
                    }
                    for (let i = 0; i < harmonics.length; i++) {
                        harmonics[i] = Config.harmonicsMax * harmonics[i] / max;
                    }
                }
                switch (type) {
                    case 2:
                        {
                            instrument.chipNoise = (Math.random() * Config.chipNoises.length) | 0;
                        }
                        break;
                    case 3:
                        {
                            const spectrumGenerators = [
                                () => {
                                    const spectrum = [];
                                    for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                        spectrum[i] = (Math.random() < 0.5) ? Math.random() : 0.0;
                                    }
                                    return spectrum;
                                },
                                () => {
                                    let current = 1.0;
                                    const spectrum = [current];
                                    for (let i = 1; i < Config.spectrumControlPoints; i++) {
                                        current *= Math.pow(2, Math.random() - 0.52);
                                        spectrum[i] = current;
                                    }
                                    return spectrum;
                                },
                                () => {
                                    let current = 1.0;
                                    const spectrum = [current];
                                    for (let i = 1; i < Config.spectrumControlPoints; i++) {
                                        current *= Math.pow(2, Math.random() - 0.52);
                                        spectrum[i] = current * Math.random();
                                    }
                                    return spectrum;
                                },
                            ];
                            const generator = spectrumGenerators[(Math.random() * spectrumGenerators.length) | 0];
                            const spectrum = generator();
                            normalize(spectrum);
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                instrument.spectrumWave.spectrum[i] = Math.round(spectrum[i]);
                            }
                            instrument.spectrumWave.markCustomWaveDirty();
                        }
                        break;
                    case 4:
                        {
                            for (let i = 0; i < Config.drumCount; i++) {
                                instrument.drumsetEnvelopes[i] = Math.floor(Math.random() * Config.envelopes.length);
                                const spectrum = [];
                                let randomFactor = Math.floor(Math.random() * 3);
                                for (let j = 0; j < Config.spectrumControlPoints; j++) {
                                    if (randomFactor == 0 || randomFactor == 3)
                                        spectrum[j] = Math.pow(Math.random(), 3) * 0.25;
                                    else if (randomFactor == 1)
                                        spectrum[j] = Math.pow(Math.random(), ((i / 8) + 1));
                                    else if (randomFactor == 2)
                                        spectrum[j] = (Math.pow(Math.random(), 2)) * ((i / 3) + 1);
                                    else
                                        spectrum[j] = Math.pow(Math.random(), 3) * 0.25;
                                }
                                normalize(spectrum);
                                for (let j = 0; j < Config.spectrumControlPoints; j++) {
                                    instrument.drumsetSpectrumWaves[i].spectrum[j] = Math.round(spectrum[j]);
                                }
                                instrument.drumsetSpectrumWaves[i].markCustomWaveDirty();
                            }
                        }
                        break;
                    default: throw new Error("Unhandled noise instrument type in random generator.");
                }
            }
            else {
                const type = selectWeightedRandom([
                    { item: 0, weight: 2 },
                    { item: 6, weight: 2 },
                    { item: 8, weight: 2 },
                    { item: 9, weight: 2 },
                    { item: 5, weight: 2 },
                    { item: 7, weight: 2 },
                    { item: 3, weight: 2 },
                    { item: 1, weight: 2 },
                    { item: 11, weight: 2 },
                ]);
                instrument.preset = instrument.type = type;
                instrument.fadeIn = (Math.random() < 0.5) ? 0 : selectCurvedDistribution(0, Config.fadeInRange - 1, 0, 2);
                instrument.fadeOut = selectCurvedDistribution(0, Config.fadeOutTicks.length - 1, Config.fadeOutNeutral, 2);
                if (type == 0 || type == 5 || type == 7 || type == 9 || type == 6 || type == 3) {
                    instrument.unison = Config.unisons.dictionary[selectWeightedRandom([
                        { item: "none", weight: 25 },
                        { item: "shimmer", weight: 10 },
                        { item: "hum", weight: 8 },
                        { item: "honky tonk", weight: 6 },
                        { item: "dissonant", weight: 2 },
                        { item: "fifth", weight: 4 },
                        { item: "octave", weight: 5 },
                        { item: "bowed", weight: 4 },
                        { item: "piano", weight: 10 },
                        { item: "warbled", weight: 5 },
                        { item: "hecking gosh", weight: 3 },
                        { item: "spinner", weight: 6 },
                        { item: "detune", weight: 4 },
                        { item: "rising", weight: 2 },
                        { item: "vibrate", weight: 3 },
                        { item: "bass", weight: 2 },
                        { item: "recurve", weight: 3 },
                        { item: "inject", weight: 2 },
                        { item: "FART", weight: 1 },
                    ])].index;
                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                    instrument.unisonSign = Config.unisons[instrument.unison].sign;
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 10;
                    instrument.transition = Config.transitions.dictionary[selectWeightedRandom([
                        { item: "interrupt", weight: 1 },
                        { item: "slide", weight: 2 },
                    ])].index;
                }
                if (Math.random() < 0.2) {
                    instrument.effects |= 1 << 11;
                    instrument.chord = Config.chords.dictionary[selectWeightedRandom([
                        { item: "strum", weight: 2 },
                        { item: "arpeggio", weight: 1 },
                    ])].index;
                }
                if (Math.random() < 0.05) {
                    instrument.pitchShift = selectCurvedDistribution(0, Config.pitchShiftRange - 1, Config.pitchShiftCenter, 1);
                    if (instrument.pitchShift != Config.pitchShiftCenter) {
                        instrument.effects |= 1 << 7;
                        instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["pitchShift"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                            { item: "flare 1", weight: 2 },
                            { item: "flare 2", weight: 1 },
                            { item: "flare 3", weight: 1 },
                            { item: "twang 1", weight: 16 },
                            { item: "twang 2", weight: 8 },
                            { item: "twang 3", weight: 4 },
                            { item: "decay 1", weight: 4 },
                            { item: "decay 2", weight: 2 },
                            { item: "decay 3", weight: 1 },
                            { item: "linear 1", weight: 1 },
                            { item: "linear 2", weight: 1 },
                        ])].index);
                    }
                }
                if (Math.random() < 0.25) {
                    instrument.effects |= 1 << 9;
                    instrument.vibrato = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);
                    instrument.vibrato = Config.vibratos.dictionary[selectWeightedRandom([
                        { item: "light", weight: 2 },
                        { item: "delayed", weight: 2 },
                        { item: "heavy", weight: 1 },
                        { item: "shaky", weight: 2 },
                    ])].index;
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 3;
                    instrument.distortion = selectCurvedDistribution(1, Config.distortionRange - 1, Config.distortionRange - 1, 2);
                }
                if (effectsIncludeDistortion(instrument.effects) && Math.random() < 0.8) {
                    instrument.effects |= 1 << 5;
                    applyFilterPoints(instrument.noteFilter, [
                        new PotentialFilterPoint(1.0, 0, midFreq, maxFreq, 2000.0, -1),
                        new PotentialFilterPoint(0.9, 1, 0, midFreq - 1, 500.0, -1),
                        new PotentialFilterPoint(0.4, 2, 0, maxFreq, 1400.0, 0),
                    ]);
                }
                else if (Math.random() < 0.5) {
                    instrument.effects |= 1 << 5;
                    applyFilterPoints(instrument.noteFilter, [
                        new PotentialFilterPoint(1.0, 0, midFreq, maxFreq, 8000.0, -1),
                    ]);
                    instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteFilterAllFreqs"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                        { item: "punch", weight: 6 },
                        { item: "flare -1", weight: 1 },
                        { item: "flare 1", weight: 2 },
                        { item: "flare 2", weight: 4 },
                        { item: "flare 3", weight: 2 },
                        { item: "twang -1", weight: 1 },
                        { item: "twang 1", weight: 2 },
                        { item: "twang 2", weight: 4 },
                        { item: "twang 3", weight: 4 },
                        { item: "swell -1", weight: 4 },
                        { item: "swell 1", weight: 4 },
                        { item: "swell 2", weight: 2 },
                        { item: "swell 3", weight: 1 },
                        { item: "tremolo0", weight: 1 },
                        { item: "tremolo1", weight: 1 },
                        { item: "tremolo2", weight: 1 },
                        { item: "tremolo3", weight: 1 },
                        { item: "tremolo4", weight: 1 },
                        { item: "tremolo5", weight: 1 },
                        { item: "tremolo6", weight: 1 },
                        { item: "decay -1", weight: 1 },
                        { item: "decay 1", weight: 1 },
                        { item: "decay 2", weight: 2 },
                        { item: "decay 3", weight: 2 },
                        { item: "wibble-1", weight: 2 },
                        { item: "wibble 1", weight: 4 },
                        { item: "wibble 2", weight: 4 },
                        { item: "wibble 3", weight: 4 },
                        { item: "linear-2", weight: 1 },
                        { item: "linear-1", weight: 1 },
                        { item: "linear 1", weight: 2 },
                        { item: "linear 2", weight: 3 },
                        { item: "linear 3", weight: 2 },
                        { item: "rise -2", weight: 4 },
                        { item: "rise -1", weight: 4 },
                        { item: "rise 1", weight: 3 },
                        { item: "rise 2", weight: 2 },
                        { item: "rise 3", weight: 1 },
                    ])].index);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 4;
                    instrument.bitcrusherFreq = selectCurvedDistribution(0, Config.bitcrusherFreqRange - 1, 0, 2);
                    instrument.bitcrusherQuantization = selectCurvedDistribution(0, Config.bitcrusherQuantizationRange - 1, Config.bitcrusherQuantizationRange >> 1, 2);
                }
                if (Math.random() < 0.1) {
                    instrument.effects |= 1 << 1;
                    instrument.chorus = selectCurvedDistribution(1, Config.chorusRange - 1, Config.chorusRange - 1, 1);
                }
                if (Math.random() < 0.1) {
                    instrument.echoSustain = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);
                    instrument.echoDelay = selectCurvedDistribution(0, Config.echoDelayRange - 1, Config.echoDelayRange >> 1, 2);
                    if (instrument.echoSustain != 0 || instrument.echoDelay != 0) {
                        instrument.effects |= 1 << 6;
                    }
                }
                if (Math.random() < 0.5) {
                    instrument.effects |= 1 << 0;
                    instrument.reverb = selectCurvedDistribution(1, Config.reverbRange - 1, 1, 1);
                }
                function normalize(harmonics) {
                    let max = 0;
                    for (const value of harmonics) {
                        if (value > max)
                            max = value;
                    }
                    for (let i = 0; i < harmonics.length; i++) {
                        harmonics[i] = Config.harmonicsMax * harmonics[i] / max;
                    }
                }
                switch (type) {
                    case 0:
                        {
                            instrument.chipWave = (Math.random() * Config.chipWaves.length) | 0;
                            instrument.isUsingAdvancedLoopControls = false;
                            instrument.chipWaveLoopStart = 0;
                            instrument.chipWaveLoopEnd = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;
                            instrument.chipWaveLoopMode = 0;
                            instrument.chipWavePlayBackwards = false;
                            instrument.chipWaveStartOffset = 0;
                        }
                        break;
                    case 6:
                    case 8:
                        {
                            if (type == 8) {
                                instrument.supersawDynamism = selectCurvedDistribution(0, Config.supersawDynamismMax, Config.supersawDynamismMax, 2);
                                instrument.supersawSpread = selectCurvedDistribution(0, Config.supersawSpreadMax, Math.ceil(Config.supersawSpreadMax / 3), 4);
                                instrument.supersawShape = selectCurvedDistribution(0, Config.supersawShapeMax, 0, 4);
                            }
                            instrument.pulseWidth = selectCurvedDistribution(0, Config.pulseWidthRange - 1, Config.pulseWidthRange - 1, 2);
                            instrument.decimalOffset = 0;
                            if (Math.random() < 0.6) {
                                instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["pulseWidth"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                                    { item: "punch", weight: 6 },
                                    { item: "flare -1", weight: 1 },
                                    { item: "flare 1", weight: 2 },
                                    { item: "flare 2", weight: 4 },
                                    { item: "flare 3", weight: 2 },
                                    { item: "twang -1", weight: 1 },
                                    { item: "twang 1", weight: 2 },
                                    { item: "twang 2", weight: 4 },
                                    { item: "twang 3", weight: 4 },
                                    { item: "swell -1", weight: 4 },
                                    { item: "swell 1", weight: 4 },
                                    { item: "swell 2", weight: 2 },
                                    { item: "swell 3", weight: 1 },
                                    { item: "tremolo0", weight: 1 },
                                    { item: "tremolo1", weight: 1 },
                                    { item: "tremolo2", weight: 1 },
                                    { item: "tremolo3", weight: 1 },
                                    { item: "tremolo4", weight: 1 },
                                    { item: "tremolo5", weight: 1 },
                                    { item: "tremolo6", weight: 1 },
                                    { item: "decay -1", weight: 1 },
                                    { item: "decay 1", weight: 1 },
                                    { item: "decay 2", weight: 2 },
                                    { item: "decay 3", weight: 2 },
                                    { item: "wibble-1", weight: 2 },
                                    { item: "wibble 1", weight: 4 },
                                    { item: "wibble 2", weight: 4 },
                                    { item: "wibble 3", weight: 4 },
                                    { item: "linear-2", weight: 1 },
                                    { item: "linear-1", weight: 1 },
                                    { item: "linear 1", weight: 2 },
                                    { item: "linear 2", weight: 3 },
                                    { item: "linear 3", weight: 2 },
                                    { item: "rise -2", weight: 4 },
                                    { item: "rise -1", weight: 4 },
                                    { item: "rise 1", weight: 3 },
                                    { item: "rise 2", weight: 2 },
                                    { item: "rise 3", weight: 1 },
                                ])].index);
                            }
                        }
                        break;
                    case 7:
                    case 5:
                        {
                            if (type == 7) {
                                instrument.stringSustain = (Math.random() * Config.stringSustainRange) | 0;
                            }
                            const harmonicGenerators = [
                                () => {
                                    const harmonics = [];
                                    for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                                        harmonics[i] = (Math.random() < 0.4) ? Math.random() : 0.0;
                                    }
                                    harmonics[(Math.random() * 8) | 0] = Math.pow(Math.random(), 0.25);
                                    return harmonics;
                                },
                                () => {
                                    let current = 1.0;
                                    const harmonics = [current];
                                    for (let i = 1; i < Config.harmonicsControlPoints; i++) {
                                        current *= Math.pow(2, Math.random() - 0.55);
                                        harmonics[i] = current;
                                    }
                                    return harmonics;
                                },
                                () => {
                                    let current = 1.0;
                                    const harmonics = [current];
                                    for (let i = 1; i < Config.harmonicsControlPoints; i++) {
                                        current *= Math.pow(2, Math.random() - 0.55);
                                        harmonics[i] = current * Math.random();
                                    }
                                    return harmonics;
                                },
                            ];
                            const generator = harmonicGenerators[(Math.random() * harmonicGenerators.length) | 0];
                            const harmonics = generator();
                            normalize(harmonics);
                            for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                                instrument.harmonicsWave.harmonics[i] = Math.round(harmonics[i]);
                            }
                            instrument.harmonicsWave.markCustomWaveDirty();
                        }
                        break;
                    case 3:
                        {
                            const spectrum = [];
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21;
                                if (isHarmonic) {
                                    spectrum[i] = Math.pow(Math.random(), 0.25);
                                }
                                else {
                                    spectrum[i] = Math.pow(Math.random(), 3) * 0.5;
                                }
                            }
                            normalize(spectrum);
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                instrument.spectrumWave.spectrum[i] = Math.round(spectrum[i]);
                            }
                            instrument.spectrumWave.markCustomWaveDirty();
                        }
                        break;
                    case 11:
                    case 1:
                        {
                            if (type == 1) {
                                instrument.algorithm = (Math.random() * Config.algorithms.length) | 0;
                                instrument.feedbackType = (Math.random() * Config.feedbacks.length) | 0;
                            }
                            else {
                                instrument.algorithm6Op = (Math.random() * (Config.algorithms6Op.length - 1) + 1) | 0;
                                instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);
                                instrument.feedbackType6Op = (Math.random() * (Config.feedbacks6Op.length - 1) + 1) | 0;
                                instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);
                            }
                            const algorithm = type == 1 ? Config.algorithms[instrument.algorithm] : Config.algorithms6Op[instrument.algorithm6Op];
                            for (let i = 0; i < algorithm.carrierCount; i++) {
                                instrument.operators[i].frequency = selectCurvedDistribution(0, Config.operatorFrequencies.length - 1, 0, 3);
                                instrument.operators[i].amplitude = selectCurvedDistribution(0, Config.operatorAmplitudeMax, Config.operatorAmplitudeMax - 1, 2);
                                instrument.operators[i].waveform = Config.operatorWaves.dictionary[selectWeightedRandom([
                                    { item: "sine", weight: 10 },
                                    { item: "triangle", weight: 6 },
                                    { item: "pulse width", weight: 6 },
                                    { item: "sawtooth", weight: 3 },
                                    { item: "ramp", weight: 3 },
                                    { item: "trapezoid", weight: 4 },
                                    { item: "rounded", weight: 2 },
                                ])].index;
                                if (instrument.operators[i].waveform == 2) {
                                    instrument.operators[i].pulseWidth = selectWeightedRandom([
                                        { item: 0, weight: 3 },
                                        { item: 1, weight: 5 },
                                        { item: 2, weight: 7 },
                                        { item: 3, weight: 10 },
                                        { item: 4, weight: 15 },
                                        { item: 5, weight: 25 },
                                        { item: 6, weight: 15 },
                                        { item: 7, weight: 10 },
                                        { item: 8, weight: 7 },
                                        { item: 9, weight: 5 },
                                        { item: 9, weight: 3 },
                                    ]);
                                }
                            }
                            for (let i = algorithm.carrierCount; i < Config.operatorCount + (type == 11 ? 2 : 0); i++) {
                                instrument.operators[i].frequency = selectCurvedDistribution(3, Config.operatorFrequencies.length - 1, 0, 3);
                                instrument.operators[i].amplitude = (Math.pow(Math.random(), 2) * Config.operatorAmplitudeMax) | 0;
                                if (instrument.envelopeCount < Config.maxEnvelopeCount && Math.random() < 0.4) {
                                    instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["operatorAmplitude"].index, i, Config.envelopes.dictionary[selectWeightedRandom([
                                        { item: "punch", weight: 2 },
                                        { item: "flare -1", weight: 1 },
                                        { item: "flare 1", weight: 2 },
                                        { item: "flare 2", weight: 2 },
                                        { item: "flare 3", weight: 2 },
                                        { item: "twang -1", weight: 1 },
                                        { item: "twang 1", weight: 2 },
                                        { item: "twang 2", weight: 2 },
                                        { item: "twang 3", weight: 2 },
                                        { item: "swell -1", weight: 2 },
                                        { item: "swell 1", weight: 2 },
                                        { item: "swell 2", weight: 2 },
                                        { item: "swell 3", weight: 1 },
                                        { item: "tremolo0", weight: 1 },
                                        { item: "tremolo1", weight: 1 },
                                        { item: "tremolo2", weight: 1 },
                                        { item: "tremolo3", weight: 1 },
                                        { item: "tremolo4", weight: 1 },
                                        { item: "tremolo5", weight: 1 },
                                        { item: "tremolo6", weight: 1 },
                                        { item: "decay -1", weight: 1 },
                                        { item: "decay 1", weight: 1 },
                                        { item: "decay 2", weight: 2 },
                                        { item: "decay 3", weight: 2 },
                                        { item: "wibble-1", weight: 2 },
                                        { item: "wibble 1", weight: 2 },
                                        { item: "wibble 2", weight: 2 },
                                        { item: "wibble 3", weight: 2 },
                                        { item: "linear-2", weight: 1 },
                                        { item: "linear-1", weight: 1 },
                                        { item: "linear 1", weight: 2 },
                                        { item: "linear 2", weight: 2 },
                                        { item: "linear 3", weight: 1 },
                                        { item: "rise -2", weight: 2 },
                                        { item: "rise -1", weight: 2 },
                                        { item: "rise 1", weight: 2 },
                                        { item: "rise 2", weight: 2 },
                                        { item: "rise 3", weight: 1 },
                                    ])].index);
                                }
                                instrument.operators[i].waveform = Config.operatorWaves.dictionary[selectWeightedRandom([
                                    { item: "sine", weight: 10 },
                                    { item: "triangle", weight: 6 },
                                    { item: "pulse width", weight: 6 },
                                    { item: "sawtooth", weight: 3 },
                                    { item: "ramp", weight: 3 },
                                    { item: "trapezoid", weight: 4 },
                                    { item: "rounded", weight: 2 },
                                ])].index;
                                if (instrument.operators[i].waveform == 2) {
                                    instrument.operators[i].pulseWidth = selectWeightedRandom([
                                        { item: 0, weight: 3 },
                                        { item: 1, weight: 5 },
                                        { item: 2, weight: 7 },
                                        { item: 3, weight: 10 },
                                        { item: 4, weight: 15 },
                                        { item: 5, weight: 25 },
                                        { item: 6, weight: 15 },
                                        { item: 7, weight: 10 },
                                        { item: 8, weight: 7 },
                                        { item: 9, weight: 5 },
                                        { item: 9, weight: 3 },
                                    ]);
                                }
                            }
                            instrument.feedbackAmplitude = (Math.pow(Math.random(), 3) * Config.operatorAmplitudeMax) | 0;
                            if (instrument.envelopeCount < Config.maxEnvelopeCount && Math.random() < 0.4) {
                                instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary["feedbackAmplitude"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([
                                    { item: "none", weight: 4 },
                                    { item: "punch", weight: 2 },
                                    { item: "flare -1", weight: 1 },
                                    { item: "flare 1", weight: 2 },
                                    { item: "flare 2", weight: 2 },
                                    { item: "flare 3", weight: 2 },
                                    { item: "twang -1", weight: 1 },
                                    { item: "twang 1", weight: 2 },
                                    { item: "twang 2", weight: 2 },
                                    { item: "twang 3", weight: 2 },
                                    { item: "swell -1", weight: 2 },
                                    { item: "swell 1", weight: 2 },
                                    { item: "swell 2", weight: 2 },
                                    { item: "swell 3", weight: 1 },
                                    { item: "tremolo0", weight: 1 },
                                    { item: "tremolo1", weight: 1 },
                                    { item: "tremolo2", weight: 1 },
                                    { item: "tremolo3", weight: 1 },
                                    { item: "tremolo4", weight: 1 },
                                    { item: "tremolo5", weight: 1 },
                                    { item: "tremolo6", weight: 1 },
                                    { item: "decay -1", weight: 1 },
                                    { item: "decay 1", weight: 1 },
                                    { item: "decay 2", weight: 2 },
                                    { item: "decay 3", weight: 2 },
                                    { item: "wibble-1", weight: 2 },
                                    { item: "wibble 1", weight: 2 },
                                    { item: "wibble 2", weight: 2 },
                                    { item: "wibble 3", weight: 2 },
                                    { item: "linear-2", weight: 1 },
                                    { item: "linear-1", weight: 1 },
                                    { item: "linear 1", weight: 2 },
                                    { item: "linear 2", weight: 2 },
                                    { item: "linear 3", weight: 1 },
                                    { item: "rise -2", weight: 2 },
                                    { item: "rise -1", weight: 2 },
                                    { item: "rise 1", weight: 2 },
                                    { item: "rise 2", weight: 2 },
                                    { item: "rise 3", weight: 1 },
                                ])].index);
                            }
                        }
                        break;
                    case 9:
                        {
                            let randomGeneratedArray = new Float32Array(64);
                            let randomGeneratedArrayIntegral = new Float32Array(65);
                            const algorithmFunction = selectWeightedRandom([
                                { item: randomSineWave, weight: 4 },
                                { item: randomPulses, weight: 4 },
                                { item: randomChipWave, weight: 3 },
                                { item: biasedFullyRandom, weight: 2 },
                                { item: fullyRandom, weight: 1 },
                            ]);
                            algorithmFunction(randomGeneratedArray);
                            let sum = 0.0;
                            for (let i = 0; i < randomGeneratedArray.length; i++)
                                sum += randomGeneratedArray[i];
                            const average = sum / randomGeneratedArray.length;
                            let cumulative = 0;
                            let wavePrev = 0;
                            for (let i = 0; i < randomGeneratedArray.length; i++) {
                                cumulative += wavePrev;
                                wavePrev = randomGeneratedArray[i] - average;
                                randomGeneratedArrayIntegral[i] = cumulative;
                            }
                            randomGeneratedArrayIntegral[64] = 0.0;
                            instrument.customChipWave = randomGeneratedArray;
                            instrument.customChipWaveIntegral = randomGeneratedArrayIntegral;
                        }
                        break;
                    default: throw new Error("Unhandled pitched instrument type in random generator.");
                }
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeTransition extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.transition;
            if (oldValue != newValue) {
                this._didSomething();
                instrument.transition = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
            }
        }
    }
    class ChangeToggleEffects extends Change {
        constructor(doc, toggleFlag, useInstrument) {
            super();
            let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (useInstrument != null)
                instrument = useInstrument;
            const oldValue = instrument.effects;
            const wasSelected = ((oldValue & (1 << toggleFlag)) != 0);
            const newValue = wasSelected ? (oldValue & (~(1 << toggleFlag))) : (oldValue | (1 << toggleFlag));
            instrument.effects = newValue;
            if (toggleFlag != 2)
                instrument.preset = instrument.type;
            if (toggleFlag == 3 && wasSelected)
                instrument.aliases = false;
            if (wasSelected)
                instrument.clearInvalidEnvelopeTargets();
            this._didSomething();
            doc.notifier.changed();
        }
    }
    class ChangePatternNumbers extends Change {
        constructor(doc, value, startBar, startChannel, width, height) {
            super();
            if (value > doc.song.patternsPerChannel)
                throw new Error("invalid pattern");
            for (let bar = startBar; bar < startBar + width; bar++) {
                for (let channelIndex = startChannel; channelIndex < startChannel + height; channelIndex++) {
                    if (doc.song.channels[channelIndex].bars[bar] != value) {
                        doc.song.channels[channelIndex].bars[bar] = value;
                        this._didSomething();
                    }
                }
            }
            if (startChannel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount) {
                const pattern = doc.getCurrentPattern();
                if (pattern != null) {
                    doc.viewedInstrument[startChannel] = pattern.instruments[0];
                }
                else {
                    doc.viewedInstrument[startChannel] = 0;
                }
            }
            doc.notifier.changed();
        }
    }
    class ChangeBarCount extends Change {
        constructor(doc, newValue, atBeginning) {
            super();
            if (doc.song.barCount != newValue) {
                for (const channel of doc.song.channels) {
                    if (atBeginning) {
                        while (channel.bars.length < newValue) {
                            channel.bars.unshift(0);
                        }
                        if (doc.song.barCount > newValue) {
                            channel.bars.splice(0, doc.song.barCount - newValue);
                        }
                    }
                    else {
                        while (channel.bars.length < newValue) {
                            channel.bars.push(0);
                        }
                        channel.bars.length = newValue;
                    }
                }
                if (atBeginning) {
                    const diff = newValue - doc.song.barCount;
                    doc.bar = Math.max(0, doc.bar + diff);
                    if (diff < 0 || doc.barScrollPos > 0) {
                        doc.barScrollPos = Math.max(0, doc.barScrollPos + diff);
                    }
                    doc.song.loopStart = Math.max(0, doc.song.loopStart + diff);
                }
                doc.bar = Math.min(doc.bar, newValue - 1);
                doc.song.loopLength = Math.min(newValue, doc.song.loopLength);
                doc.song.loopStart = Math.min(newValue - doc.song.loopLength, doc.song.loopStart);
                doc.song.barCount = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeInsertBars extends Change {
        constructor(doc, start, count) {
            super();
            const newLength = Math.min(Config.barCountMax, doc.song.barCount + count);
            count = newLength - doc.song.barCount;
            if (count == 0)
                return;
            for (const channel of doc.song.channels) {
                while (channel.bars.length < newLength) {
                    channel.bars.splice(start, 0, 0);
                }
            }
            doc.song.barCount = newLength;
            doc.bar += count;
            doc.barScrollPos += count;
            if (doc.song.loopStart >= start) {
                doc.song.loopStart += count;
            }
            else if (doc.song.loopStart + doc.song.loopLength >= start) {
                doc.song.loopLength += count;
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeDeleteBars extends Change {
        constructor(doc, start, count) {
            super();
            for (const channel of doc.song.channels) {
                channel.bars.splice(start, count);
                if (channel.bars.length == 0)
                    channel.bars.push(0);
            }
            doc.song.barCount = Math.max(1, doc.song.barCount - count);
            doc.bar = Math.max(0, doc.bar - count);
            doc.barScrollPos = Math.max(0, doc.barScrollPos - count);
            if (doc.song.loopStart >= start) {
                doc.song.loopStart = Math.max(0, doc.song.loopStart - count);
            }
            else if (doc.song.loopStart + doc.song.loopLength > start) {
                doc.song.loopLength -= count;
            }
            doc.song.loopLength = Math.max(1, Math.min(doc.song.barCount - doc.song.loopStart, doc.song.loopLength));
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeLimiterSettings extends Change {
        constructor(doc, limitRatio, compressionRatio, limitThreshold, compressionThreshold, limitRise, limitDecay, masterGain) {
            super();
            doc.song.limitRatio = limitRatio;
            doc.song.compressionRatio = compressionRatio;
            doc.song.limitThreshold = limitThreshold;
            doc.song.compressionThreshold = compressionThreshold;
            doc.song.limitRise = limitRise;
            doc.song.limitDecay = limitDecay;
            doc.song.masterGain = masterGain;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeChannelOrder extends Change {
        constructor(doc, selectionMin, selectionMax, offset) {
            super();
            doc.song.channels.splice(selectionMin + offset, 0, ...doc.song.channels.splice(selectionMin, selectionMax - selectionMin + 1));
            selectionMax = Math.max(selectionMax, selectionMin);
            for (let channelIndex = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                for (let instrumentIdx = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {
                    let instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];
                    for (let i = 0; i < Config.modCount; i++) {
                        if (instrument.modChannels[i] >= selectionMin && instrument.modChannels[i] <= selectionMax) {
                            instrument.modChannels[i] += offset;
                        }
                        else if (instrument.modChannels[i] >= selectionMin + offset && instrument.modChannels[i] <= selectionMax + offset) {
                            instrument.modChannels[i] -= offset * (selectionMax - selectionMin + 1);
                        }
                    }
                }
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeCustomScale extends Change {
        constructor(doc, flags) {
            super();
            for (let i = 0; i < Config.pitchesPerOctave; i++) {
                doc.song.scaleCustom[i] = flags[i];
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeChannelCount extends Change {
        constructor(doc, newPitchChannelCount, newNoiseChannelCount, newModChannelCount) {
            super();
            if (doc.song.pitchChannelCount != newPitchChannelCount || doc.song.noiseChannelCount != newNoiseChannelCount || doc.song.modChannelCount != newModChannelCount) {
                const newChannels = [];
                function changeGroup(newCount, oldCount, newStart, oldStart, octave, isNoise, isMod) {
                    for (let i = 0; i < newCount; i++) {
                        const channelIndex = i + newStart;
                        const oldChannel = i + oldStart;
                        if (i < oldCount) {
                            newChannels[channelIndex] = doc.song.channels[oldChannel];
                        }
                        else {
                            newChannels[channelIndex] = new Channel();
                            newChannels[channelIndex].octave = octave;
                            for (let j = 0; j < Config.instrumentCountMin; j++) {
                                const instrument = new Instrument(isNoise, isMod);
                                if (!isMod) {
                                    const presetValue = pickRandomPresetValue(isNoise);
                                    const preset = EditorConfig.valueToPreset(presetValue);
                                    instrument.fromJsonObject(preset.settings, isNoise, isMod, doc.song.rhythm == 0 || doc.song.rhythm == 2, doc.song.rhythm >= 2);
                                    instrument.preset = presetValue;
                                    instrument.effects |= 1 << 2;
                                }
                                else {
                                    instrument.setTypeAndReset(10, isNoise, isMod);
                                }
                                newChannels[channelIndex].instruments[j] = instrument;
                            }
                            for (let j = 0; j < doc.song.patternsPerChannel; j++) {
                                newChannels[channelIndex].patterns[j] = new Pattern();
                            }
                            for (let j = 0; j < doc.song.barCount; j++) {
                                newChannels[channelIndex].bars[j] = 0;
                            }
                        }
                    }
                }
                changeGroup(newPitchChannelCount, doc.song.pitchChannelCount, 0, 0, 3, false, false);
                changeGroup(newNoiseChannelCount, doc.song.noiseChannelCount, newPitchChannelCount, doc.song.pitchChannelCount, 0, true, false);
                changeGroup(newModChannelCount, doc.song.modChannelCount, newNoiseChannelCount + newPitchChannelCount, doc.song.pitchChannelCount + doc.song.noiseChannelCount, 0, false, true);
                let oldPitchCount = doc.song.pitchChannelCount;
                doc.song.pitchChannelCount = newPitchChannelCount;
                doc.song.noiseChannelCount = newNoiseChannelCount;
                doc.song.modChannelCount = newModChannelCount;
                for (let channelIndex = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                    doc.song.channels[channelIndex] = newChannels[channelIndex];
                }
                doc.song.channels.length = doc.song.getChannelCount();
                doc.channel = Math.min(doc.channel, newPitchChannelCount + newNoiseChannelCount + newModChannelCount - 1);
                for (let channelIndex = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                    for (let instrumentIdx = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            let instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];
                            let modChannel = instrument.modChannels[mod];
                            if ((modChannel >= doc.song.pitchChannelCount && modChannel < oldPitchCount) || modChannel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount) {
                                instrument.modulators[mod] = Config.modulators.dictionary["none"].index;
                            }
                            if (modChannel >= oldPitchCount && oldPitchCount < newPitchChannelCount) {
                                instrument.modChannels[mod] += newPitchChannelCount - oldPitchCount;
                            }
                        }
                    }
                }
                doc.notifier.changed();
                ColorConfig.resetColors();
                this._didSomething();
            }
        }
    }
    class ChangeAddChannel extends ChangeGroup {
        constructor(doc, index, isNoise, isMod) {
            super();
            const newPitchChannelCount = doc.song.pitchChannelCount + (isNoise || isMod ? 0 : 1);
            const newNoiseChannelCount = doc.song.noiseChannelCount + (!isNoise || isMod ? 0 : 1);
            const newModChannelCount = doc.song.modChannelCount + (isNoise || !isMod ? 0 : 1);
            if (newPitchChannelCount <= Config.pitchChannelCountMax && newNoiseChannelCount <= Config.noiseChannelCountMax && newModChannelCount <= Config.modChannelCountMax) {
                const addedChannelIndex = isNoise ? doc.song.pitchChannelCount + doc.song.noiseChannelCount : doc.song.pitchChannelCount;
                this.append(new ChangeChannelCount(doc, newPitchChannelCount, newNoiseChannelCount, newModChannelCount));
                if (addedChannelIndex - 1 >= index) {
                    this.append(new ChangeChannelOrder(doc, index, addedChannelIndex - 1, 1));
                }
                doc.synth.computeLatestModValues();
                doc.recalcChannelNames = true;
            }
        }
    }
    class ChangeRemoveChannel extends ChangeGroup {
        constructor(doc, minIndex, maxIndex) {
            super();
            const oldMax = maxIndex;
            for (let modChannel = doc.song.pitchChannelCount + doc.song.noiseChannelCount; modChannel < doc.song.channels.length; modChannel++) {
                for (let instrumentIndex = 0; instrumentIndex < doc.song.channels[modChannel].instruments.length; instrumentIndex++) {
                    const modInstrument = doc.song.channels[modChannel].instruments[instrumentIndex];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        if (modInstrument.modChannels[mod] >= minIndex && modInstrument.modChannels[mod] <= oldMax) {
                            this.append(new ChangeModChannel(doc, mod, 0, modInstrument));
                        }
                        else if (modInstrument.modChannels[mod] > oldMax) {
                            this.append(new ChangeModChannel(doc, mod, modInstrument.modChannels[mod] - (oldMax - minIndex + 1) + 2, modInstrument));
                        }
                    }
                }
            }
            while (maxIndex >= minIndex) {
                const isNoise = doc.song.getChannelIsNoise(maxIndex);
                const isMod = doc.song.getChannelIsMod(maxIndex);
                doc.song.channels.splice(maxIndex, 1);
                if (isNoise) {
                    doc.song.noiseChannelCount--;
                }
                else if (isMod) {
                    doc.song.modChannelCount--;
                }
                else {
                    doc.song.pitchChannelCount--;
                }
                maxIndex--;
            }
            if (doc.song.pitchChannelCount < Config.pitchChannelCountMin) {
                this.append(new ChangeChannelCount(doc, Config.pitchChannelCountMin, doc.song.noiseChannelCount, doc.song.modChannelCount));
            }
            ColorConfig.resetColors();
            doc.recalcChannelNames = true;
            this.append(new ChangeChannelBar(doc, Math.max(0, minIndex - 1), doc.bar));
            doc.synth.computeLatestModValues();
            this._didSomething();
            doc.notifier.changed();
        }
    }
    class ChangeChannelBar extends Change {
        constructor(doc, newChannel, newBar, silently = false) {
            super();
            const oldChannel = doc.channel;
            const oldBar = doc.bar;
            doc.channel = newChannel;
            doc.bar = newBar;
            if (!silently) {
                doc.selection.scrollToSelectedPattern();
            }
            if (doc.song.getChannelIsMod(doc.channel)) {
                const pattern = doc.song.getPattern(doc.channel, doc.bar);
                if (pattern != null)
                    doc.viewedInstrument[doc.channel] = pattern.instruments[0];
            }
            doc.notifier.changed();
            if (oldChannel != newChannel || oldBar != newBar) {
                this._didSomething();
            }
        }
    }
    class ChangeUnison extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.unison;
            if (oldValue != newValue) {
                instrument.unison = newValue;
                instrument.unisonVoices = Config.unisons[instrument.unison].voices;
                instrument.unisonSpread = Config.unisons[instrument.unison].spread;
                instrument.unisonOffset = Config.unisons[instrument.unison].offset;
                instrument.unisonExpression = Config.unisons[instrument.unison].expression;
                instrument.unisonSign = Config.unisons[instrument.unison].sign;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeUnisonVoices extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevUnison = instrument.unison;
            if (oldValue != newValue || prevUnison != Config.unisons.length) {
                instrument.unisonVoices = newValue;
                instrument.unison = Config.unisons.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeUnisonSpread extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevUnison = instrument.unison;
            if (oldValue != newValue || prevUnison != Config.unisons.length) {
                instrument.unisonSpread = newValue;
                instrument.unison = Config.unisons.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeUnisonOffset extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevUnison = instrument.unison;
            if (oldValue != newValue || prevUnison != Config.unisons.length) {
                instrument.unisonOffset = newValue;
                instrument.unison = Config.unisons.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeUnisonExpression extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevUnison = instrument.unison;
            if (oldValue != newValue || prevUnison != Config.unisons.length) {
                instrument.unisonExpression = newValue;
                instrument.unison = Config.unisons.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeUnisonSign extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevUnison = instrument.unison;
            if (oldValue != newValue || prevUnison != Config.unisons.length) {
                instrument.unisonSign = newValue;
                instrument.unison = Config.unisons.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChord extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.chord;
            if (oldValue != newValue) {
                this._didSomething();
                instrument.chord = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
            }
        }
    }
    class ChangeVibrato extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.vibrato;
            if (oldValue != newValue) {
                instrument.vibrato = newValue;
                instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;
                instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;
                instrument.vibratoSpeed = 10;
                instrument.vibratoType = Config.vibratos[instrument.vibrato].type;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeVibratoDepth extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevVibrato = instrument.vibrato;
            doc.synth.unsetMod(Config.modulators.dictionary["vibrato depth"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue || prevVibrato != Config.vibratos.length) {
                instrument.vibratoDepth = newValue / 25;
                instrument.vibrato = Config.vibratos.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeEnvelopeSpeed extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            doc.synth.unsetMod(Config.modulators.dictionary["envelope speed"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.envelopeSpeed = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeVibratoSpeed extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevVibrato = instrument.vibrato;
            doc.synth.unsetMod(Config.modulators.dictionary["vibrato speed"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue || prevVibrato != Config.vibratos.length) {
                instrument.vibratoSpeed = newValue;
                instrument.vibrato = Config.vibratos.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeVibratoDelay extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let prevVibrato = instrument.vibrato;
            doc.synth.unsetMod(Config.modulators.dictionary["vibrato delay"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue || prevVibrato != Config.vibratos.length) {
                instrument.vibratoDelay = newValue;
                instrument.vibrato = Config.vibratos.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeVibratoType extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.vibratoType;
            let prevVibrato = instrument.vibrato;
            doc.notifier.changed();
            if (oldValue != newValue || prevVibrato != Config.vibratos.length) {
                instrument.vibratoType = newValue;
                instrument.vibrato = Config.vibratos.length;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeArpeggioSpeed extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            instrument.arpeggioSpeed = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["arp speed"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeFastTwoNoteArp extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.fastTwoNoteArp;
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.fastTwoNoteArp = newValue;
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeClicklessTransition extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.clicklessTransition;
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.clicklessTransition = newValue;
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeAliasing extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.aliases;
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.aliases = newValue;
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeDiscreteEnvelope extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.discreteEnvelope;
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.discreteEnvelope = newValue;
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeSpectrum extends Change {
        constructor(doc, instrument, spectrumWave) {
            super();
            spectrumWave.markCustomWaveDirty();
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeHarmonics extends Change {
        constructor(doc, instrument, harmonicsWave) {
            super();
            harmonicsWave.markCustomWaveDirty();
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeDrumsetEnvelope extends Change {
        constructor(doc, drumIndex, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.drumsetEnvelopes[drumIndex];
            if (oldValue != newValue) {
                instrument.drumsetEnvelopes[drumIndex] = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeInstrumentSlider extends Change {
        constructor(_doc) {
            super();
            this._doc = _doc;
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
        }
        commit() {
            if (!this.isNoop()) {
                this._instrument.preset = this._instrument.type;
                this._doc.notifier.changed();
            }
        }
    }
    class ChangePulseWidth extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.pulseWidth = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["pulse width"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeDecimalOffset extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.decimalOffset = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSupersawDynamism extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.supersawDynamism = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["dynamism"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSupersawSpread extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.supersawSpread = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["spread"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSupersawShape extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.supersawShape = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["saw shape"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePitchShift extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.pitchShift = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeDetune extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.detune = newValue + Config.detuneCenter;
            doc.notifier.changed();
            doc.synth.unsetMod(Config.modulators.dictionary["detune"].index, doc.channel, doc.getCurrentInstrument());
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeDistortion extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.distortion = newValue;
            doc.notifier.changed();
            doc.synth.unsetMod(Config.modulators.dictionary["distortion"].index, doc.channel, doc.getCurrentInstrument());
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeBitcrusherFreq extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.bitcrusherFreq = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeBitcrusherQuantization extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.bitcrusherQuantization = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePhaserMix extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.phaserMix = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePhaserFreq extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.phaserFreq = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePhaserFeedback extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.phaserFeedback = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePhaserStages extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.phaserStages = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeStringSustain extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.stringSustain = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["sustain"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeStringSustainType extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.stringSustainType;
            if (oldValue != newValue) {
                instrument.stringSustainType = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeEQFilterType extends Change {
        constructor(doc, instrument, newValue) {
            super();
            instrument.eqFilterType = newValue;
            if (newValue == true) {
                instrument.eqFilter.reset();
                instrument.tmpEqFilterStart = instrument.eqFilter;
                instrument.tmpEqFilterEnd = null;
            }
            else {
                instrument.eqFilter.convertLegacySettings(instrument.eqFilterSimpleCut, instrument.eqFilterSimplePeak, Config.envelopes.dictionary["none"]);
                instrument.tmpEqFilterStart = instrument.eqFilter;
                instrument.tmpEqFilterEnd = null;
            }
            instrument.clearInvalidEnvelopeTargets();
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeNoteFilterType extends Change {
        constructor(doc, instrument, newValue) {
            super();
            instrument.noteFilterType = newValue;
            if (newValue == true) {
                instrument.noteFilter.reset();
                instrument.tmpNoteFilterStart = instrument.noteFilter;
                instrument.tmpNoteFilterEnd = null;
            }
            else {
                instrument.noteFilter.convertLegacySettings(instrument.noteFilterSimpleCut, instrument.noteFilterSimplePeak, Config.envelopes.dictionary["none"]);
                instrument.tmpNoteFilterStart = instrument.noteFilter;
                instrument.tmpNoteFilterEnd = null;
            }
            instrument.clearInvalidEnvelopeTargets();
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeEQFilterSimpleCut extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.eqFilterSimpleCut = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["eq filt cut"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeEQFilterSimplePeak extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.eqFilterSimplePeak = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["eq filt peak"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeNoteFilterSimpleCut extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.noteFilterSimpleCut = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["note filt cut"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeNoteFilterSimplePeak extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.noteFilterSimplePeak = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["note filt peak"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeFilterAddPoint extends UndoableChange {
        constructor(doc, filterSettings, point, index, isNoteFilter, deletion = false) {
            super(deletion);
            this._envelopeTargetsAdd = [];
            this._envelopeIndicesAdd = [];
            this._envelopeTargetsRemove = [];
            this._envelopeIndicesRemove = [];
            this._doc = doc;
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            this._instrumentNextPreset = deletion ? this._instrument.preset : this._instrument.type;
            this._instrumentPrevPreset = deletion ? this._instrument.type : this._instrument.preset;
            this._filterSettings = filterSettings;
            this._point = point;
            this._index = index;
            for (let envelopeIndex = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {
                let target = this._instrument.envelopes[envelopeIndex].target;
                let targetIndex = this._instrument.envelopes[envelopeIndex].index;
                this._envelopeTargetsAdd.push(target);
                this._envelopeIndicesAdd.push(targetIndex);
                if (deletion) {
                    const automationTarget = Config.instrumentAutomationTargets[target];
                    if (automationTarget.isFilter && (automationTarget.effect == 5) == isNoteFilter) {
                        if (automationTarget.maxCount == Config.filterMaxPoints) {
                            if (targetIndex == index) {
                                target = Config.instrumentAutomationTargets.dictionary["none"].index;
                                targetIndex = 0;
                            }
                            else if (targetIndex > index) {
                                targetIndex--;
                            }
                        }
                        else {
                            if (filterSettings.controlPointCount <= 1) {
                                target = Config.instrumentAutomationTargets.dictionary["none"].index;
                                targetIndex = 0;
                            }
                        }
                    }
                }
                this._envelopeTargetsRemove.push(target);
                this._envelopeIndicesRemove.push(targetIndex);
            }
            this._didSomething();
            this.redo();
        }
        _doForwards() {
            this._filterSettings.controlPoints.splice(this._index, 0, this._point);
            this._filterSettings.controlPointCount++;
            this._filterSettings.controlPoints.length = this._filterSettings.controlPointCount;
            this._instrument.preset = this._instrumentNextPreset;
            for (let envelopeIndex = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {
                this._instrument.envelopes[envelopeIndex].target = this._envelopeTargetsAdd[envelopeIndex];
                this._instrument.envelopes[envelopeIndex].index = this._envelopeIndicesAdd[envelopeIndex];
            }
            this._instrument.tmpEqFilterStart = this._instrument.eqFilter;
            this._instrument.tmpEqFilterEnd = null;
            this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;
            this._instrument.tmpNoteFilterEnd = null;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._filterSettings.controlPoints.splice(this._index, 1);
            this._filterSettings.controlPointCount--;
            this._filterSettings.controlPoints.length = this._filterSettings.controlPointCount;
            this._instrument.preset = this._instrumentPrevPreset;
            for (let envelopeIndex = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {
                this._instrument.envelopes[envelopeIndex].target = this._envelopeTargetsRemove[envelopeIndex];
                this._instrument.envelopes[envelopeIndex].index = this._envelopeIndicesRemove[envelopeIndex];
            }
            this._instrument.tmpEqFilterStart = this._instrument.eqFilter;
            this._instrument.tmpEqFilterEnd = null;
            this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;
            this._instrument.tmpNoteFilterEnd = null;
            this._doc.notifier.changed();
        }
    }
    class FilterMoveData {
        constructor(usePoint, useFreq, useGain) {
            this.point = usePoint;
            this.freq = useFreq;
            this.gain = useGain;
        }
    }
    class ChangeFilterMovePoint extends UndoableChange {
        constructor(doc, point, oldFreq, newFreq, oldGain, newGain, useNoteFilter, pointIndex) {
            super(false);
            this._doc = doc;
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            this._instrumentNextPreset = this._instrument.type;
            this._instrumentPrevPreset = this._instrument.preset;
            this._point = point;
            this._oldFreq = oldFreq;
            this._newFreq = newFreq;
            this._oldGain = oldGain;
            this._newGain = newGain;
            this.useNoteFilter = useNoteFilter;
            this.pointIndex = pointIndex;
            this.pointType = point.type;
            this._didSomething();
            this.redo();
        }
        getMoveData(beforeChange) {
            if (beforeChange) {
                return new FilterMoveData(this._point, this._oldFreq, this._oldGain);
            }
            return new FilterMoveData(this._point, this._newFreq, this._newGain);
        }
        _doForwards() {
            this._point.freq = this._newFreq;
            this._point.gain = this._newGain;
            this._instrument.preset = this._instrumentNextPreset;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._point.freq = this._oldFreq;
            this._point.gain = this._oldGain;
            this._instrument.preset = this._instrumentPrevPreset;
            this._doc.notifier.changed();
        }
    }
    class ChangeFilterSettings extends UndoableChange {
        constructor(doc, settings, oldSettings, useNoteFilter, subFilters = null, oldSubFilters = null) {
            super(false);
            this._doc = doc;
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            this._instrumentNextPreset = this._instrument.type;
            this._instrumentPrevPreset = this._instrument.preset;
            this._oldSettings = oldSettings;
            this._useNoteFilter = useNoteFilter;
            this._filterSettings = settings;
            if (subFilters != null && oldSubFilters != null) {
                this._subFilters = subFilters;
                this._oldSubFilters = oldSubFilters;
            }
            this._instrument.clearInvalidEnvelopeTargets();
            this._didSomething();
            this.redo();
        }
        _doForwards() {
            if (this._useNoteFilter) {
                this._instrument.noteFilter = this._filterSettings;
                if (this._subFilters != null)
                    this._instrument.noteSubFilters = this._subFilters;
                this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;
                this._instrument.tmpNoteFilterEnd = null;
            }
            else {
                this._instrument.eqFilter = this._filterSettings;
                if (this._subFilters != null)
                    this._instrument.eqSubFilters = this._subFilters;
                this._instrument.tmpEqFilterStart = this._instrument.eqFilter;
                this._instrument.tmpEqFilterEnd = null;
            }
            this._instrument.preset = this._instrumentNextPreset;
            this._instrument.clearInvalidEnvelopeTargets();
            this._doc.notifier.changed();
        }
        _doBackwards() {
            if (this._useNoteFilter) {
                this._instrument.noteFilter = this._oldSettings;
                if (this._oldSubFilters != null)
                    this._instrument.noteSubFilters = this._oldSubFilters;
                this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;
                this._instrument.tmpNoteFilterEnd = null;
            }
            else {
                this._instrument.eqFilter = this._oldSettings;
                if (this._oldSubFilters != null)
                    this._instrument.eqSubFilters = this._oldSubFilters;
                this._instrument.tmpEqFilterStart = this._instrument.eqFilter;
                this._instrument.tmpEqFilterEnd = null;
            }
            this._instrument.preset = this._instrumentPrevPreset;
            this._instrument.clearInvalidEnvelopeTargets();
            this._doc.notifier.changed();
        }
    }
    class ChangeFadeInOut extends UndoableChange {
        constructor(doc, fadeIn, fadeOut) {
            super(false);
            this._doc = doc;
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            this._instrumentNextPreset = this._instrument.type;
            this._instrumentPrevPreset = this._instrument.preset;
            this._oldFadeIn = this._instrument.fadeIn;
            this._oldFadeOut = this._instrument.fadeOut;
            this._newFadeIn = fadeIn;
            this._newFadeOut = fadeOut;
            this._didSomething();
            this.redo();
        }
        _doForwards() {
            this._instrument.fadeIn = this._newFadeIn;
            this._instrument.fadeOut = this._newFadeOut;
            this._instrument.preset = this._instrumentNextPreset;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._instrument.fadeIn = this._oldFadeIn;
            this._instrument.fadeOut = this._oldFadeOut;
            this._instrument.preset = this._instrumentPrevPreset;
            this._doc.notifier.changed();
        }
    }
    class ChangeAlgorithm extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.algorithm;
            if (oldValue != newValue) {
                instrument.algorithm = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeFeedbackType extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.feedbackType;
            if (oldValue != newValue) {
                instrument.feedbackType = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class Change6OpAlgorithm extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.algorithm6Op;
            if (oldValue != newValue) {
                instrument.algorithm6Op = newValue;
                if (newValue != 0) {
                    instrument.customAlgorithm.fromPreset(newValue);
                }
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class Change6OpFeedbackType extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.feedbackType6Op;
            if (oldValue != newValue) {
                instrument.feedbackType6Op = newValue;
                if (newValue != 0) {
                    instrument.customFeedbackType.fromPreset(newValue);
                }
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeOperatorWaveform extends Change {
        constructor(doc, operatorIndex, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.operators[operatorIndex].waveform;
            if (oldValue != newValue) {
                instrument.operators[operatorIndex].waveform = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeOperatorPulseWidth extends Change {
        constructor(doc, operatorIndex, oldValue, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            instrument.operators[operatorIndex].pulseWidth = newValue;
            doc.notifier.changed();
            if (oldValue != newValue) {
                instrument.preset = instrument.type;
                this._didSomething();
            }
        }
    }
    class ChangeOperatorFrequency extends Change {
        constructor(doc, operatorIndex, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.operators[operatorIndex].frequency;
            if (oldValue != newValue) {
                instrument.operators[operatorIndex].frequency = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeOperatorAmplitude extends ChangeInstrumentSlider {
        constructor(doc, operatorIndex, oldValue, newValue) {
            super(doc);
            this.operatorIndex = 0;
            this.operatorIndex = operatorIndex;
            this._instrument.operators[operatorIndex].amplitude = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeFeedbackAmplitude extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.feedbackAmplitude = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeAddChannelInstrument extends Change {
        constructor(doc) {
            super();
            const channel = doc.song.channels[doc.channel];
            const isNoise = doc.song.getChannelIsNoise(doc.channel);
            const isMod = doc.song.getChannelIsMod(doc.channel);
            const maxInstruments = doc.song.getMaxInstrumentsPerChannel();
            if (channel.instruments.length >= maxInstruments)
                return;
            const presetValue = pickRandomPresetValue(isNoise);
            const preset = EditorConfig.valueToPreset(presetValue);
            const instrument = new Instrument(isNoise, isMod);
            instrument.fromJsonObject(preset.settings, isNoise, isMod, false, false, 1);
            instrument.preset = presetValue;
            instrument.effects |= 1 << 2;
            instrument.volume = 0;
            channel.instruments.push(instrument);
            if (!isMod) {
                doc.viewedInstrument[doc.channel] = channel.instruments.length - 1;
            }
            for (let channelIndex = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                for (let instrumentIndex = 0; instrumentIndex < doc.song.channels[channelIndex].instruments.length; instrumentIndex++) {
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        let instrument = doc.song.channels[channelIndex].instruments[instrumentIndex];
                        let modInstrument = instrument.modInstruments[mod];
                        let modChannel = instrument.modChannels[mod];
                        if (modChannel == doc.channel && modInstrument >= doc.song.channels[modChannel].instruments.length - 1) {
                            instrument.modInstruments[mod]++;
                        }
                    }
                }
            }
            doc.synth.computeLatestModValues();
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeRemoveChannelInstrument extends Change {
        constructor(doc) {
            super();
            const channel = doc.song.channels[doc.channel];
            if (channel.instruments.length <= Config.instrumentCountMin)
                return;
            const removedIndex = doc.viewedInstrument[doc.channel];
            channel.instruments.splice(removedIndex, 1);
            if (doc.song.patternInstruments) {
                for (const pattern of channel.patterns) {
                    for (let i = 0; i < pattern.instruments.length; i++) {
                        if (pattern.instruments[i] == removedIndex) {
                            pattern.instruments.splice(i, 1);
                            i--;
                        }
                        else if (pattern.instruments[i] > removedIndex) {
                            pattern.instruments[i]--;
                        }
                    }
                    if (pattern.instruments.length <= 0) {
                        pattern.instruments[0] = 0;
                    }
                }
            }
            for (let channelIndex = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                for (let instrumentIdx = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        let instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];
                        let modInstrument = instrument.modInstruments[mod];
                        let modChannel = instrument.modChannels[mod];
                        if (modChannel == doc.channel) {
                            if (modInstrument > removedIndex) {
                                instrument.modInstruments[mod]--;
                            }
                            else if (modInstrument == removedIndex) {
                                instrument.modInstruments[mod] = 0;
                                instrument.modulators[mod] = 0;
                            }
                        }
                    }
                }
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeViewInstrument extends Change {
        constructor(doc, index) {
            super();
            if (doc.viewedInstrument[doc.channel] != index) {
                doc.viewedInstrument[doc.channel] = index;
                if (doc.channel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount)
                    doc.recentPatternInstruments[doc.channel] = [index];
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeInstrumentsFlags extends Change {
        constructor(doc, newLayeredInstruments, newPatternInstruments) {
            super();
            const oldLayeredInstruments = doc.song.layeredInstruments;
            const oldPatternInstruments = doc.song.patternInstruments;
            if (oldLayeredInstruments == newLayeredInstruments && oldPatternInstruments == newPatternInstruments)
                return;
            doc.song.layeredInstruments = newLayeredInstruments;
            doc.song.patternInstruments = newPatternInstruments;
            for (let channelIndex = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                const channel = doc.song.channels[channelIndex];
                if (channel.instruments.length > doc.song.getMaxInstrumentsPerChannel()) {
                    channel.instruments.length = doc.song.getMaxInstrumentsPerChannel();
                }
                for (let j = 0; j < doc.song.patternsPerChannel; j++) {
                    const pattern = channel.patterns[j];
                    if (!oldPatternInstruments && newPatternInstruments) {
                        for (let i = 0; i < channel.instruments.length; i++) {
                            pattern.instruments[i] = i;
                        }
                        pattern.instruments.length = channel.instruments.length;
                    }
                    discardInvalidPatternInstruments(pattern.instruments, doc.song, channelIndex);
                }
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeKey extends Change {
        constructor(doc, newValue) {
            super();
            if (doc.song.key != newValue) {
                doc.song.key = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeLoop extends Change {
        constructor(_doc, oldStart, oldLength, newStart, newLength) {
            super();
            this._doc = _doc;
            this.oldStart = oldStart;
            this.oldLength = oldLength;
            this.newStart = newStart;
            this.newLength = newLength;
            this._doc.song.loopStart = this.newStart;
            this._doc.song.loopLength = this.newLength;
            this._doc.notifier.changed();
            if (this.oldStart != this.newStart || this.oldLength != this.newLength) {
                this._didSomething();
            }
        }
    }
    class ChangePitchAdded extends UndoableChange {
        constructor(doc, note, pitch, index, deletion = false) {
            super(deletion);
            this._doc = doc;
            this._note = note;
            this._pitch = pitch;
            this._index = index;
            this._didSomething();
            this.redo();
        }
        _doForwards() {
            this._note.pitches.splice(this._index, 0, this._pitch);
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._note.pitches.splice(this._index, 1);
            this._doc.notifier.changed();
        }
    }
    class ChangeOctave extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            this.oldValue = oldValue;
            doc.song.channels[doc.channel].octave = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeRhythm extends ChangeGroup {
        constructor(doc, newValue) {
            super();
            if (doc.song.rhythm != newValue) {
                doc.song.rhythm = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangePaste extends ChangeGroup {
        constructor(doc, pattern, notes, selectionStart, selectionEnd, oldPartDuration) {
            super();
            this.append(new ChangeNoteTruncate(doc, pattern, selectionStart, selectionEnd, null, true));
            let noteInsertionIndex = 0;
            if (!doc.song.getChannelIsMod(doc.channel)) {
                for (let i = 0; i < pattern.notes.length; i++) {
                    if (pattern.notes[i].start < selectionStart) {
                        if (pattern.notes[i].end > selectionStart)
                            throw new Error();
                        noteInsertionIndex = i + 1;
                    }
                    else if (pattern.notes[i].start < selectionEnd) {
                        throw new Error();
                    }
                }
            }
            else {
                noteInsertionIndex = pattern.notes.length;
            }
            while (selectionStart < selectionEnd) {
                for (const noteObject of notes) {
                    const noteStart = noteObject["start"] + selectionStart;
                    const noteEnd = noteObject["end"] + selectionStart;
                    if (noteStart >= selectionEnd)
                        break;
                    const note = new Note(noteObject["pitches"][0], noteStart, noteEnd, noteObject["pins"][0]["size"], false);
                    note.pitches.length = 0;
                    for (const pitch of noteObject["pitches"]) {
                        note.pitches.push(pitch);
                    }
                    note.pins.length = 0;
                    for (const pin of noteObject["pins"]) {
                        note.pins.push(makeNotePin(pin.interval, pin.time, pin.size));
                    }
                    note.continuesLastPattern = (noteObject["continuesLastPattern"] === true) && (note.start == 0);
                    pattern.notes.splice(noteInsertionIndex++, 0, note);
                    if (note.end > selectionEnd) {
                        this.append(new ChangeNoteLength(doc, note, note.start, selectionEnd));
                    }
                }
                selectionStart += oldPartDuration;
            }
            if (pattern != null && doc.song.getChannelIsMod(doc.channel))
                pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangePasteInstrument extends ChangeGroup {
        constructor(doc, instrument, instrumentCopy) {
            super();
            instrument.fromJsonObject(instrumentCopy, instrumentCopy["isDrum"], instrumentCopy["isMod"], false, false);
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeAppendInstrument extends ChangeGroup {
        constructor(doc, channel, instrument) {
            super();
            let newInstrument = new Instrument(instrument["isDrum"], instrument["isMod"]);
            newInstrument.fromJsonObject(instrument, instrument["isDrum"], instrument["isMod"], false, false);
            channel.instruments.push(newInstrument);
            this._didSomething();
            doc.notifier.changed();
        }
    }
    class ChangeSetPatternInstruments extends Change {
        constructor(doc, channelIndex, instruments, pattern) {
            super();
            if (!patternsContainSameInstruments(instruments, pattern.instruments)) {
                pattern.instruments.length = 0;
                pattern.instruments.push(...instruments);
                discardInvalidPatternInstruments(pattern.instruments, doc.song, channelIndex);
                this._didSomething();
                doc.notifier.changed();
            }
        }
    }
    class ChangeModChannel extends Change {
        constructor(doc, mod, index, useInstrument) {
            super();
            let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (useInstrument != undefined)
                instrument = useInstrument;
            if (index == 0 || (Config.modulators[instrument.modulators[mod]].forSong && index >= 2) || (!Config.modulators[instrument.modulators[mod]].forSong && index < 2)) {
                instrument.modulators[mod] = Config.modulators.dictionary["none"].index;
            }
            instrument.modChannels[mod] = index - 2;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeModInstrument extends Change {
        constructor(doc, mod, tgtInstrument) {
            super();
            let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.modInstruments[mod] != tgtInstrument) {
                instrument.modInstruments[mod] = tgtInstrument;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeModSetting extends Change {
        constructor(doc, mod, text) {
            super();
            let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            let tgtChannel = instrument.modChannels[mod];
            let usedInstruments = [];
            if (tgtChannel >= 0) {
                if (instrument.modInstruments[mod] == doc.song.channels[tgtChannel].instruments.length) {
                    usedInstruments = usedInstruments.concat(doc.song.channels[tgtChannel].instruments);
                }
                else if (instrument.modInstruments[mod] > doc.song.channels[tgtChannel].instruments.length) {
                    let tgtPattern = doc.song.getPattern(tgtChannel, doc.bar);
                    if (tgtPattern != null) {
                        for (let i = 0; i < tgtPattern.instruments.length; i++) {
                            usedInstruments.push(doc.song.channels[tgtChannel].instruments[tgtPattern.instruments[i]]);
                        }
                    }
                }
                else {
                    usedInstruments.push(doc.song.channels[tgtChannel].instruments[instrument.modInstruments[mod]]);
                }
            }
            if (text.startsWith("+ ")) {
                text = text.substr(2);
                for (let i = 0; i < usedInstruments.length; i++) {
                    const tgtInstrument = usedInstruments[i];
                    if (!(tgtInstrument.effects & (1 << Config.modulators.dictionary[text].associatedEffect))) {
                        doc.record(new ChangeToggleEffects(doc, Config.modulators.dictionary[text].associatedEffect, tgtInstrument));
                    }
                }
            }
            let setting = Config.modulators.dictionary[text].index;
            if (instrument.modulators[mod] != setting) {
                instrument.modulators[mod] = setting;
                let cap = Config.modulators[setting].maxRawVol;
                for (let i = 0; i < doc.song.patternsPerChannel; i++) {
                    const pattern = doc.song.channels[doc.channel].patterns[i];
                    if (pattern.instruments[0] == doc.getCurrentInstrument()) {
                        for (let j = 0; j < pattern.notes.length; j++) {
                            const note = pattern.notes[j];
                            if (note.pitches[0] == Config.modCount - mod - 1) {
                                for (let k = 0; k < note.pins.length; k++) {
                                    const pin = note.pins[k];
                                    if (pin.size > cap)
                                        pin.size = cap;
                                }
                            }
                        }
                    }
                }
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeModFilter extends Change {
        constructor(doc, mod, type) {
            super();
            let instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.modFilterTypes[mod] != type) {
                instrument.modFilterTypes[mod] = type;
                let cap = doc.song.getVolumeCapForSetting(true, instrument.modulators[mod], instrument.modFilterTypes[mod]);
                for (let i = 0; i < doc.song.patternsPerChannel; i++) {
                    const pattern = doc.song.channels[doc.channel].patterns[i];
                    if (pattern.instruments[0] == doc.getCurrentInstrument()) {
                        for (let j = 0; j < pattern.notes.length; j++) {
                            const note = pattern.notes[j];
                            if (note.pitches[0] == Config.modCount - mod - 1) {
                                for (let k = 0; k < note.pins.length; k++) {
                                    const pin = note.pins[k];
                                    if (pin.size > cap)
                                        pin.size = cap;
                                }
                            }
                        }
                    }
                }
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangePatternsPerChannel extends Change {
        constructor(doc, newValue) {
            super();
            if (doc.song.patternsPerChannel != newValue) {
                for (let i = 0; i < doc.song.getChannelCount(); i++) {
                    const channelBars = doc.song.channels[i].bars;
                    const channelPatterns = doc.song.channels[i].patterns;
                    for (let j = 0; j < channelBars.length; j++) {
                        if (channelBars[j] > newValue)
                            channelBars[j] = 0;
                    }
                    for (let j = channelPatterns.length; j < newValue; j++) {
                        channelPatterns[j] = new Pattern();
                    }
                    channelPatterns.length = newValue;
                }
                doc.song.patternsPerChannel = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeEnsurePatternExists extends UndoableChange {
        constructor(doc, channelIndex, bar) {
            super(false);
            this._patternOldNotes = null;
            this._oldPatternInstruments = null;
            const song = doc.song;
            if (song.channels[channelIndex].bars[bar] != 0)
                return;
            this._doc = doc;
            this._bar = bar;
            this._channelIndex = channelIndex;
            this._oldPatternCount = song.patternsPerChannel;
            this._newPatternCount = song.patternsPerChannel;
            if (channelIndex < doc.song.pitchChannelCount + doc.song.noiseChannelCount)
                this._newPatternInstruments = doc.recentPatternInstruments[channelIndex].concat();
            else
                this._newPatternInstruments = [doc.viewedInstrument[channelIndex]];
            let firstEmptyUnusedIndex = null;
            let firstUnusedIndex = null;
            for (let patternIndex = 1; patternIndex <= song.patternsPerChannel; patternIndex++) {
                let used = false;
                for (let barIndex = 0; barIndex < song.barCount; barIndex++) {
                    if (song.channels[channelIndex].bars[barIndex] == patternIndex) {
                        used = true;
                        break;
                    }
                }
                if (used)
                    continue;
                if (firstUnusedIndex == null) {
                    firstUnusedIndex = patternIndex;
                }
                const pattern = song.channels[channelIndex].patterns[patternIndex - 1];
                if (pattern.notes.length == 0) {
                    firstEmptyUnusedIndex = patternIndex;
                    break;
                }
            }
            if (firstEmptyUnusedIndex != null) {
                this._patternIndex = firstEmptyUnusedIndex;
                this._oldPatternInstruments = song.channels[channelIndex].patterns[firstEmptyUnusedIndex - 1].instruments.concat();
            }
            else if (song.patternsPerChannel < song.barCount) {
                this._newPatternCount = song.patternsPerChannel + 1;
                this._patternIndex = song.patternsPerChannel + 1;
            }
            else if (firstUnusedIndex != null) {
                this._patternIndex = firstUnusedIndex;
                this._patternOldNotes = song.channels[channelIndex].patterns[firstUnusedIndex - 1].notes;
                this._oldPatternInstruments = song.channels[channelIndex].patterns[firstUnusedIndex - 1].instruments.concat();
            }
            else {
                throw new Error();
            }
            this._didSomething();
            this._doForwards();
        }
        _doForwards() {
            const song = this._doc.song;
            for (let j = song.patternsPerChannel; j < this._newPatternCount; j++) {
                for (let i = 0; i < song.getChannelCount(); i++) {
                    song.channels[i].patterns[j] = new Pattern();
                }
            }
            song.patternsPerChannel = this._newPatternCount;
            const pattern = song.channels[this._channelIndex].patterns[this._patternIndex - 1];
            pattern.notes = [];
            pattern.instruments.length = 0;
            pattern.instruments.push(...this._newPatternInstruments);
            song.channels[this._channelIndex].bars[this._bar] = this._patternIndex;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            const song = this._doc.song;
            const pattern = song.channels[this._channelIndex].patterns[this._patternIndex - 1];
            if (this._patternOldNotes != null)
                pattern.notes = this._patternOldNotes;
            if (this._oldPatternInstruments != null) {
                pattern.instruments.length = 0;
                pattern.instruments.push(...this._oldPatternInstruments);
            }
            song.channels[this._channelIndex].bars[this._bar] = 0;
            for (let i = 0; i < song.getChannelCount(); i++) {
                song.channels[i].patterns.length = this._oldPatternCount;
            }
            song.patternsPerChannel = this._oldPatternCount;
            this._doc.notifier.changed();
        }
    }
    class ChangePinTime extends ChangePins {
        constructor(doc, note, pinIndex, shiftedTime, continuesLastPattern) {
            super(doc, note);
            shiftedTime -= this._oldStart;
            const originalTime = this._oldPins[pinIndex].time;
            const skipStart = Math.min(originalTime, shiftedTime);
            const skipEnd = Math.max(originalTime, shiftedTime);
            let setPin = false;
            for (let i = 0; i < this._oldPins.length; i++) {
                const oldPin = note.pins[i];
                const time = oldPin.time;
                if (time < skipStart) {
                    this._newPins.push(makeNotePin(oldPin.interval, time, oldPin.size));
                }
                else if (time > skipEnd) {
                    if (!setPin) {
                        if (this._newPins.length > 0)
                            continuesLastPattern = note.continuesLastPattern;
                        this._newPins.push(makeNotePin(this._oldPins[pinIndex].interval, shiftedTime, this._oldPins[pinIndex].size));
                        setPin = true;
                    }
                    this._newPins.push(makeNotePin(oldPin.interval, time, oldPin.size));
                }
            }
            if (!setPin) {
                continuesLastPattern = note.continuesLastPattern;
                this._newPins.push(makeNotePin(this._oldPins[pinIndex].interval, shiftedTime, this._oldPins[pinIndex].size));
            }
            this._finishSetup(continuesLastPattern);
        }
    }
    class ChangePitchBend extends ChangePins {
        constructor(doc, note, bendStart, bendEnd, bendTo, pitchIndex) {
            super(doc, note);
            bendStart -= this._oldStart;
            bendEnd -= this._oldStart;
            bendTo -= note.pitches[pitchIndex];
            let setStart = false;
            let setEnd = false;
            let prevInterval = 0;
            let prevSize = Config.noteSizeMax;
            let persist = true;
            let i;
            let direction;
            let stop;
            let push;
            if (bendEnd > bendStart) {
                i = 0;
                direction = 1;
                stop = note.pins.length;
                push = (item) => { this._newPins.push(item); };
            }
            else {
                i = note.pins.length - 1;
                direction = -1;
                stop = -1;
                push = (item) => { this._newPins.unshift(item); };
            }
            for (; i != stop; i += direction) {
                const oldPin = note.pins[i];
                const time = oldPin.time;
                for (;;) {
                    if (!setStart) {
                        if (time * direction <= bendStart * direction) {
                            prevInterval = oldPin.interval;
                            prevSize = oldPin.size;
                        }
                        if (time * direction < bendStart * direction) {
                            push(makeNotePin(oldPin.interval, time, oldPin.size));
                            break;
                        }
                        else {
                            push(makeNotePin(prevInterval, bendStart, prevSize));
                            setStart = true;
                        }
                    }
                    else if (!setEnd) {
                        if (time * direction <= bendEnd * direction) {
                            prevInterval = oldPin.interval;
                            prevSize = oldPin.size;
                        }
                        if (time * direction < bendEnd * direction) {
                            break;
                        }
                        else {
                            push(makeNotePin(bendTo, bendEnd, prevSize));
                            setEnd = true;
                        }
                    }
                    else {
                        if (time * direction == bendEnd * direction) {
                            break;
                        }
                        else {
                            if (oldPin.interval != prevInterval)
                                persist = false;
                            push(makeNotePin(persist ? bendTo : oldPin.interval, time, oldPin.size));
                            break;
                        }
                    }
                }
            }
            if (!setEnd) {
                push(makeNotePin(bendTo, bendEnd, prevSize));
            }
            this._finishSetup();
        }
    }
    class ChangePatternRhythm extends ChangeSequence {
        constructor(doc, pattern) {
            super();
            const minDivision = Config.partsPerBeat / Config.rhythms[doc.song.rhythm].stepsPerBeat;
            const changeRhythm = function (oldTime) {
                let thresholds = Config.rhythms[doc.song.rhythm].roundUpThresholds;
                if (thresholds != null) {
                    const beatStart = Math.floor(oldTime / Config.partsPerBeat) * Config.partsPerBeat;
                    const remainder = oldTime - beatStart;
                    let newTime = beatStart;
                    for (const threshold of thresholds) {
                        if (remainder >= threshold) {
                            newTime += minDivision;
                        }
                        else {
                            break;
                        }
                    }
                    return newTime;
                }
                else {
                    return Math.round(oldTime / minDivision) * minDivision;
                }
            };
            let i = 0;
            while (i < pattern.notes.length) {
                const note = pattern.notes[i];
                if (changeRhythm(note.start) >= changeRhythm(note.end)) {
                    this.append(new ChangeNoteAdded(doc, pattern, note, i, true));
                }
                else {
                    this.append(new ChangeRhythmNote(doc, note, changeRhythm));
                    i++;
                }
            }
        }
    }
    class ChangeRhythmNote extends ChangePins {
        constructor(doc, note, changeRhythm) {
            super(doc, note);
            for (const oldPin of this._oldPins) {
                this._newPins.push(makeNotePin(oldPin.interval, changeRhythm(oldPin.time + this._oldStart) - this._oldStart, oldPin.size));
            }
            this._finishSetup();
        }
    }
    class ChangeMoveNotesSideways extends ChangeGroup {
        constructor(doc, beatsToMove, strategy) {
            super();
            let partsToMove = Math.round((beatsToMove % doc.song.beatsPerBar) * Config.partsPerBeat);
            if (partsToMove < 0)
                partsToMove += doc.song.beatsPerBar * Config.partsPerBeat;
            if (partsToMove == 0.0)
                return;
            switch (strategy) {
                case "wrapAround":
                    {
                        const partsPerBar = Config.partsPerBeat * doc.song.beatsPerBar;
                        for (const channel of doc.song.channels) {
                            for (const pattern of channel.patterns) {
                                const newNotes = [];
                                for (let bar = 1; bar >= 0; bar--) {
                                    const barStartPart = bar * partsPerBar;
                                    for (const oldNote of pattern.notes) {
                                        const absoluteNoteStart = oldNote.start + partsToMove;
                                        const absoluteNoteEnd = oldNote.end + partsToMove;
                                        const noteStartPart = Math.max(0, absoluteNoteStart - barStartPart);
                                        const noteEndPart = Math.min(partsPerBar, absoluteNoteEnd - barStartPart);
                                        if (noteStartPart < noteEndPart) {
                                            projectNoteIntoBar(oldNote, absoluteNoteStart - barStartPart - noteStartPart, noteStartPart, noteEndPart, newNotes);
                                        }
                                    }
                                }
                                pattern.notes = newNotes;
                            }
                        }
                    }
                    break;
                case "overflow":
                    {
                        let originalBarCount = doc.song.barCount;
                        let originalLoopStart = doc.song.loopStart;
                        let originalLoopLength = doc.song.loopLength;
                        this.append(new ChangeMoveAndOverflowNotes(doc, doc.song.beatsPerBar, partsToMove));
                        if (beatsToMove < 0) {
                            let firstBarIsEmpty = true;
                            for (const channel of doc.song.channels) {
                                if (channel.bars[0] != 0)
                                    firstBarIsEmpty = false;
                            }
                            if (firstBarIsEmpty) {
                                for (const channel of doc.song.channels) {
                                    channel.bars.shift();
                                }
                                doc.song.barCount--;
                            }
                            else {
                                originalBarCount++;
                                originalLoopStart++;
                                doc.bar++;
                            }
                        }
                        while (doc.song.barCount < originalBarCount) {
                            for (const channel of doc.song.channels) {
                                channel.bars.push(0);
                            }
                            doc.song.barCount++;
                        }
                        doc.song.loopStart = originalLoopStart;
                        doc.song.loopLength = originalLoopLength;
                    }
                    break;
                default: throw new Error("Unrecognized beats-per-bar conversion strategy.");
            }
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeBeatsPerBar extends ChangeGroup {
        constructor(doc, newValue, strategy) {
            super();
            if (doc.song.beatsPerBar != newValue) {
                switch (strategy) {
                    case "splice":
                        {
                            if (doc.song.beatsPerBar > newValue) {
                                const sequence = new ChangeSequence();
                                for (let i = 0; i < doc.song.getChannelCount(); i++) {
                                    for (let j = 0; j < doc.song.channels[i].patterns.length; j++) {
                                        sequence.append(new ChangeNoteTruncate(doc, doc.song.channels[i].patterns[j], newValue * Config.partsPerBeat, doc.song.beatsPerBar * Config.partsPerBeat, null, true));
                                    }
                                }
                            }
                        }
                        break;
                    case "stretch":
                        {
                            const changeRhythm = function (oldTime) {
                                return Math.round(oldTime * newValue / doc.song.beatsPerBar);
                            };
                            for (let channelIndex = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {
                                for (let patternIndex = 0; patternIndex < doc.song.channels[channelIndex].patterns.length; patternIndex++) {
                                    const pattern = doc.song.channels[channelIndex].patterns[patternIndex];
                                    let noteIndex = 0;
                                    while (noteIndex < pattern.notes.length) {
                                        const note = pattern.notes[noteIndex];
                                        if (changeRhythm(note.start) >= changeRhythm(note.end)) {
                                            this.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));
                                        }
                                        else {
                                            this.append(new ChangeRhythmNote(doc, note, changeRhythm));
                                            noteIndex++;
                                        }
                                    }
                                }
                            }
                            this.append(new ChangeTempo(doc, doc.song.tempo, doc.song.tempo * newValue / doc.song.beatsPerBar));
                        }
                        break;
                    case "overflow":
                        {
                            this.append(new ChangeMoveAndOverflowNotes(doc, newValue, 0));
                            doc.song.loopStart = 0;
                            doc.song.loopLength = doc.song.barCount;
                        }
                        break;
                    default: throw new Error("Unrecognized beats-per-bar conversion strategy.");
                }
                doc.song.beatsPerBar = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeScale extends ChangeGroup {
        constructor(doc, newValue) {
            super();
            if (doc.song.scale != newValue) {
                doc.song.scale = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeDetectKey extends ChangeGroup {
        constructor(doc) {
            super();
            const song = doc.song;
            const basePitch = Config.keys[song.key].basePitch;
            const keyWeights = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (let channelIndex = 0; channelIndex < song.pitchChannelCount; channelIndex++) {
                for (let barIndex = 0; barIndex < song.barCount; barIndex++) {
                    const pattern = song.getPattern(channelIndex, barIndex);
                    if (pattern != null) {
                        for (const note of pattern.notes) {
                            const prevPin = note.pins[0];
                            for (let pinIndex = 1; pinIndex < note.pins.length; pinIndex++) {
                                const nextPin = note.pins[pinIndex];
                                if (prevPin.interval == nextPin.interval) {
                                    let weight = nextPin.time - prevPin.time;
                                    weight += Math.max(0, Math.min(Config.partsPerBeat, nextPin.time + note.start) - (prevPin.time + note.start));
                                    weight *= nextPin.size + prevPin.size;
                                    for (const pitch of note.pitches) {
                                        const key = (basePitch + prevPin.interval + pitch) % 12;
                                        keyWeights[key] += weight;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            let bestKey = 0;
            let bestKeyWeight = 0;
            for (let key = 0; key < 12; key++) {
                const keyWeight = keyWeights[key] * (3 * keyWeights[(key + 7) % 12] + keyWeights[(key + 4) % 12] + keyWeights[(key + 3) % 12]);
                if (bestKeyWeight < keyWeight) {
                    bestKeyWeight = keyWeight;
                    bestKey = key;
                }
            }
            if (bestKey != song.key) {
                const diff = song.key - bestKey;
                const absoluteDiff = Math.abs(diff);
                for (let channelIndex = 0; channelIndex < song.pitchChannelCount; channelIndex++) {
                    for (const pattern of song.channels[channelIndex].patterns) {
                        for (let i = 0; i < absoluteDiff; i++) {
                            this.append(new ChangeTranspose(doc, channelIndex, pattern, diff > 0, true));
                        }
                    }
                }
                song.key = bestKey;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    function pickRandomPresetValue(isNoise) {
        const eligiblePresetValues = [];
        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
            const category = EditorConfig.presetCategories[categoryIndex];
            if (category.name == "Novelty Presets")
                continue;
            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                const preset = category.presets[presetIndex];
                if (preset.settings != undefined && (preset.isNoise == true) == isNoise) {
                    eligiblePresetValues.push((categoryIndex << 6) + presetIndex);
                }
            }
        }
        return eligiblePresetValues[(Math.random() * eligiblePresetValues.length) | 0];
    }
    function setDefaultInstruments(song) {
        for (let channelIndex = 0; channelIndex < song.channels.length; channelIndex++) {
            for (const instrument of song.channels[channelIndex].instruments) {
                const isNoise = song.getChannelIsNoise(channelIndex);
                const isMod = song.getChannelIsMod(channelIndex);
                const presetValue = (channelIndex == song.pitchChannelCount) ? EditorConfig.nameToPresetValue(Math.random() > 0.5 ? "chip noise" : "standard drumset") : pickRandomPresetValue(isNoise);
                const preset = EditorConfig.valueToPreset(presetValue);
                instrument.fromJsonObject(preset.settings, isNoise, isMod, song.rhythm == 0 || song.rhythm == 2, song.rhythm >= 2, 1);
                instrument.preset = presetValue;
                instrument.effects |= 1 << 2;
            }
        }
    }
    class ChangeSong extends ChangeGroup {
        constructor(doc, newHash, jsonFormat = "auto") {
            super();
            let pitchChannelCount = doc.song.pitchChannelCount;
            let noiseChannelCount = doc.song.noiseChannelCount;
            let modChannelCount = doc.song.modChannelCount;
            doc.song.fromBase64String(newHash, jsonFormat);
            if (pitchChannelCount != doc.song.pitchChannelCount || noiseChannelCount != doc.song.noiseChannelCount || modChannelCount != doc.song.modChannelCount) {
                ColorConfig.resetColors();
            }
            if (newHash == "") {
                this.append(new ChangePatternSelection(doc, 0, 0));
                doc.selection.resetBoxSelection();
                setDefaultInstruments(doc.song);
                doc.song.scale = doc.prefs.defaultScale;
                for (let i = 0; i <= doc.song.channels.length; i++) {
                    doc.viewedInstrument[i] = 0;
                    doc.recentPatternInstruments[i] = [0];
                }
                doc.viewedInstrument.length = doc.song.channels.length;
            }
            else {
                this.append(new ChangeValidateTrackSelection(doc));
            }
            doc.synth.computeLatestModValues();
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeValidateTrackSelection extends Change {
        constructor(doc) {
            super();
            const channelIndex = Math.min(doc.channel, doc.song.getChannelCount() - 1);
            const bar = Math.max(0, Math.min(doc.song.barCount - 1, doc.bar));
            if (doc.channel != channelIndex || doc.bar != bar) {
                doc.bar = bar;
                doc.channel = channelIndex;
                this._didSomething();
            }
            doc.selection.scrollToSelectedPattern();
            doc.notifier.changed();
        }
    }
    class ChangeReplacePatterns extends ChangeGroup {
        constructor(doc, pitchChannels, noiseChannels, modChannels) {
            super();
            const song = doc.song;
            function removeExtraSparseChannels(channels, maxLength) {
                while (channels.length > maxLength) {
                    let sparsestIndex = channels.length - 1;
                    let mostZeroes = 0;
                    for (let channelIndex = 0; channelIndex < channels.length - 1; channelIndex++) {
                        let zeroes = 0;
                        for (const bar of channels[channelIndex].bars) {
                            if (bar == 0)
                                zeroes++;
                        }
                        if (zeroes >= mostZeroes) {
                            sparsestIndex = channelIndex;
                            mostZeroes = zeroes;
                        }
                    }
                    channels.splice(sparsestIndex, 1);
                }
            }
            removeExtraSparseChannels(pitchChannels, Config.pitchChannelCountMax);
            removeExtraSparseChannels(noiseChannels, Config.noiseChannelCountMax);
            removeExtraSparseChannels(modChannels, Config.modChannelCountMax);
            while (pitchChannels.length < Config.pitchChannelCountMin)
                pitchChannels.push(new Channel());
            while (noiseChannels.length < Config.noiseChannelCountMin)
                noiseChannels.push(new Channel());
            while (modChannels.length < Config.modChannelCountMin)
                modChannels.push(new Channel());
            song.barCount = 1;
            song.patternsPerChannel = 8;
            const combinedChannels = pitchChannels.concat(noiseChannels.concat(modChannels));
            for (let channelIndex = 0; channelIndex < combinedChannels.length; channelIndex++) {
                const channel = combinedChannels[channelIndex];
                song.barCount = Math.max(song.barCount, channel.bars.length);
                song.patternsPerChannel = Math.max(song.patternsPerChannel, channel.patterns.length);
                song.channels[channelIndex] = channel;
            }
            song.channels.length = combinedChannels.length;
            song.pitchChannelCount = pitchChannels.length;
            song.noiseChannelCount = noiseChannels.length;
            song.modChannelCount = modChannels.length;
            song.barCount = Math.min(Config.barCountMax, song.barCount);
            song.patternsPerChannel = Math.min(Config.barCountMax, song.patternsPerChannel);
            for (let channelIndex = 0; channelIndex < song.channels.length; channelIndex++) {
                const channel = song.channels[channelIndex];
                for (let barIndex = 0; barIndex < channel.bars.length; barIndex++) {
                    if (channel.bars[barIndex] > song.patternsPerChannel || channel.bars[barIndex] < 0) {
                        channel.bars[barIndex] = 0;
                    }
                }
                while (channel.bars.length < song.barCount) {
                    channel.bars.push(0);
                }
                channel.bars.length = song.barCount;
                if (channel.instruments.length > song.getMaxInstrumentsPerChannel()) {
                    channel.instruments.length = song.getMaxInstrumentsPerChannel();
                }
                for (const pattern of channel.patterns) {
                    discardInvalidPatternInstruments(pattern.instruments, song, channelIndex);
                }
                while (channel.patterns.length < song.patternsPerChannel) {
                    channel.patterns.push(new Pattern());
                }
                channel.patterns.length = song.patternsPerChannel;
            }
            song.loopStart = Math.max(0, Math.min(song.barCount - 1, song.loopStart));
            song.loopLength = Math.min(song.barCount - song.loopStart, song.loopLength);
            this.append(new ChangeValidateTrackSelection(doc));
            doc.notifier.changed();
            this._didSomething();
            ColorConfig.resetColors();
        }
    }
    function comparePatternNotes(a, b) {
        if (a.length != b.length)
            return false;
        for (let noteIndex = 0; noteIndex < a.length; noteIndex++) {
            const oldNote = a[noteIndex];
            const newNote = b[noteIndex];
            if (newNote.start != oldNote.start || newNote.end != oldNote.end || newNote.pitches.length != oldNote.pitches.length || newNote.pins.length != oldNote.pins.length) {
                return false;
            }
            for (let pitchIndex = 0; pitchIndex < oldNote.pitches.length; pitchIndex++) {
                if (newNote.pitches[pitchIndex] != oldNote.pitches[pitchIndex]) {
                    return false;
                }
            }
            for (let pinIndex = 0; pinIndex < oldNote.pins.length; pinIndex++) {
                if (newNote.pins[pinIndex].interval != oldNote.pins[pinIndex].interval || newNote.pins[pinIndex].time != oldNote.pins[pinIndex].time || newNote.pins[pinIndex].size != oldNote.pins[pinIndex].size) {
                    return false;
                }
            }
        }
        return true;
    }
    function removeDuplicatePatterns(channels) {
        for (const channel of channels) {
            const newPatterns = [];
            for (let bar = 0; bar < channel.bars.length; bar++) {
                if (channel.bars[bar] == 0)
                    continue;
                const oldPattern = channel.patterns[channel.bars[bar] - 1];
                let foundMatchingPattern = false;
                for (let newPatternIndex = 0; newPatternIndex < newPatterns.length; newPatternIndex++) {
                    const newPattern = newPatterns[newPatternIndex];
                    if (!patternsContainSameInstruments(oldPattern.instruments, newPattern.instruments) || newPattern.notes.length != oldPattern.notes.length) {
                        continue;
                    }
                    if (comparePatternNotes(oldPattern.notes, newPattern.notes)) {
                        foundMatchingPattern = true;
                        channel.bars[bar] = newPatternIndex + 1;
                        break;
                    }
                }
                if (!foundMatchingPattern) {
                    newPatterns.push(oldPattern);
                    channel.bars[bar] = newPatterns.length;
                }
            }
            for (let patternIndex = 0; patternIndex < newPatterns.length; patternIndex++) {
                channel.patterns[patternIndex] = newPatterns[patternIndex];
            }
            channel.patterns.length = newPatterns.length;
        }
    }
    class ChangeKeyOctave extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            doc.song.octave = Math.max(Config.octaveMin, Math.min(Config.octaveMax, Math.round(newValue)));
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeTempo extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            doc.song.tempo = Math.max(Config.tempoMin, Math.min(Config.tempoMax, Math.round(newValue)));
            doc.synth.unsetMod(Config.modulators.dictionary["tempo"].index);
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeEchoDelay extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.echoDelay = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["echo delay"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeEchoSustain extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.echoSustain = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["echo"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeChorus extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.chorus = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeReverb extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.reverb = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["reverb"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeRingMod extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.ringModulation = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeRingModHz extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.ringModulationHz = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeRMChipWave extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.rmWaveformIndex != newValue) {
                instrument.rmWaveformIndex = newValue;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeRingModPulseWidth extends ChangeInstrumentSlider {
        constructor(doc, oldValue, newValue) {
            super(doc);
            this._instrument.rmPulseWidth = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeNoteAdded extends UndoableChange {
        constructor(doc, pattern, note, index, deletion = false) {
            super(deletion);
            this._doc = doc;
            this._pattern = pattern;
            this._note = note;
            this._index = index;
            this._didSomething();
            this.redo();
        }
        _doForwards() {
            this._pattern.notes.splice(this._index, 0, this._note);
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._pattern.notes.splice(this._index, 1);
            this._doc.notifier.changed();
        }
    }
    class ChangeNoteLength extends ChangePins {
        constructor(doc, note, truncStart, truncEnd) {
            super(doc, note);
            const continuesLastPattern = ((this._oldStart < 0 || note.continuesLastPattern) && truncStart == 0);
            truncStart -= this._oldStart;
            truncEnd -= this._oldStart;
            let setStart = false;
            let prevSize = this._oldPins[0].size;
            let prevInterval = this._oldPins[0].interval;
            let pushLastPin = true;
            let i;
            for (i = 0; i < this._oldPins.length; i++) {
                const oldPin = this._oldPins[i];
                if (oldPin.time < truncStart) {
                    prevSize = oldPin.size;
                    prevInterval = oldPin.interval;
                }
                else {
                    if (oldPin.time > truncStart && !setStart) {
                        this._newPins.push(makeNotePin(prevInterval, truncStart, prevSize));
                        setStart = true;
                    }
                    if (oldPin.time <= truncEnd) {
                        this._newPins.push(makeNotePin(oldPin.interval, oldPin.time, oldPin.size));
                        if (oldPin.time == truncEnd) {
                            pushLastPin = false;
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            if (pushLastPin)
                this._newPins.push(makeNotePin(this._oldPins[i].interval, truncEnd, this._oldPins[i].size));
            this._finishSetup(continuesLastPattern);
        }
    }
    class ChangeNoteTruncate extends ChangeSequence {
        constructor(doc, pattern, start, end, skipNote = null, force = false) {
            super();
            let i = 0;
            while (i < pattern.notes.length) {
                const note = pattern.notes[i];
                if (note == skipNote && skipNote != null) {
                    i++;
                }
                else if (note.end <= start) {
                    i++;
                }
                else if (note.start >= end) {
                    if (!doc.song.getChannelIsMod(doc.channel)) {
                        break;
                    }
                    else {
                        i++;
                    }
                }
                else if (note.start < start && note.end > end) {
                    if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0])) {
                        const copy = note.clone();
                        this.append(new ChangeNoteLength(doc, note, note.start, start));
                        i++;
                        this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));
                        this.append(new ChangeNoteLength(doc, copy, end, copy.end));
                    }
                    i++;
                }
                else if (note.start < start) {
                    if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))
                        this.append(new ChangeNoteLength(doc, note, note.start, start));
                    i++;
                }
                else if (note.end > end) {
                    if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))
                        this.append(new ChangeNoteLength(doc, note, end, note.end));
                    i++;
                }
                else {
                    if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))
                        this.append(new ChangeNoteAdded(doc, pattern, note, i, true));
                    else
                        i++;
                }
            }
        }
    }
    class ChangeSplitNotesAtSelection extends ChangeSequence {
        constructor(doc, pattern) {
            super();
            let i = 0;
            while (i < pattern.notes.length) {
                const note = pattern.notes[i];
                if (note.start < doc.selection.patternSelectionStart && doc.selection.patternSelectionStart < note.end) {
                    const copy = note.clone();
                    this.append(new ChangeNoteLength(doc, note, note.start, doc.selection.patternSelectionStart));
                    i++;
                    this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));
                    this.append(new ChangeNoteLength(doc, copy, doc.selection.patternSelectionStart, copy.end));
                }
                else if (note.start < doc.selection.patternSelectionEnd && doc.selection.patternSelectionEnd < note.end) {
                    const copy = note.clone();
                    this.append(new ChangeNoteLength(doc, note, note.start, doc.selection.patternSelectionEnd));
                    i++;
                    this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));
                    this.append(new ChangeNoteLength(doc, copy, doc.selection.patternSelectionEnd, copy.end));
                    i++;
                }
                else {
                    i++;
                }
            }
        }
    }
    class ChangeTransposeNote extends UndoableChange {
        constructor(doc, channelIndex, note, upward, ignoreScale = false, octave = false) {
            super(false);
            this._doc = doc;
            this._note = note;
            this._oldPins = note.pins;
            this._newPins = [];
            this._oldPitches = note.pitches;
            this._newPitches = [];
            const isNoise = doc.song.getChannelIsNoise(channelIndex);
            if (isNoise != doc.song.getChannelIsNoise(doc.channel))
                return;
            if (doc.song.getChannelIsMod(doc.channel))
                return;
            const maxPitch = (isNoise ? Config.drumCount - 1 : Config.maxPitch);
            for (let i = 0; i < this._oldPitches.length; i++) {
                let pitch = this._oldPitches[i];
                if (octave && !isNoise) {
                    if (upward) {
                        pitch = Math.min(maxPitch, pitch + 12);
                    }
                    else {
                        pitch = Math.max(0, pitch - 12);
                    }
                }
                else {
                    let scale = doc.song.scale == Config.scales.dictionary["Custom"].index ? doc.song.scaleCustom : Config.scales[doc.song.scale].flags;
                    if (upward) {
                        for (let j = pitch + 1; j <= maxPitch; j++) {
                            if (isNoise || ignoreScale || scale[j % 12]) {
                                pitch = j;
                                break;
                            }
                        }
                    }
                    else {
                        for (let j = pitch - 1; j >= 0; j--) {
                            if (isNoise || ignoreScale || scale[j % 12]) {
                                pitch = j;
                                break;
                            }
                        }
                    }
                }
                let foundMatch = false;
                for (let j = 0; j < this._newPitches.length; j++) {
                    if (this._newPitches[j] == pitch) {
                        foundMatch = true;
                        break;
                    }
                }
                if (!foundMatch)
                    this._newPitches.push(pitch);
            }
            let min = 0;
            let max = maxPitch;
            for (let i = 1; i < this._newPitches.length; i++) {
                const diff = this._newPitches[0] - this._newPitches[i];
                if (min < diff)
                    min = diff;
                if (max > diff + maxPitch)
                    max = diff + maxPitch;
            }
            for (const oldPin of this._oldPins) {
                let interval = oldPin.interval + this._oldPitches[0];
                if (interval < min)
                    interval = min;
                if (interval > max)
                    interval = max;
                if (octave && !isNoise) {
                    if (upward) {
                        interval = Math.min(max, interval + 12);
                    }
                    else {
                        interval = Math.max(min, interval - 12);
                    }
                }
                else {
                    let scale = doc.song.scale == Config.scales.dictionary["Custom"].index ? doc.song.scaleCustom : Config.scales[doc.song.scale].flags;
                    if (upward) {
                        for (let i = interval + 1; i <= max; i++) {
                            if (isNoise || ignoreScale || scale[i % 12]) {
                                interval = i;
                                break;
                            }
                        }
                    }
                    else {
                        for (let i = interval - 1; i >= min; i--) {
                            if (isNoise || ignoreScale || scale[i % 12]) {
                                interval = i;
                                break;
                            }
                        }
                    }
                }
                interval -= this._newPitches[0];
                this._newPins.push(makeNotePin(interval, oldPin.time, oldPin.size));
            }
            if (this._newPins[0].interval != 0)
                throw new Error("wrong pin start interval");
            for (let i = 1; i < this._newPins.length - 1;) {
                if (this._newPins[i - 1].interval == this._newPins[i].interval &&
                    this._newPins[i].interval == this._newPins[i + 1].interval &&
                    this._newPins[i - 1].size == this._newPins[i].size &&
                    this._newPins[i].size == this._newPins[i + 1].size) {
                    this._newPins.splice(i, 1);
                }
                else {
                    i++;
                }
            }
            this._doForwards();
            this._didSomething();
        }
        _doForwards() {
            this._note.pins = this._newPins;
            this._note.pitches = this._newPitches;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._note.pins = this._oldPins;
            this._note.pitches = this._oldPitches;
            this._doc.notifier.changed();
        }
    }
    class ChangeTranspose extends ChangeSequence {
        constructor(doc, channelIndex, pattern, upward, ignoreScale = false, octave = false) {
            super();
            if (doc.selection.patternSelectionActive) {
                this.append(new ChangeSplitNotesAtSelection(doc, pattern));
            }
            for (const note of pattern.notes) {
                if (doc.selection.patternSelectionActive && (note.end <= doc.selection.patternSelectionStart || note.start >= doc.selection.patternSelectionEnd)) {
                    continue;
                }
                this.append(new ChangeTransposeNote(doc, channelIndex, note, upward, ignoreScale, octave));
            }
        }
    }
    class ChangeTrackSelection extends Change {
        constructor(doc, newX0, newX1, newY0, newY1) {
            super();
            doc.selection.boxSelectionX0 = newX0;
            doc.selection.boxSelectionX1 = newX1;
            doc.selection.boxSelectionY0 = newY0;
            doc.selection.boxSelectionY1 = newY1;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangePatternSelection extends UndoableChange {
        constructor(doc, newStart, newEnd) {
            super(false);
            this._doc = doc;
            this._oldStart = doc.selection.patternSelectionStart;
            this._oldEnd = doc.selection.patternSelectionEnd;
            this._oldActive = doc.selection.patternSelectionActive;
            this._newStart = newStart;
            this._newEnd = newEnd;
            this._newActive = newStart < newEnd;
            this._doForwards();
            this._didSomething();
        }
        _doForwards() {
            this._doc.selection.patternSelectionStart = this._newStart;
            this._doc.selection.patternSelectionEnd = this._newEnd;
            this._doc.selection.patternSelectionActive = this._newActive;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._doc.selection.patternSelectionStart = this._oldStart;
            this._doc.selection.patternSelectionEnd = this._oldEnd;
            this._doc.selection.patternSelectionActive = this._oldActive;
            this._doc.notifier.changed();
        }
    }
    class ChangeDragSelectedNotes extends ChangeSequence {
        constructor(doc, channelIndex, pattern, parts, transpose) {
            super();
            if (parts == 0 && transpose == 0)
                return;
            if (doc.selection.patternSelectionActive) {
                this.append(new ChangeSplitNotesAtSelection(doc, pattern));
            }
            const oldStart = doc.selection.patternSelectionStart;
            const oldEnd = doc.selection.patternSelectionEnd;
            const newStart = Math.max(0, Math.min(doc.song.beatsPerBar * Config.partsPerBeat, oldStart + parts));
            const newEnd = Math.max(0, Math.min(doc.song.beatsPerBar * Config.partsPerBeat, oldEnd + parts));
            if (newStart == newEnd) {
                this.append(new ChangeNoteTruncate(doc, pattern, oldStart, oldEnd, null, true));
            }
            else if (parts < 0) {
                this.append(new ChangeNoteTruncate(doc, pattern, newStart, Math.min(oldStart, newEnd), null, true));
            }
            else {
                this.append(new ChangeNoteTruncate(doc, pattern, Math.max(oldEnd, newStart), newEnd, null, true));
            }
            this.append(new ChangePatternSelection(doc, newStart, newEnd));
            const draggedNotes = [];
            let noteInsertionIndex = 0;
            let i = 0;
            while (i < pattern.notes.length) {
                const note = pattern.notes[i];
                if (note.end <= oldStart || note.start >= oldEnd) {
                    i++;
                    if (note.end <= newStart)
                        noteInsertionIndex = i;
                }
                else {
                    draggedNotes.push(note.clone());
                    this.append(new ChangeNoteAdded(doc, pattern, note, i, true));
                }
            }
            for (const note of draggedNotes) {
                note.start += parts;
                note.end += parts;
                if (note.end <= newStart)
                    continue;
                if (note.start >= newEnd)
                    continue;
                this.append(new ChangeNoteAdded(doc, pattern, note, noteInsertionIndex++, false));
                this.append(new ChangeNoteLength(doc, note, Math.max(note.start, newStart), Math.min(newEnd, note.end)));
                for (let i = 0; i < Math.abs(transpose); i++) {
                    this.append(new ChangeTransposeNote(doc, channelIndex, note, transpose > 0, doc.prefs.notesOutsideScale));
                }
            }
        }
    }
    class ChangeHoldingModRecording extends Change {
        constructor(doc, storedChange, storedValues, slider) {
            super();
            this.storedChange = storedChange;
            this.storedValues = storedValues;
            this.storedSlider = slider;
            this._didSomething();
        }
    }
    class ChangeDuplicateSelectedReusedPatterns extends ChangeGroup {
        constructor(doc, barStart, barWidth, channelStart, channelHeight) {
            super();
            for (let channelIndex = channelStart; channelIndex < channelStart + channelHeight; channelIndex++) {
                const reusablePatterns = {};
                for (let bar = barStart; bar < barStart + barWidth; bar++) {
                    const currentPatternIndex = doc.song.channels[channelIndex].bars[bar];
                    if (currentPatternIndex == 0)
                        continue;
                    if (reusablePatterns[String(currentPatternIndex)] == undefined) {
                        let isUsedElsewhere = false;
                        for (let bar2 = 0; bar2 < doc.song.barCount; bar2++) {
                            if (bar2 < barStart || bar2 >= barStart + barWidth) {
                                if (doc.song.channels[channelIndex].bars[bar2] == currentPatternIndex) {
                                    isUsedElsewhere = true;
                                    break;
                                }
                            }
                        }
                        if (isUsedElsewhere) {
                            const copiedPattern = doc.song.getPattern(channelIndex, bar);
                            this.append(new ChangePatternNumbers(doc, 0, bar, channelIndex, 1, 1));
                            this.append(new ChangeEnsurePatternExists(doc, channelIndex, bar));
                            const newPattern = doc.song.getPattern(channelIndex, bar);
                            if (newPattern == null)
                                throw new Error();
                            this.append(new ChangePaste(doc, newPattern, copiedPattern.notes, 0, Config.partsPerBeat * doc.song.beatsPerBar, Config.partsPerBeat * doc.song.beatsPerBar));
                            newPattern.instruments.length = 0;
                            newPattern.instruments.push(...copiedPattern.instruments);
                            reusablePatterns[String(currentPatternIndex)] = doc.song.channels[channelIndex].bars[bar];
                        }
                        else {
                            reusablePatterns[String(currentPatternIndex)] = currentPatternIndex;
                        }
                    }
                    this.append(new ChangePatternNumbers(doc, reusablePatterns[String(currentPatternIndex)], bar, channelIndex, 1, 1));
                }
            }
        }
    }
    class ChangePatternScale extends Change {
        constructor(doc, pattern, scaleMap) {
            super();
            if (doc.selection.patternSelectionActive) {
                new ChangeSplitNotesAtSelection(doc, pattern);
            }
            const maxPitch = Config.maxPitch;
            for (const note of pattern.notes) {
                if (doc.selection.patternSelectionActive && (note.end <= doc.selection.patternSelectionStart || note.start >= doc.selection.patternSelectionEnd)) {
                    continue;
                }
                const newPitches = [];
                const newPins = [];
                for (let i = 0; i < note.pitches.length; i++) {
                    const pitch = note.pitches[i];
                    const transformedPitch = scaleMap[pitch % 12] + (pitch - (pitch % 12));
                    if (newPitches.indexOf(transformedPitch) == -1) {
                        newPitches.push(transformedPitch);
                    }
                }
                let min = 0;
                let max = maxPitch;
                for (let i = 1; i < newPitches.length; i++) {
                    const diff = newPitches[0] - newPitches[i];
                    if (min < diff)
                        min = diff;
                    if (max > diff + maxPitch)
                        max = diff + maxPitch;
                }
                for (const oldPin of note.pins) {
                    let interval = oldPin.interval + note.pitches[0];
                    if (interval < min)
                        interval = min;
                    if (interval > max)
                        interval = max;
                    const transformedInterval = scaleMap[interval % 12] + (interval - (interval % 12));
                    newPins.push(makeNotePin(transformedInterval - newPitches[0], oldPin.time, oldPin.size));
                }
                if (newPins[0].interval != 0)
                    throw new Error("wrong pin start interval");
                for (let i = 1; i < newPins.length - 1;) {
                    if (newPins[i - 1].interval == newPins[i].interval &&
                        newPins[i].interval == newPins[i + 1].interval &&
                        newPins[i - 1].size == newPins[i].size &&
                        newPins[i].size == newPins[i + 1].size) {
                        newPins.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
                note.pitches = newPitches;
                note.pins = newPins;
            }
            this._didSomething();
            doc.notifier.changed();
        }
    }
    class ChangeVolume extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].volume = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSongTitle extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            if (newValue.length > 30) {
                newValue = newValue.substring(0, 30);
            }
            doc.song.title = newValue;
            document.title = newValue + " - " + EditorConfig.versionDisplayName;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSongTheme extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            if (newValue.length > 30) {
                newValue = newValue.substring(0, 30);
            }
            doc.song.setSongTheme = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeChannelName extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            if (newValue.length > 15) {
                newValue = newValue.substring(0, 15);
            }
            doc.song.channels[doc.muteEditorChannel].name = newValue;
            doc.recalcChannelNames = true;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePan extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].pan = newValue;
            doc.synth.unsetMod(Config.modulators.dictionary["pan"].index, doc.channel, doc.getCurrentInstrument());
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangePanDelay extends Change {
        constructor(doc, oldValue, newValue) {
            super();
            doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].panDelay = newValue;
            doc.notifier.changed();
            if (oldValue != newValue)
                this._didSomething();
        }
    }
    class ChangeSizeBend extends UndoableChange {
        constructor(doc, note, bendPart, bendSize, bendInterval, uniformSize) {
            super(false);
            this._doc = doc;
            this._note = note;
            this._oldPins = note.pins;
            this._newPins = [];
            let inserted = false;
            for (const pin of note.pins) {
                if (pin.time < bendPart) {
                    if (uniformSize) {
                        this._newPins.push(makeNotePin(pin.interval, pin.time, bendSize));
                    }
                    else {
                        this._newPins.push(pin);
                    }
                }
                else if (pin.time == bendPart) {
                    this._newPins.push(makeNotePin(bendInterval, bendPart, bendSize));
                    inserted = true;
                }
                else {
                    if (!uniformSize && !inserted) {
                        this._newPins.push(makeNotePin(bendInterval, bendPart, bendSize));
                        inserted = true;
                    }
                    if (uniformSize) {
                        this._newPins.push(makeNotePin(pin.interval, pin.time, bendSize));
                    }
                    else {
                        this._newPins.push(pin);
                    }
                }
            }
            removeRedundantPins(this._newPins);
            this._doForwards();
            this._didSomething();
        }
        _doForwards() {
            this._note.pins = this._newPins;
            this._doc.notifier.changed();
        }
        _doBackwards() {
            this._note.pins = this._oldPins;
            this._doc.notifier.changed();
        }
    }
    class ChangeChipWave extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWave != newValue) {
                instrument.chipWave = newValue;
                instrument.isUsingAdvancedLoopControls = false;
                instrument.chipWaveLoopStart = 0;
                instrument.chipWaveLoopEnd = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;
                instrument.chipWaveLoopMode = 0;
                instrument.chipWavePlayBackwards = false;
                instrument.chipWaveStartOffset = 0;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWaveUseAdvancedLoopControls extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.isUsingAdvancedLoopControls != newValue) {
                instrument.isUsingAdvancedLoopControls = newValue;
                instrument.chipWaveLoopStart = 0;
                instrument.chipWaveLoopEnd = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;
                instrument.chipWaveLoopMode = 0;
                instrument.chipWavePlayBackwards = false;
                instrument.chipWaveStartOffset = 0;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWaveLoopMode extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWaveLoopMode != newValue) {
                instrument.isUsingAdvancedLoopControls = true;
                instrument.chipWaveLoopMode = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWaveLoopStart extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWaveLoopStart != newValue) {
                instrument.isUsingAdvancedLoopControls = true;
                instrument.chipWaveLoopStart = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWaveLoopEnd extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWaveLoopEnd != newValue) {
                instrument.isUsingAdvancedLoopControls = true;
                instrument.chipWaveLoopEnd = newValue;
                instrument.chipWaveLoopStart = Math.max(0, Math.min(newValue - 1, instrument.chipWaveLoopStart));
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWaveStartOffset extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWaveStartOffset != newValue) {
                instrument.isUsingAdvancedLoopControls = true;
                instrument.chipWaveStartOffset = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeChipWavePlayBackwards extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipWavePlayBackwards != newValue) {
                instrument.isUsingAdvancedLoopControls = true;
                instrument.chipWavePlayBackwards = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeNoiseWave extends Change {
        constructor(doc, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            if (instrument.chipNoise != newValue) {
                instrument.chipNoise = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeAddEnvelope extends Change {
        constructor(doc) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            instrument.addEnvelope(0, 0, 0);
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeRemoveEnvelope extends Change {
        constructor(doc, index) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            instrument.envelopeCount--;
            for (let i = index; i < instrument.envelopeCount; i++) {
                instrument.envelopes[i].target = instrument.envelopes[i + 1].target;
                instrument.envelopes[i].index = instrument.envelopes[i + 1].index;
                instrument.envelopes[i].envelope = instrument.envelopes[i + 1].envelope;
            }
            instrument.preset = instrument.type;
            doc.notifier.changed();
            this._didSomething();
        }
    }
    class ChangeSetEnvelopeTarget extends Change {
        constructor(doc, envelopeIndex, target, targetIndex) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldTarget = instrument.envelopes[envelopeIndex].target;
            const oldIndex = instrument.envelopes[envelopeIndex].index;
            if (oldTarget != target || oldIndex != targetIndex) {
                instrument.envelopes[envelopeIndex].target = target;
                instrument.envelopes[envelopeIndex].index = targetIndex;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }
    class ChangeSetEnvelopeType extends Change {
        constructor(doc, envelopeIndex, newValue) {
            super();
            const instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];
            const oldValue = instrument.envelopes[envelopeIndex].envelope;
            if (oldValue != newValue) {
                instrument.envelopes[envelopeIndex].envelope = newValue;
                instrument.preset = instrument.type;
                doc.notifier.changed();
                this._didSomething();
            }
        }
    }

    const { button: button$s, div: div$s, span: span$6, h2: h2$r, input: input$h, br: br$4, select: select$g, option: option$g } = HTML;
    class BeatsPerBarPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._beatsStepper = input$h({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._conversionStrategySelect = select$g({ style: "width: 100%;" }, option$g({ value: "splice" }, "Splice beats at end of bars."), option$g({ value: "stretch" }, "Stretch notes to fit in bars."), option$g({ value: "overflow" }, "Overflow notes across bars."));
            this._cancelButton = button$s({ class: "cancelButton" });
            this._okayButton = button$s({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$s({ class: "prompt noSelection", style: "width: 250px;" }, div$s({ class: "promptTitle" }, h2$r({ class: "bpmExt", style: "text-align: inherit;" }, ""), h2$r({ class: "bpmTitle" }, "Beats Per Bar")), div$s({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$s({ style: "text-align: right;" }, "Beats per bar:", br$4(), span$6({ style: "font-size: smaller; color: ${ColorConfig.secondaryText};" }, "(Multiples of 3 or 4 are recommended)")), this._beatsStepper), div$s({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$s({ class: "selectContainer", style: "width: 100%;" }, this._conversionStrategySelect)), div$s({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._beatsStepper.removeEventListener("keypress", BeatsPerBarPrompt._validateKey);
                this._beatsStepper.removeEventListener("blur", BeatsPerBarPrompt._validateNumber);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                window.localStorage.setItem("beatCountStrategy", this._conversionStrategySelect.value);
                this._doc.prompt = null;
                this._doc.record(new ChangeBeatsPerBar(this._doc, BeatsPerBarPrompt._validate(this._beatsStepper), this._conversionStrategySelect.value), true);
            };
            this._beatsStepper.value = this._doc.song.beatsPerBar + "";
            this._beatsStepper.min = Config.beatsPerBarMin + "";
            this._beatsStepper.max = Config.beatsPerBarMax + "";
            const lastStrategy = window.localStorage.getItem("beatCountStrategy");
            if (lastStrategy != null) {
                this._conversionStrategySelect.value = lastStrategy;
            }
            this._beatsStepper.select();
            setTimeout(() => this._beatsStepper.focus());
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._beatsStepper.addEventListener("keypress", BeatsPerBarPrompt._validateKey);
            this._beatsStepper.addEventListener("blur", BeatsPerBarPrompt._validateNumber);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
        static _validateKey(event) {
            const charCode = (event.which) ? event.which : event.keyCode;
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                event.preventDefault();
                return true;
            }
            return false;
        }
        static _validateNumber(event) {
            const input = event.target;
            input.value = String(BeatsPerBarPrompt._validate(input));
        }
        static _validate(input) {
            return Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));
        }
    }

    const { button: button$r, div: div$r, label: label$3, br: br$3, h2: h2$q, input: input$g } = HTML;
    class ChannelSettingsPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._patternsStepper = input$g({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._pitchChannelStepper = input$g({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._drumChannelStepper = input$g({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._modChannelStepper = input$g({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._layeredInstrumentsBox = input$g({ style: "width: 3em; margin-left: 1em;", type: "checkbox" });
            this._patternInstrumentsBox = input$g({ style: "width: 3em; margin-left: 1em;", type: "checkbox" });
            this._cancelButton = button$r({ class: "cancelButton" });
            this._okayButton = button$r({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$r({ class: "prompt noSelection", style: "width: 250px; text-align: right;" }, div$r({ class: "promptTitle" }, h2$q({ class: "channelExt", style: "text-align: inherit;" }, ""), h2$q({ class: "channelTitle" }, "Channel Settings")), label$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Pitch channels:", this._pitchChannelStepper), label$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Drum channels:", this._drumChannelStepper), div$r({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Mod channels:", this._modChannelStepper), label$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Available patterns per channel:", this._patternsStepper), label$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Simultaneous instruments", br$3(), "per channel:", this._layeredInstrumentsBox), label$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Different instruments", br$3(), "per pattern:", this._patternInstrumentsBox), div$r({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._patternsStepper.removeEventListener("keypress", ChannelSettingsPrompt._validateKey);
                this._pitchChannelStepper.removeEventListener("keypress", ChannelSettingsPrompt._validateKey);
                this._drumChannelStepper.removeEventListener("keypress", ChannelSettingsPrompt._validateKey);
                this._modChannelStepper.removeEventListener("keypress", ChannelSettingsPrompt._validateKey);
                this._patternsStepper.removeEventListener("blur", this._validateNumber);
                this._pitchChannelStepper.removeEventListener("blur", this._validateNumber);
                this._drumChannelStepper.removeEventListener("blur", this._validateNumber);
                this._modChannelStepper.removeEventListener("blur", this._validateNumber);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._validateNumber = (event) => {
                const input = event.target;
                input.value = String(ChannelSettingsPrompt._validate(input));
            };
            this._saveChanges = () => {
                const group = new ChangeGroup();
                group.append(new ChangeInstrumentsFlags(this._doc, this._layeredInstrumentsBox.checked, this._patternInstrumentsBox.checked));
                group.append(new ChangePatternsPerChannel(this._doc, ChannelSettingsPrompt._validate(this._patternsStepper)));
                group.append(new ChangeChannelCount(this._doc, ChannelSettingsPrompt._validate(this._pitchChannelStepper), ChannelSettingsPrompt._validate(this._drumChannelStepper), ChannelSettingsPrompt._validate(this._modChannelStepper)));
                this._doc.prompt = null;
                this._doc.record(group, true);
            };
            this._patternsStepper.value = this._doc.song.patternsPerChannel + "";
            this._patternsStepper.min = "1";
            this._patternsStepper.max = Config.barCountMax + "";
            this._pitchChannelStepper.value = this._doc.song.pitchChannelCount + "";
            this._pitchChannelStepper.min = Config.pitchChannelCountMin + "";
            this._pitchChannelStepper.max = Config.pitchChannelCountMax + "";
            this._drumChannelStepper.value = this._doc.song.noiseChannelCount + "";
            this._drumChannelStepper.min = Config.noiseChannelCountMin + "";
            this._drumChannelStepper.max = Config.noiseChannelCountMax + "";
            this._modChannelStepper.value = this._doc.song.modChannelCount + "";
            this._modChannelStepper.min = Config.modChannelCountMin + "";
            this._modChannelStepper.max = Config.modChannelCountMax + "";
            this._layeredInstrumentsBox.checked = this._doc.song.layeredInstruments;
            this._patternInstrumentsBox.checked = this._doc.song.patternInstruments;
            this._pitchChannelStepper.select();
            setTimeout(() => this._pitchChannelStepper.focus());
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._patternsStepper.addEventListener("keypress", ChannelSettingsPrompt._validateKey);
            this._pitchChannelStepper.addEventListener("keypress", ChannelSettingsPrompt._validateKey);
            this._drumChannelStepper.addEventListener("keypress", ChannelSettingsPrompt._validateKey);
            this._modChannelStepper.addEventListener("keypress", ChannelSettingsPrompt._validateKey);
            this._patternsStepper.addEventListener("blur", this._validateNumber);
            this._pitchChannelStepper.addEventListener("blur", this._validateNumber);
            this._drumChannelStepper.addEventListener("blur", this._validateNumber);
            this._modChannelStepper.addEventListener("blur", this._validateNumber);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
        static _validateKey(event) {
            const charCode = (event.which) ? event.which : event.keyCode;
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                event.preventDefault();
                return true;
            }
            return false;
        }
        static _validate(input) {
            return Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));
        }
    }

    const { button: button$q, div: div$q, h2: h2$p } = HTML;
    class CustomChipPromptCanvas {
        constructor(doc) {
            this._mouseX = 0;
            this._mouseY = 0;
            this._lastIndex = 0;
            this._lastAmp = 0;
            this._mouseDown = false;
            this.chipData = new Float32Array(64);
            this.startingChipData = new Float32Array(64);
            this._undoHistoryState = 0;
            this._changeQueue = [];
            this._editorWidth = 768;
            this._editorHeight = 294;
            this._fill = SVG.path({ fill: ColorConfig.uiWidgetBackground, "pointer-events": "none" });
            this._ticks = SVG.svg({ "pointer-events": "none" });
            this._subticks = SVG.svg({ "pointer-events": "none" });
            this._blocks = SVG.svg({ "pointer-events": "none" });
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; overflow: visible;`, width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._fill, this._ticks, this._subticks, this._blocks);
            this.container = HTML.div({ class: "", style: "height: 294px; width: 768px; padding-bottom: 1.5em;" }, this._svg);
            this._storeChange = () => {
                var sameCheck = true;
                if (this._changeQueue.length > 0) {
                    for (var i = 0; i < 64; i++) {
                        if (this._changeQueue[this._undoHistoryState][i] != this.chipData[i]) {
                            sameCheck = false;
                            i = 64;
                        }
                    }
                }
                if (sameCheck == false || this._changeQueue.length == 0) {
                    this._changeQueue.splice(0, this._undoHistoryState);
                    this._undoHistoryState = 0;
                    this._changeQueue.unshift(this.chipData.slice());
                    if (this._changeQueue.length > 32) {
                        this._changeQueue.pop();
                    }
                }
            };
            this.undo = () => {
                if (this._undoHistoryState < this._changeQueue.length - 1) {
                    this._undoHistoryState++;
                    this.chipData = this._changeQueue[this._undoHistoryState].slice();
                    new ChangeCustomWave(this._doc, this.chipData);
                    this.render();
                }
            };
            this.redo = () => {
                if (this._undoHistoryState > 0) {
                    this._undoHistoryState--;
                    this.chipData = this._changeQueue[this._undoHistoryState].slice();
                    new ChangeCustomWave(this._doc, this.chipData);
                    this.render();
                }
            };
            this._whenKeyPressed = (event) => {
                if (event.keyCode == 90) {
                    this.undo();
                    event.stopPropagation();
                }
                else if (event.keyCode == 89) {
                    this.redo();
                    event.stopPropagation();
                }
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._lastIndex = -1;
                this._whenCursorMoved();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._lastIndex = -1;
                this._whenCursorMoved();
            };
            this._whenMouseMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                this._storeChange();
                this._mouseDown = false;
            };
            this._doc = doc;
            for (let i = 0; i <= 4; i += 2) {
                this._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i * this._editorWidth / 4) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            for (let i = 1; i <= 8; i++) {
                this._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i * this._editorWidth / 8) - 1, y: 0, width: 1, height: this._editorHeight }));
            }
            this._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: 0, y: (this._editorHeight / 2) - 1, width: this._editorWidth, height: 2 }));
            for (let i = 0; i < 3; i++) {
                this._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: 0, y: i * 8 * (this._editorHeight / 49), width: this._editorWidth, height: 1 }));
                this._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: 0, y: this._editorHeight - 1 - i * 8 * (this._editorHeight / 49), width: this._editorWidth, height: 1 }));
            }
            let col = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;
            for (let i = 0; i <= 64; i++) {
                let val = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customChipWave[i];
                this.chipData[i] = val;
                this.startingChipData[i] = val;
                this._blocks.appendChild(SVG.rect({ fill: col, x: (i * this._editorWidth / 64), y: (val + 24) * (this._editorHeight / 49), width: this._editorWidth / 64, height: this._editorHeight / 49 }));
            }
            this._storeChange();
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
            this._svg.addEventListener("keydown", this._whenKeyPressed);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
        _whenCursorMoved() {
            if (this._mouseDown) {
                const index = Math.min(63, Math.max(0, Math.floor(this._mouseX * 64 / this._editorWidth)));
                const amp = Math.min(48, Math.max(0, Math.floor(this._mouseY * 49 / this._editorHeight)));
                if (this._lastIndex != -1 && this._lastIndex != index) {
                    var lowest = index;
                    var highest = this._lastIndex;
                    var startingAmp = amp;
                    var endingAmp = this._lastAmp;
                    if (this._lastIndex < index) {
                        lowest = this._lastIndex;
                        highest = index;
                        startingAmp = this._lastAmp;
                        endingAmp = amp;
                    }
                    for (var i = lowest; i <= highest; i++) {
                        const medAmp = Math.round(startingAmp + (endingAmp - startingAmp) * ((i - lowest) / (highest - lowest)));
                        this.chipData[i] = medAmp - 24;
                        this._blocks.children[i].setAttribute("y", "" + (medAmp * (this._editorHeight / 49)));
                    }
                }
                else {
                    this.chipData[index] = amp - 24;
                    this._blocks.children[index].setAttribute("y", "" + (amp * (this._editorHeight / 49)));
                }
                new ChangeCustomWave(this._doc, this.chipData);
                this._lastIndex = index;
                this._lastAmp = amp;
            }
        }
        render() {
            for (var i = 0; i < 64; i++) {
                this._blocks.children[i].setAttribute("y", "" + ((this.chipData[i] + 24) * (this._editorHeight / 49)));
            }
        }
    }
    class CustomChipPrompt {
        constructor(_doc, _songEditor) {
            this._doc = _doc;
            this._songEditor = _songEditor;
            this.customChipCanvas = new CustomChipPromptCanvas(this._doc);
            this._playButton = button$q({ style: "width: 55%;", type: "button" });
            this._cancelButton = button$q({ class: "cancelButton" });
            this._okayButton = button$q({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$q({ class: "prompt noSelection", style: "width: 600px;" }, div$q({ class: "promptTitle" }, h2$p({ class: "edit-custom-chipExt", style: "text-align: inherit;" }, ""), h2$p({ class: "edit-custom-chipTitle" }, "Edit Custom Chip Instrument")), div$q({ style: "display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;" }, this._playButton), div$q({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center;" }, this.customChipCanvas.container), div$q({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._togglePlay = () => {
                this._songEditor.togglePlay();
                this.updatePlayButton();
            };
            this._close = () => {
                this._doc.prompt = null;
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this.whenKeyPressed);
                this._playButton.removeEventListener("click", this._togglePlay);
            };
            this.whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
                else if (event.keyCode == 32) {
                    this._togglePlay();
                    event.preventDefault();
                }
                else if (event.keyCode == 90) {
                    this.customChipCanvas.undo();
                    event.stopPropagation();
                }
                else if (event.keyCode == 89) {
                    this.customChipCanvas.redo();
                    event.stopPropagation();
                }
                else if (event.keyCode == 219) {
                    this._doc.synth.goToPrevBar();
                }
                else if (event.keyCode == 221) {
                    this._doc.synth.goToNextBar();
                }
            };
            this._saveChanges = () => {
                this._doc.prompt = null;
                new ChangeCustomWave(this._doc, this.customChipCanvas.startingChipData);
                this._doc.record(new ChangeCustomWave(this._doc, this.customChipCanvas.chipData), true);
            };
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this.whenKeyPressed);
            this._playButton.addEventListener("click", this._togglePlay);
            this.updatePlayButton();
            setTimeout(() => this._playButton.focus());
            this.customChipCanvas.render();
        }
        updatePlayButton() {
            if (this._doc.synth.playing) {
                this._playButton.classList.remove("playButton");
                this._playButton.classList.add("pauseButton");
                this._playButton.title = "Pause (Space)";
                this._playButton.innerText = "Pause";
            }
            else {
                this._playButton.classList.remove("pauseButton");
                this._playButton.classList.add("playButton");
                this._playButton.title = "Play (Space)";
                this._playButton.innerText = "Play";
            }
        }
    }

    class FilterEditor {
        constructor(_doc, useNoteFilter = false, larger = false) {
            this._doc = _doc;
            this._editorWidth = 120;
            this._editorHeight = 26;
            this._responsePath = SVG.path({ fill: ColorConfig.uiWidgetBackground, "pointer-events": "none" });
            this._indicators = [];
            this._subFilters = [];
            this._writingMods = false;
            this._controlPointPath = SVG.path({ fill: "currentColor", "pointer-events": "none" });
            this._dottedLinePath = SVG.path({ fill: "none", stroke: "currentColor", "stroke-width": 1, "stroke-dasharray": "3, 2", "pointer-events": "none" });
            this._highlight = SVG.circle({ fill: "white", stroke: "none", "pointer-events": "none", r: 4 });
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none;`, width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._responsePath, this._dottedLinePath, this._highlight, this._controlPointPath);
            this.selfUndoSettings = [];
            this.selfUndoHistoryPos = 0;
            this._label = HTML.div({ style: "position: absolute; bottom: 0; left: 2px; font-size: 8px; line-height: 1; pointer-events: none;" });
            this.coordText = null;
            this.container = HTML.div({ class: "filterEditor", style: "height: 100%; position: relative;" }, this._svg, this._label);
            this._pointRadius = 2;
            this._useNoteFilter = false;
            this._larger = false;
            this._touchMode = false;
            this._mouseX = 0;
            this._mouseY = 0;
            this._mouseOver = false;
            this._mouseDown = false;
            this._mouseDragging = false;
            this._addingPoint = false;
            this._deletingPoint = false;
            this._addedType = 2;
            this._selectedIndex = 0;
            this._freqStart = 0;
            this._gainStart = 0;
            this._dragChange = null;
            this._subfilterIndex = 0;
            this._renderedSelectedIndex = -1;
            this._renderedPointCount = -1;
            this._renderedPointTypes = -1;
            this._renderedPointFreqs = -1;
            this._renderedPointGains = -1;
            this._whenKeyPressed = (event) => {
                if (event.keyCode == 90) {
                    this.undo();
                    event.stopPropagation();
                }
                if (event.keyCode == 89) {
                    this.redo();
                    event.stopPropagation();
                }
            };
            this._whenMouseOver = (event) => {
                this._mouseOver = true;
                if (!this._larger)
                    this._controlPointPath.style.setProperty("fill", "currentColor");
            };
            this._whenMouseOut = (event) => {
                this._mouseOver = false;
                this._updatePath();
                if (this.coordText != null) {
                    this.coordText.innerText = "";
                }
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._touchMode = false;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorPressed();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._touchMode = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorPressed();
            };
            this._whenMouseMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                if (!this._mouseDown)
                    this._updateCursor();
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (this._mouseDown)
                    event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                if (!this._mouseDown)
                    this._updateCursor();
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (this._writingMods) {
                    const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                    this._useFilterSettings = this._getTargetFilterSettings(instrument);
                }
                if (this.container.offsetParent == null)
                    return;
                if (this._mouseDown && (this._doc.lastChangeWas(this._dragChange) || this._writingMods) && this._dragChange != null) {
                    if (!this._addingPoint && !this._mouseDragging && !this._touchMode) {
                        if (this._selectedIndex < this._useFilterSettings.controlPointCount && this._selectedIndex != -1) {
                            const point = this._useFilterSettings.controlPoints[this._selectedIndex];
                            let change = new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._selectedIndex, this._useNoteFilter, true);
                            if (!this._larger) {
                                this._doc.record(change);
                            }
                        }
                    }
                    else if (!this._larger) {
                        this._doc.record(this._dragChange);
                    }
                    this._updatePath();
                    if (this._larger) {
                        this.selfUndoSettings.length = this.selfUndoHistoryPos + 1;
                        this.selfUndoSettings.push(JSON.stringify(this._filterSettings.toJsonObject()));
                        this.selfUndoHistoryPos++;
                    }
                }
                this._dragChange = null;
                this._mouseDragging = false;
                this._deletingPoint = false;
                this._mouseDown = false;
                this._writingMods = false;
                this._updateCursor();
            };
            this._useNoteFilter = useNoteFilter;
            this._larger = larger;
            if (this._larger) {
                this.container.addEventListener("keydown", this._whenKeyPressed);
                this._editorWidth = 1200;
                this._editorHeight = 260;
                this._pointRadius = 14;
                this._svg.setAttribute("viewBox", "0 -20 " + this._editorWidth + " " + (this._editorHeight + 30));
                this._label.style.setProperty("font-size", "16px");
                this._label.style.setProperty("position", "");
                this._label.style.setProperty("bottom", "-16px");
                this._label.style.setProperty("min-height", "1em");
                this._dottedLinePath.style.setProperty("stroke-width", "3");
                this._dottedLinePath.style.setProperty("stroke-dasharray", "6, 4");
                this._dottedLinePath.setAttribute("color", ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);
                this.container.style.setProperty("width", "85%");
                this._highlight.setAttribute("r", "20");
                this._controlPointPath.setAttribute("fill", ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);
                for (let i = 0; i < Config.filterMaxPoints; i++) {
                    this._indicators[i] = SVG.text();
                    this._indicators[i].setAttribute("fill", ColorConfig.invertedText);
                    this._indicators[i].setAttribute("text-anchor", "start");
                    this._indicators[i].setAttribute("dominant-baseline", "central");
                    this._indicators[i].setAttribute("pointer-events", "none");
                    this._indicators[i].setAttribute("font-weight", "bolder");
                    this._indicators[i].textContent = "" + (i + 1);
                    this._indicators[i].style.setProperty("display", "none");
                    this._indicators[i].style.setProperty("font-size", "24px");
                    this._svg.appendChild(this._indicators[i]);
                }
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                const filterSettings = this._useNoteFilter ? instrument.noteFilter : instrument.eqFilter;
                this.selfUndoSettings.push(JSON.stringify(filterSettings.toJsonObject()));
                this._subFilters[0] = filterSettings;
                for (let i = 1; i < Config.filterMorphCount; i++) {
                    const subFilter = this._useNoteFilter ? instrument.noteSubFilters[i] : instrument.eqSubFilters[i];
                    if (subFilter != null) {
                        let parsedFilter = new FilterSettings();
                        parsedFilter.fromJsonObject(subFilter.toJsonObject());
                        this._subFilters[i] = parsedFilter;
                    }
                }
            }
            this.container.addEventListener("mousedown", this._whenMousePressed);
            this.container.addEventListener("mouseover", this._whenMouseOver);
            this.container.addEventListener("mouseout", this._whenMouseOut);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _xToFreq(x) {
            return Config.filterFreqRange * x / this._editorWidth - 0.5;
        }
        _freqToX(freq) {
            return this._editorWidth * (freq + 0.5) / Config.filterFreqRange;
        }
        _yToGain(y) {
            return (Config.filterGainRange - 1) * (1 - (y - .5) / (this._editorHeight - 1));
        }
        _gainToY(gain) {
            return (this._editorHeight - 1) * (1 - gain / (Config.filterGainRange - 1)) + .5;
        }
        _whenCursorPressed() {
            this._mouseDown = true;
            const sequence = new ChangeSequence();
            this._dragChange = sequence;
            this._doc.setProspectiveChange(this._dragChange);
            this._updateCursor();
            this._whenCursorMoved();
        }
        _updateCursor() {
            this._freqStart = this._xToFreq(this._mouseX);
            this._gainStart = this._yToGain(this._mouseY);
            this._addingPoint = true;
            this._selectedIndex = -1;
            let nearestDistance = Number.POSITIVE_INFINITY;
            for (let i = 0; i < this._useFilterSettings.controlPointCount; i++) {
                const point = this._useFilterSettings.controlPoints[i];
                const distance = Math.sqrt(Math.pow(this._freqToX(point.freq) - this._mouseX, 2) + Math.pow(this._gainToY(point.gain) - this._mouseY, 2));
                if ((distance <= 13 * (1 + +this._larger) || this._useFilterSettings.controlPointCount >= Config.filterMaxPoints) && distance < nearestDistance) {
                    nearestDistance = distance;
                    this._selectedIndex = i;
                    this._addingPoint = false;
                }
            }
            if (this._addingPoint) {
                const ratio = this._mouseX / this._editorWidth;
                if (ratio < 0.2) {
                    this._addedType = 1;
                }
                else if (ratio < 0.8) {
                    this._addedType = 2;
                }
                else {
                    this._addedType = 0;
                }
            }
        }
        _whenCursorMoved() {
            if (this._writingMods) {
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                this._useFilterSettings = this._getTargetFilterSettings(instrument);
                if (this._dragChange != null) {
                    if (this._dragChange instanceof ChangeSequence && this._dragChange.checkFirst() instanceof ChangeFilterMovePoint) {
                        const data = this._dragChange.checkFirst().getMoveData(true);
                        const newPoint = this._useFilterSettings.controlPoints[this._selectedIndex];
                        if (newPoint == null || newPoint.type != data.point.type) {
                            this._dragChange = null;
                            this._writingMods = false;
                            this._mouseDown = false;
                        }
                        else {
                            newPoint.freq = data.freq;
                            newPoint.gain = data.gain;
                        }
                    }
                    else {
                        this._dragChange = null;
                        this._writingMods = false;
                        this._mouseDown = false;
                    }
                }
            }
            if (this._dragChange != null && (this._doc.lastChangeWas(this._dragChange) || this._writingMods)) {
                this._dragChange.undo();
            }
            else {
                this._mouseDown = false;
            }
            this._dragChange = null;
            this._deletingPoint = false;
            if (this.coordText != null && !this._mouseDown) {
                let gain = Math.round(this._yToGain(this._mouseY));
                let freq = Math.round(this._xToFreq(this._mouseX));
                if (freq >= 0 && freq < Config.filterFreqRange && gain >= 0 && gain < Config.filterGainRange)
                    this.coordText.innerText = "(" + freq + ", " + gain + ")";
                else
                    this.coordText.innerText = "";
            }
            if (this._mouseDown) {
                const sequence = new ChangeSequence();
                this._dragChange = sequence;
                this._doc.setProspectiveChange(this._dragChange);
                if (this._addingPoint) {
                    const gain = Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(this._yToGain(this._mouseY))));
                    const freq = this._findNearestFreqSlot(this._useFilterSettings, this._xToFreq(this._mouseX), -1);
                    if (freq >= 0 && freq < Config.filterFreqRange) {
                        const point = new FilterControlPoint();
                        point.type = this._addedType;
                        point.freq = freq;
                        point.gain = gain;
                        sequence.append(new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._useFilterSettings.controlPointCount, this._useNoteFilter));
                        if (this.coordText != null) {
                            this.coordText.innerText = "(" + freq + ", " + gain + ")";
                        }
                    }
                    else {
                        this._deletingPoint = true;
                    }
                }
                else if (this._selectedIndex >= this._useFilterSettings.controlPointCount || this._selectedIndex == -1) {
                    this._dragChange = null;
                    this._mouseDown = false;
                }
                else {
                    const freqDelta = this._xToFreq(this._mouseX) - this._freqStart;
                    const gainDelta = this._yToGain(this._mouseY) - this._gainStart;
                    let point = this._useFilterSettings.controlPoints[this._selectedIndex];
                    const gain = Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(point.gain + gainDelta)));
                    const freq = this._findNearestFreqSlot(this._useFilterSettings, point.freq + freqDelta, this._selectedIndex);
                    if (Math.round(freqDelta) != 0.0 || Math.round(gainDelta) != 0.0 || freq != point.freq || gain != point.gain) {
                        this._mouseDragging = true;
                    }
                    if (freq >= 0 && freq < Config.filterFreqRange) {
                        sequence.append(new ChangeFilterMovePoint(this._doc, point, point.freq, freq, point.gain, gain, this._useNoteFilter, this._selectedIndex));
                        if (this.coordText != null) {
                            this.coordText.innerText = "(" + freq + ", " + gain + ")";
                            if (!this._writingMods) {
                                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                                instrument.tmpEqFilterStart = instrument.eqFilter;
                                instrument.tmpEqFilterEnd = null;
                                instrument.tmpNoteFilterStart = instrument.noteFilter;
                                instrument.tmpNoteFilterEnd = null;
                            }
                        }
                    }
                    else {
                        sequence.append(new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._selectedIndex, this._useNoteFilter, true));
                        this._deletingPoint = true;
                    }
                }
            }
            if (this._mouseDown || this._mouseOver) {
                this._updatePath();
            }
        }
        _findNearestFreqSlot(filterSettings, targetFreq, ignoreIndex) {
            const roundedFreq = Math.round(targetFreq);
            let lowerFreq = roundedFreq;
            let upperFreq = roundedFreq;
            let tryingLower = (roundedFreq <= targetFreq);
            while (true) {
                let foundConflict = false;
                const currentFreq = tryingLower ? lowerFreq : upperFreq;
                for (let i = 0; i < filterSettings.controlPointCount; i++) {
                    if (i == ignoreIndex)
                        continue;
                    if (filterSettings.controlPoints[i].freq == currentFreq) {
                        foundConflict = true;
                        break;
                    }
                }
                if (!foundConflict)
                    return currentFreq;
                tryingLower = !tryingLower;
                if (tryingLower)
                    lowerFreq--;
                if (!tryingLower)
                    upperFreq++;
            }
        }
        static _circlePath(cx, cy, radius, reverse = false) {
            return `M ${cx - radius} ${cy} ` +
                `a ${radius} ${radius} 0 1 ${reverse ? 1 : 0} ${radius * 2} 0 ` +
                `a ${radius} ${radius} 0 1 ${reverse ? 1 : 0} ${-radius * 2} 0 `;
        }
        _updatePath() {
            this._highlight.style.display = "none";
            this._label.textContent = "";
            let controlPointPath = "";
            let dottedLinePath = "";
            for (let i = 0; i < this._useFilterSettings.controlPointCount; i++) {
                const point = this._useFilterSettings.controlPoints[i];
                const pointX = this._freqToX(point.freq);
                const pointY = this._gainToY(point.gain);
                controlPointPath += FilterEditor._circlePath(pointX, pointY, this._pointRadius);
                if (point.type == 1) {
                    dottedLinePath += "M " + 0 + " " + pointY + " L " + pointX + " " + pointY + " ";
                }
                else if (point.type == 0) {
                    dottedLinePath += "M " + this._editorWidth + " " + pointY + " L " + pointX + " " + pointY + " ";
                }
                if (this._selectedIndex == i && this._mouseOver && !this._mouseDown) {
                    this._highlight.setAttribute("cx", String(pointX));
                    this._highlight.setAttribute("cy", String(pointY));
                    this._highlight.style.display = "";
                    if (this.coordText != null) {
                        this.coordText.innerText = "(" + point.freq + ", " + point.gain + ")";
                    }
                }
                if ((this._selectedIndex == i || (this._addingPoint && this._mouseDown && i == this._useFilterSettings.controlPointCount - 1)) && (this._mouseOver || this._mouseDown) && !this._deletingPoint) {
                    this._label.textContent = (i + 1) + ": " + Config.filterTypeNames[point.type] + (this._larger ? " @" + prettyNumber(point.getHz()) + "Hz" : "");
                }
                if (this._larger) {
                    this._indicators[i].style.setProperty("display", "");
                    this._indicators[i].setAttribute("x", "" + (pointX - 7));
                    this._indicators[i].setAttribute("y", "" + (pointY + 2));
                }
            }
            this._controlPointPath.setAttribute("d", controlPointPath);
            this._dottedLinePath.setAttribute("d", dottedLinePath);
            if (this._addingPoint && !this._mouseDown && this._mouseOver) {
                this._label.textContent = "+ " + Config.filterTypeNames[this._addedType];
            }
            if (this._larger) {
                for (let i = this._useFilterSettings.controlPointCount; i < Config.filterMaxPoints; i++) {
                    this._indicators[i].style.setProperty("display", "none");
                }
            }
            const standardSampleRate = 44800;
            const filters = [];
            for (let i = 0; i < this._useFilterSettings.controlPointCount; i++) {
                const point = this._useFilterSettings.controlPoints[i];
                const filter = new FilterCoefficients();
                point.toCoefficients(filter, standardSampleRate);
                filters.push(filter);
            }
            const response = new FrequencyResponse();
            let responsePath = "M 0 " + this._editorHeight + " ";
            for (let i = -1; i <= Config.filterFreqRange; i++) {
                const hz = FilterControlPoint.getHzFromSettingValue(i);
                const cornerRadiansPerSample = 2.0 * Math.PI * hz / standardSampleRate;
                const real = Math.cos(cornerRadiansPerSample);
                const imag = Math.sin(cornerRadiansPerSample);
                let linearGain = 1.0;
                for (const filter of filters) {
                    response.analyzeComplex(filter, real, imag);
                    linearGain *= response.magnitude();
                }
                const gainSetting = Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter;
                const y = this._gainToY(gainSetting);
                const x = this._freqToX(i);
                responsePath += "L " + prettyNumber(x) + " " + prettyNumber(y) + " ";
            }
            responsePath += "L " + this._editorWidth + " " + this._editorHeight + " L 0 " + this._editorHeight + " z ";
            this._responsePath.setAttribute("d", responsePath);
        }
        swapToSettings(settings, useHistory = false) {
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            new ChangeFilterSettings(this._doc, settings, this._filterSettings, this._useNoteFilter, this._subFilters, this._useNoteFilter ? instrument.noteSubFilters : instrument.eqSubFilters);
            this._filterSettings = settings;
            this._subFilters[this._subfilterIndex] = settings;
            if (useHistory && this._larger) {
                this.selfUndoSettings.length = this.selfUndoHistoryPos + 1;
                this.selfUndoSettings.push(JSON.stringify((this._filterSettings.toJsonObject())));
                this.selfUndoHistoryPos++;
            }
            this._useFilterSettings = this._filterSettings;
            this._updatePath();
        }
        saveSettings() {
            let firstFilter = new FilterSettings;
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            firstFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[0])));
            this._doc.record(new ChangeFilterSettings(this._doc, this._subFilters[0], firstFilter, this._useNoteFilter, this._subFilters, this._useNoteFilter ? instrument.noteSubFilters : instrument.eqSubFilters), true);
        }
        undo() {
            if (this.selfUndoHistoryPos > 0) {
                this.selfUndoHistoryPos--;
                if (this.selfUndoSettings[this.selfUndoHistoryPos + 1] != null && this.selfUndoSettings[this.selfUndoHistoryPos + 1].startsWith("jmp")) {
                    let str = this.selfUndoSettings[this.selfUndoHistoryPos + 1];
                    let jumpIndex = +str.substring(3, str.indexOf("|"));
                    this.swapToSubfilter(this._subfilterIndex, jumpIndex);
                    return jumpIndex;
                }
                else if (this.selfUndoSettings[this.selfUndoHistoryPos].startsWith("jmp")) {
                    let savedFilter = new FilterSettings();
                    let str = this.selfUndoSettings[this.selfUndoHistoryPos];
                    savedFilter.fromJsonObject(JSON.parse(str.substring(str.indexOf(":") + 1)));
                    this.swapToSettings(savedFilter, false);
                }
                else {
                    let savedFilter = new FilterSettings();
                    savedFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[this.selfUndoHistoryPos])));
                    this.swapToSettings(savedFilter, false);
                }
            }
            return -1;
        }
        redo() {
            if (this.selfUndoHistoryPos < this.selfUndoSettings.length - 1) {
                this.selfUndoHistoryPos++;
                if (this.selfUndoSettings[this.selfUndoHistoryPos].startsWith("jmp")) {
                    let str = this.selfUndoSettings[this.selfUndoHistoryPos];
                    let jumpIndex = +str.substring(str.indexOf("|") + 1, str.indexOf(":"));
                    this.swapToSubfilter(this._subfilterIndex, jumpIndex, false);
                    return jumpIndex;
                }
                else {
                    let savedFilter = new FilterSettings();
                    savedFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[this.selfUndoHistoryPos])));
                    this.swapToSettings(savedFilter, false);
                }
            }
            return -1;
        }
        resetToInitial() {
            this.selfUndoHistoryPos = 1;
            this.undo();
        }
        swapSubfilterIndices(newIndex) {
            if (this._selectedIndex == -1)
                return;
            if (newIndex >= this._useFilterSettings.controlPointCount)
                return;
            let tmp = this._useFilterSettings.controlPoints[this._selectedIndex];
            this._useFilterSettings.controlPoints[this._selectedIndex] = this._useFilterSettings.controlPoints[newIndex];
            this._useFilterSettings.controlPoints[newIndex] = tmp;
            this.render();
        }
        swapToSubfilter(oldIndex, newIndex, useHistory = false) {
            if (oldIndex != newIndex) {
                let currFilter = new FilterSettings();
                currFilter.fromJsonObject(this._filterSettings.toJsonObject());
                this._subFilters[oldIndex] = currFilter;
                if (this._subFilters[newIndex] == undefined) {
                    let parsedFilter = new FilterSettings();
                    parsedFilter.fromJsonObject(this._subFilters[0].toJsonObject());
                    this._subFilters[newIndex] = parsedFilter;
                }
                if (useHistory) {
                    this.selfUndoSettings.length = this.selfUndoHistoryPos + 1;
                    this.selfUndoSettings.push("jmp" + oldIndex + "|" + newIndex + ":" + JSON.stringify(this._subFilters[newIndex].toJsonObject()));
                    this.selfUndoHistoryPos++;
                }
                this._subfilterIndex = newIndex;
                this.swapToSettings(this._subFilters[newIndex], false);
            }
        }
        _getTargetFilterSettings(instrument) {
            let targetSettings = (this._useNoteFilter) ? instrument.tmpNoteFilterStart : instrument.tmpEqFilterStart;
            if (targetSettings == null)
                targetSettings = (this._useNoteFilter) ? instrument.noteFilter : instrument.eqFilter;
            return targetSettings;
        }
        render(activeMods = false, forceModRender = false) {
            this._writingMods = forceModRender && this._mouseDown;
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            const filterSettings = this._useNoteFilter ? instrument.noteFilter : instrument.eqFilter;
            let displayMods = (activeMods && !this._larger && (forceModRender || (!this._mouseOver && !this._mouseDragging && !this._mouseDown)) && this._doc.synth.playing);
            if (displayMods)
                this._controlPointPath.style.setProperty("fill", `${ColorConfig.overwritingModSlider}`);
            else if (!this._larger)
                this._controlPointPath.style.setProperty("fill", "currentColor");
            if (this._useFilterSettings != filterSettings && !this._writingMods) {
                this._dragChange = null;
                this._mouseDown = false;
            }
            this._filterSettings = filterSettings;
            if (displayMods) {
                this._useFilterSettings = this._getTargetFilterSettings(instrument);
                if (this._writingMods)
                    this._whenCursorMoved();
            }
            else {
                this._useFilterSettings = filterSettings;
            }
            if (!this._mouseDown)
                this._updateCursor();
            let pointTypes = 0;
            let pointFreqs = 0;
            let pointGains = 0;
            for (let i = 0; i < this._useFilterSettings.controlPointCount; i++) {
                const point = this._useFilterSettings.controlPoints[i];
                pointTypes = pointTypes * 3 + point.type;
                pointFreqs = pointFreqs * Config.filterFreqRange + point.freq;
                pointGains = pointGains * Config.filterGainRange + point.gain;
            }
            if (this._renderedSelectedIndex != this._selectedIndex ||
                this._renderedPointCount != this._useFilterSettings.controlPointCount ||
                this._renderedPointTypes != pointTypes ||
                this._renderedPointFreqs != pointFreqs ||
                this._renderedPointGains != pointGains) {
                this._renderedSelectedIndex = this._selectedIndex;
                this._renderedPointCount = this._useFilterSettings.controlPointCount;
                this._renderedPointTypes = pointTypes;
                this._renderedPointFreqs = pointFreqs;
                this._renderedPointGains = pointGains;
                this._updatePath();
            }
        }
    }

    const { button: button$p, div: div$p, h2: h2$o, p: p$a } = HTML;
    class CustomFilterPrompt {
        constructor(_doc, _songEditor, _useNoteFilter) {
            this._doc = _doc;
            this._songEditor = _songEditor;
            this._useNoteFilter = _useNoteFilter;
            this.filterData = new FilterSettings;
            this.startingFilterData = new FilterSettings;
            this._subfilterIndex = 0;
            this._playButton = button$p({ style: "width: 55%;", type: "button" });
            this._filterButtons = [];
            this._filterButtonContainer = div$p({ class: "instrument-bar", style: "justify-content: center;" });
            this._cancelButton = button$p({ class: "cancelButton" });
            this._okayButton = button$p({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._filterContainer = div$p({ style: "width: 100%; display: flex; flex-direction: row; align-items: center; justify-content: center;" });
            this._editorTitle = div$p({ class: "promptTitle" }, h2$o({ class: "edit-filterExt", style: "text-align: inherit;" }, ""), h2$o({ class: "edit-filterTitle" }, "Edit Filter"));
            this._filterCopyButton = button$p({ style: "width:86px; margin-right: 5px;", class: "copyButton" }, [
                "Copy",
                SVG.svg({ style: "flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;", width: "2em", height: "2em", viewBox: "-5 -21 26 26" }, [
                    SVG.path({ d: "M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z", fill: "currentColor" }),
                ]),
            ]);
            this._filterPasteButton = button$p({ style: "width:86px;", class: "pasteButton" }, [
                "Paste",
                SVG.svg({ style: "flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;", width: "2em", height: "2em", viewBox: "0 0 26 26" }, [
                    SVG.path({ d: "M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z", stroke: "currentColor", fill: "none" }),
                    SVG.path({ d: "M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z", fill: "currentColor", }),
                ]),
            ]);
            this._filterCopyPasteContainer = div$p({ style: "width: 185px;" }, this._filterCopyButton, this._filterPasteButton);
            this._filterCoordinateText = div$p({ style: "text-align: left; margin-bottom: 0px; font-size: x-small; height: 1.3em; color: " + ColorConfig.secondaryText + ";" }, p$a(""));
            this.container = div$p({ class: "prompt noSelection", style: "width: 600px;" }, this._editorTitle, div$p({ style: "display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;" }, this._playButton), this._filterButtonContainer, this._filterContainer, div$p({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton, this._filterCopyPasteContainer), this._cancelButton);
            this._setSubfilter = (index, useHistory = true, doSwap = true) => {
                this._filterButtons[this._subfilterIndex].classList.remove("selected-instrument");
                if (doSwap)
                    this.filterEditor.swapToSubfilter(this._subfilterIndex, index, useHistory);
                this._subfilterIndex = index;
                this._filterButtons[index].classList.add("selected-instrument");
            };
            this._copyFilterSettings = () => {
                const filterCopy = this._useNoteFilter
                    ? this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].noteFilter.toJsonObject()
                    : this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].eqFilter.toJsonObject();
                window.localStorage.setItem("filterCopy", JSON.stringify(filterCopy));
            };
            this._pasteFilterSettings = () => {
                let filterCopy = new FilterSettings();
                filterCopy.fromJsonObject(JSON.parse(String(window.localStorage.getItem("filterCopy"))));
                if (filterCopy != null) {
                    this.filterEditor.swapToSettings(filterCopy, true);
                }
            };
            this._whenKeyPressed = (event) => {
                if (event.keyCode == 90) {
                    let newIdx = this.filterEditor.undo();
                    if (newIdx >= 0) {
                        this._setSubfilter(newIdx, false, false);
                    }
                    event.stopPropagation();
                }
                if (event.keyCode == 89) {
                    let newIdx = this.filterEditor.redo();
                    if (newIdx >= 0) {
                        this._setSubfilter(newIdx, false, false);
                    }
                    event.stopPropagation();
                }
                if (event.keyCode >= 49 && event.keyCode <= 57) {
                    if (!event.shiftKey) {
                        this.filterEditor.swapSubfilterIndices(event.keyCode - 49);
                        event.stopPropagation();
                    }
                }
            };
            this._togglePlay = () => {
                this._songEditor.togglePlay();
                this.updatePlayButton();
            };
            this._close = () => {
                this._doc.prompt = null;
                this.filterEditor.resetToInitial();
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this.whenKeyPressed);
                this._playButton.removeEventListener("click", this._togglePlay);
            };
            this.whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
                else if (event.keyCode == 32) {
                    this._togglePlay();
                    event.preventDefault();
                }
                else if (event.keyCode == 90) {
                    this.filterEditor.undo();
                    event.stopPropagation();
                }
                else if (event.keyCode == 89) {
                    this.filterEditor.redo();
                    event.stopPropagation();
                }
                else if (event.keyCode == 219) {
                    this._doc.synth.goToPrevBar();
                }
                else if (event.keyCode == 221) {
                    this._doc.synth.goToNextBar();
                }
                else if (event.keyCode >= 48 && event.keyCode <= 57) {
                    if (event.shiftKey) {
                        this._setSubfilter(event.keyCode - 48);
                    }
                }
            };
            this._saveChanges = () => {
                this._doc.prompt = null;
                this.filterEditor.saveSettings();
            };
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._playButton.addEventListener("click", this._togglePlay);
            this._filterCopyButton.addEventListener("click", this._copyFilterSettings);
            this._filterPasteButton.addEventListener("click", this._pasteFilterSettings);
            this.updatePlayButton();
            let colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);
            this.filterEditor = new FilterEditor(_doc, _useNoteFilter, true);
            this._filterContainer.appendChild(this.filterEditor.container);
            this.filterEditor.container.insertBefore(this._filterCoordinateText, this.filterEditor.container.firstChild);
            this.filterEditor.coordText = this._filterCoordinateText;
            this._editorTitle.children[0].innerHTML = (_useNoteFilter) ? "Edit Note Filter" : "Edit EQ Filter";
            let newButton = button$p({ class: "no-underline", style: "max-width: 5em;" }, "Main");
            this._filterButtonContainer.appendChild(newButton);
            this._filterButtons.push(newButton);
            newButton.addEventListener("click", () => { this._setSubfilter(0); });
            for (let i = 1; i < Config.filterMorphCount; i++) {
                let newSubButton = button$p({ class: "no-underline", style: "max-width: 2em;" }, "" + i);
                this._filterButtons.push(newSubButton);
                this._filterButtonContainer.appendChild(newSubButton);
                newSubButton.addEventListener("click", () => { this._setSubfilter(i); });
            }
            this._filterButtons[Config.filterMorphCount - 1].classList.add("last-button");
            this._filterButtons[0].classList.add("selected-instrument");
            this._filterButtonContainer.style.setProperty("--text-color-lit", colors.primaryNote);
            this._filterButtonContainer.style.setProperty("--text-color-dim", colors.secondaryNote);
            this._filterButtonContainer.style.setProperty("--background-color-lit", colors.primaryChannel);
            this._filterButtonContainer.style.setProperty("--background-color-dim", colors.secondaryChannel);
            this._filterContainer.addEventListener("keydown", this._whenKeyPressed);
            this.filterEditor.container.addEventListener("keydown", this._whenKeyPressed);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            setTimeout(() => this._playButton.focus());
            this.filterEditor.render();
        }
        updatePlayButton() {
            if (this._doc.synth.playing) {
                this._playButton.classList.remove("playButton");
                this._playButton.classList.add("pauseButton");
                this._playButton.title = "Pause (Space)";
                this._playButton.innerText = "Pause";
            }
            else {
                this._playButton.classList.remove("pauseButton");
                this._playButton.classList.add("playButton");
                this._playButton.title = "Play (Space)";
                this._playButton.innerText = "Play";
            }
        }
    }

    const { button: button$o, div: div$o, h2: h2$n, input: input$f, label: label$2, br: br$2 } = HTML;
    class InstrumentExportPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._cancelButton = button$o({ class: "cancelButton" });
            this._exportButton = button$o({ class: "exportButton", style: "width:45%;" }, "Export");
            this._exportMultipleBox = input$f({ style: "width: 3em; margin-left: 1em;", type: "checkbox" });
            this._channelName = this._doc.song.channels[this._doc.channel].name == "" ? "Beepbox-Instrument" : this._doc.song.channels[this._doc.channel].name;
            this._fileName = input$f({ type: "text", style: "width: 10em;", value: this._channelName, maxlength: 250, "autofocus": "autofocus" });
            this.container = div$o({ class: "prompt noSelection", style: "width: 200px;" }, div$o({ class: "promptTitle" }, h2$n({ class: "export-instrumentExt", style: "text-align: inherit;" }, ""), h2$n({ class: "export-instrumentTitle" }, "Export Instruments Options")), div$o({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-between;" }, "File name:", this._fileName), label$2({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, "Export all instruments", br$2(), "in channel:", this._exportMultipleBox), div$o({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._exportButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._cancelButton.removeEventListener("click", this._close);
                this._exportButton.removeEventListener("click", this._decide_export);
                this._fileName.removeEventListener("input", InstrumentExportPrompt._validateFileName);
            };
            this._decide_export = () => {
                this._exportMultipleBox.checked ? this._export_multiple() : this._export_single();
            };
            this._export_multiple = () => {
                const channel = this._doc.song.channels[this._doc.channel];
                const instruments = channel.instruments.map((instrument) => {
                    const instrumentCopy = instrument.toJsonObject();
                    instrumentCopy["isDrum"] = this._doc.song.getChannelIsNoise(this._doc.channel);
                    return instrumentCopy;
                });
                const jsonBlob = new Blob([JSON.stringify(instruments)], { type: 'application/json' });
                const downloadLink = document.createElement('a');
                downloadLink.href = URL.createObjectURL(jsonBlob);
                downloadLink.download = this._fileName.value + '.json';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                this._close();
            };
            this._export_single = () => {
                const channel = this._doc.song.channels[this._doc.channel];
                const instrument = channel.instruments[this._doc.getCurrentInstrument()];
                const instrumentCopy = instrument.toJsonObject();
                instrumentCopy["isDrum"] = this._doc.song.getChannelIsNoise(this._doc.channel);
                const jsonBlob = new Blob([JSON.stringify(instrumentCopy)], { type: 'application/json' });
                const downloadLink = document.createElement('a');
                downloadLink.href = URL.createObjectURL(jsonBlob);
                downloadLink.download = this._fileName.value + '.json';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                this._close();
            };
            this._cancelButton.addEventListener("click", this._close);
            this._exportButton.addEventListener("click", this._decide_export);
            this._fileName.addEventListener("input", InstrumentExportPrompt._validateFileName);
        }
        static _validateFileName(event, use) {
            let input;
            if (event != null) {
                input = event.target;
            }
            else if (use != undefined) {
                input = use;
            }
            else {
                return;
            }
            const deleteChars = /[\+\*\$\?\|\{\}\\\/<>#%!`&'"=:@]/gi;
            if (deleteChars.test(input.value)) {
                let cursorPos = input.selectionStart;
                input.value = input.value.replace(deleteChars, "");
                cursorPos--;
                input.setSelectionRange(cursorPos, cursorPos);
            }
        }
    }

    const { button: button$n, div: div$n, h2: h2$m, input: input$e, select: select$f, option: option$f, code: code$1 } = HTML;
    class InstrumentImportPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._cancelButton = button$n({ class: "cancelButton" });
            this._importStrategySelect = select$f({ style: "width: 100%;" }, option$f({ value: "append" }, "Append instruments to the end of the list."), option$f({ value: "replace" }, "Replace only the selected instrument."), option$f({ value: "all" }, "Replace all instruments in the channel."));
            this._fileInput = input$e({ type: "file", accept: ".json,application/json" });
            this.importStratSelectDiv = div$n({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$n({ class: "selectContainer", style: "width: 100%;" }, this._importStrategySelect));
            this.warningText = div$n({}, div$n({ style: "text-align: left;" }, "You must enable either ", code$1("Simultaneous instruments per channel"), " or ", code$1("Different instruments per pattern"), " to change the import strategy."));
            this.container = div$n({ class: "prompt noSelection", style: "width: 300px;" }, div$n({ class: "promptTitle" }, h2$m({ class: "import-instrumentExt", style: "text-align: inherit;" }, ""), h2$m({ class: "import-instrumentTitle" }, "Import Instrument(s)")), this.warningText, this.importStratSelectDiv, this._fileInput, this._cancelButton);
            this._whenFileSelected = () => {
                const file = this._fileInput.files[0];
                if (!file)
                    return;
                const reader = new FileReader();
                reader.onload = (e) => {
                    var _a;
                    try {
                        const fileParsed = JSON.parse(String((_a = e.target) === null || _a === void 0 ? void 0 : _a.result));
                        console.log("Processing file:", fileParsed);
                        if (fileParsed.constructor.name == "Array") {
                            if ((this._doc.song.patternInstruments || this._doc.song.layeredInstruments) == false) {
                                alert("Instrument file contains multiple instruments! Please turn on either Simultaneous instruments per channel or Different instruments per pattern!");
                                return;
                            }
                            this._import_multiple(fileParsed);
                            return;
                        }
                        else {
                            this._import_single(fileParsed);
                        }
                    }
                    catch (error) {
                        console.error('Error reading file:', error);
                    }
                };
                reader.readAsText(file);
            };
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._fileInput.removeEventListener("change", this._whenFileSelected);
                this._cancelButton.removeEventListener("click", this._close);
            };
            this._import_multiple = (file) => {
                const channel = this._doc.song.channels[this._doc.channel];
                const currentInstrum = channel.instruments[this._doc.getCurrentInstrument()];
                switch (this._importStrategySelect.value) {
                    case "replace":
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        const firstInstrum = file[0];
                        this._doc.record(new ChangePasteInstrument(this._doc, currentInstrum, firstInstrum));
                        for (let i = 1; i < file.length; i++) {
                            const insturm = file[i];
                            if (!this._validate_instrument_limit(channel)) {
                                alert("Max instruments reached! Some instruments were not imported.");
                                break;
                            }
                            this._doc.record(new ChangeAppendInstrument(this._doc, channel, insturm));
                        }
                        this._doc.record(new ChangeViewInstrument(this._doc, this._doc.getCurrentInstrument()));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                    case "all":
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        channel.instruments.length = 0;
                        for (let insturm of file) {
                            if (!this._validate_instrument_limit(channel)) {
                                alert("Max instruments reached! Some instruments were not imported.");
                                break;
                            }
                            this._doc.record(new ChangeAppendInstrument(this._doc, channel, insturm));
                        }
                        this._doc.record(new ChangeViewInstrument(this._doc, channel.instruments.length - 1));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                    default:
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        for (let insturm of file) {
                            if (!this._validate_instrument_limit(channel)) {
                                alert("Max instruments reached! Some instruments were not imported.");
                                break;
                            }
                            this._doc.record(new ChangeAppendInstrument(this._doc, channel, insturm));
                        }
                        this._doc.record(new ChangeViewInstrument(this._doc, channel.instruments.length - 1));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                }
            };
            this._validate_instrument_limit = (channel) => {
                if (this._doc.song.getMaxInstrumentsPerChannel() <= channel.instruments.length) {
                    return false;
                }
                return true;
            };
            this._import_single = (file) => {
                const channel = this._doc.song.channels[this._doc.channel];
                const currentInstrum = channel.instruments[this._doc.getCurrentInstrument()];
                switch (this._importStrategySelect.value) {
                    case "replace":
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        this._doc.record(new ChangePasteInstrument(this._doc, currentInstrum, file));
                        this._doc.record(new ChangeViewInstrument(this._doc, this._doc.getCurrentInstrument()));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                    case "all":
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        channel.instruments.length = 1;
                        const firstInstrum = channel.instruments[0];
                        this._doc.record(new ChangePasteInstrument(this._doc, firstInstrum, file));
                        this._doc.record(new ChangeViewInstrument(this._doc, 0));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                    default:
                        if (!this._validate_instrument_limit(channel)) {
                            alert("Max instruments reached! The instrument was not imported.");
                            this._doc.prompt = null;
                            return;
                        }
                        window.localStorage.setItem("instrumentImportStrategy", this._importStrategySelect.value);
                        this._doc.record(new ChangeAppendInstrument(this._doc, channel, file));
                        this._doc.record(new ChangeViewInstrument(this._doc, channel.instruments.length - 1));
                        this._doc.prompt = null;
                        this._doc.notifier.changed();
                        return;
                }
            };
            if ((_doc.song.patternInstruments || _doc.song.layeredInstruments) == false) {
                this._importStrategySelect.disabled = true;
                this._importStrategySelect.value = "replace";
                this.importStratSelectDiv.style.display = "none";
                this.warningText.style.display = "";
            }
            else {
                const lastStrategy = window.localStorage.getItem("instrumentImportStrategy");
                if (lastStrategy != null)
                    this._importStrategySelect.value = lastStrategy;
                this.importStratSelectDiv.style.display = "";
                this.warningText.style.display = "none";
            }
            this._fileInput.addEventListener("change", this._whenFileSelected);
            this._cancelButton.addEventListener("click", this._close);
        }
    }

    class CustomThemeBases {
        static setFont(name) {
            let font = this.baseFonts[name];
            if (font == undefined)
                font = this.baseFonts["Roboto"];
            this._fontStyleElement.textContent = font;
        }
        static getFontProperties() {
            return this._fontStyleElement.textContent;
        }
        static setBackground(name) {
            let background = this.baseBackgrounds[name];
            if (background == undefined)
                background = this.baseBackgrounds["none"];
            this._bgStyleElement.textContent = background;
        }
        static getBackgroundProperties() {
            return this._bgStyleElement.textContent;
        }
        static setBorder(name) {
            let border = this.baseBorders[name];
            if (border == undefined)
                border = this.baseBorders["none"];
            this._borderStyleElement.textContent = border;
        }
        static getBorderProperties() {
            return this._borderStyleElement.textContent;
        }
        static setIcons(name) {
            let icons = this.baseIcons[name];
            if (icons == undefined)
                icons = this.baseIcons["none"];
            this._iconStyleElement.textContent = icons;
        }
        static getIconProperties() {
            return this._iconStyleElement.textContent;
        }
        static setCursor(name) {
            let cursor = this.baseCursor[name];
            if (cursor == undefined)
                cursor = this.baseCursor["none"];
            this._cursorStyleElement.textContent = cursor;
        }
        static getCursorProperties() {
            return this._cursorStyleElement.textContent;
        }
    }
    CustomThemeBases.baseFonts = {
        "none": `
        `,
        "AbyssType": `

        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}

        `,
        "AbyssType Small": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "AbyssType Fusion": `

        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/abysstype.otf") format("opentype") tech(color-COLRv1),
            }

            @font-face {
            font-family: "AbyssTypeSmall";
            src:
             url("./image_assets/abysstype_small.otf") format("opentype") tech(color-COLRv1),
            }    

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'AbyssTypeSmall' !important;
			}

        `,
        "Doom 1993": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/doomfont.otf") format("opentype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Tahoma Pixel": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/tahoma.otf") format("opentype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Trebuchet": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("./image_assets/trebuc.otf") format("opentype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Monospace": `

            html {
 		   	font-family: monospace;
			}

			div.channelBoxLabel {
				font-family: monospace !important;
			}
        `,
        "Frutiger": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
             url("https://choptop84.github.io/choptop84s-image-repository/FrutigerLight.ttf") format("truetype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Workbench": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
            url("./image_assets/Workbench.ttf") format("truetype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Varela": `
        @font-face {
            font-family: "CustomThemeFont";
            src:
            url("./image_assets/Varela.ttf") format("truetype") tech(color-COLRv1),
            }

            html {
 		   	font-family: 'CustomThemeFont';
			}

			div.channelBoxLabel {
				font-family: 'CustomThemeFont' !important;
			}
        `,
        "Arial": `

            html {
 		   	font-family: Arial;
			}

			div.channelBoxLabel {
				font-family: Arail !important;
			}
        `,
        "Comic Sans": `

            html {
 		   	font-family: cursive;
			}

			div.channelBoxLabel {
				font-family: cursive !important;
			}
        `,
        "Helvetica": `

            html {
 		   	font-family: Helvetica;
			}

			div.channelBoxLabel {
				font-family: Helvetica !important;
			}
        `,
        "Sans Serif": `

            html {
 		   	font-family: sans-serif;
			}

			div.channelBoxLabel {
				font-family: sans-serif !important;
			}
        `,
    };
    CustomThemeBases.baseBorders = {
        "none": `
        `,
        "AbyssBox Classic": `
			#text-content {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch; 
    				padding: 12px; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/abyssbox_border.png");
    				border-image-slice: 4 fill; 
   				border-image-width: 8px; 
				border-image-repeat: stretch;
    				padding: 12px;

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */ 
				}
			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton, 
			button.prevBarButton, 
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton, 
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
    				border-image-source: url("./image_assets/abyssbox_border.png") !important;
    				border-image-slice: 4 fill !important; 
   				border-image-width: 4px !important; 
				border-image-repeat: stretch !important;
    				padding: 4px !important; 

    				image-rendering: -moz-crisp-edges !important;         /* Firefox */
    				image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    				image-rendering: -o-crisp-edges !important;            /* Opera */
    				image-rendering: pixelated !important;                 /* Future browsers */
    				image-rendering: optimizeSpeed !important;             /* IE */

				}

			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: #1e0915 !important;
				border-image-source:none !important;
			}

				select.trackSelectBox {
					border-image: none !important;
				}
				
				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}
        `,
        "AbyssBox Competitive": `
			.beepboxEditor button,
			button.mobilePatternButton,
			button.mobileTrackButton,
			button.mobileSettingsButton,
			button.mobilePlayButton,
			button.mobilePauseButton,
			button.cancelButton,
			button.mobileNextBarButton,
			button.mobilePrevBarButton,
			button.insertChannelButton,
			button.playButton,
			button.pauseButton, 
			button.recordButton, 
			button.stopButton,
			button.nextBarButton,
			button.prevBarButton,
			button.copyButton, 
			button.pasteButton, 
			button.exportInstrumentButton, 
			button.importInstrumentButton,
			button.okayButton, 
			button.songLoopButton,
			.beepboxEditor select, 
			.beepboxEditor .select2-selection__rendered {
					border-style: double !important;
					border-radius: 0px !important;
					--ui-widget-background: black;
			}

			button.add-envelope::before,
			button.notesDownButton::before,
			button.notesUpButton::before,
			button.copyPatternButton::before,
			button.pastePatternButton::before,
			button.insertChannelButton::before,
			button.undoButton::before,
			button.redoButton::before,
			button.loopBarButton::before,
			button.duplicateButton::before,
			button.selectAllButton::before,
			button.deleteChannelButton::before, 
			button.insertRowButton::before,
			button.okayButton::before, 
			button.songLoopButton::before,
			.delete-envelope::before {
				left: -3px !important;
				top: -3px !important;
			}

			button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: var(--editor-background) !important;
				border-image-source: none !important;
			}

			div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
				--ui-widget-background: black !important;
				border-image-source:none !important;
				border-style: none !important;
			}

				select.trackSelectBox {
					border-image: none !important;
					border-style: none !important;
				}

        `,
        "AbyssBox Light": `
        .promptContainerBG::before {
            box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
        }

        /* sets background image */
        body {
        background-image: url("./image_assets//stripesbg_light.gif") !important;
        background-position: center;
        background-repeat: repeat;

        image-rendering: -moz-crisp-edges !important;         /* Firefox */
        image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
        image-rendering: -o-crisp-edges !important;            /* Opera */
        image-rendering: pixelated !important;                 /* Future browsers */
        image-rendering: optimizeSpeed !important;             /* IE */
            }		
    #text-content {
            border-image-source: url("./image_assets//abyssbox_border_light.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: stretch; 
            padding: 12px; 

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
    #beepboxEditorContainer {
            border-image-source: url("./image_assets//abyssbox_border_light.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: stretch;
            padding: 12px;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
        }
        .beepboxEditor button,
        button.mobilePatternButton,
        button.mobileTrackButton,
        button.mobileSettingsButton,
        button.mobilePlayButton,
        button.mobilePauseButton,
        button.mobileNextBarButton,
        button.mobilePrevBarButton,
        button.playButton,
        button.pauseButton, 
        button.recordButton, 
        button.stopButton,
        button.nextBarButton, 
        button.prevBarButton, 
        button.copyButton, 
        button.pasteButton, 
        button.exportInstrumentButton, 
        button.importInstrumentButton, 
        .beepboxEditor select, 
        .beepboxEditor .select2-selection__rendered {
                border-image-source: url("./image_assets/abyssbox_border_light.png") !important;
                border-image-slice: 4 fill !important; 
               border-image-width: 4px !important; 
            border-image-repeat: stretch !important;
                padding: 4px !important; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }

        div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
            --ui-widget-background: var(--editor-background) !important;
            border-image-source:none !important;
        }

        select.trackSelectBox {
            border-image: none !important;
        }

        button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
            --ui-widget-background: var(--editor-background) !important;
            border-image-source: none !important;
        }

        `,
        "Scratch": `
        div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0.5 !important;
		}

		  #text-content > section > h1 {
			margin: auto;
			content: url("https://file.garden/ZMQ0Om5nmTe-x2hq/AbyssBox%20Scratch%20Logo3.png");
		  }
		  .beepboxEditor,
		  #beepboxEditorContainer {
			background-color: rgb(255, 255, 255) !important;
			border-radius: 6px;
			box-shadow: 0px 0px 0px 4px rgba(158, 158, 158, 0.91);
		  }
		  .beepboxEditor .loopEditor {
			--editor-background: #4d97ff40 !important;
			border-radius: 3px;
		  }
		  .beepboxEditor .muteEditor {
			--editor-background: #4d97ff40 !important;
			border-radius: 0px;
			height: 158px;
		  }
		  .beepboxEditor .pattern-area {
			--editor-background: #4d97ff40 !important;
			border-radius: 3px;
		  }
		  .beepboxEditor .trackContainer svg {
			--editor-background: #3100ff !important;
		  }
		  .beepboxEditor .muteEditor > :last-child {
			--editor-background: #4d97ff40 !important;
		  }
		  .beepboxEditor #octaveScrollBarContainer {
			background-color: #4d97ff40;
		  }
		  .beepboxEditor .muteButtonText {
			transform: translate(0px, 1px) !important;
			color: #777 !important;
		  }
		  .beepboxEditor .instrument-bar {
			--text-color-lit: #fff !important;
			--text-color-dim: #4c4c4c !important;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument {
			color: rgb(0, 0, 0) !important;
			text-shadow: 0px 0px 4px var(--text-color-lit);
		  }
		  .beepboxEditor .instrument-bar .deactivated {
			color: rgba(0, 0, 0, 1) !important;
			text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		  }
		  .beepboxEditor .instrument-bar > :not(.last-button) {
			border-color: var(--background-color-lit) !important;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument {
			border-color: rgba(255, 255, 255, 1) !important;
		  }
		  .beepboxEditor button, button {
			color: #fff;
			background: #3c236f;
		  }
		  .beepboxEditor .instrument-bar .selected-instrument,
		  .beepboxEditor .filterEditor svg,
		  .beepboxEditor .fadeInOut svg,
		  .beepboxEditor .harmonics svg,
		  .beepboxEditor .spectrum svg {
			background: rgb(255, 255, 255) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.7),
			  inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-thumb {
			background: #000000 !important;
		  }
		  .beepboxEditor input[type="range"]::-moz-range-thumb {
			background: #000000 !important;
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-runnable-track {
			background: rgb(127, 127, 127) !important;
		  }
		  .beepboxEditor input[type="range"]::-moz-range-track {
			background: rgb(127, 127, 127) !important;
		  }
		  .beepboxEditor input[type="range"]::-webkit-slider-runnable-track::focus {
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			  inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="range"]::-moz-range-track::focus {
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
			  0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			  inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			  inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		  }
		  .beepboxEditor input[type="text"],
		  .beepboxEditor input[type="number"] {
			font-size: inherit !important;
			font-weight: bold !important;
			font-family: inherit !important;
			background: #ff8c1a !important;
			text-align: center !important;
			border: 1px solid var(--input-box-outline);
			color: #fff !important;
			box-shadow: 0px 0px 0px 1px rgb(134, 134, 134) !important;
		  }
		  .beepboxEditor .prompt {
			--primary-text: #fff;
			--secondary-text: #fff;
			--ui-widget-background: #351f5f;
			color: #fff !important;
			background: #855cd6 !important;
		  }
		  .beepboxEditor .trackContainer {
			--editor-background: #fff;
		  }
		  #text-content {
			color: #fff;
			background: #855cd6;
		  }
		  body:not(#secondImage) input {
			--primary-text: #000;
		  }
		  body:not(#secondImage) h1 {
			color: #000;
		  }
		  button.copyButton,
		  button.pasteButton,
		  button.exportInstrumentButton,
		  button.importInstrumentButton, 
		  button.addEnvelope,
		  div.editor-controls div button,
		  div.selectRow button,
		  div.effects-menu button,
		  div.effects-menu::before,
		  div.selectContainer select,
		  div.selectContainer::after,
		  span#select2-pitchPresetSelect-container {
			color: white !important;
		  }
		  div#text-content {
			padding-top: 15px;
		  }
		  div#beepboxEditorContainer{
			padding-bottom: 15px;
		  }
		  div.channelBox {
			border-radius: 5px;
		  }
		  div.muteEditor {
			border-radius: 0px !important;
			height: 158px !important;
		  }
		  div.loopEditor {
			border-radius: 0px !important;
		  }
        `,
        "Scratch Addons": `
        div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0.5 !important;
		}
		   #text-content > section > h1 {
			 margin: auto;
			 content: url("https://file.garden/ZMQ0Om5nmTe-x2hq/AbyssBox%20Scratch%20Logo3.png");
		   }
		   .beepboxEditor,
		   #beepboxEditorContainer {
			 background-color: #111111 !important;
			 border-radius: 6px;
			 box-shadow: 0px 0px 0px 4px rgba(158, 158, 158, 0.91);
		   }
		   .beepboxEditor .loopEditor {
			 --editor-background: #111111 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .muteEditor {
			 --editor-background: #4d97ff40 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .pattern-area {
			 --editor-background: #292929 !important;
			 border-radius: 3px;
		   }
		   .beepboxEditor .trackContainer svg {
			 --editor-background: #3100ff !important;
		   }
		   .beepboxEditor .muteEditor > :last-child {
			 --editor-background: #111111 !important;
		   }
		   .beepboxEditor #octaveScrollBarContainer {
			 background-color: #111111;
		   }
		   .beepboxEditor .muteButtonText {
			 transform: translate(0px, 1px) !important;
			 color: #777 !important;
		   }
		   .beepboxEditor .instrument-bar {
			 --text-color-lit: #111111 !important;
			 --text-color-dim: #4c4c4c !important;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument {
			 color: rgb(0, 0, 0) !important;
			 text-shadow: 0px 0px 4px var(--text-color-lit);
		   }
		   .beepboxEditor .instrument-bar .deactivated {
			 color: rgba(0, 0, 0, 1) !important;
			 text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		   }
		   .beepboxEditor .instrument-bar > :not(.last-button) {
			 border-color: var(--background-color-lit) !important;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument {
			 border-color: #111111 !important;
		   }
		   .beepboxEditor button, button {
			 color: #fff;
			 background: #3c236f;
		   }
		   .beepboxEditor .instrument-bar .selected-instrument,
		   .beepboxEditor .filterEditor svg,
		   .beepboxEditor .fadeInOut svg,
		   .beepboxEditor .harmonics svg,
		   .beepboxEditor .spectrum svg {
			 background: rgb(255, 255, 255) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.7),
			   inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-thumb {
			 background: #fff !important;
		   }
		   .beepboxEditor input[type="range"]::-moz-range-thumb {
			 background: #000000 !important;
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-runnable-track {
			 background: rgb(127, 127, 127) !important;
		   }
		   .beepboxEditor input[type="range"]::-moz-range-track {
			 background: rgb(127, 127, 127) !important;
		   }
		   .beepboxEditor input[type="range"]::-webkit-slider-runnable-track::focus {
			 background: rgba(255, 255, 255, 0.2) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			   inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="range"]::-moz-range-track::focus {
			 background: rgba(255, 255, 255, 0.2) !important;
			 box-shadow:
			   0px 0px 1px 1px rgba(0, 0, 0, 0.2),
			   inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
			   inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
		   }
		   .beepboxEditor input[type="text"],
		   .beepboxEditor input[type="number"] {
			 font-size: inherit !important;
			 font-weight: bold !important;
			 font-family: inherit !important;
			 background: #202020 !important;
			 text-align: center !important;
			 border: 1px solid var(--input-box-outline);
			 color: #fff !important;
			 box-shadow: 0px 0px 0px 1px rgb(134, 134, 134) !important;
		   }
		   .beepboxEditor .prompt {
			 --primary-text: #fff;
			 --secondary-text: #fff;
			 --ui-widget-background: #351f5f;
			 color: #fff !important;
			 background: #202020 !important;
		   }
		   .beepboxEditor .trackContainer {
			 --editor-background: #000;
		   }
		   #text-content {
			 color: #fff;
			 background: #202020;
		   }
		   body:not(#secondImage) {
			 background: #202020;
		   }
		   body:not(#secondImage) input {
			 --primary-text: #000;
		   }
		   body:not(#secondImage) h1 {
			 color: #fff;
		   }
		  div#text-content {
			padding-top: 15px;
		  }
		  div#beepboxEditorContainer{
			padding-bottom: 15px;
		  }
		  div.channelBox {
			border-radius: 5px;
		  }
		  div.muteEditor {
			border-radius: 0px !important;
		  }
        `,
        "Undertale": `
        :root {
        --arrow-color: #f67c33;
        --icon-color: #f67c33;
          }
          * {
              --text-enabled-icon:❤️ ;
              }    
              div.promptContainerBG {
                  background-color: var(--editor-background) !important;
                  backdrop-filter: unset !important;
                  opacity: 0.5 !important;
              }

      /* sets background image */
      body {
      background-image: url("https://choptop84.github.io/choptop84s-image-repository/battlebg.png") !important;
      background-position: center;
      background-size: contain;
      background-attachment: fixed;
      background-repeat: no-repeat;
      }
      div.selectContainer.menu.file select,
      div.selectContainer.menu.edit select,
      div.selectContainer.menu.preferences select {
          border-style: solid;
          border-color: #f67c33;
          border-radius: 0px;
      }
      div.selectContainer.menu.file,
      div.selectContainer.menu.edit,
      div.selectContainer.menu.preferences {
          --ui-widget-background: black;
          --icon-color: #f67c33;
          --arrow-color: #f67c33;
          color: #f67c33;
      }
      .beepboxEditor select:focus,
      .beepboxEditor .selectContainer:focus-within
      {
          border-color: #fbff4b !important;
          --ui-widget-background: black !important;
          --icon-color: #f00 !important;
          --arrow-color: #fbff4b !important;
          color: #fbff4b !important;

          --file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
          --edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
          --preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-soul.png");
      }
      .beepboxEditor .menu.edit::before,
      .beepboxEditor .menu.file::before,
      .beepboxEditor .menu.preferences::before {
          background: var(--icon-color) !important;
      }
      .beepboxEditor .menu.edit::after,
      .beepboxEditor .menu.file::after,
      .beepboxEditor .menu.preferences::after {
          background: var(--arrow-color) !important;
      }

      #text-content {
          border-style: solid;
          border-radius: 0px;
          padding-left: 20px;
          padding-right: 20px;
          padding-top: 15px;
      }
  #beepboxEditorContainer {
      border-style: solid;
      border-radius: 0px;
      padding-left: 20px;
      padding-right: 20px;
      padding-bottom: 15px;
      }
        `,
        "Windows Xp": `

			#text-content {
    				border-image-source: url("./image_assets/xptextbg.png");
    				border-image-slice: 11 fill; 
   				border-image-width: 11px; 
				border-image-repeat: stretch;
    				background-color: transparent; 
    				padding: 14px; 
				}
			#beepboxEditorContainer {
    				border-image-source: url("./image_assets/xptextbg.png");
    				border-image-slice: 11 fill; 
   				border-image-width: 11px; 
				border-image-repeat: stretch;
    				background-color: transparent; 
    				padding: 13px; 
				}

			#firstImage {
				background-image: url("./image_assets/xpsongeditorbg.png") !important;
				background-repeat: no-repeat !important;
				background-size: 100% 100% !important;
			}

			div.menu-area {
				--ui-widget-background: #edead9; 
			}
			select {
				--ui-widget-background: #edead9; 
				cursor: url("https://choptop84.github.io/choptop84s-image-repository/xphandcursor.png"), pointer !important;
			}
			div.playback-bar-controls {
				--ui-widget-background: #edead9; 
			}

			.beepboxEditor input[type="range"]::-moz-range-track
			{
				background: rgba(222, 217, 189, 0.2) !important;
				box-shadow:
					0px 0px 1px 1px rgba(0, 0, 0, 0.0), 
					inset 0px 1px 2px 0px rgb(125, 120, 95), 
					inset 0px -1px 0px 0px rgb(255, 255, 255)
				;
				border-radius: 4px;
			} /* Thanks to LeoV's Skeumorphic theme on this one */
			
			.beepboxEditor input[type="range"]::-moz-range-track {
				height: 3px !important;
			}
			
			.beepboxEditor select:focus {
					border-image-source: url("./image_assets/xpbuttonpressedbg.png");
					border-image-slice: 4 fill; 
					border-image-width: 4px; 
					border-image-repeat: repeat;
					background-color: transparent; 
					padding: 6px; 
				}

				button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
					--ui-widget-background: var(--editor-background) !important;
					border-image-source: none !important;
				}
        `,
        "Frutiger Aero": `

		div.promptContainerBG {
			background-color: var(--editor-background) !important;
			backdrop-filter: unset !important;
			opacity: 0 !important;
		}

		div.mute-button::before {
			background: #fff0 !important;
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIcon.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px !important;
			color: #fff0;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		div.mute-button.muted::before {
			background: #fff0 !important;
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIconMuted.png") !important;
			background-size: 18px !important;
			background-position: center !important;
			background-repeat: no-repeat !important;
			mask-size: 800px !important;
			color: #fff0;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
		}

		select.trackSelectBox {
			border-image: none !important;
		}

			canvas#oscilascopeAll {
				background: #2e538c !important; 
				border: 2px solid #84aef000 !important;
			}

			.beepboxEditor .play-pause-area div:last-child {
				position: relative;
				width: 144px;
				height: 32px;
			  }
			  .beepboxEditor .play-pause-area div:last-child::before {
				content: "";
				display: block;
				width: calc(144px + 4px);
				height: calc(32px + 4px);
				box-shadow: 0px -1px 1px 0px rgba(0, 0, 0, 0.5), inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5), inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3);
				position: absolute;
				z-index: 1;
			  }

			div.prompt.noSelection{
				background: linear-gradient(#84aef080, #2a3d6a80) !important; 
				opacity: 77;
				backdrop-filter: blur(14px);
			}  

			svg#firstImage {
				opacity: 50%;
				--editor-background: #84aef0;
            }

			#beepboxEditorContainer {
				background: linear-gradient(#eef3ff80, #395eb380) !important;
				border-style: solid;
  				border-color: lightblue;
				padding-bottom: 5px;
				--inverted-text: black;
				backdrop-filter: blur(14px);
				box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}
			#text-content {
				background: linear-gradient(#395eb380, #03112f80);
				border-style: solid;
  				border-color: lightblue;
				  backdrop-filter: blur(14px);
				  box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);
			}

				.beepboxEditor select
				{
					box-shadow: 0px 1px 3px 0px rgb(0, 0, 0), inset 0px -12px 14px 0px rgba(0, 0, 0, 0.3), inset 0px -15px 0px 0px rgba(0, 0, 0, 0.2);

					--ui-widget-background: linear-gradient(#84aef0, #4f6db3) !important;
					border-image-source:url("https://choptop84.github.io/choptop84s-image-repository/buttonshading.png") !important;
					border-image-slice: 40 fill !important; 
   					border-image-width: 4px !important; 
					border-image-repeat: stretch; 
				

				}

				div.playback-bar-controls button.playButton, 
				div.playback-bar-controls button.pauseButton, 
				div.playback-bar-controls button.recordButton, 
				div.playback-bar-controls button.stopButton, 
				div.playback-bar-controls button.prevBarButton, 
				div.playback-bar-controls button.nextBarButton, 
				div.selectRow button.copyButton, 
				div.selectRow button.pasteButton, 
				div.editor-controls button.exportInstrumentButton, 
				div.editor-controls button.importInstrumentButton,
				div.editor-controls div button.add-envelope,
				div.editor-controls div button.delete-envelope  { 
					box-shadow: 0px 1px 3px 0px rgb(0, 0, 0), inset 0px -12px 14px 0px rgba(0, 0, 0, 0.3), inset 0px -15px 0px 0px rgba(0, 0, 0, 0.2);

					--ui-widget-background: linear-gradient(#84aef0, #4f6db3) !important;
					border-image-source:url("https://choptop84.github.io/choptop84s-image-repository/buttonshading.png") !important;
					border-image-slice: 40 fill !important; 
   					border-image-width: 4px !important; 
					border-image-repeat: stretch; 
				}

				.beepboxEditor select:focus
				{
					border-image-source: none;
					
					--ui-widget-background: linear-gradient(#2a3d6a, #2a3d6a) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px 10px 20px 1px rgba(0, 0, 0, 0.4),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}

				.beepboxEditor .select2-selection__rendered,
				.beepboxEditor .instrument-bar button,
				.beepboxEditor .eq-filter-type-bar button .deactivated,
				.beepboxEditor .note-filter-type-bar button .deactivated
				{
					box-shadow: 0px 1px 3px 0px rgb(0, 0, 0), inset 0px -12px 14px 0px rgba(0, 0, 0, 0.3), inset 0px -15px 0px 0px rgba(0, 0, 0, 0.2);
					--ui-widget-background: linear-gradient(#84aef0, #4f6db3) !important;

					border-image-source:url("https://choptop84.github.io/choptop84s-image-repository/buttonshading.png") !important;
					border-image-slice: 40 fill !important; 
   					border-image-width: 4px !important; 
					border-image-repeat: stretch; 
				}
				.beepboxEditor button, button
				{
					--ui-widget-background: linear-gradient(#84aef0, #2a3d6a) !important;
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				.beepboxEditor .select2-container--open .select2-selection__rendered,
				.beepboxEditor button:focus,
				button:focus,
				.beepboxEditor .instrument-bar .selected-instrument,
				.beepboxEditor .eq-filter-type-bar button:not(.deactivated),
				.beepboxEditor .note-filter-type-bar button:not(.deactivated)
				{
					--ui-widget-background: linear-gradient(#333, #444) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor .filterEditor svg,
				.beepboxEditor .fadeInOut svg,
				.beepboxEditor .harmonics svg,
				.beepboxEditor .spectrum svg
				{
					background: rgba(0, 0, 0, 0.3) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-webkit-slider-thumb
				{
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-ms-thumb
				{
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-ms-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-ms-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-thumb
				{
					height: 16px !important;
					width: 16px !important;
					border-radius: 40px !important;
					box-shadow:
						0px 2px 2px 1px rgba(0, 0, 0, 0.4),
						0px 0px 1px 1px rgba(0, 0, 0, 0.7),
						inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
						inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px -8px 3px rgba(0, 0, 0, 0.2)
					;
				}
				 
				.beepboxEditor input[type="range"]::-moz-range-track
				{
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
					border-radius: 4px;
				}
				 
				.beepboxEditor input[type="range"]:focus::-moz-range-track
				{
					background: rgba(255, 255, 255, 0.2) !important;
					box-shadow:
						0px 0px 1px 1px rgba(0, 0, 0, 0.2),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="text"],
				.beepboxEditor input[type="number"]
				{
					border: none !important;
					background: rgba(0, 0, 0, 0.2) !important;
					box-shadow:
						0px -1px 1px 0px rgba(0, 0, 0, 0.5),
						inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="checkbox"]
				{
					appearance: none;
					background: rgba(0, 0, 0, 0.3);
					color: currentColor;
					border-radius: 1px;
					width: 1em !important;
					height: 1em !important;
					box-shadow:
						inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
						inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
					;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked
				{
					display: flex;
					justify-content: center;
				}
				 
				.beepboxEditor input[type="checkbox"]:checked:after
				{
					width: 1em;
					height: 1em;
					text-align: center;
					font-size: 0.8em;
					content: "✓";
					color: currentColor;
					text-shadow: 0px 0px 2px rgba(255, 255, 255, 0.5);
				}


				/* Use this code down here when you have transparent backgrounds!!! */

		   div.beepboxEditor.load {
			background: none !important;
		   }

		   div.noSelection {
			background: none !important;
		   }

		   .beepboxEditor .loopEditor {
			background: none !important;
		   }

		   .beepboxEditor .muteEditor {
			background: linear-gradient(#c4f0d1, #83c139) !important;
			border-radius: 5px;
			box-shadow: 0px 1px 1px 0px rgb(0, 0, 0), inset 0px 3px 14px 0px rgba(0, 0, 0, 0.1), inset 0px -4px 0px 0px rgba(0, 0, 0, 0.1);
			opacity: 65%;
		   }

		   div.muteEditor div {
			background: none !important;
			--track-editor-bg-pitch: #1b4079;
			--track-editor-bg-noise: #213779;
			--track-editor-bg-mod: #46299e;
			--track-editor-bg-pitch-dim: #0c2b3e; 		
			--track-editor-bg-noise-dim: #08204f; 			
			--track-editor-bg-mod-dim: #26145e; 
		   }

		   div.channelBox {
			border-radius: 5px;
		  }
        `,
        "Skeuomorphic": `
        .channelBox {
			border-radius: 5px;
			box-shadow: 0px 2px 2px 1px rgba(0, 0, 0, 0.2), 0px 0px 1px 1px rgba(0, 0, 0, 0.7), inset 0px -10px 20px 1px rgba(0, 0, 0, 0.1), inset 0px 1px 0px 0px rgba(255, 255, 255, 0.1);
		}
		
		#beepboxEditorContainer, .track-area, .beepboxEditor, #text-content, div.noSelection {
			background-color: #fff0 !important;
		} 
		
		#pitchEditorBackground {
			opacity: 0.5 !important;
			filter: brightness(150%);
        }
		
		#oscilascopeAll {
			margin-left: auto;
			margin-right: auto;
			position: static;
		}
		 
		.beepboxEditor,
		.beepboxEditor select
		{
			text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.5);
		}
		 
		.beepboxEditor .piano-button {
			text-shadow: none;
		}
		 
		.beepboxEditor .prompt
		{
			background: radial-gradient(farthest-corner at 50% 0px, #2a2a2a, #1a1a1a) !important;
		}
		 
		#beepboxEditorContainer {
			background-color: rgba(0, 0, 0, 0) !important;
		}
		 
		.beepboxEditor .trackAndMuteContainer {
			text-shadow: none;
		}
		 
		.beepboxEditor .loopEditor
		{
			--editor-background: rgba(0, 0, 0, 0.0) !important;
		}
		 
		.beepboxEditor .muteEditor
		{
			--editor-background: #1e1e1e !important;
		}
		 
		.beepboxEditor .pattern-area
		{
			--editor-background: rgba(0, 0, 0, 1) !important;
		}
		 
		.beepboxEditor .trackContainer svg
		{
			--editor-background: #111 !important;
		}
		 
		.beepboxEditor .muteEditor > :last-child {
			--editor-background: rgba(0, 0, 0, 0) !important;
		}
		 
		.beepboxEditor #octaveScrollBarContainer {
			background-color: rgba(0, 0, 0, 0.3);
		}
		 
		.beepboxEditor {
			--track-editor-bg-pitch-dim: #1e1f28;
		}
		 
		.beepboxEditor .muteButtonText {
			transform: translate(0px, 1px) !important;
			color: #777 !important;
		}
		 
		.beepboxEditor .instrument-bar {
			--text-color-lit: #eee;
			--text-color-dim: #777;
		}
		 
		.beepboxEditor .instrument-bar .selected-instrument {
			color: rgba(255, 255, 255, 1) !important;
			text-shadow: 0px 0px 4px var(--text-color-lit);
		}
		 
		.beepboxEditor .instrument-bar .deactivated {
			color: rgba(0, 0, 0, 1) !important;
			text-shadow: 0px 1px 0px rgba(255, 255, 255, 0.2);
		}
		 
		.beepboxEditor .instrument-bar > :not(.last-button) {
			border-color: var(--background-color-lit) !important;
		}
		 
		.beepboxEditor .instrument-bar .selected-instrument {
			border-color: rgba(255, 255, 255, 1) !important;
		}
		 
		.beepboxEditor select
		{
			background: #444 !important;
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px -10px 20px 1px rgba(0, 0, 0, 0.4),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor select:focus
		{
			background: #333 !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px 10px 20px 1px rgba(0, 0, 0, 0.4),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .select2-selection__rendered,
		.beepboxEditor button,
		.beepboxEditor .instrument-bar button,
		.beepboxEditor .eq-filter-type-bar button .deactivated,
		.beepboxEditor .note-filter-type-bar button .deactivated
		{
			background: linear-gradient(#444, #333) !important;
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .select2-container--open .select2-selection__rendered,
		.beepboxEditor button:focus,
		.beepboxEditor .instrument-bar .selected-instrument,
		.beepboxEditor .eq-filter-type-bar button:not(.deactivated),
		.beepboxEditor .note-filter-type-bar button:not(.deactivated)
		{
			background: linear-gradient(#333, #444) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor .filterEditor svg,
		.beepboxEditor .fadeInOut svg,
		.beepboxEditor .harmonics svg,
		.beepboxEditor .spectrum svg
		{
			background: rgba(0, 0, 0, 0.3) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-webkit-slider-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-webkit-slider-runnable-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-ms-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-ms-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-ms-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="range"]::-moz-range-thumb
		{
			box-shadow:
				0px 2px 2px 1px rgba(0, 0, 0, 0.4),
				0px 0px 1px 1px rgba(0, 0, 0, 0.7),
				inset 0px 1px 0px 0px rgba(255, 255, 255, 1),
				inset 0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px -8px 3px rgba(0, 0, 0, 0.2)
			;
		}
		 
		.beepboxEditor input[type="range"]::-moz-range-track
		{
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
			border-radius: 4px;
		}
		 
		.beepboxEditor input[type="range"]:focus::-moz-range-track
		{
			background: rgba(255, 255, 255, 0.2) !important;
			box-shadow:
				0px 0px 1px 1px rgba(0, 0, 0, 0.2),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="text"],
		.beepboxEditor input[type="number"]
		{
			border: none !important;
			background: rgba(0, 0, 0, 0.2) !important;
			box-shadow:
				0px -1px 1px 0px rgba(0, 0, 0, 0.5),
				inset 0px 1px 2px 0px rgba(0, 0, 0, 0.5),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="checkbox"]
		{
			appearance: none;
			background: rgba(0, 0, 0, 0.3);
			color: currentColor;
			border-radius: 1px;
			width: 1em !important;
			height: 1em !important;
			box-shadow:
				inset 0px 2px 3px 0px rgba(0, 0, 0, 0.7),
				inset 0px -1px 0px 0px rgba(255, 255, 255, 0.3)
			;
		}
		 
		.beepboxEditor input[type="checkbox"]:checked
		{
			display: flex;
			justify-content: center;
		}
		 
		.beepboxEditor input[type="checkbox"]:checked:after
		{
			width: 1em;
			height: 1em;
			text-align: center;
			font-size: 0.8em;
			content: "✓";
			color: currentColor;
			text-shadow: 0px 0px 2px rgba(255, 255, 255, 0.5);
		}
        `,
        "Glyde": `
             div#beepboxEditorContainer {
                 border-style: solid;
                 border-width: 8px;
                 border-color: #4f152b;
                 padding-bottom: 5px;
             }
                 
             #text-content {
                 border-style: solid;
                 border-width: 8px;
                 border-color: #4f152b;
             }
 
                 div.beepboxEditor.load {
                     background: none !important;
                    }
         
                    div.noSelection {
                     background: none !important;
                    }
         
                    .beepboxEditor .loopEditor {
                     background: none !important;
                    }
         
                    .beepboxEditor .muteEditor {
                     background: none !important;
                    }
         
                    div.muteEditor div {
                     background: none !important;
                    }
        `,
        "Slushie 2": `
        #text-content {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushiepixel_border.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: repeat; 
            padding-left: 12px; 
            padding-right: 12px; 
            padding-bottom: 12px; 
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
    #beepboxEditorContainer {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushiepixel_border.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: repeat;
            padding-left: 12px; 
            padding-right: 12px; 
            padding-bottom: 12px; 

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
        }

        .beepboxEditor button,
        button.mobilePatternButton,
        button.mobileTrackButton,
        button.mobileSettingsButton,
        button.mobilePlayButton,
        button.mobilePauseButton,
        button.mobileNextBarButton,
        button.mobilePrevBarButton,
        button.playButton,
        button.pauseButton, 
        button.recordButton, 
        button.stopButton,
        button.nextBarButton, 
        button.prevBarButton, 
        button.copyButton, 
        button.pasteButton, 
        button.exportInstrumentButton, 
        button.importInstrumentButton, 
        .beepboxEditor select, 
        .beepboxEditor .select2-selection__rendered {
                border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/slushie buttonbg.png") !important;
                border-image-slice: 4 fill !important; 
               border-image-width: 4px !important; 
            border-image-repeat: stretch !important;
                padding: 4px !important; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }

            button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
                --ui-widget-background: var(--editor-background) !important;
                border-image-source: none !important;
            }

        `,
        "BeepBox Pixel": `
        /* sets background image */
        #text-content {
            border-image-source: url("./image_assets//beepbox_pixel_border.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: stretch; 
            padding: 12px; 

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
    #beepboxEditorContainer {
            border-image-source: url("./image_assets//beepbox_pixel_border.png");
            border-image-slice: 4 fill; 
           border-image-width: 8px; 
        border-image-repeat: stretch;
            padding: 12px;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
        }
        .beepboxEditor button,
        button.mobilePatternButton,
        button.mobileTrackButton,
        button.mobileSettingsButton,
        button.mobilePlayButton,
        button.mobilePauseButton,
        button.mobileNextBarButton,
        button.mobilePrevBarButton,
        button.playButton,
        button.pauseButton, 
        button.recordButton, 
        button.stopButton,
        button.nextBarButton, 
        button.prevBarButton, 
        button.copyButton, 
        button.pasteButton, 
        button.exportInstrumentButton, 
        button.importInstrumentButton, 
        .beepboxEditor select, 
        .beepboxEditor .select2-selection__rendered {
            border-image-source: url("./image_assets//beepbox_pixel_border.png") !important;
            border-image-slice: 4 fill !important; 
           border-image-width: 4px !important; 
        border-image-repeat: stretch !important;
            padding: 4px !important; 

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
        `,
        "Forest 2": `
        /* sets background image */
        #text-content {
            --editor-background: (255, 255, 255, 0);
                border-image-source: url("./image_assets/forest2_border.png");
                border-image-slice: 16 fill; 
                   border-image-width: 32px; 
                border-image-repeat: repeat; 
                padding: 36px; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }
        #beepboxEditorContainer {
            --editor-background: (255, 255, 255, 0);
                border-image-source: url("./image_assets/forest2_border.png");
                border-image-slice: 16 fill; 
                   border-image-width: 32px; 
                border-image-repeat: repeat; 
                padding-left: 36px; 
                padding-right: 36px; 
                padding-top: 5px; 
                padding-bottom: 5px; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */ 
            }
        .beepboxEditor button, .beepboxEditor select, .beepboxEditor .select2-selection__rendered, button {
                border-image-source: url("./image_assets/forest2_border2.png") !important;
                border-image-slice: 4 fill !important; 
               border-image-width: 4px !important; 
            border-image-repeat: stretch !important;
                padding: 4px !important; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }
        select.trackSelectBox {
            border-image: none !important;
        }
        div.prompt.noSelection {
            background: var(--editor-background); 
        }
        /* div.channelBox {
        border-radius: 5px;
        } */
        `,
        "Canyon 2": `
        #pattern-area {
            border-style: solid;
            border-color: #0a0000;
            border-bottom: 0;
            border-right: 0;
            border-top: 0;
         }
    
         #text-content {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_border.png");
            border-image-slice: 16 fill; 
            border-image-width: 32px; 
            border-image-repeat: repeat; 
            padding-left: 36px; 
            padding-right: 36px; 
            padding-bottom: 6px; 
        
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            background: #fff0;
         }
     #beepboxEditorContainer {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_border.png");
            border-image-slice: 16 fill; 
            border-image-width: 32px; 
            border-image-repeat: repeat; 
            padding-left: 36px; 
            padding-right: 36px; 
            padding-bottom: 6px; 
            
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            background: #fff0;
         }
    
         .beepboxEditor button,
         button.mobilePatternButton,
         button.mobileTrackButton,
         button.mobileSettingsButton,
         button.mobilePlayButton,
         button.mobilePauseButton,
         button.mobileNextBarButton,
         button.mobilePrevBarButton,
         button.playButton,
         button.pauseButton, 
         button.recordButton, 
         button.stopButton,
         button.nextBarButton, 
         button.prevBarButton, 
         button.copyButton, 
         button.pasteButton, 
         button.exportInstrumentButton, 
         button.importInstrumentButton, 
         .beepboxEditor select, 
         .beepboxEditor .select2-selection__rendered {
                 border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/canyon2_button.png") !important;
                 border-image-slice: 4 fill !important; 
                border-image-width: 4px !important; 
             border-image-repeat: stretch !important;
                 padding: 4px !important; 
    
                 image-rendering: -moz-crisp-edges !important;         /* Firefox */
                 image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                 image-rendering: -o-crisp-edges !important;            /* Opera */
                 image-rendering: pixelated !important;                 /* Future browsers */
                 image-rendering: optimizeSpeed !important;             /* IE */
             }
    
        button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
                --ui-widget-background: var(--editor-background) !important;
                border-image-source: none !important;
            }
        `,
        "Nebula 2": `
        #text-content {
            --editor-background: rgba(255, 255, 255, 0);
                border-image-source: url("./image_assets/nebula2_border.png");
                border-image-slice: 16 fill; 
                   border-image-width: 32px; 
                border-image-repeat: repeat; 
                padding: 36px; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }
        #beepboxEditorContainer {
            --editor-background: rgba(255, 255, 255, 0);
                border-image-source: url("./image_assets/nebula2_border.png");
                border-image-slice: 16 fill; 
                   border-image-width: 32px; 
                border-image-repeat: repeat; 
                padding-left: 36px; 
                padding-right: 36px; 
                padding-top: 5px; 
                padding-bottom: 5px; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */ 
            }
        .beepboxEditor button, .beepboxEditor select, .beepboxEditor .select2-selection__rendered, button {
                border-image-source: url("./image_assets/nebula2_border2.png") !important;
                border-image-slice: 4 fill !important; 
               border-image-width: 4px !important; 
            border-image-repeat: stretch !important;
                padding: 4px !important; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }
            select.trackSelectBox {
                border-image: none !important;
            }
        `,
        "Ghost House 2": `
        #text-content {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg2.png");
            border-image-slice: 16 fill; 
           border-image-width: 32px; 
        border-image-repeat: repeat; 
            padding-left: 32px; 
            padding-right: 32px; 
            padding-bottom: 16px; 
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
    #beepboxEditorContainer {
            border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg2.png");
            border-image-slice: 16 fill; 
           border-image-width: 32px; 
        border-image-repeat: repeat;
            padding-left: 32px; 
            padding-right: 32px; 
            padding-bottom: 16px; 

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
        }

        div.prompt.noSelection {
            background-color: var(--editor-background) !important;
        }
        
        .beepboxEditor button,
        button.mobilePatternButton,
        button.mobileTrackButton,
        button.mobileSettingsButton,
        button.mobilePlayButton,
        button.mobilePauseButton,
        button.mobileNextBarButton,
        button.mobilePrevBarButton,
        button.playButton,
        button.pauseButton, 
        button.recordButton, 
        button.stopButton,
        button.nextBarButton, 
        button.prevBarButton, 
        button.copyButton, 
        button.pasteButton, 
        button.exportInstrumentButton, 
        button.importInstrumentButton, 
        .beepboxEditor select, 
        .beepboxEditor .select2-selection__rendered {
                border-image-source: url("https://choptop84.github.io/choptop84s-image-repository/ghosthouse_button.png") !important;
                border-image-slice: 5 fill !important; 
               border-image-width: 5px !important;  
            border-image-repeat: repeat !important;
                padding: 4px !important; 

                image-rendering: -moz-crisp-edges !important;         /* Firefox */
                image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
                image-rendering: -o-crisp-edges !important;            /* Opera */
                image-rendering: pixelated !important;                 /* Future browsers */
                image-rendering: optimizeSpeed !important;             /* IE */
            }

            button.envelopeDropdown, div.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {
                --ui-widget-background: var(--editor-background) !important;
                border-image-source: none !important;
            }
        `,
    };
    CustomThemeBases.baseBackgrounds = {
        "none": `

        `,
        "AbyssBox Classic": `
        /* sets background image */
		body {
			background-image: url("./image_assets//stripesbg.gif") !important;
			background-position: center;
			background-repeat: repeat;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
			}
        `,
        "AbyssBox Light": `
        /* sets background image */
        body {
            background-image: url("./image_assets//stripesbg_light.gif") !important;
            background-position: center;
            background-repeat: repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            }	
        `,
        "Half-Life": `
        /* sets background image */
            body {
            background-image: url("./image_assets//lambda.png") !important;
            background-position: top;
            background-attachment: fixed;
            background-repeat: no-repeat;
            background-size: cover;
			}
        `,
        "Doom 1993": `
        /* sets background image */
		body {
            background-image: url("doomsky.png") !important;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
			}
        `,
        "Undertale": `
        /* sets background image */
        body {
            background-image: url("https://choptop84.github.io/choptop84s-image-repository/battlebg.png") !important;
            background-position: center;
            background-size: contain;
            background-attachment: fixed;
            background-repeat: no-repeat;
            }
        `,
        "Windows Xp": `
        /* sets background image */
		body {
            background-image: url("./image_assets/xphills.png") !important;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
			}
        `,
        "Frutiger Aero": `
        /* sets background image */
        body {
            background-image: url("https://choptop84.github.io/choptop84s-image-repository/frutigerbg3.jpg") !important;
            background-position: top;
            background-attachment: fixed;
            background-repeat: no-repeat;
            background-size: cover;
            image-rendering: optimizeQuality !important;             /* IE */ 
            }
        `,
        "Skeuomorphic": `
        body {
			background-image: url('https://github.com/choptop84/choptop84s-image-repository/blob/main/skeuobg.png?raw=true') !important;
			background-repeat: no-repeat !important;
			background-size: contain;
		    }

        svg#firstImage {
                background-image: url('https://github.com/choptop84/choptop84s-image-repository/blob/main/skeuobg2.png?raw=true') !important;
            }
        `,
        "Glyde": `
        /* sets background image */
        body {
        background-image: url("https://choptop84.github.io/choptop84s-image-repository/glydebg.png") !important;
        background-position: top right;
        background-repeat: no-repeat !important;

        image-rendering: -moz-crisp-edges !important;         /* Firefox */
        image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
        image-rendering: -o-crisp-edges !important;            /* Opera */
        image-rendering: pixelated !important;                 /* Future browsers */
        image-rendering: optimizeSpeed !important;             /* IE */
            }

            #firstImage {
                background-image: url("https://choptop84.github.io/choptop84s-image-repository/slushiepfp.PNG") !important;
                background-repeat: no-repeat !important;
                background-size: 100% 100% !important;
            }
        `,
        "starry studio": `
        body {
			background-image: url("https://choptop84.github.io/choptop84s-image-repository/stars.gif") !important;
			background-repeat: repeat !important;

			image-rendering: -moz-crisp-edges !important;         /* Firefox */
			image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
			image-rendering: -o-crisp-edges !important;            /* Opera */
			image-rendering: pixelated !important;                 /* Future browsers */
			image-rendering: optimizeSpeed !important;             /* IE */
			}
        `,
        "Slushie 2": `
        body {
            background-image: url("https://choptop84.github.io/choptop84s-image-repository/slushbg.gif") !important;
            background-size: 32px;
            background-position: center;
            background-repeat: repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            }
        `,
        "BeepBox Pixel": `
        /* sets background image */
        body {
            background-image: url("./image_assets//diamondsbg.gif") !important;
            background-position: center;
            background-repeat: repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            }
        `,
        "Forest 2": `
        /* sets background image */
        body {
            background-image: url("./image_assets/Forest2Trees.png") !important;
            background-size: cover;
            background-position: center top; /* Adjusted to align with the top */
              background-repeat: no-repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
            }
        `,
        "Canyon 2": `
        body {
            background-image: url("https://choptop84.github.io/choptop84s-image-repository/canyonbg.png") !important;
            background-size: 200% !important;
            background-position: center top; /* Adjusted to align with the top */
            background-repeat: no-repeat !important;
    
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
            }
        `,
        "Nebula 2": `
        body {
            background-image: url("./image_assets/stars.gif") !important;
            background-size: contain !important;
            background-position: center top !important;
            background-repeat: repeat !important;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */ 
            }
        `,
        "Ghost House 2": `
        body {
            background-image: url("https://choptop84.github.io/choptop84s-image-repository/ghosthousebg.png") !important;
            background-size: 256px;
            background-position: center;
            background-repeat: repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            }
        `,
        "azur lane": `
        /* sets background image */
        body {
            background-image: url("UltraBoxAzurLaneThemeMemoryTaskBackground.png") !important;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            }
        `,
    };
    CustomThemeBases.baseIcons = {
        "none": `
        `,
        "AbyssBox Classic": `
        * {
            --file-page-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-file.png");
            --edit-pencil-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-edit.png");
            --preferences-gear-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-preferences.png");
            --instrument-copy-symbol: url("./image_assets/icon-copy.png");
            --instrument-paste-symbol: url("./image_assets/icon-paste.png");
            --play-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-play.png");
            --pause-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-pause.png");
            --record-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-record.png");
            --stop-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-stop.png");
            --prev-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-prev.png");
            --next-bar-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-next.png");
            --muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speakerMuted.png");
            --unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
            --volume-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-speaker.png");
            --zoom-in-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomIn.png");
            --zoom-out-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-zoomOut.png");
            --export-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-export.png");
            --export-instrument-symbol: var(--export-symbol);
            --import-symbol: url("https://choptop84.github.io/choptop84s-image-repository/icon-import.png");
            }
        `,
        "Scratch": `
        * {
            --play-symbol:url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png");
            --pause-symbol:url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png");
            --stop-symbol:url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png");
            }

            button.playButton::before {
                background-image: url("https://choptop84.github.io/choptop84s-image-repository/Greenflag.png") !important;
                background-size: 18px !important;
                background-position: center !important;
                background-repeat: no-repeat !important;
                mask-size: 800px;
                color: #fff0;
                /* Hold on, before you start asking: "WHAT THE? WHY IS THE ICON SO LARGE!!!" Let me tell ya that this method removes all the filtering issues on the png and it looks incredibly seemless so shush */
            }
    
            button.pauseButton::before {
                background-image: url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png") !important;
                background-size: 18px !important;
                background-position: center !important;
                background-repeat: no-repeat !important;
                mask-size: 800px;
                color: #fff0;
            }
    
            button.stopButton::before {
                background-image: url("https://choptop84.github.io/choptop84s-image-repository/stopsign.png") !important;
                background-size: 18px !important;
                background-position: center !important;
                background-repeat: no-repeat !important;
                mask-size: 800px;
                color: #fff0;
            }
        `,
        "Frutiger Aero": `
            * {
            /*cursor: url("abyssbox_cursor.png"), auto !important;*/
            --muted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIconMuted.png");
            --unmuted-symbol: url("https://choptop84.github.io/choptop84s-image-repository/vistaSpeakerIcon.png");
            }
        `,
        "Windows Xp": `
* {
cursor: url("./image_assets/xpcursor.png"), auto !important;
--play-symbol:url("./image_assets/xpPlay.png");
--pause-symbol:url("./image_assets/xpPause.png");
--record-symbol:url("./image_assets/xpRecord.png");
--stop-symbol:url("./image_assets/xpStop.png");
--prev-bar-symbol:url("./image_assets/xpBackward.png");
--next-bar-symbol:url("./image_assets/xpForward.png");
--file-page-symbol: url("./image_assets/xpFile.png");
--edit-pencil-symbol: url("./image_assets/xpEdit.png");
--preferences-gear-symbol: url("./image_assets/xpPreferences.png");
--muted-symbol: url("./image_assets/xpSpeakerMute.png");
--unmuted-symbol: url("./image_assets/xpSpeaker.png");
--volume-symbol: url("./image_assets/xpSpeaker.png");
--zoom-in-symbol: url("./image_assets/xpZoomIn.png");
--zoom-out-symbol: url("./image_assets/xpZoomOut.png");
}

div.mute-button::before {
    background-image: url("./image_assets/xpSpeaker.png") !important;
    background-size: 120% !important;
    background-position-x: center !important;
    background-position-y: center !important;
    background-repeat: no-repeat !important;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}

div.mute-button.muted::before {
    background-image: url("./image_assets/xpSpeakerMute.png") !important;
    background-size: 120% !important;
    background-position-x: center !important;
    background-position-y: center !important;
    background-repeat: no-repeat !important;
    
    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}

button.recordButton::Before {
    background-image: url("./image_assets/xpRecord.png") !important;
    background-size: 64% !important;
    background-position: center !important;
    background-repeat: no-repeat !important;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

button.stopButton::Before {
    background-image: url("./image_assets/xpStop.png") !important;
    background-size: 64% !important;
    background-position: center !important;
    background-repeat: no-repeat !important;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

button.pauseButton::Before {
    background-image: url("./image_assets/xpPause.png") !important;
    background-size: 64% !important;
    background-position: center !important;
    background-repeat: no-repeat !important;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

.beepboxEditor span.volume-speaker {
    background-image: url("./image_assets/xpSpeaker.png");
    background-position: center !important;
    background-repeat: no-repeat !important;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
    }

div.selectContainer.menu.file::before {

    background-image: url("./image_assets/xpFile.png");
    background-size: 64%;
    background-position-x: center;
    background-position-y: center;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}

div.selectContainer.menu.edit::before {

    background-image: url("./image_assets/xpEdit.png");
    background-size: 64%;
    background-position-x: center;
    background-position-y: center;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}
div.selectContainer.menu.preferences::before {

    background-image: url("./image_assets/xpPreferences.png");
    background-size: 64%;
    background-position-x: center;
    background-position-y: center;

    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}
button.playButton::before {

    background-image: url("./image_assets/xpPlay.png") !important;
    background-size: 64% !important;
    background-position: center !important;


    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */
}

.beepboxEditor button.prevBarButton::before {
    background-image: url("./image_assets/xpBackward.png") !important;
    background-size: 64% !important;
    background-position: center !important;


    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

.beepboxEditor button.nextBarButton::before {
    background-image: url("./image_assets/xpForward.png") !important;
    background-size: 64% !important;
    background-position: center !important;


    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

.beepboxEditor .zoomInButton::before {
    background-image: url("./image_assets/xpZoomIn.png") !important;
    background-position: center !important;


    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

.beepboxEditor .zoomOutButton::before {
    background-image: url("./image_assets/xpZoomOut.png") !important;
    background-position: center !important;


    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

.beepboxEditor input[type="range"]::-moz-range-thumb {
    background-image: url("./image_assets/scrollbar.png") !important;
    background-position: center !important;
    background-size: inherit !important;

    border-radius: 0px !important;
    width: 13px !important;
    height: 23px !important;
    image-rendering: -moz-crisp-edges !important;         /* Firefox */
    image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
    image-rendering: -o-crisp-edges !important;            /* Opera */
    image-rendering: pixelated !important;                 /* Future browsers */
    image-rendering: optimizeSpeed !important;             /* IE */

}

        .beepboxEditor input[type="checkbox"]
        {
            appearance: none;
            background: rgba(255, 255, 255, 1);
            color: currentColor;
            border-radius: 0px;
            width: 13px !important;
            height: 13px !important;
            background-image:url("./image_assets/xpCheckmarkBlank.png");
            background-repeat:no-repeat;

            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
            transform: scale(2) !important;
            }

        .beepboxEditor input[type="checkbox"]:checked
        {
            display: flex;
            justify-content: center;
            transform: scale(2) !important;
        }
         
        .beepboxEditor input[type="checkbox"]:checked:after
        {
            width: 13px;
            height: 13px;
            text-align: center;
            content: "";
            background-repeat:no-repeat;
            background-image:url("./image_assets/xpCheckmark.png");
            image-rendering: -moz-crisp-edges !important;         /* Firefox */
            image-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */
            image-rendering: -o-crisp-edges !important;            /* Opera */
            image-rendering: pixelated !important;                 /* Future browsers */
            image-rendering: optimizeSpeed !important;             /* IE */
        }
        `,
    };
    CustomThemeBases.baseCursor = {
        "none": `
        `,
        "My Abyss": `
        * {
		cursor: url("abyssbox_cursor.png"), auto;
        }
        `,
        "Retro": `
        * {
        cursor: url("./image_assets/pixel_cursor.png"), auto !important;
        }
        `,
        "Slushie 2": `
        * {
        cursor: url("https://choptop84.github.io/choptop84s-image-repository/slush_pixel_cursor.png"), auto !important;
        }
        `,
        "Ghost House 2": `
        * {
		cursor: url("./image_assets/pixel_cursor.png"), auto !important;
        }
        `,
        "Windows Xp": `
        * {
		cursor: url("./image_assets/xpcursor.png"), auto !important;
        }
        `,
        "WackyBox": `
        * {
        cursor: url('wackybox_cursor.png'), auto;
        }
        `,
        "Azur Lane": `
        * {
		cursor: url("UltraBoxAzurLaneThemeMouse.png"), auto !important;
		}
        `,
    };
    CustomThemeBases._fontStyleElement = document.head.appendChild(HTML.style({ type: "text/css" }));
    CustomThemeBases._bgStyleElement = document.head.appendChild(HTML.style({ type: "text/css" }));
    CustomThemeBases._borderStyleElement = document.head.appendChild(HTML.style({ type: "text/css" }));
    CustomThemeBases._iconStyleElement = document.head.appendChild(HTML.style({ type: "text/css" }));
    CustomThemeBases._cursorStyleElement = document.head.appendChild(HTML.style({ type: "text/css" }));

    const { button: button$m, div: div$m, h2: h2$l, option: option$e, select: select$e, optgroup: optgroup$2 } = HTML;
    class SetThemePrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._themeSelect = select$e({ style: "width: 100%;", id: "themeSelect" }, option$e({ value: "none" }, "None"), optgroup$2({ label: "AbyssBox Themes" }, option$e({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$e({ value: "AbyssBox Competitive" }, "AbyssBox Competitive"), option$e({ value: "AbyssBox Light" }, "AbyssBox Light"), option$e({ value: "AbyssBox 0.8" }, "AbyssBox 0.8"), option$e({ value: "AbyssBox Piano" }, "AbyssBox Piano [!]"), option$e({ value: "Half-Life" }, "Half-Life"), option$e({ value: "Half-Life: Source" }, "Half-Life: Source"), option$e({ value: "Doom 1993" }, "Doom 1993"), option$e({ value: "Undertale" }, "Undertale"), option$e({ value: "Yume Nikki" }, "Yume Nikki [!]"), option$e({ value: "Scratch" }, "Scratch"), option$e({ value: "Scratch Addons" }, "Scratch Addons"), option$e({ value: "Windows Xp" }, "Windows Xp"), option$e({ value: "Frutiger Aero" }, "Frutiger Aero"), option$e({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$e({ value: "corporate dark" }, "Corporate Dark"), option$e({ value: "corporate light" }, "Corporate Light"), option$e({ value: "Glyde" }, "Glyde"), option$e({ value: "starry studio" }, "Starry Studio"), option$e({ value: "Terminal 2.0 (AB)" }, "Terminal 2.0 (AB)"), option$e({ value: "Slushie" }, "Slushie"), option$e({ value: "Slushie Pixel" }, "Slushie 2"), option$e({ value: "BeepBox Pixel" }, "BeepBox Pixel"), option$e({ value: "forest 2" }, "Forest 2"), option$e({ value: "canyon 2" }, "Canyon 2"), option$e({ value: "Nebula 2" }, "Nebula 2"), option$e({ value: "Ghost House" }, "Ghost House"), option$e({ value: "Ghost House 2" }, "Ghost House 2")), optgroup$2({ label: "BeepBox Themes" }, option$e({ value: "dark classic" }, "BeepBox Dark"), option$e({ value: "light classic" }, "BeepBox Light"), option$e({ value: "dark competition" }, "BeepBox Competition Dark")), optgroup$2({ label: "JummBox Themes" }, option$e({ value: "jummbox classic" }, "JummBox Dark"), option$e({ value: "jummbox light" }, "JummBox Light"), option$e({ value: "forest" }, "Forest"), option$e({ value: "canyon" }, "Canyon"), option$e({ value: "midnight" }, "Midnight"), option$e({ value: "beachcombing" }, "Beachcombing"), option$e({ value: "violet verdant" }, "Violet Verdant"), option$e({ value: "sunset" }, "Sunset"), option$e({ value: "autumn" }, "Autumn"), option$e({ value: "fruit" }, "Shadowfruit"), option$e({ value: "toxic" }, "Toxic"), option$e({ value: "roe" }, "Roe"), option$e({ value: "moonlight" }, "Moonlight"), option$e({ value: "portal" }, "Portal"), option$e({ value: "fusion" }, "Fusion"), option$e({ value: "inverse" }, "Inverse"), option$e({ value: "nebula" }, "Nebula"), option$e({ value: "roe light" }, "Roe Light"), option$e({ value: "amoled dark" }, "High Contrast Dark"), option$e({ value: "energized" }, "Energized"), option$e({ value: "neapolitan" }, "Neapolitan"), option$e({ value: "mono" }, "Poly"), option$e({ value: "blutonium" }, "Blutonium")), optgroup$2({ label: "ModBox Themes" }, option$e({ value: "modbox classic" }, "Modbox"), option$e({ value: "modbox 2" }, "Modbox 2.0"), option$e({ value: "modbox artic" }, "Artic"), option$e({ value: "modbox cinnamon" }, "Cinnamon Roll [!]"), option$e({ value: "modbox ocean" }, "Ocean"), option$e({ value: "modbox rainbow" }, "Rainbow [!]"), option$e({ value: "modbox float" }, "Float [!]"), option$e({ value: "modbox windows" }, "Windows"), option$e({ value: "modbox grassland" }, "Grassland"), option$e({ value: "modbox dessert" }, "Dessert"), option$e({ value: "modbox kahoot" }, "Kahootiest"), option$e({ value: "modbox bitbeam" }, "Beam to the Bit [!]"), option$e({ value: "modbox egg" }, "Pretty Egg"), option$e({ value: "modbox pony" }, "Poniryoshka"), option$e({ value: "modbox gameboy" }, "Gameboy [!]"), option$e({ value: "modbox woodkid" }, "Woodkid [!]"), option$e({ value: "modbox midnight" }, "Midnight [!]"), option$e({ value: "modbox snedbox" }, "Snedbox"), option$e({ value: "modbox unnamed" }, "unnamed [!]"), option$e({ value: "modbox piano" }, "Piano [!]"), option$e({ value: "modbox halloween" }, "Halloween [!]"), option$e({ value: "modbox frozen" }, "FrozenOver❄️ [!]")), optgroup$2({ label: "ShitBox Themes" }, option$e({ value: "shitbox 1.0" }, "Shitbox 1.0"), option$e({ value: "shitbox 2.0" }, "Shitbox 2.0"), option$e({ value: "shitbox 3.0" }, "Shitbox 3.0/shitbox4"), option$e({ value: "shitbox ModBox 2.0" }, "Shitbox ModBox 2.0"), option$e({ value: "shitbox Realm" }, "Shitbox Realm [!]")), optgroup$2({ label: "Nepbox Themes" }, option$e({ value: "nepbox" }, "Nepbox"), option$e({ value: "nepbox laffey" }, "Laffey"), option$e({ value: "nepbox snedbox" }, "Snedbox (Nb) [!]"), option$e({ value: "nepbox piano" }, "Piano (Nb) [!]")), optgroup$2({ label: "Mod Default Themes" }, option$e({ value: "sandbox classic" }, "Sandbox"), option$e({ value: "harrybox" }, "Haileybox"), option$e({ value: "brucebox" }, "Brucebox"), option$e({ value: "nerdbox" }, "NerdBox"), option$e({ value: "zefbox" }, "Zefbox"), option$e({ value: "cardboardbox classic" }, "Cardboardbox"), option$e({ value: "blubox classic" }, "Blubox"), option$e({ value: "dogebox classic" }, "Dogebox"), option$e({ value: "dogebox dark" }, "Way too Dark (DB)/TOO DARK(BluB)"), option$e({ value: "wackybox" }, "Wackybox"), option$e({ value: "todbox dark mode" }, "Todbox Dark Mode"), option$e({ value: "mainbox 1.0" }, "Mainbox"), option$e({ value: "microbox" }, "MicroBox"), option$e({ value: "paandorasbox" }, "PaandorasBox"), option$e({ value: "foxbox" }, "FoxBox"), option$e({ value: "midbox" }, "Midbox"), option$e({ value: "gold light" }, "Gold Light"), option$e({ value: "dogebox2" }, "Dogebox2"), option$e({ value: "WeebBox" }, "WeebBox"), option$e({ value: "BoxBeep Dark" }, "BoxBeep Dark"), option$e({ value: "BoxBeep light" }, "BoxBeep Light"), option$e({ value: "birdbox dark" }, "BirdBox Dark"), option$e({ value: "birdbox light" }, "BirdBox Light")), optgroup$2({ label: "Miscellaneous Themes" }, option$e({ value: "azur lane" }, "Azur Lane"), option$e({ value: "AWeebyssBox" }, "AWeebyssBox"), option$e({ value: "Deuteranopia" }, "Deuteranopia"), option$e({ value: "Protanopia" }, "Protanopia"), option$e({ value: "Tritanopia" }, "Tritanopia"), option$e({ value: "2012 Video Tutorial" }, "2012 Video Tutorial"), option$e({ value: "I am on fire" }, "I am on fire")));
            this._cancelButton = button$m({ class: "cancelButton" });
            this._okayButton = button$m({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.lastTheme = this._doc.song.setSongTheme;
            this.container = div$m({ class: "prompt noSelection", id: "themeContainerPrompt", style: "width: 220px;" }, div$m({ class: "promptTitle" }, h2$l({ class: "songThemeExt", style: "text-align: inherit;" }, ""), h2$l({ class: "songThemeTitle", style: "margin-bottom: 0.5em;" }, "Set Theme for Song")), div$m({ style: "text-align: left; margin: 0.5em 0;" }, "Using this, you can set the theme for this song specifically, going to a different song will have it load your regular theme!"), div$m({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$m({ class: "selectContainer", style: "width: 100%;" }, this._themeSelect)), div$m({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                this._doc.prompt = null;
                this._doc.record(new ChangeSongTheme(this._doc, this._doc.song.setSongTheme, this._themeSelect.value), true);
            };
            this._previewTheme = () => {
                if (this._themeSelect.value != "none") {
                    ColorConfig.setTheme(this._themeSelect.value);
                    CustomThemeBases.setFont("none");
                    CustomThemeBases.setBackground("none");
                    CustomThemeBases.setBorder("none");
                    CustomThemeBases.setIcons("none");
                    CustomThemeBases.setCursor("none");
                    this._doc.notifier.changed();
                }
                else {
                    ColorConfig.setTheme(this._doc.prefs.colorTheme);
                    if (this._doc.prefs.colorTheme != "custom") {
                        CustomThemeBases.setFont("none");
                        CustomThemeBases.setBackground("none");
                        CustomThemeBases.setBorder("none");
                        CustomThemeBases.setIcons("none");
                        CustomThemeBases.setCursor("none");
                    }
                    else {
                        const localFont = window.localStorage.getItem("customFontName") || "none";
                        const localBG = window.localStorage.getItem("backgroundName") || "none";
                        const localBorder = window.localStorage.getItem("customBorderName") || "none";
                        const localIcons = window.localStorage.getItem("customIconsName") || "none";
                        const localCursor = window.localStorage.getItem("customCursorName") || "none";
                        CustomThemeBases.setFont(localFont);
                        CustomThemeBases.setBackground(localBG);
                        CustomThemeBases.setBackground(localIcons);
                        CustomThemeBases.setBorder(localBorder);
                        CustomThemeBases.setCursor(localCursor);
                    }
                    this._doc.notifier.changed();
                }
            };
            this._close = () => {
                this._doc.prompt = null;
                if (this.lastTheme != null) {
                    ColorConfig.setTheme(this.lastTheme);
                    this._doc.record(new ChangeSongTheme(this._doc, this._doc.song.setSongTheme, this.lastTheme), true);
                }
                else {
                    ColorConfig.setTheme(this._doc.prefs.colorTheme);
                    this._doc.record(new ChangeSongTheme(this._doc, this._doc.song.setSongTheme, "none"), true);
                }
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._close);
                this._cancelButton.removeEventListener("click", this._close);
            };
            if (this.lastTheme != null) {
                this._themeSelect.value = this.lastTheme;
            }
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._themeSelect.addEventListener("change", this._previewTheme);
        }
    }

    const { button: button$l, div: div$l, h2: h2$k, input: input$d } = HTML;
    function gcd(x, y) {
        while (y !== 0) {
            const z = x % y;
            x = y;
            y = z;
        }
        return x;
    }
    function lcm(a, b) {
        return Math.floor(Math.abs(a * b) / gcd(a, b));
    }
    function fraction(a, b) {
        let n = a;
        let d = b;
        const g = gcd(n, d);
        if (g > 1) {
            n = Math.floor(n / g);
            d = Math.floor(d / g);
        }
        return [n, d];
    }
    function fractionMul(a, b) {
        const an = a[0];
        const ad = a[1];
        const bn = b[0];
        const bd = b[1];
        return fraction(an * bn, ad * bd);
    }
    function fractionDiv(a, b) {
        const an = a[0];
        const ad = a[1];
        const bn = b[0];
        const bd = b[1];
        return fraction(an * bd, ad * bn);
    }
    function fractionLCM(a, b) {
        const an = a[0];
        const ad = a[1];
        const bn = b[0];
        const bd = b[1];
        return fraction(lcm(an, bn), gcd(ad, bd));
    }
    function generateEuclideanRhythm(steps, pulses, offset) {
        steps = Math.max(0, steps);
        pulses = Math.max(0, Math.min(steps, pulses));
        let columns = [];
        for (let step = 0; step < steps; step++)
            columns.push([step >= pulses ? 0 : 1]);
        let a = steps;
        let b = steps - pulses;
        if (a > 0 && b > 0) {
            while (a !== b) {
                if (a > b) {
                    a = a - b;
                }
                else {
                    b = b - a;
                }
                const amountToMove = Math.min(a, b);
                if (amountToMove <= 1)
                    continue;
                for (let i = 0; i < amountToMove; i++) {
                    const moved = columns.pop();
                    if (moved != null)
                        for (const v of moved)
                            columns[i].push(v);
                }
            }
        }
        let pattern = [];
        for (const c of columns)
            for (const v of c)
                pattern.push(v);
        if (offset !== 0) {
            offset = (offset % pattern.length + pattern.length) % pattern.length;
            offset = pattern.length - offset;
            pattern = pattern.slice(offset).concat(pattern.slice(0, offset));
        }
        return pattern;
    }
    class EuclideanRhythmPrompt {
        constructor(_doc) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            this._doc = _doc;
            this._minSteps = 2;
            this._maxSteps = 64;
            this._maxSequences = 14;
            this._maxChannel = Config.pitchChannelCountMax + Config.noiseChannelCountMax - 1;
            this._localStorageKey = "euclidGenMemory";
            this._sequenceIndex = 0;
            this._renderedSequenceCount = 0;
            this._highlightedSequenceIndex = -1;
            this._startBar = 0;
            this._barAmount = 1;
            this._barsAvailable = Config.barCountMax;
            this._barPreviewBarIndex = 0;
            this._barPreviewWidth = 400;
            this._barPreviewHeight = 10;
            this._clockWidth = 100;
            this._clockHeight = 100;
            this._clockPointMinRadius = this._clockWidth / this._maxSteps;
            this._clockPointMaxRadius = this._clockWidth / 16;
            this._clockPadding = this._clockWidth / this._maxSteps;
            this._clockRadius = this._clockWidth / 2 - this._clockPointMaxRadius - this._clockPadding;
            this._sequenceButtons = [];
            this._sequenceRemoveButton = button$l({ class: "no-underline", style: "flex-grow: 0; flex-basis: 30px;" }, SVG.svg({ width: "26", height: "26", viewBox: "-13 -13 26 26", "pointer-events": "none" }, SVG.path({ d: "M -7.07 -5.66 L -5.66 -7.07 L 0 -1.4 L 5.66 -7.07 L 7.07 -5.66 L 1.4 0 L 7.07 5.66 L 5.66 7.07 L 0 1.4 L -5.66 7.07 L -7.07 5.66 L -1.4 0 z", fill: ColorConfig.primaryText })));
            this._sequenceAddButton = button$l({ class: "no-underline last-button", style: "flex-grow: 0; flex-basis: 30px;" }, SVG.svg({ width: "26", height: "26", viewBox: "-13 -13 26 26", "pointer-events": "none" }, SVG.path({ d: "M -8 -1 L -1 -1 L -1 -8 L 1 -8 L 1 -1 L 8 -1 L 8 1 L 1 1 L 1 8 L -1 8 L -1 1 L -8 1 z", fill: ColorConfig.primaryText })));
            this._sequenceButtonContainer = div$l({ class: "instrument-bar", style: "justify-content: center; width: 100%;" }, this._sequenceRemoveButton, this._sequenceAddButton);
            this._barPreviewBackground = SVG.svg({ "pointer-events": "none" });
            this._barPreviewSteps = SVG.svg({ "pointer-events": "none" });
            this._barPreviewLabel = div$l({ style: `flex-grow: 1; color: ${ColorConfig.secondaryText}` });
            this._barPreviewGoToFirstButton = button$l({ style: "height: auto; min-height: var(--button-size);" }, SVG.svg({ width: "26", height: "26", viewBox: "-13 -14 26 26", "pointer-events": "none" }, SVG.rect({ x: "-6", y: "-6", width: "2", height: "12", fill: ColorConfig.primaryText }), SVG.path({ d: "M 6 -6 L 6 6 L -3 0 z", fill: ColorConfig.primaryText })));
            this._barPreviewGoBackButton = button$l({ style: "height: auto; min-height: var(--button-size); margin-left: 1em;" }, SVG.svg({ width: "24", height: "26", viewBox: "-10 -14 24 26", "pointer-events": "none" }, SVG.path({ d: "M 6 -6 L 6 6 L -3 0 z", fill: ColorConfig.primaryText })));
            this._barPreviewGoForwardButton = button$l({ style: "height: auto; min-height: var(--button-size);" }, SVG.svg({ width: "24", height: "26", viewBox: "-14 -14 24 26", "pointer-events": "none" }, SVG.path({ d: "M -6 -6 L -6 6 L 3 0 z", fill: ColorConfig.primaryText })));
            this._barPreviewGoToLastButton = button$l({ style: "height: auto; min-height: var(--button-size); margin-left: 1em;" }, SVG.svg({ width: "26", height: "26", viewBox: "-13 -14 26 26", "pointer-events": "none" }, SVG.rect({ x: "4", y: "-6", width: "2", height: "12", fill: ColorConfig.primaryText }), SVG.path({ d: "M -6 -6 L -6 6 L 3 0 z", fill: ColorConfig.primaryText })));
            this._clockWire = SVG.circle({ cx: this._clockWidth / 2, cy: this._clockHeight / 2, r: this._clockRadius, stroke: ColorConfig.primaryText, "stroke-width": "0.5", fill: "none" });
            this._clockPoints = SVG.svg({ "pointer-events": "none" });
            this._stepsStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: this._minSteps, max: this._maxSteps, value: "8", step: "1" });
            this._pulsesStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "0", max: "8", value: "5", step: "1" });
            this._rotationStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "0", max: this._maxSteps, value: "0", step: "1" });
            this._stepSizeNumeratorStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "1", max: Config.partsPerBeat, value: "1", step: "1" });
            this._stepSizeDenominatorStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "1", max: Config.partsPerBeat, value: "4", step: "1" });
            this._channelStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "1", max: this._maxChannel + 1, value: "1", step: "1" });
            this._pitchStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "0", max: Config.maxPitch, value: "0", step: "1" });
            this._barAmountStepper = input$d({ style: "width: 3em; margin-left: 1em;", type: "number", min: "1", max: Config.barCountMax, value: "1", step: "1" });
            this._extendUntilLoopButton = button$l({ style: "height: auto; min-height: var(--button-size); margin-left: 1em;" }, "Extend until loop");
            this._generateFadingNotesBox = input$d({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: 1em;" });
            this._invertBox = input$d({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: 1em;" });
            this._okayButton = button$l({ class: "okayButton", style: "width: 45%;" }, "Okay");
            this._cancelButton = button$l({ class: "cancelButton" });
            this.container = div$l({ class: "prompt noSelection", style: "width: 600px;" }, div$l({ class: "promptTitle" }, h2$k({ class: "gerExt", style: "text-align: inherit;" }, ""), h2$k({ class: "gerTitle" }, "Generate Euclidean Rhythm")), div$l({ style: "display: flex; flex-direction: row; align-items: center;" }, this._sequenceButtonContainer), div$l({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-between;" }, div$l({ style: "flex-grow: 0; flex-shrink: 0;" }, this._barPreviewGoToFirstButton, this._barPreviewGoBackButton), this._barPreviewLabel, div$l({ style: "flex-grow: 0; flex-shrink: 0;" }, this._barPreviewGoForwardButton, this._barPreviewGoToLastButton)), div$l({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center;" }, SVG.svg({ "pointer-events": "none", style: "touch-action: none; overflow: hidden;", width: "100%", height: "20px", viewBox: `0 0 ${this._barPreviewWidth} ${this._barPreviewHeight}`, preserveAspectRatio: "none" }, this._barPreviewBackground, this._barPreviewSteps)), div$l({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-evenly;" }, div$l({ style: "max-width: 150px; height: 100%;" }, SVG.svg({ "pointer-events": "none", width: "100%", height: "100%", style: "touch-action: none; overflow: hidden; margin-right: 1.5em; max-width: 150px; height: 100%;", viewBox: `0 0 ${this._clockWidth} ${this._clockHeight}`, preserveAspectRatio: "none" }, this._clockWire, this._clockPoints)), div$l({ style: "display: flex; height: 100%;" }, div$l({ style: "flex-grow: 1; " }, div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Steps"), this._stepsStepper), div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end; margin-top: 0.5em;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Pulses"), this._pulsesStepper), div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end; margin-top: 0.5em;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Rotation"), this._rotationStepper)), div$l({ style: "flex-grow: 1; margin-left: 1em;" }, div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end; margin-bottom: 1em;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Size"), div$l({ style: "display: flex; flex-direction: column;" }, this._stepSizeNumeratorStepper, this._stepSizeDenominatorStepper)), div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end; margin-top: 0.5em;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Channel"), this._channelStepper), div$l({ style: "display: flex; flex-direction: row; align-items: center; height: 3em; justify-content: flex-end; margin-top: 0.5em;" }, div$l({ style: `text-align: right; flex-grow: 1; color: ${ColorConfig.primaryText};` }, "Pitch"), this._pitchStepper)))), div$l({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end;" }, div$l({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "Generate fading notes"), this._generateFadingNotesBox, div$l({ style: `text-align: right; color: ${ColorConfig.primaryText}; margin-left: 1em;` }, "Invert"), this._invertBox), div$l({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end;" }, div$l({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "Length (in bars)"), this._barAmountStepper, this._extendUntilLoopButton), div$l({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
                this._sequenceButtonContainer.removeEventListener("click", this._whenSelectSequence);
                this._barPreviewGoToFirstButton.removeEventListener("click", this._whenBarPreviewGoToFirstClicked);
                this._barPreviewGoBackButton.removeEventListener("click", this._whenBarPreviewGoBackClicked);
                this._barPreviewGoForwardButton.removeEventListener("click", this._whenBarPreviewGoForwardClicked);
                this._barPreviewGoToLastButton.removeEventListener("click", this._whenBarPreviewGoToLastClicked);
                this._stepsStepper.removeEventListener("change", this._whenStepsChanges);
                this._pulsesStepper.removeEventListener("change", this._whenPulsesChanges);
                this._rotationStepper.removeEventListener("change", this._whenRotationChanges);
                this._stepSizeNumeratorStepper.removeEventListener("change", this._whenStepSizeChanges);
                this._stepSizeDenominatorStepper.removeEventListener("change", this._whenStepSizeChanges);
                this._channelStepper.removeEventListener("change", this._whenChannelChanges);
                this._pitchStepper.removeEventListener("change", this._whenPitchChanges);
                this._barAmountStepper.removeEventListener("change", this._whenBarAmountChanges);
                this._invertBox.removeEventListener("change", this._whenInvertChanges);
                this._generateFadingNotesBox.removeEventListener("change", this._whenGenerateFadingNotesChanges);
                this._extendUntilLoopButton.removeEventListener("click", this._whenExtendUntilLoopClicked);
            };
            this._close = () => {
                this._doc.undo();
            };
            this._saveChanges = () => {
                this._doc.prompt = null;
                const group = new ChangeGroup();
                const beatsPerBar = this._doc.song.beatsPerBar;
                const partsPerBeat = Config.partsPerBeat;
                const partsPerBar = partsPerBeat * beatsPerBar;
                const firstBar = this._startBar;
                const lastBar = firstBar + this._barAmount;
                if (lastBar > this._doc.song.barCount) {
                    const existing = this._doc.song.barCount - firstBar;
                    const remaining = this._barAmount - existing;
                    group.append(new ChangeInsertBars(this._doc, this._doc.song.barCount, remaining));
                }
                let allNewNotesByChannel = new Map();
                let pitchesToBeGenerated = new Map();
                for (let bar = firstBar; bar < lastBar; bar++) {
                    const relativeBar = bar - firstBar;
                    const partOffset = relativeBar * partsPerBar;
                    for (let sequenceIndex = 0; sequenceIndex < this._sequences.length; sequenceIndex++) {
                        const sequence = this._sequences[sequenceIndex];
                        const generatedSequence = this._generatedSequences[sequenceIndex];
                        const hasGeneratedSequence = generatedSequence.length > 0;
                        if (!hasGeneratedSequence) {
                            continue;
                        }
                        const steps = sequence.steps;
                        if (generatedSequence.length !== steps) {
                            console.error("The size of the generated sequence and the specified number of steps it should take have diverged: generated", generatedSequence.length, "steps but expected", steps);
                            continue;
                        }
                        const stepSize = sequence.stepSizeNumerator / sequence.stepSizeDenominator;
                        const pitch = sequence.pitch;
                        const channelIndex = sequence.channel;
                        const invert = sequence.invert;
                        const on = invert ? 0 : 1;
                        const generateFadingNotes = sequence.generateFadingNotes;
                        pitchesToBeGenerated.set(pitch, true);
                        let resultingChannel = allNewNotesByChannel.get(channelIndex);
                        if (resultingChannel == undefined) {
                            resultingChannel = [];
                            for (let i = 0; i < this._barAmount; i++) {
                                const newResultingBar = [];
                                for (let j = 0; j < this._sequences.length; j++) {
                                    const newResultingSequence = [];
                                    newResultingBar.push(newResultingSequence);
                                }
                                resultingChannel.push(newResultingBar);
                            }
                            allNewNotesByChannel.set(channelIndex, resultingChannel);
                        }
                        const resultingBar = resultingChannel[relativeBar];
                        let resultingSequence = resultingBar[sequenceIndex];
                        const firstStep = Math.floor((beatsPerBar * relativeBar) / stepSize);
                        const lastStep = Math.ceil((beatsPerBar * (relativeBar + 1)) / stepSize);
                        for (let step = firstStep; step < lastStep; step++) {
                            let continuesLastPattern = false;
                            let needToAdjustPins = false;
                            const rawStepPartStart = (Math.floor(step * partsPerBeat * stepSize) - partOffset);
                            const rawStepPartEnd = (Math.floor((step + 1) * partsPerBeat * stepSize) - partOffset);
                            if (rawStepPartStart < 0) {
                                continuesLastPattern = true;
                            }
                            if (continuesLastPattern || rawStepPartEnd > partsPerBar) {
                                needToAdjustPins = true;
                            }
                            const stepPartStart = Math.max(0, Math.min(partsPerBar, rawStepPartStart));
                            const stepPartEnd = Math.max(0, Math.min(partsPerBar, rawStepPartEnd));
                            if (generatedSequence[step % steps] === on) {
                                const note = new Note(pitch, stepPartStart, stepPartEnd, Config.noteSizeMax, generateFadingNotes);
                                if (continuesLastPattern) {
                                    note.continuesLastPattern = true;
                                }
                                if (needToAdjustPins && generateFadingNotes) {
                                    const startRatio = (stepPartStart - rawStepPartStart) / (rawStepPartEnd - rawStepPartStart);
                                    const startPinSize = Math.round(Config.noteSizeMax + (0 - Config.noteSizeMax) * startRatio);
                                    note.pins[0].size = startPinSize;
                                    const endRatio = (stepPartEnd - rawStepPartStart) / (rawStepPartEnd - rawStepPartStart);
                                    const endPinSize = Math.round(Config.noteSizeMax + (0 - Config.noteSizeMax) * endRatio);
                                    note.pins[1].size = endPinSize;
                                }
                                resultingSequence.push(note);
                            }
                        }
                    }
                }
                for (const [channelIndex, resultingChannel] of allNewNotesByChannel.entries()) {
                    for (let resultingBarIndex = 0; resultingBarIndex < resultingChannel.length; resultingBarIndex++) {
                        const resultingBar = resultingChannel[resultingBarIndex];
                        const bar = resultingBarIndex + firstBar;
                        let oldNotes = [];
                        const oldPattern = this._doc.song.getPattern(channelIndex, bar);
                        if (oldPattern != null) {
                            oldNotes = oldPattern.cloneNotes();
                        }
                        group.append(new ChangePatternNumbers(this._doc, 0, bar, channelIndex, 1, 1));
                        group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));
                        const pattern = this._doc.song.getPattern(channelIndex, bar);
                        if (pattern == null) {
                            throw new Error("Couldn't create new pattern");
                        }
                        let merged = [];
                        for (let oldNoteIndex = oldNotes.length - 1; oldNoteIndex >= 0; oldNoteIndex--) {
                            const oldNote = oldNotes[oldNoteIndex];
                            let newPitches = [];
                            for (const oldPitch of oldNote.pitches) {
                                if (!pitchesToBeGenerated.has(oldPitch)) {
                                    newPitches.push(oldPitch);
                                }
                            }
                            oldNote.pitches = newPitches;
                            if (oldNote.pitches.length < 1) {
                                oldNotes.splice(oldNoteIndex, 1);
                            }
                        }
                        let timeline = [];
                        for (const note of oldNotes) {
                            timeline.push({ noteType: "old", eventType: "start", part: note.start, note: note });
                            timeline.push({ noteType: "old", eventType: "end", part: note.end, note: note });
                        }
                        for (const resultingSequence of resultingBar) {
                            for (const note of resultingSequence) {
                                timeline.push({ noteType: "new", eventType: "start", part: note.start, note: note });
                                timeline.push({ noteType: "new", eventType: "end", part: note.end, note: note });
                            }
                        }
                        timeline.sort((a, b) => { return a.part - b.part; });
                        let eventGroups = [];
                        let currentEventGroup = null;
                        for (let event of timeline) {
                            if (currentEventGroup == null) {
                                currentEventGroup = { part: event.part, events: [event] };
                            }
                            else {
                                if (event.part !== currentEventGroup.part) {
                                    eventGroups.push(currentEventGroup);
                                    currentEventGroup = { part: event.part, events: [event] };
                                }
                                else {
                                    currentEventGroup.events.push(event);
                                }
                            }
                        }
                        if (currentEventGroup != null)
                            eventGroups.push(currentEventGroup);
                        let heldNotes = [];
                        let mergedStartPart = 0;
                        let mergedEndPart = 0;
                        let notesToDrop = new Set();
                        let notesToAdd = [];
                        let setOfPitchesToCommit = new Set();
                        for (const eventGroup of eventGroups) {
                            if (heldNotes.length === 0) {
                                for (const event of eventGroup.events) {
                                    if (event.eventType === "end") {
                                        throw new Error("Got note end earlier than expected");
                                    }
                                    else if (event.eventType === "start") {
                                        heldNotes.push({ noteType: event.noteType, note: event.note });
                                    }
                                    else {
                                        throw new Error("Unknown mergeable event type");
                                    }
                                }
                                mergedStartPart = eventGroup.part;
                            }
                            else {
                                for (const event of eventGroup.events) {
                                    if (event.eventType === "end") {
                                        notesToDrop.add(event.note);
                                    }
                                    else if (event.eventType === "start") {
                                        notesToAdd.push({ noteType: event.noteType, note: event.note });
                                    }
                                    else {
                                        throw new Error("Unknown mergeable event type");
                                    }
                                }
                                mergedEndPart = eventGroup.part;
                                const mergedNote = new Note(0, mergedStartPart, mergedEndPart, Config.noteSizeMax, false);
                                let continuesLastPattern = false;
                                let theNewNote = null;
                                let theOldNote = null;
                                for (const mergeableNote of heldNotes) {
                                    const note = mergeableNote.note;
                                    for (const candidatePitch of note.pitches) {
                                        setOfPitchesToCommit.add(candidatePitch);
                                    }
                                    if (note.continuesLastPattern)
                                        continuesLastPattern = true;
                                    if (mergeableNote.noteType === "new") {
                                        if (theNewNote == null
                                            || mergeableNote.note.start > theNewNote.start
                                            || mergeableNote.note.end < theNewNote.end) {
                                            theNewNote = mergeableNote.note;
                                        }
                                    }
                                    else if (mergeableNote.noteType === "old") {
                                        if (theOldNote != null)
                                            throw new Error("Somehow got more than one old note");
                                        theOldNote = mergeableNote.note;
                                    }
                                }
                                const pitchesToCommit = Array.from(setOfPitchesToCommit).sort((a, b) => a - b);
                                mergedNote.pitches = pitchesToCommit;
                                mergedNote.continuesLastPattern = continuesLastPattern;
                                if (theNewNote != null) {
                                    const theNewNoteStartPart = theNewNote.start;
                                    const theNewNoteEndPart = theNewNote.end;
                                    const startSize = theNewNote.pins[0].size;
                                    const endSize = theNewNote.pins[1].size;
                                    const startRatio = (mergedStartPart - theNewNoteStartPart) / (theNewNoteEndPart - theNewNoteStartPart);
                                    const startPinSize = Math.round(startSize + (endSize - startSize) * startRatio);
                                    mergedNote.pins[0].size = startPinSize;
                                    const endRatio = (mergedEndPart - theNewNoteStartPart) / (theNewNoteEndPart - theNewNoteStartPart);
                                    const endPinSize = Math.round(startSize + (endSize - startSize) * endRatio);
                                    mergedNote.pins[1].size = endPinSize;
                                }
                                else if (theOldNote != null) {
                                    const mergedNoteLength = mergedEndPart - mergedStartPart;
                                    const mergedStartRelativeToOldStart = mergedStartPart - theOldNote.start;
                                    const mergedEndRelativeToOldStart = mergedEndPart - theOldNote.start;
                                    let newPins = [];
                                    let firstVisibleOldPinIndex = -1;
                                    let lastVisibleOldPinIndex = -1;
                                    let leftAdjacentOldPinIndex = 0;
                                    let rightAdjacentOldPinIndex = theOldNote.pins.length - 1;
                                    for (let oldPinIndex = 0; oldPinIndex < theOldNote.pins.length; oldPinIndex++) {
                                        const oldPin = theOldNote.pins[oldPinIndex];
                                        if (oldPin.time < mergedStartRelativeToOldStart) {
                                            leftAdjacentOldPinIndex = oldPinIndex;
                                        }
                                        else if (oldPin.time >= mergedStartRelativeToOldStart && oldPin.time <= mergedEndRelativeToOldStart) {
                                            if (firstVisibleOldPinIndex === -1) {
                                                firstVisibleOldPinIndex = oldPinIndex;
                                            }
                                            lastVisibleOldPinIndex = oldPinIndex;
                                        }
                                        else if (oldPin.time > mergedEndRelativeToOldStart) {
                                            rightAdjacentOldPinIndex = oldPinIndex;
                                            break;
                                        }
                                    }
                                    if (firstVisibleOldPinIndex !== -1) {
                                        for (let visibleOldPinIndex = firstVisibleOldPinIndex; visibleOldPinIndex <= lastVisibleOldPinIndex; visibleOldPinIndex++) {
                                            const visibleOldPin = theOldNote.pins[visibleOldPinIndex];
                                            const correctedTime = visibleOldPin.time - mergedStartRelativeToOldStart;
                                            newPins.push(makeNotePin(0, correctedTime, visibleOldPin.size));
                                        }
                                        const firstNewPin = newPins[0];
                                        const lastNewPin = newPins[newPins.length - 1];
                                        if (firstNewPin.time !== 0) {
                                            const leftAdjacentOldPin = theOldNote.pins[leftAdjacentOldPinIndex];
                                            const lineMiddleTime = mergedStartRelativeToOldStart - leftAdjacentOldPin.time;
                                            const lineEndTime = lineMiddleTime + firstNewPin.time;
                                            const ratio = lineMiddleTime / lineEndTime;
                                            const newSize = Math.round(leftAdjacentOldPin.size + (firstNewPin.size - leftAdjacentOldPin.size) * ratio);
                                            newPins.unshift(makeNotePin(0, 0, newSize));
                                        }
                                        if (lastNewPin.time !== mergedNoteLength) {
                                            const rightAdjacentOldPin = theOldNote.pins[rightAdjacentOldPinIndex];
                                            const lineMiddleTime = mergedEndRelativeToOldStart - (lastNewPin.time + mergedStartRelativeToOldStart);
                                            const lineEndTime = lineMiddleTime + (rightAdjacentOldPin.time - mergedEndRelativeToOldStart);
                                            const ratio = lineMiddleTime / lineEndTime;
                                            const newSize = Math.round(lastNewPin.size + (rightAdjacentOldPin.size - lastNewPin.size) * ratio);
                                            newPins.push(makeNotePin(0, mergedNoteLength, newSize));
                                        }
                                    }
                                    else {
                                        const leftAdjacentOldPin = theOldNote.pins[leftAdjacentOldPinIndex];
                                        const rightAdjacentOldPin = theOldNote.pins[rightAdjacentOldPinIndex];
                                        const lineFirstIntersectionTime = mergedStartRelativeToOldStart - leftAdjacentOldPin.time;
                                        const lineLastIntersectionTime = mergedEndRelativeToOldStart - leftAdjacentOldPin.time;
                                        const lineLength = rightAdjacentOldPin.time - leftAdjacentOldPin.time;
                                        const firstRatio = lineFirstIntersectionTime / lineLength;
                                        const lastRatio = lineLastIntersectionTime / lineLength;
                                        const firstNewSize = Math.round(leftAdjacentOldPin.size + (rightAdjacentOldPin.size - leftAdjacentOldPin.size) * firstRatio);
                                        const lastNewSize = Math.round(leftAdjacentOldPin.size + (rightAdjacentOldPin.size - leftAdjacentOldPin.size) * lastRatio);
                                        newPins.push(makeNotePin(0, 0, firstNewSize));
                                        newPins.push(makeNotePin(0, mergedNoteLength, lastNewSize));
                                    }
                                    mergedNote.pins = newPins;
                                }
                                if (mergedNote.pins.length < 2) {
                                    throw new Error("Ended up generating note with less than two pins");
                                }
                                if (mergedNote.pitches.length < 1) {
                                    throw new Error("Ended up generating note with no pitches");
                                }
                                merged.push(mergedNote);
                                for (let note of notesToDrop) {
                                    for (let heldNoteIndex = heldNotes.length - 1; heldNoteIndex >= 0; heldNoteIndex--) {
                                        let heldNote = heldNotes[heldNoteIndex].note;
                                        if (note === heldNote) {
                                            heldNotes.splice(heldNoteIndex, 1);
                                        }
                                    }
                                }
                                for (let note of notesToAdd)
                                    heldNotes.push(note);
                                setOfPitchesToCommit.clear();
                                notesToDrop.clear();
                                while (notesToAdd.length > 0)
                                    notesToAdd.pop();
                                mergedStartPart = mergedEndPart;
                            }
                        }
                        pattern.notes = [];
                        for (let noteIndex = 0; noteIndex < merged.length; noteIndex++) {
                            const note = merged[noteIndex];
                            group.append(new ChangeNoteAdded(this._doc, pattern, note, noteIndex));
                        }
                    }
                }
                this._doc.record(group, true);
                window.localStorage.setItem(this._localStorageKey, JSON.stringify({
                    "sequences": this._sequences,
                    "barAmount": this._barAmount,
                }));
            };
            this._generateAllSequences = () => {
                this._generatedSequences = [];
                for (let i = 0; i < this._sequences.length; i++) {
                    this._generatedSequences.push([]);
                    this._generateSequence(i);
                }
            };
            this._generateSequence = (index) => {
                const sequence = this._sequences[index];
                this._generatedSequences[index] = generateEuclideanRhythm(sequence.steps, sequence.pulses, sequence.rotation);
            };
            this._generateCurrentSequence = () => {
                this._generateSequence(this._sequenceIndex);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._whenSelectSequence = (event) => {
                if (event.target == this._sequenceAddButton) {
                    const currentSequence = this._sequences[this._sequenceIndex];
                    this._sequences.push({
                        steps: currentSequence.steps,
                        pulses: currentSequence.pulses,
                        rotation: currentSequence.rotation,
                        stepSizeNumerator: currentSequence.stepSizeNumerator,
                        stepSizeDenominator: currentSequence.stepSizeDenominator,
                        channel: currentSequence.channel,
                        pitch: currentSequence.pitch,
                        invert: currentSequence.invert,
                        generateFadingNotes: currentSequence.generateFadingNotes,
                    });
                    this._sequenceIndex = this._sequences.length - 1;
                    this._generateCurrentSequence();
                    this._refreshSequenceWidgets();
                    this._reconfigurePulsesStepper();
                    this._reconfigurePitchStepper();
                    this._render();
                }
                else if (event.target == this._sequenceRemoveButton) {
                    this._sequences.splice(this._sequenceIndex, 1);
                    this._generatedSequences.splice(this._sequenceIndex, 1);
                    this._sequenceIndex = Math.max(0, Math.min(this._sequences.length - 1, this._sequenceIndex));
                    this._refreshSequenceWidgets();
                    this._reconfigurePulsesStepper();
                    this._reconfigurePitchStepper();
                    this._render();
                }
                else {
                    const index = this._sequenceButtons.indexOf(event.target);
                    if (index != -1) {
                        this._sequenceIndex = index;
                        this._refreshSequenceWidgets();
                        this._reconfigurePulsesStepper();
                        this._reconfigurePitchStepper();
                        this._render();
                    }
                }
            };
            this._whenBarPreviewGoToFirstClicked = (event) => {
                this._barPreviewBarIndex = this._startBar;
                this._renderBarPreview();
                this._renderLabel();
            };
            this._whenBarPreviewGoBackClicked = (event) => {
                this._barPreviewBarIndex = this._barPreviewBarIndex - 1;
                if (this._barPreviewBarIndex < this._startBar) {
                    this._barPreviewBarIndex += this._barAmount;
                }
                this._renderBarPreview();
                this._renderLabel();
            };
            this._whenBarPreviewGoForwardClicked = (event) => {
                this._barPreviewBarIndex = this._barPreviewBarIndex + 1;
                const lastBar = this._startBar + this._barAmount;
                if (this._barPreviewBarIndex >= lastBar) {
                    this._barPreviewBarIndex -= this._barAmount;
                }
                this._renderBarPreview();
                this._renderLabel();
            };
            this._whenBarPreviewGoToLastClicked = (event) => {
                const firstBar = this._startBar;
                const lastBar = firstBar + this._barAmount;
                this._barPreviewBarIndex = lastBar - 1;
                this._renderBarPreview();
                this._renderLabel();
            };
            this._whenInvertChanges = (event) => {
                const sequence = this._sequences[this._sequenceIndex];
                const invert = this._invertBox.checked;
                sequence.invert = invert;
                this._renderClock();
                this._renderBarPreview();
            };
            this._whenGenerateFadingNotesChanges = (event) => {
                const sequence = this._sequences[this._sequenceIndex];
                const generateFadingNotes = this._generateFadingNotesBox.checked;
                sequence.generateFadingNotes = generateFadingNotes;
                this._renderBarPreview();
            };
            this._whenExtendUntilLoopClicked = (event) => {
                const beatsPerBar = this._doc.song.beatsPerBar;
                const beatsPerBarFraction = [beatsPerBar, 1];
                const barAmountFraction = fractionDiv(this._sequences.reduce((acc, seq) => {
                    const steps = [seq.steps, 1];
                    const stepSize = fraction(seq.stepSizeNumerator, seq.stepSizeDenominator);
                    const total = fractionMul(steps, stepSize);
                    return fractionLCM(acc, fractionLCM(total, beatsPerBarFraction));
                }, [1, 1]), beatsPerBarFraction);
                const barAmount = barAmountFraction[0];
                this._barAmount = Math.max(1, Math.min(this._barsAvailable, barAmount));
                const firstBar = this._startBar;
                const lastBar = this._startBar + this._barAmount;
                this._barPreviewBarIndex = Math.max(firstBar, Math.min(lastBar - 1, this._barPreviewBarIndex));
                this._barAmountStepper.value = this._barAmount + "";
                this._renderBarPreview();
                this._renderLabel();
            };
            this._whenStepsChanges = (event) => {
                const steps = Math.max(this._minSteps, Math.min(this._maxSteps, +this._stepsStepper.value));
                const sequence = this._sequences[this._sequenceIndex];
                sequence.steps = steps;
                this._stepsStepper.value = steps + "";
                this._reconfigurePulsesStepper();
                this._generateCurrentSequence();
                this._render();
            };
            this._whenPulsesChanges = (event) => {
                const sequence = this._sequences[this._sequenceIndex];
                const pulses = Math.max(0, Math.min(sequence.steps, +this._pulsesStepper.value));
                sequence.pulses = pulses;
                this._pulsesStepper.value = pulses + "";
                this._generateCurrentSequence();
                this._render();
            };
            this._whenRotationChanges = (event) => {
                const rotation = Math.max(0, Math.min(this._maxSteps, +this._rotationStepper.value));
                const sequence = this._sequences[this._sequenceIndex];
                sequence.rotation = rotation;
                this._rotationStepper.value = rotation + "";
                this._generateCurrentSequence();
                this._render();
            };
            this._whenStepSizeChanges = (event) => {
                const numerator = Math.max(1, Math.min(Config.partsPerBeat, +this._stepSizeNumeratorStepper.value));
                const denominator = Math.max(1, Math.min(Config.partsPerBeat, +this._stepSizeDenominatorStepper.value));
                const sequence = this._sequences[this._sequenceIndex];
                sequence.stepSizeNumerator = numerator;
                sequence.stepSizeDenominator = denominator;
                this._stepSizeNumeratorStepper.value = numerator + "";
                this._stepSizeDenominatorStepper.value = denominator + "";
                this._renderBarPreview();
            };
            this._whenPitchChanges = (event) => {
                const sequence = this._sequences[this._sequenceIndex];
                const maxPitch = this._doc.song.getChannelIsNoise(sequence.channel) ? (Config.drumCount - 1) : Config.maxPitch;
                const pitch = Math.max(0, Math.min(maxPitch, +this._pitchStepper.value));
                sequence.pitch = pitch;
                this._pitchStepper.value = pitch + "";
                this._renderLabel();
            };
            this._whenChannelChanges = (event) => {
                const channel = Math.max(0, Math.min(this._maxChannel, (+this._channelStepper.value) - 1));
                const sequence = this._sequences[this._sequenceIndex];
                sequence.channel = channel;
                this._channelStepper.value = (channel + 1) + "";
                this._reconfigurePitchStepper();
                this._render();
            };
            this._whenBarAmountChanges = (event) => {
                const barAmount = Math.max(1, Math.min(this._barsAvailable, +this._barAmountStepper.value));
                this._barAmount = barAmount;
                const firstBar = this._startBar;
                const lastBar = this._startBar + this._barAmount;
                this._barPreviewBarIndex = Math.max(firstBar, Math.min(lastBar - 1, this._barPreviewBarIndex));
                this._barAmountStepper.value = barAmount + "";
                this._renderBarPreview();
                this._renderLabel();
            };
            this._initialRender = () => {
                const beatsPerBar = this._doc.song.beatsPerBar;
                const color = ColorConfig.pitchBackground;
                const container = this._barPreviewBackground;
                const padding = 1;
                const beatWidth = this._barPreviewWidth / beatsPerBar;
                const beatHeight = this._barPreviewHeight;
                for (let beat = 0; beat < beatsPerBar; beat++) {
                    const x = beat * beatWidth + padding;
                    const y = padding;
                    const w = beatWidth - padding * 2;
                    const h = beatHeight - padding * 2;
                    const beatElement = SVG.rect({
                        x: x,
                        y: y,
                        width: w,
                        height: h,
                        style: `fill: ${color};`,
                    });
                    container.appendChild(beatElement);
                }
                this._refreshSequenceWidgets();
                this._reconfigurePitchStepper();
                this._reconfigurePulsesStepper();
            };
            this._refreshSequenceWidgets = () => {
                const sequence = this._sequences[this._sequenceIndex];
                this._stepsStepper.value = sequence.steps + "";
                this._pulsesStepper.value = sequence.pulses + "";
                this._rotationStepper.value = sequence.rotation + "";
                this._stepSizeNumeratorStepper.value = sequence.stepSizeNumerator + "";
                this._stepSizeDenominatorStepper.value = sequence.stepSizeDenominator + "";
                this._channelStepper.value = (sequence.channel + 1) + "";
                this._pitchStepper.value = sequence.pitch + "";
                this._invertBox.checked = sequence.invert;
                this._generateFadingNotesBox.checked = sequence.generateFadingNotes;
                this._barAmountStepper.value = this._barAmount + "";
            };
            this._reconfigurePitchStepper = () => {
                const sequence = this._sequences[this._sequenceIndex];
                const channel = sequence.channel;
                const maxPitch = this._doc.song.getChannelIsNoise(channel) ? (Config.drumCount - 1) : Config.maxPitch;
                this._pitchStepper.value = Math.max(0, Math.min(maxPitch, +this._pitchStepper.value)) + "";
                this._pitchStepper.max = maxPitch + "";
                sequence.pitch = +this._pitchStepper.value;
            };
            this._reconfigurePulsesStepper = () => {
                const sequence = this._sequences[this._sequenceIndex];
                const steps = sequence.steps;
                this._pulsesStepper.value = Math.max(0, Math.min(steps, +this._pulsesStepper.value)) + "";
                this._pulsesStepper.max = steps + "";
                sequence.pulses = +this._pulsesStepper.value;
            };
            this._render = () => {
                this._renderClock();
                this._renderBarPreview();
                this._renderLabel();
                this._renderSequenceButtons();
            };
            this._renderSequenceButtons = () => {
                const container = this._sequenceButtonContainer;
                while (this._sequenceButtons.length < this._sequences.length) {
                    const sequenceButton = button$l({ class: "no-underline" }, (this._sequenceButtons.length + 1) + "");
                    this._sequenceButtons.push(sequenceButton);
                    container.insertBefore(sequenceButton, this._sequenceRemoveButton);
                }
                for (let i = this._renderedSequenceCount; i < this._sequences.length; i++) {
                    const sequenceButton = this._sequenceButtons[i];
                    sequenceButton.style.display = "";
                }
                for (let i = this._sequences.length; i < this._renderedSequenceCount; i++) {
                    this._sequenceButtons[i].style.display = "none";
                }
                this._renderedSequenceCount = this._sequences.length;
                while (this._sequenceButtons.length > this._maxSequences) {
                    container.removeChild(this._sequenceButtons.pop());
                }
                this._sequenceRemoveButton.style.display = (this._sequences.length > 1) ? "" : "none";
                this._sequenceAddButton.style.display = (this._sequences.length < this._maxSequences) ? "" : "none";
                if (this._sequences.length < this._maxSequences) {
                    this._sequenceRemoveButton.classList.remove("last-button");
                }
                else {
                    this._sequenceRemoveButton.classList.add("last-button");
                }
                if (this._highlightedSequenceIndex != this._sequenceIndex) {
                    const oldButton = this._sequenceButtons[this._highlightedSequenceIndex];
                    if (oldButton != null)
                        oldButton.classList.remove("selected-instrument");
                    const newButton = this._sequenceButtons[this._sequenceIndex];
                    newButton.classList.add("selected-instrument");
                    this._highlightedSequenceIndex = this._sequenceIndex;
                }
                for (let sequence = 0; sequence < this._sequences.length; sequence++) {
                    const sequenceButton = this._sequenceButtons[sequence];
                    if (sequence === this._highlightedSequenceIndex) {
                        sequenceButton.style.color = "";
                    }
                    else {
                        sequenceButton.style.color = ColorConfig.primaryText;
                    }
                }
                const colors = ColorConfig.getChannelColor(this._doc.song, this._sequences[this._sequenceIndex].channel);
                this._sequenceButtonContainer.style.setProperty("--text-color-lit", colors.primaryNote);
                this._sequenceButtonContainer.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._sequenceButtonContainer.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._sequenceButtonContainer.style.setProperty("--background-color-dim", colors.secondaryChannel);
            };
            this._renderLabel = () => {
                const sequence = this._sequences[this._sequenceIndex];
                const sequencePitch = sequence.pitch;
                const pitchNameIndex = (sequencePitch + Config.keys[this._doc.song.key].basePitch) % Config.pitchesPerOctave;
                let pitch = "";
                if (Config.keys[pitchNameIndex].isWhiteKey) {
                    pitch = Config.keys[pitchNameIndex].name;
                }
                else {
                    const shiftDir = Config.blackKeyNameParents[sequencePitch % Config.pitchesPerOctave];
                    pitch = Config.keys[(pitchNameIndex + Config.pitchesPerOctave + shiftDir) % Config.pitchesPerOctave].name;
                    if (shiftDir == 1) {
                        pitch += "♭";
                    }
                    else if (shiftDir == -1) {
                        pitch += "♯";
                    }
                }
                pitch += Math.floor(sequencePitch / Config.pitchesPerOctave);
                this._barPreviewLabel.innerText = `Bar ${this._barPreviewBarIndex + 1}, ${pitch}`;
            };
            this._renderClock = () => {
                const sequence = this._sequences[this._sequenceIndex];
                const steps = sequence.steps;
                const channelIndex = sequence.channel;
                const generatedSequence = this._generatedSequences[this._sequenceIndex];
                const hasGeneratedSequence = generatedSequence.length > 0;
                const invert = sequence.invert;
                const on = invert ? 0 : 1;
                const color = ColorConfig.getChannelColor(this._doc.song, channelIndex).primaryNote;
                const backgroundColor = ColorConfig.editorBackground;
                this._clockWire.setAttribute("stroke", color);
                const container = this._clockPoints;
                while (container.firstChild !== null) {
                    container.removeChild(container.firstChild);
                }
                const centerX = this._clockWidth / 2;
                const centerY = this._clockHeight / 2;
                const clockRadius = this._clockRadius;
                const clockPointRadius = Math.max(this._clockPointMinRadius, Math.min(this._clockPointMaxRadius, this._clockWidth / steps));
                for (let step = 0; step < steps; step++) {
                    const angle = (step / steps) * Math.PI * 2 - Math.PI / 2;
                    const x = centerX + Math.cos(angle) * clockRadius;
                    const y = centerY + Math.sin(angle) * clockRadius;
                    const clockPoint = SVG.circle({
                        cx: x,
                        cy: y,
                        r: clockPointRadius,
                        style: `stroke: ${color}; stroke-width: 0.5; fill: ${backgroundColor}`,
                    });
                    if (hasGeneratedSequence && generatedSequence[step % steps] === on) {
                        clockPoint.setAttribute("style", `fill: ${color};`);
                    }
                    container.appendChild(clockPoint);
                }
            };
            this._renderBarPreview = () => {
                const beatsPerBar = this._doc.song.beatsPerBar;
                const partsPerBeat = Config.partsPerBeat;
                const partsPerBar = partsPerBeat * beatsPerBar;
                const sequence = this._sequences[this._sequenceIndex];
                const steps = sequence.steps;
                const channelIndex = sequence.channel;
                const stepSize = sequence.stepSizeNumerator / sequence.stepSizeDenominator;
                const generatedSequence = this._generatedSequences[this._sequenceIndex];
                const hasGeneratedSequence = generatedSequence.length > 0;
                const invert = sequence.invert;
                const on = invert ? 0 : 1;
                const generateFadingNotes = sequence.generateFadingNotes;
                const channelColors = ColorConfig.getChannelColor(this._doc.song, channelIndex);
                const color = channelColors.primaryNote;
                const secondaryColor = channelColors.secondaryNote;
                const bar = this._barPreviewBarIndex - this._startBar;
                const partOffset = bar * partsPerBar;
                const container = this._barPreviewSteps;
                while (container.firstChild !== null) {
                    container.removeChild(container.firstChild);
                }
                let toPushAtTheEnd = [];
                const beatWidth = this._barPreviewWidth / beatsPerBar;
                const partWidth = beatWidth / partsPerBeat;
                const beatHeight = this._barPreviewHeight;
                const padding = 0.2;
                const firstStep = Math.floor((beatsPerBar * bar) / stepSize);
                const lastStep = Math.ceil((beatsPerBar * (bar + 1)) / stepSize);
                const y = padding;
                const h = beatHeight - padding * 2;
                for (let step = firstStep; step < lastStep; step++) {
                    let continuesLastPattern = false;
                    let needToAdjustPins = false;
                    const rawStepPartStart = (Math.floor(step * partsPerBeat * stepSize) - partOffset);
                    const rawStepPartEnd = (Math.floor((step + 1) * partsPerBeat * stepSize) - partOffset);
                    if (rawStepPartStart < 0) {
                        continuesLastPattern = true;
                    }
                    if (continuesLastPattern || rawStepPartEnd > partsPerBar) {
                        needToAdjustPins = true;
                    }
                    const stepPartStart = Math.max(0, Math.min(partsPerBar, rawStepPartStart));
                    const stepPartEnd = Math.max(0, Math.min(partsPerBar, rawStepPartEnd));
                    const partAmount = stepPartEnd - stepPartStart;
                    const x = padding + stepPartStart * partWidth;
                    const w = partAmount * partWidth - padding * 2;
                    if (hasGeneratedSequence && generatedSequence[step % steps] === on) {
                        if (generateFadingNotes) {
                            const stepBackgroundElement = SVG.rect({
                                x: x,
                                y: y,
                                width: w,
                                height: h,
                                style: `fill: ${secondaryColor};`,
                            });
                            container.appendChild(stepBackgroundElement);
                            let startSize = Config.noteSizeMax;
                            let endSize = 0;
                            if (needToAdjustPins) {
                                const startRatio = (stepPartStart - rawStepPartStart) / (rawStepPartEnd - rawStepPartStart);
                                const startPinSize = Math.round(Config.noteSizeMax + (0 - Config.noteSizeMax) * startRatio);
                                startSize = startPinSize;
                                const endRatio = (stepPartEnd - rawStepPartStart) / (rawStepPartEnd - rawStepPartStart);
                                const endPinSize = Math.round(Config.noteSizeMax + (0 - Config.noteSizeMax) * endRatio);
                                endSize = endPinSize;
                            }
                            startSize /= Config.noteSizeMax;
                            endSize /= Config.noteSizeMax;
                            const x0 = x;
                            const y0 = y + (h / 2) * (1 - startSize);
                            const x1 = x + w;
                            const y1 = y + (h / 2) * (1 - endSize);
                            const x2 = x + w;
                            const y2 = y + h - (h / 2) * (1 - endSize);
                            const x3 = x;
                            const y3 = y + h - (h / 2) * (1 - startSize);
                            const stepElement = SVG.path({
                                d: `M ${x0} ${y0} L ${x1} ${y1} L ${x2} ${y2} L ${x3} ${y3} z`,
                                style: `fill: ${color};`,
                            });
                            container.appendChild(stepElement);
                        }
                        else {
                            const stepElement = SVG.rect({
                                x: x,
                                y: y,
                                width: w,
                                height: h,
                                style: `fill: ${color};`,
                            });
                            container.appendChild(stepElement);
                        }
                        if (continuesLastPattern) {
                            let indicatorOffset = 2 + padding;
                            const arrowHeight = Math.min(h, 20);
                            const arrowY = y + h / 2;
                            let arrowPath;
                            arrowPath = "M " + prettyNumber(partWidth * stepPartStart + indicatorOffset) + " " + prettyNumber(arrowY - 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset) + " " + prettyNumber(arrowY + 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset + 4) + " " + prettyNumber(arrowY + 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset + 4) + " " + prettyNumber(arrowY + 0.3 * arrowHeight);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset + 12) + " " + prettyNumber(arrowY);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset + 4) + " " + prettyNumber(arrowY - 0.3 * arrowHeight);
                            arrowPath += "L " + prettyNumber(partWidth * stepPartStart + indicatorOffset + 4) + " " + prettyNumber(arrowY - 0.1 * arrowHeight);
                            const arrow = SVG.path();
                            arrow.setAttribute("d", arrowPath);
                            arrow.setAttribute("fill", ColorConfig.invertedText);
                            toPushAtTheEnd.push(arrow);
                        }
                    }
                }
                for (let element of toPushAtTheEnd) {
                    container.appendChild(element);
                }
            };
            this._startBar = this._doc.bar;
            this._barPreviewBarIndex = this._startBar;
            this._barsAvailable = Config.barCountMax - this._startBar;
            this._barAmountStepper.max = this._barsAvailable + "";
            this._maxChannel = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount - 1;
            this._channelStepper.max = (this._maxChannel + 1) + "";
            const defaultSteps = Math.max(this._minSteps, Math.min(this._maxSteps, this._doc.song.beatsPerBar));
            const defaultPulses = Math.max(0, Math.min(defaultSteps, 5));
            this._sequences = [{
                    steps: defaultSteps,
                    pulses: defaultPulses,
                    rotation: 0,
                    stepSizeNumerator: 1,
                    stepSizeDenominator: 4,
                    channel: Math.max(0, Math.min(this._maxChannel, this._doc.channel)),
                    pitch: 0,
                    invert: false,
                    generateFadingNotes: false,
                }];
            if (this._doc.selection.boxSelectionActive) {
                this._startBar = this._doc.selection.boxSelectionBar;
                this._barPreviewBarIndex = this._startBar;
                this._barAmount = Math.max(1, Math.min(this._barsAvailable, this._doc.selection.boxSelectionWidth));
                this._sequences[0].channel = Math.max(0, Math.min(this._maxChannel, this._doc.selection.boxSelectionChannel));
                for (let i = 1; i < this._doc.selection.boxSelectionHeight; i++) {
                    this._sequences.push({
                        steps: defaultSteps,
                        pulses: defaultPulses,
                        rotation: 0,
                        stepSizeNumerator: 1,
                        stepSizeDenominator: 4,
                        channel: Math.max(0, Math.min(this._maxChannel, this._doc.selection.boxSelectionChannel + i)),
                        pitch: 0,
                        invert: false,
                        generateFadingNotes: false,
                    });
                }
            }
            else {
                const savedData = JSON.parse(String(window.localStorage.getItem(this._localStorageKey)));
                if (savedData != null) {
                    const rawSequences = savedData["sequences"];
                    if (rawSequences != null && Array.isArray(rawSequences)) {
                        let parsedSequences = [];
                        for (let rawSequence of rawSequences) {
                            parsedSequences.push({
                                steps: Math.max(this._minSteps, Math.min(this._maxSteps, (_a = rawSequence["steps"]) !== null && _a !== void 0 ? _a : this._doc.song.beatsPerBar)),
                                pulses: Math.max(0, Math.min(this._maxSteps, (_b = rawSequence["pulses"]) !== null && _b !== void 0 ? _b : 5)),
                                rotation: Math.max(0, Math.min(this._maxSteps, (_c = rawSequence["rotation"]) !== null && _c !== void 0 ? _c : 0)),
                                stepSizeNumerator: Math.max(1, Math.min(Config.partsPerBeat, (_d = rawSequence["stepSizeNumerator"]) !== null && _d !== void 0 ? _d : 1)),
                                stepSizeDenominator: Math.max(1, Math.min(Config.partsPerBeat, (_e = rawSequence["stepSizeDenominator"]) !== null && _e !== void 0 ? _e : 4)),
                                channel: Math.max(0, Math.min(this._maxChannel, rawSequence["channel"])),
                                pitch: (_f = rawSequence["pitch"]) !== null && _f !== void 0 ? _f : 0,
                                invert: (_g = rawSequence["invert"]) !== null && _g !== void 0 ? _g : false,
                                generateFadingNotes: (_h = rawSequence["generateFadingNotes"]) !== null && _h !== void 0 ? _h : false,
                            });
                        }
                        this._sequences = parsedSequences;
                        if (this._sequences.length === 1) {
                            const sequence = this._sequences[this._sequenceIndex];
                            const channel = Math.max(0, Math.min(this._maxChannel, this._doc.channel));
                            sequence.channel = channel;
                            const maxPitch = this._doc.song.getChannelIsNoise(channel) ? (Config.drumCount - 1) : Config.maxPitch;
                            sequence.pitch = Math.max(0, Math.min(maxPitch, sequence.pitch));
                        }
                    }
                    this._barAmount = Math.max(1, Math.min(this._barsAvailable, (_j = savedData["barAmount"]) !== null && _j !== void 0 ? _j : this._barAmount));
                }
            }
            this._generateAllSequences();
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._sequenceButtonContainer.addEventListener("click", this._whenSelectSequence);
            this._barPreviewGoToFirstButton.addEventListener("click", this._whenBarPreviewGoToFirstClicked);
            this._barPreviewGoBackButton.addEventListener("click", this._whenBarPreviewGoBackClicked);
            this._barPreviewGoForwardButton.addEventListener("click", this._whenBarPreviewGoForwardClicked);
            this._barPreviewGoToLastButton.addEventListener("click", this._whenBarPreviewGoToLastClicked);
            this._stepsStepper.addEventListener("change", this._whenStepsChanges);
            this._pulsesStepper.addEventListener("change", this._whenPulsesChanges);
            this._rotationStepper.addEventListener("change", this._whenRotationChanges);
            this._stepSizeNumeratorStepper.addEventListener("change", this._whenStepSizeChanges);
            this._stepSizeDenominatorStepper.addEventListener("change", this._whenStepSizeChanges);
            this._channelStepper.addEventListener("change", this._whenChannelChanges);
            this._pitchStepper.addEventListener("change", this._whenPitchChanges);
            this._barAmountStepper.addEventListener("change", this._whenBarAmountChanges);
            this._invertBox.addEventListener("change", this._whenInvertChanges);
            this._generateFadingNotesBox.addEventListener("change", this._whenGenerateFadingNotesChanges);
            this._extendUntilLoopButton.addEventListener("click", this._whenExtendUntilLoopClicked);
            this._initialRender();
            this._render();
        }
    }

    class Layout {
        static setLayout(layout) {
            this._styleElement.textContent = this._layoutMap[layout];
        }
    }
    Layout._layoutMap = {
        "small": "",
        "long": `\

			/* long layout */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: minmax(0, 1fr) 390px; /* minmax(0, 1fr) min-content; Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */
					grid-template-rows: minmax(481px, 1fr) minmax(0, min-content);
					grid-template-areas: "pattern-area settings-area" "track-area track-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .track-area {
					width: 100%;
					display: flex;
					flex-direction: column;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 1;
					overflow: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				.beepboxEditor .song-settings-area {
					overflow-y: auto;
				}
				
				.beepboxEditor .settings-area {
					width: 390px;
					grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
					grid-template-rows: auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"instrument-settings-area version-area"
						"instrument-settings-area play-pause-area"
						"instrument-settings-area menu-area"
						"instrument-settings-area song-settings-area";
				}
				
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor.selectRow {
					height: 2em;
				}
				.beepboxEditor .operatorRow {
					heiht: 2em;
				}
				.beepboxEditor .trackAndMuteContainer {
					max-height: 446px;
				}

				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
			}
		`,
        "tall": `\
			/* tall layout */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) 192px;
					grid-template-rows: 1fr;
					grid-template-areas: "track-area pattern-area settings-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .track-area {
					width: 100%;
					height: 100%;
					display: flex;
					flex-direction: column;
					justify-content: center;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 0;
					overflow: auto;
					flex-basis: initial;
					flex-grow: 0;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				
				.beepboxEditor .settings-area {
					width: 192px;
					position: relative;
					overflow-y: auto;
					grid-template-columns: minmax(0, 1fr);
					grid-template-rows: auto auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"version-area"
						"play-pause-area"
						"menu-area"
						"song-settings-area"
						"instrument-settings-area";
				}
				.beepboxEditor .version-area {
					position: sticky;
					top: 0;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .play-pause-area {
					position: sticky;
					top: 22px;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .menu-area {
					position: sticky;
					top: 82px;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
			}
		`,
        "wide": `\
			/* wide (JB) layout */
			@media (min-width: 1001px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: 512px minmax(0, 1fr) 30em;
					grid-template-rows: minmax(481px, 1fr) min-content;
					grid-template-areas: "track-area pattern-area settings-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .track-area {
					width: 100%;
					height: 100%;
					max-height: 100%
				}
				.beepboxEditor .editor-widget-column {
					flex: 0;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					flex: 0;
					flex-basis: initial;
					flex-grow: 0;
					overflow-y: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				
				.beepboxEditor .song-settings-area {
					overflow-y: auto;
				}
				
				.beepboxEditor .settings-area {
					width: 30em;
					grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
					grid-template-rows: auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"instrument-settings-area version-area"
						"instrument-settings-area play-pause-area"
						"instrument-settings-area menu-area"
						"instrument-settings-area song-settings-area";
				}
				.beepboxEditor .version-area {
					position: sticky;
					top: 0;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .play-pause-area {
					position: sticky;
					top: 22px;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .menu-area {
					position: sticky;
					top: 82px;
					z-index: 1;
					background: ${ColorConfig.editorBackground};
				}
				
				.beepboxEditor .trackContainer {
					overflow: visible;
				}
			}
		`,
        "AbyssBox Special": `\

            	/* AB Special layout */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: 390px minmax(0, 1fr);
					grid-template-rows: minmax(481px, 1fr) minmax(0, min-content);
					grid-template-areas: "settings-area pattern-area" "track-area track-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .track-area {
					width: 100%;
					display: flex;
					flex-direction: column;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 1;
					overflow: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				.beepboxEditor .song-settings-area {
					overflow-y: auto;
				}
				
				.beepboxEditor .settings-area {
					width: 30em;
					grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
					grid-template-rows: auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"version-area instrument-settings-area"
						"play-pause-area instrument-settings-area"
						"menu-area instrument-settings-area"
						"song-settings-area instrument-settings-area";
				}
				
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor.selectRow {
					height: 2em;
				}
				.beepboxEditor .operatorRow {
					heiht: 2em;
				}
				.beepboxEditor .trackAndMuteContainer {
					max-height: 446px;
				}

				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
					scrollbar-color: ${ColorConfig.scrollbarColor} ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
			}
		`,
        "long (AB)": `\

			/* focus layout */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: minmax(0, 1fr) 390px; /* minmax(0, 1fr) min-content; Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */
					grid-template-rows: minmax(481px, 1fr) minmax(0, min-content);
					grid-template-areas: "pattern-area settings-area" "track-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 1;
					overflow: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				
				.beepboxEditor .song-settings-area {
					overflow-y: auto;
				}
				
				.beepboxEditor .settings-area {
					width: 30em;
					grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
					grid-template-rows: auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"instrument-settings-area version-area"
						"instrument-settings-area play-pause-area"
						"instrument-settings-area menu-area"
						"instrument-settings-area song-settings-area";
				}				
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor.selectRow {
					height: 2em;
				}
				.beepboxEditor .operatorRow {
					heiht: 2em;
				}
				.beepboxEditor .trackAndMuteContainer {
					max-height: 446px;
				}

				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
					scrollbar-color: ${ColorConfig.scrollbarColor} ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
				div.track-area {
				display: flex;
				}
			}
		`,
        "focus": `\

			/* focus layout */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: minmax(0, 1fr) 190px; 
					grid-template-rows: minmax(481px, 1fr) minmax(0, min-content);
					grid-template-areas: "pattern-area settings-area" "track-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 1;
					overflow: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				
				.beepboxEditor .settings-area {
					width: 100%;
					position: relative;
					overflow-y: auto;
					grid-template-columns: minmax(0, 1fr);
					grid-template-rows: auto auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"version-area"
						"play-pause-area"
						"menu-area"
						"song-settings-area"
						"instrument-settings-area";
				}
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor.selectRow {
					height: 2em;
				}
				.beepboxEditor .operatorRow {
					heiht: 2em;
				}
				.beepboxEditor .trackAndMuteContainer {
					max-height: 446px;
				}

				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
					scrollbar-color: ${ColorConfig.scrollbarColor} ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
				div.track-area {
				display: flex;
				}
			}
		`,
        "theatre": `\

		/* Theatre layout */
		@media (min-width: 711px) {
			#beepboxEditorContainer {
				max-width: initial;
				height: 100vh;
				padding-top: 0px !important;
			}
			.beepboxEditor {
				width: 100%;
				height: 200vh;
				grid-template-columns: minmax(0, 1fr) 390px;
				grid-template-rows: minmax(480px, 50%) minmax(0, 50%);
				grid-template-areas:
			"pattern-area pattern-area " 
			"track-area settings-area";
			  }			
			.beepboxEditor .pattern-area {
				width: 100%;
				height: 100%;
			}
			.beepboxEditor .track-area {
				width: 100%;
				display: flex;
				flex-direction: column;
			}
			.beepboxEditor .trackAndMuteContainer {
				width: 100%;
				min-height: 0;
				flex: 1;
				overflow: auto;
				max-height: 97.5vh;
			}
			.beepboxEditor .instrument-settings-area {
				overflow-y: auto;
				position: relative;
			}
			.beepboxEditor .instrument-settings-area > .editor-controls {
				position: absolute;
				width: 100%;
			}
			.beepboxEditor .song-settings-area {
				overflow-y: auto;
			}
			
			.beepboxEditor .settings-area {
				width: 390px;
				grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
				grid-template-rows: auto auto auto minmax(0, 1fr);
				grid-template-areas:
					"instrument-settings-area version-area"
					"instrument-settings-area play-pause-area"
					"instrument-settings-area menu-area"
					"instrument-settings-area song-settings-area";
			}
			
			.beepboxEditor .barScrollBar {
				display: none;
			}
			.beepboxEditor.selectRow {
				height: 2em;
			}
			.beepboxEditor .operatorRow {
				heiht: 2em;
			}
			.beepboxEditor .trackAndMuteContainer {
				max-height: 100%;
			}

			.beepboxEditor .trackContainer {
				overflow: visible;
			}
			.beepboxEditor .trackAndMuteContainer {
				scrollbar-width: auto;
				scrollbar-color: ${ColorConfig.scrollbarColor} ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};
			}
			.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
				width: 20px;
				height: 20px;
			}
			.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
				background: ${ColorConfig.editorBackground};
			}
			.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
				background-color: ${ColorConfig.uiWidgetBackground};
				border: 3px solid ${ColorConfig.editorBackground};
			}
			.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
				background-color: ${ColorConfig.editorBackground};
			}
		}
	`,
        "Upside Down": `\

				/* Upside Down */
			@media (min-width: 711px) {
				#beepboxEditorContainer {
					max-width: initial;
					height: 100vh;
					padding-top: 0px !important;
				}
				.beepboxEditor {
					width: 100%;
					height: 100vh;
					grid-template-columns: 195px minmax(0, 1fr);
					grid-template-rows: minmax(0, min-content) minmax(481px, 1fr);
					grid-template-areas: "settings-area track-area" "settings-area pattern-area";
				}
				.beepboxEditor .pattern-area {
					width: 100%;
					height: 100%;
				}
				.beepboxEditor .track-area {
					width: 100%;
					display: flex;
					flex-direction: column;
				}
				.beepboxEditor .trackAndMuteContainer {
					width: 100%;
					min-height: 0;
					flex: 1;
					overflow: auto;
					max-height: 97.5vh;
				}
				.beepboxEditor .instrument-settings-area {
					overflow-y: auto;
					position: relative;
				}
				.beepboxEditor .instrument-settings-area > .editor-controls {
					position: absolute;
					width: 100%;
				}
				.beepboxEditor .song-settings-area {
					overflow-y: auto;
				}
				
				.beepboxEditor .settings-area {
					width: 100%;
					position: relative;
					overflow-y: auto;
					grid-template-columns: minmax(0, 1fr);
					grid-template-rows: auto auto auto auto minmax(0, 1fr);
					grid-template-areas:
						"version-area"
						"play-pause-area"
						"menu-area"
						"song-settings-area"
						"instrument-settings-area";
				}
				
				.beepboxEditor .barScrollBar {
					display: none;
				}
				.beepboxEditor.selectRow {
					height: 2em;
				}
				.beepboxEditor .operatorRow {
					heiht: 2em;
				}
				.beepboxEditor .trackAndMuteContainer {
					max-height: 446px;
				}

				.beepboxEditor .trackContainer {
					overflow: visible;
				}
				.beepboxEditor .trackAndMuteContainer {
					scrollbar-width: auto;
					scrollbar-color: ${ColorConfig.scrollbarColor} ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {
					width: 20px;
					height: 20px;
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {
					background: ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {
					background-color: ${ColorConfig.uiWidgetBackground};
					border: 3px solid ${ColorConfig.editorBackground};
				}
				.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {
					background-color: ${ColorConfig.editorBackground};
				}
			}
			`,
    };
    Layout._styleElement = document.head.appendChild(HTML.style({ type: "text/css" }));

    class HarmonicsEditor {
        constructor(_doc) {
            this._doc = _doc;
            this._editorWidth = 120;
            this._editorHeight = 26;
            this._octaves = SVG.svg({ "pointer-events": "none" });
            this._fifths = SVG.svg({ "pointer-events": "none" });
            this._curve = SVG.path({ fill: "none", stroke: "currentColor", "stroke-width": 2, "pointer-events": "none" });
            this._lastControlPoints = [];
            this._lastControlPointContainer = SVG.svg({ "pointer-events": "none" });
            this._svg = SVG.svg({ style: "background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;", width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._octaves, this._fifths, this._curve, this._lastControlPointContainer);
            this.container = HTML.div({ class: "harmonics", style: "height: 100%;" }, this._svg);
            this._mouseX = 0;
            this._mouseY = 0;
            this._freqPrev = 0;
            this._ampPrev = 0;
            this._mouseDown = false;
            this._change = null;
            this._renderedPath = "";
            this._renderedFifths = true;
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._freqPrev = this._xToFreq(this._mouseX);
                this._ampPrev = this._yToAmp(this._mouseY);
                this._whenCursorMoved();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._freqPrev = this._xToFreq(this._mouseX);
                this._ampPrev = this._yToAmp(this._mouseY);
                this._whenCursorMoved();
            };
            this._whenMouseMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (this._mouseDown) {
                    this._doc.record(this._change);
                    this._change = null;
                }
                this._mouseDown = false;
            };
            for (let i = 1; i <= Config.harmonicsControlPoints; i = i * 2) {
                this._octaves.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i - 0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            for (let i = 3; i <= Config.harmonicsControlPoints; i = i * 2) {
                this._fifths.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i - 0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            for (let i = 0; i < 4; i++) {
                const rect = SVG.rect({ fill: "currentColor", x: (this._editorWidth - i * 2 - 1), y: 0, width: 1, height: this._editorHeight });
                this._lastControlPoints.push(rect);
                this._lastControlPointContainer.appendChild(rect);
            }
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _xToFreq(x) {
            return (Config.harmonicsControlPoints - 1) * x / (this._editorWidth - 8) - 0.5;
        }
        _yToAmp(y) {
            return Config.harmonicsMax * (1 - y / this._editorHeight);
        }
        _whenCursorMoved() {
            if (this._mouseDown) {
                const freq = this._xToFreq(this._mouseX);
                const amp = this._yToAmp(this._mouseY);
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                const harmonicsWave = instrument.harmonicsWave;
                if (freq != this._freqPrev) {
                    const slope = (amp - this._ampPrev) / (freq - this._freqPrev);
                    const offset = this._ampPrev - this._freqPrev * slope;
                    const lowerFreq = Math.ceil(Math.min(this._freqPrev, freq));
                    const upperFreq = Math.floor(Math.max(this._freqPrev, freq));
                    for (let i = lowerFreq; i <= upperFreq; i++) {
                        if (i < 0 || i >= Config.harmonicsControlPoints)
                            continue;
                        harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(i * slope + offset)));
                    }
                }
                harmonicsWave.harmonics[Math.max(0, Math.min(Config.harmonicsControlPoints - 1, Math.round(freq)))] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(amp)));
                this._freqPrev = freq;
                this._ampPrev = amp;
                this._change = new ChangeHarmonics(this._doc, instrument, harmonicsWave);
                this._doc.setProspectiveChange(this._change);
            }
        }
        render() {
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            const harmonicsWave = instrument.harmonicsWave;
            const controlPointToHeight = (point) => {
                return (1 - (point / Config.harmonicsMax)) * this._editorHeight;
            };
            let bottom = prettyNumber(this._editorHeight);
            let path = "";
            for (let i = 0; i < Config.harmonicsControlPoints - 1; i++) {
                if (harmonicsWave.harmonics[i] == 0)
                    continue;
                let xPos = prettyNumber((i + 0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1));
                path += "M " + xPos + " " + bottom + " ";
                path += "L " + xPos + " " + prettyNumber(controlPointToHeight(harmonicsWave.harmonics[i])) + " ";
            }
            const lastHeight = controlPointToHeight(harmonicsWave.harmonics[Config.harmonicsControlPoints - 1]);
            for (let i = 0; i < 4; i++) {
                const rect = this._lastControlPoints[i];
                rect.setAttribute("y", prettyNumber(lastHeight));
                rect.setAttribute("height", prettyNumber(this._editorHeight - lastHeight));
            }
            if (this._renderedPath != path) {
                this._renderedPath = path;
                this._curve.setAttribute("d", path);
            }
            if (this._renderedFifths != this._doc.prefs.showFifth) {
                this._renderedFifths = this._doc.prefs.showFifth;
                this._fifths.style.display = this._doc.prefs.showFifth ? "" : "none";
            }
        }
    }

    const { span: span$5 } = HTML;
    class InputBox {
        constructor(input, _doc, _getChange) {
            this.input = input;
            this._doc = _doc;
            this._getChange = _getChange;
            this._change = null;
            this._value = "";
            this._oldValue = "";
            this._whenInput = () => {
                const continuingProspectiveChange = this._doc.lastChangeWas(this._change);
                if (!continuingProspectiveChange)
                    this._oldValue = this._value;
                this._change = this._getChange(this._oldValue, this.input.value);
                this._doc.setProspectiveChange(this._change);
            };
            this._whenChange = () => {
                this._doc.record(this._change);
                this._change = null;
            };
            input.addEventListener("input", this._whenInput);
            input.addEventListener("change", this._whenChange);
        }
        updateValue(value) {
            this._value = value;
            this.input.value = String(value);
        }
    }
    class Slider {
        constructor(input, _doc, _getChange, midTick) {
            this.input = input;
            this._doc = _doc;
            this._getChange = _getChange;
            this._change = null;
            this._value = 0;
            this._oldValue = 0;
            this._whenInput = () => {
                const continuingProspectiveChange = this._doc.lastChangeWas(this._change);
                if (!continuingProspectiveChange)
                    this._oldValue = this._value;
                if (this._getChange != null) {
                    this._change = this._getChange(this._oldValue, parseInt(this.input.value));
                    this._doc.setProspectiveChange(this._change);
                }
            };
            this._whenChange = () => {
                if (this._getChange != null) {
                    this._doc.record(this._change);
                    this._change = null;
                }
            };
            this.container = (midTick) ? span$5({ class: "midTick", style: "position: sticky; width: 61.5%;" }, input) : span$5({ style: "position: sticky;" }, input);
            input.addEventListener("input", this._whenInput);
            input.addEventListener("change", this._whenChange);
        }
        updateValue(value) {
            this._value = value;
            this.input.value = String(value);
        }
        getValueBeforeProspectiveChange() {
            return this._oldValue;
        }
    }

    const defaultMidiExpression = 0x7F;
    const defaultMidiPitchBend = 0x2000;
    const analogousDrumMap = {
        35: { frequency: 0, duration: 2, volume: 3 },
        36: { frequency: 0, duration: 2, volume: 3 },
        37: { frequency: 5, duration: 1, volume: 3 },
        38: { frequency: 4, duration: 2, volume: 3 },
        39: { frequency: 5, duration: 2, volume: 3 },
        40: { frequency: 4, duration: 2, volume: 3 },
        41: { frequency: 1, duration: 2, volume: 3 },
        42: { frequency: 8, duration: 1, volume: 3 },
        43: { frequency: 1, duration: 2, volume: 3 },
        44: { frequency: 8, duration: 1, volume: 2 },
        45: { frequency: 2, duration: 2, volume: 3 },
        46: { frequency: 8, duration: 4, volume: 3 },
        47: { frequency: 2, duration: 2, volume: 3 },
        48: { frequency: 3, duration: 2, volume: 3 },
        49: { frequency: 7, duration: 4, volume: 3 },
        50: { frequency: 3, duration: 2, volume: 3 },
        51: { frequency: 6, duration: 4, volume: 2 },
        52: { frequency: 7, duration: 4, volume: 3 },
        53: { frequency: 6, duration: 2, volume: 3 },
        54: { frequency: 11, duration: 2, volume: 3 },
        55: { frequency: 9, duration: 4, volume: 3 },
        56: { frequency: 7, duration: 1, volume: 2 },
        57: { frequency: 7, duration: 4, volume: 3 },
        58: { frequency: 10, duration: 2, volume: 2 },
        59: { frequency: 6, duration: 4, volume: 3 },
        69: { frequency: 10, duration: 2, volume: 3 },
        70: { frequency: 10, duration: 2, volume: 3 },
        73: { frequency: 10, duration: 1, volume: 2 },
        74: { frequency: 10, duration: 2, volume: 2 },
    };
    function midiVolumeToVolumeMult(volume) {
        return Math.pow(volume / 127, 4.0) / 0.3844015376046128;
    }
    function volumeMultToMidiVolume(volumeMult) {
        return Math.pow(volumeMult * 0.3844015376046128, 0.25) * 127;
    }
    function midiExpressionToVolumeMult(expression) {
        return Math.pow(expression / 127, 4.0);
    }
    function volumeMultToMidiExpression(volumeMult) {
        return Math.pow(volumeMult, 0.25) * 127;
    }

    class ArrayBufferReader {
        constructor(data) {
            this._readIndex = 0;
            this._data = data;
        }
        getReadIndex() {
            return this._readIndex;
        }
        readUint32() {
            if (this._readIndex + 4 > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            const result = this._data.getUint32(this._readIndex, false);
            this._readIndex += 4;
            return result;
        }
        readUint24() {
            return (this.readUint8() << 16) | (this.readUint8() << 8) | (this.readUint8());
        }
        readUint16() {
            if (this._readIndex + 2 > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            const result = this._data.getUint16(this._readIndex, false);
            this._readIndex += 2;
            return result;
        }
        readUint8() {
            if (this._readIndex + 1 > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            const result = this._data.getUint8(this._readIndex);
            this._readIndex++;
            return result;
        }
        readInt8() {
            if (this._readIndex + 1 > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            const result = this._data.getInt8(this._readIndex);
            this._readIndex++;
            return result;
        }
        peakUint8() {
            if (this._readIndex + 1 > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            return this._data.getUint8(this._readIndex);
        }
        readMidi7Bits() {
            const result = this.readUint8();
            if (result >= 0x80)
                console.log("7 bit value contained 8th bit! value " + result + ", index " + this._readIndex);
            return result & 0x7f;
        }
        readMidiVariableLength() {
            let result = 0;
            for (let i = 0; i < 4; i++) {
                const nextByte = this.readUint8();
                result += nextByte & 0x7f;
                if (nextByte & 0x80) {
                    result = result << 7;
                }
                else {
                    break;
                }
            }
            return result;
        }
        skipBytes(length) {
            this._readIndex += length;
        }
        hasMore() {
            return this._data.byteLength > this._readIndex;
        }
        getReaderForNextBytes(length) {
            if (this._readIndex + length > this._data.byteLength)
                throw new Error("Reading past the end of the buffer.");
            const result = new ArrayBufferReader(new DataView(this._data.buffer, this._data.byteOffset + this._readIndex, length));
            this.skipBytes(length);
            return result;
        }
    }

    function transfer(source, length) {
        const dest = new ArrayBuffer(length);
        let nextOffset = 0;
        let leftBytes = Math.min(source.byteLength, dest.byteLength);
        const wordSizes = [8, 4, 2, 1];
        for (const wordSize of wordSizes) {
            if (leftBytes >= wordSize) {
                const done = transferWith(wordSize, source, dest, nextOffset, leftBytes);
                nextOffset = done.nextOffset;
                leftBytes = done.leftBytes;
            }
        }
        return dest;
        function transferWith(wordSize, source, dest, nextOffset, leftBytes) {
            let ViewClass = Uint8Array;
            switch (wordSize) {
                case 8:
                    ViewClass = Float64Array;
                    break;
                case 4:
                    ViewClass = Float32Array;
                    break;
                case 2:
                    ViewClass = Uint16Array;
                    break;
                case 1:
                    ViewClass = Uint8Array;
                    break;
                default:
                    ViewClass = Uint8Array;
                    break;
            }
            const view_source = new ViewClass(source, nextOffset, (leftBytes / wordSize) | 0);
            const view_dest = new ViewClass(dest, nextOffset, (leftBytes / wordSize) | 0);
            for (let i = 0; i < view_dest.length; i++) {
                view_dest[i] = view_source[i];
            }
            return {
                nextOffset: view_source.byteOffset + view_source.byteLength,
                leftBytes: leftBytes - view_dest.length * wordSize,
            };
        }
    }
    class ArrayBufferWriter {
        constructor(initialCapacity) {
            this._writeIndex = 0;
            this._fileSize = 0;
            this._arrayBuffer = new ArrayBuffer(initialCapacity);
            this._data = new DataView(this._arrayBuffer);
        }
        _addBytes(numBytes) {
            this._fileSize += numBytes;
            if (this._fileSize > this._arrayBuffer.byteLength) {
                this._arrayBuffer = transfer(this._arrayBuffer, Math.max(this._arrayBuffer.byteLength * 2, this._fileSize));
                this._data = new DataView(this._arrayBuffer);
            }
        }
        getWriteIndex() {
            return this._writeIndex;
        }
        rewriteUint32(index, value) {
            this._data.setUint32(index, value >>> 0, false);
        }
        writeUint32(value) {
            value = value >>> 0;
            this._addBytes(4);
            this._data.setUint32(this._writeIndex, value, false);
            this._writeIndex = this._fileSize;
        }
        writeUint24(value) {
            value = value >>> 0;
            this._addBytes(3);
            this._data.setUint8(this._writeIndex, (value >> 16) & 0xff);
            this._data.setUint8(this._writeIndex + 1, (value >> 8) & 0xff);
            this._data.setUint8(this._writeIndex + 2, (value) & 0xff);
            this._writeIndex = this._fileSize;
        }
        writeUint16(value) {
            value = value >>> 0;
            this._addBytes(2);
            this._data.setUint16(this._writeIndex, value, false);
            this._writeIndex = this._fileSize;
        }
        writeUint8(value) {
            value = value >>> 0;
            this._addBytes(1);
            this._data.setUint8(this._writeIndex, value);
            this._writeIndex = this._fileSize;
        }
        writeInt8(value) {
            value = value | 0;
            this._addBytes(1);
            this._data.setInt8(this._writeIndex, value);
            this._writeIndex = this._fileSize;
        }
        writeMidi7Bits(value) {
            value = value >>> 0;
            if (value >= 0x80)
                throw new Error("7 bit value contained 8th bit!");
            this._addBytes(1);
            this._data.setUint8(this._writeIndex, value);
            this._writeIndex = this._fileSize;
        }
        writeMidiVariableLength(value) {
            value = value >>> 0;
            if (value > 0x0fffffff)
                throw new Error("writeVariableLength value too big.");
            let startWriting = false;
            for (let i = 0; i < 4; i++) {
                const shift = 21 - i * 7;
                const bits = (value >>> shift) & 0x7f;
                if (bits != 0 || i == 3)
                    startWriting = true;
                if (startWriting)
                    this.writeUint8((i == 3 ? 0x00 : 0x80) | bits);
            }
        }
        writeMidiAscii(string) {
            this.writeMidiVariableLength(string.length);
            for (let i = 0; i < string.length; i++) {
                const charCode = string.charCodeAt(i);
                if (charCode > 0x7f)
                    throw new Error("Trying to write unicode character as ascii.");
                this.writeUint8(charCode);
            }
        }
        toCompactArrayBuffer() {
            return transfer(this._arrayBuffer, this._fileSize);
        }
    }

    const { button: button$k, div: div$k, h2: h2$j, input: input$c, select: select$d, option: option$d } = HTML;
    function lerp(low, high, t) {
        return low + t * (high - low);
    }
    function save$1(blob, name) {
        if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(blob, name);
            return;
        }
        const anchor = document.createElement("a");
        if (anchor.download != undefined) {
            const url = URL.createObjectURL(blob);
            setTimeout(function () { URL.revokeObjectURL(url); }, 60000);
            anchor.href = url;
            anchor.download = name;
            setTimeout(function () { anchor.dispatchEvent(new MouseEvent("click")); }, 0);
        }
        else {
            const url = URL.createObjectURL(blob);
            setTimeout(function () { URL.revokeObjectURL(url); }, 60000);
            if (!window.open(url, "_blank"))
                window.location.href = url;
        }
    }
    class ExportPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this.outputStarted = false;
            this._fileName = input$c({ type: "text", style: "width: 10em;", value: "BeepBox-Song", maxlength: 250, "autofocus": "autofocus" });
            this._computedSamplesLabel = div$k({ style: "width: 10em;" }, new Text("0:00"));
            this._enableIntro = input$c({ type: "checkbox" });
            this._loopDropDown = input$c({ style: "width: 3em;", type: "number", min: "1", max: "16", step: "1" });
            this._enableOutro = input$c({ type: "checkbox" });
            this._formatSelect = select$d({ style: "width: 100%;" }, option$d({ value: "wav" }, "Export to .wav file."), option$d({ value: "mp3" }, "Export to .mp3 file."), option$d({ value: "ogg" }, "Export to .ogg file."), option$d({ value: "opus" }, "Export to .opus file."), option$d({ value: "midi" }, "Export to .mid file."), option$d({ value: "json" }, "Export to .json file."), option$d({ value: "html" }, "Export to .html file."));
            this._removeWhitespace = input$c({ type: "checkbox" });
            this._removeWhitespaceDiv = div$k({ style: "vertical-align: middle; align-items: center; justify-content: space-between; margin-bottom: 14px;" }, "Remove Whitespace: ", this._removeWhitespace);
            this._oggWarning = div$k({ style: "vertical-align: middle; align-items: center; justify-content: space-between; margin-bottom: 14px;" }, "Warning: .ogg files aren't supported on as many devices as mp3 or wav. So Playback might not be possible on specific devices.");
            this._opusWarning = div$k({ style: "vertical-align: middle; align-items: center; justify-content: space-between; margin-bottom: 14px;" }, "Warning: .opus files aren't supported on as many devices as mp3 or wav. So Playback might not be possible on specific devices.");
            this._cancelButton = button$k({ class: "cancelButton" });
            this._exportButton = button$k({ class: "exportButton", style: "width:45%;" }, "Export");
            this._outputProgressBar = div$k({ style: `width: 0%; background: ${ColorConfig.loopAccent}; height: 100%; position: absolute; z-index: 2;` });
            this._outputProgressLabel = div$k({ style: `position: relative; top: -1px; z-index: 3;` }, "0%");
            this._outputProgressContainer = div$k({ style: `height: 12px; background: ${ColorConfig.uiWidgetBackground}; display: block; position: relative; z-index: 1; margin-bottom: 14px;` }, this._outputProgressBar, this._outputProgressLabel);
            this._exportPrompt = div$k({}, div$k({ class: "promptTitle", style: "margin-bottom: 14px;" }, h2$j({ class: "exportExt", style: "text-align: inherit;" }, ""), h2$j({ class: "exportTitle" }, "Export Options")), div$k({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-between; margin-bottom: 14px;" }, "File name:", this._fileName), div$k({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-between; margin-bottom: 14px;" }, "Length:", this._computedSamplesLabel), div$k({ style: "display: table; width: 100%; margin-bottom: 14px;" }, div$k({ style: "display: table-row;" }, div$k({ style: "display: table-cell;" }, "Intro:"), div$k({ style: "display: table-cell;" }, "Loop Count:"), div$k({ style: "display: table-cell;" }, "Outro:")), div$k({ style: "display: table-row; margin-bottom: 14px;" }, div$k({ style: "display: table-cell; vertical-align: middle;" }, this._enableIntro), div$k({ style: "display: table-cell; vertical-align: middle;" }, this._loopDropDown), div$k({ style: "display: table-cell; vertical-align: middle;" }, this._enableOutro))), this._removeWhitespaceDiv, this._oggWarning, div$k({ class: "selectContainer", style: "width: 100%; margin-bottom: 14px;" }, this._formatSelect), div$k({ style: "text-align: left; margin-bottom: 14px;" }, "Exporting can be slow. Reloading the page or clicking the X will cancel it. Please be patient."), this._outputProgressContainer, div$k({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between; margin-bottom: 14px;" }, this._exportButton), this._cancelButton);
            this.container = div$k({ class: "prompt noSelection", style: "width: 200px;" }, this._exportPrompt);
            this._close = () => {
                if (this.synth != null)
                    this.synth.renderingSong = false;
                this.outputStarted = false;
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._fileName.removeEventListener("input", ExportPrompt._validateFileName);
                this._loopDropDown.removeEventListener("blur", ExportPrompt._validateNumber);
                this._exportButton.removeEventListener("click", this._export);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._export();
                }
            };
            this._export = () => {
                if (this.outputStarted == true)
                    return;
                window.localStorage.setItem("exportFormat", this._formatSelect.value);
                window.localStorage.setItem("exportWhitespace", this._removeWhitespace.value);
                window.localStorage.setItem("exportFormat", this._formatSelect.value);
                switch (this._formatSelect.value) {
                    case "wav":
                        this.outputStarted = true;
                        this._exportTo("wav");
                        break;
                    case "mp3":
                        this.outputStarted = true;
                        this._exportTo("mp3");
                        break;
                    case "ogg":
                        this.outputStarted = true;
                        this._exportTo("ogg");
                        break;
                    case "opus":
                        this.outputStarted = true;
                        this._exportTo("opus");
                        break;
                    case "midi":
                        this.outputStarted = true;
                        this._exportToMidi();
                        break;
                    case "json":
                        this.outputStarted = true;
                        this._exportToJson();
                        break;
                    case "html":
                        this._exportToHtml();
                        break;
                    default:
                        throw new Error("Unhandled file export type.");
                }
            };
            this._loopDropDown.value = "1";
            if (this._doc.song.loopStart == 0) {
                this._enableIntro.checked = false;
                this._enableIntro.disabled = true;
            }
            else {
                this._enableIntro.checked = true;
                this._enableIntro.disabled = false;
            }
            if (this._doc.song.loopStart + this._doc.song.loopLength == this._doc.song.barCount) {
                this._enableOutro.checked = false;
                this._enableOutro.disabled = true;
            }
            else {
                this._enableOutro.checked = true;
                this._enableOutro.disabled = false;
            }
            const lastExportFormat = window.localStorage.getItem("exportFormat");
            if (lastExportFormat != null) {
                this._formatSelect.value = lastExportFormat;
            }
            const lastExportWhitespace = window.localStorage.getItem("exportWhitespace") == "true";
            if (lastExportWhitespace != null) {
                this._removeWhitespace.checked = lastExportWhitespace;
            }
            if (this._formatSelect.value == "json") {
                this._removeWhitespaceDiv.style.display = "block";
            }
            else {
                this._removeWhitespaceDiv.style.display = "none";
            }
            if (this._formatSelect.value == "ogg") {
                this._oggWarning.style.display = "block";
            }
            else {
                this._oggWarning.style.display = "none";
            }
            if (this._formatSelect.value == "opus") {
                this._oggWarning.style.display = "block";
            }
            else {
                this._oggWarning.style.display = "none";
            }
            this._fileName.select();
            setTimeout(() => this._fileName.focus());
            this._fileName.addEventListener("input", ExportPrompt._validateFileName);
            this._loopDropDown.addEventListener("blur", ExportPrompt._validateNumber);
            this._exportButton.addEventListener("click", this._export);
            this._cancelButton.addEventListener("click", this._close);
            this._enableOutro.addEventListener("click", () => { this._computedSamplesLabel.firstChild.textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });
            this._enableIntro.addEventListener("click", () => { this._computedSamplesLabel.firstChild.textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });
            this._loopDropDown.addEventListener("change", () => { this._computedSamplesLabel.firstChild.textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });
            this._formatSelect.addEventListener("change", () => { if (this._formatSelect.value == "json") {
                this._removeWhitespaceDiv.style.display = "block";
            }
            else {
                this._removeWhitespaceDiv.style.display = "none";
            } });
            this._formatSelect.addEventListener("change", () => {
                if (this._formatSelect.value == "ogg") {
                    this._oggWarning.style.display = "block";
                }
                else {
                    this._oggWarning.style.display = "none";
                }
                if (this._formatSelect.value == "opus") {
                    this._opusWarning.style.display = "block";
                }
                else {
                    this._opusWarning.style.display = "none";
                }
            });
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._fileName.value = _doc.song.title;
            ExportPrompt._validateFileName(null, this._fileName);
            this._computedSamplesLabel.firstChild.textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1));
        }
        samplesToTime(samples) {
            const rawSeconds = Math.round(samples / this._doc.synth.samplesPerSecond);
            const seconds = rawSeconds % 60;
            const minutes = Math.floor(rawSeconds / 60);
            return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
        }
        changeFileName(newValue) {
            this._fileName.value = newValue;
        }
        static _validateFileName(event, use) {
            let input;
            if (event != null) {
                input = event.target;
            }
            else if (use != undefined) {
                input = use;
            }
            else {
                return;
            }
            const deleteChars = /[\+\*\$\?\|\{\}\\\/<>#%!`&'"=:@]/gi;
            if (deleteChars.test(input.value)) {
                let cursorPos = input.selectionStart;
                input.value = input.value.replace(deleteChars, "");
                cursorPos--;
                input.setSelectionRange(cursorPos, cursorPos);
            }
        }
        static _validateNumber(event) {
            const input = event.target;
            input.value = Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value)))) + "";
        }
        _synthesize() {
            if (this.outputStarted == false) {
                return;
            }
            const currentFrame = this.currentChunk * this.samplesPerChunk;
            const samplesInChunk = Math.min(this.samplesPerChunk, this.sampleFrames - currentFrame);
            const tempSamplesL = new Float32Array(samplesInChunk);
            const tempSamplesR = new Float32Array(samplesInChunk);
            this.synth.renderingSong = true;
            this.synth.synthesize(tempSamplesL, tempSamplesR, samplesInChunk);
            this.recordedSamplesL.set(tempSamplesL, currentFrame);
            this.recordedSamplesR.set(tempSamplesR, currentFrame);
            this._outputProgressBar.style.setProperty("width", Math.round((this.currentChunk + 1) / this.totalChunks * 100.0) + "%");
            this._outputProgressLabel.innerText = Math.round((this.currentChunk + 1) / this.totalChunks * 100.0) + "%";
            this.currentChunk++;
            if (this.currentChunk >= this.totalChunks) {
                this.synth.renderingSong = false;
                this._outputProgressLabel.innerText = "Encoding...";
                if (this.thenExportTo == "wav") {
                    this._exportToWavFinish();
                }
                else if (this.thenExportTo == "mp3") {
                    this._exportToMp3Finish();
                }
                else if (this.thenExportTo == "ogg") {
                    this._exportToOggFinish();
                }
                else if (this.thenExportTo == "opus") {
                    this._exportToOpusFinish();
                }
                else {
                    throw new Error("Unrecognized file export type chosen!");
                }
            }
            else {
                setTimeout(() => { this._synthesize(); });
            }
        }
        _exportTo(type) {
            this.thenExportTo = type;
            this.currentChunk = 0;
            this.synth = new Synth(this._doc.song);
            if (type == "wav") {
                this.synth.samplesPerSecond = 48000;
            }
            else if (type == "mp3") {
                this.synth.samplesPerSecond = 44100;
            }
            else if (type == "ogg") {
                this.synth.samplesPerSecond = 48000;
            }
            else if (type == "opus") {
                this.synth.samplesPerSecond = 48000;
            }
            else {
                throw new Error("Unrecognized file export type chosen!");
            }
            this._outputProgressBar.style.setProperty("width", "0%");
            this._outputProgressLabel.innerText = "0%";
            this.synth.loopRepeatCount = Number(this._loopDropDown.value) - 1;
            if (!this._enableIntro.checked) {
                for (let introIter = 0; introIter < this._doc.song.loopStart; introIter++) {
                    this.synth.goToNextBar();
                }
            }
            this.synth.initModFilters(this._doc.song);
            this.synth.computeLatestModValues();
            this.synth.warmUpSynthesizer(this._doc.song);
            this.sampleFrames = this.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, this.synth.loopRepeatCount);
            this.samplesPerChunk = this.synth.samplesPerSecond * 5;
            this.totalChunks = Math.ceil(this.sampleFrames / this.samplesPerChunk);
            this.recordedSamplesL = new Float32Array(this.sampleFrames);
            this.recordedSamplesR = new Float32Array(this.sampleFrames);
            setTimeout(() => { this._synthesize(); });
        }
        _exportToWavFinish() {
            const sampleFrames = this.recordedSamplesL.length;
            const sampleRate = this.synth.samplesPerSecond;
            const wavChannelCount = 2;
            const bytesPerSample = 2;
            const bitsPerSample = 8 * bytesPerSample;
            const sampleCount = wavChannelCount * sampleFrames;
            const totalFileSize = 44 + sampleCount * bytesPerSample;
            let index = 0;
            const arrayBuffer = new ArrayBuffer(totalFileSize);
            const data = new DataView(arrayBuffer);
            data.setUint32(index, 0x52494646, false);
            index += 4;
            data.setUint32(index, 36 + sampleCount * bytesPerSample, true);
            index += 4;
            data.setUint32(index, 0x57415645, false);
            index += 4;
            data.setUint32(index, 0x666D7420, false);
            index += 4;
            data.setUint32(index, 0x00000010, true);
            index += 4;
            data.setUint16(index, 0x0001, true);
            index += 2;
            data.setUint16(index, wavChannelCount, true);
            index += 2;
            data.setUint32(index, sampleRate, true);
            index += 4;
            data.setUint32(index, sampleRate * bytesPerSample * wavChannelCount, true);
            index += 4;
            data.setUint16(index, bytesPerSample * wavChannelCount, true);
            index += 2;
            data.setUint16(index, bitsPerSample, true);
            index += 2;
            data.setUint32(index, 0x64617461, false);
            index += 4;
            data.setUint32(index, sampleCount * bytesPerSample, true);
            index += 4;
            {
                const range = (1 << (bitsPerSample - 1)) - 1;
                for (let i = 0; i < sampleFrames; i++) {
                    let valL = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesL[i])) * range);
                    let valR = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesR[i])) * range);
                    {
                        data.setInt16(index, valL, true);
                        index += 2;
                        data.setInt16(index, valR, true);
                        index += 2;
                    }
                }
            }
            const blob = new Blob([arrayBuffer], { type: "audio/wav" });
            save$1(blob, this._fileName.value.trim() + ".wav");
            this._close();
        }
        _exportToMp3Finish() {
            const whenEncoderIsAvailable = () => {
                const lamejs = window["lamejs"];
                const channelCount = 2;
                const kbps = 192;
                const sampleBlockSize = 1152;
                const mp3encoder = new lamejs.Mp3Encoder(channelCount, this.synth.samplesPerSecond, kbps);
                const mp3Data = [];
                const left = new Int16Array(this.recordedSamplesL.length);
                const right = new Int16Array(this.recordedSamplesR.length);
                const range = (1 << 15) - 1;
                for (let i = 0; i < this.recordedSamplesL.length; i++) {
                    left[i] = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesL[i])) * range);
                    right[i] = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesR[i])) * range);
                }
                for (let i = 0; i < left.length; i += sampleBlockSize) {
                    const leftChunk = left.subarray(i, i + sampleBlockSize);
                    const rightChunk = right.subarray(i, i + sampleBlockSize);
                    const mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);
                    if (mp3buf.length > 0)
                        mp3Data.push(mp3buf);
                }
                const mp3buf = mp3encoder.flush();
                if (mp3buf.length > 0)
                    mp3Data.push(mp3buf);
                const blob = new Blob(mp3Data, { type: "audio/mp3" });
                save$1(blob, this._fileName.value.trim() + ".mp3");
                this._close();
            };
            if ("lamejs" in window) {
                whenEncoderIsAvailable();
            }
            else {
                var script = document.createElement("script");
                script.src = "https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js";
                script.onload = whenEncoderIsAvailable;
                document.head.appendChild(script);
            }
        }
        _exportToOggFinish() {
            const scripts = [
                "https://unpkg.com/wasm-media-encoders/dist/umd/WasmMediaEncoder.min.js",
            ];
            let scriptsLoaded = 0;
            const scriptsToLoad = scripts.length;
            const whenEncoderIsAvailable = () => {
                scriptsLoaded++;
                if (scriptsLoaded < scriptsToLoad)
                    return;
                const WasmMediaEncoder = window["WasmMediaEncoder"];
                const channelCount = 2;
                const quality = 10;
                const sampleBlockSize = 4096;
                WasmMediaEncoder.createOggEncoder().then((oggEncoder) => {
                    oggEncoder.configure({
                        channels: channelCount,
                        sampleRate: this.synth.samplesPerSecond,
                        vbrQuality: quality,
                    });
                    const left = this.recordedSamplesL;
                    const right = this.recordedSamplesR;
                    const parts = [];
                    let sampleIndex = 0;
                    for (; sampleIndex < left.length; sampleIndex += sampleBlockSize) {
                        const leftChunk = left.subarray(sampleIndex, sampleIndex + sampleBlockSize);
                        const rightChunk = right.subarray(sampleIndex, sampleIndex + sampleBlockSize);
                        const frame = ([leftChunk, rightChunk]) ;
                        parts.push(oggEncoder.encode(frame).slice());
                    }
                    parts.push(oggEncoder.finalize().slice());
                    const blob = new Blob(parts, { type: "audio/ogg" });
                    save$1(blob, this._fileName.value.trim() + ".ogg");
                    this._close();
                });
            };
            if ("WasmMediaEncoder" in window) {
                scriptsLoaded = scripts.length;
                whenEncoderIsAvailable();
            }
            else {
                scriptsLoaded = 0;
                for (const src of scripts) {
                    const script = document.createElement("script");
                    script.src = src;
                    script.onload = whenEncoderIsAvailable;
                    document.head.appendChild(script);
                }
            }
        }
        _exportToOpusFinish() {
            const scripts = [
                "https://cdn.jsdelivr.net/gh/mmig/opus-encdec@e33ca40b92ddff8c168c7f5aca34b626c9acc08a/dist/libopus-encoder.js",
                "https://cdn.jsdelivr.net/gh/mmig/opus-encdec@e33ca40b92ddff8c168c7f5aca34b626c9acc08a/src/oggOpusEncoder.js"
            ];
            let scriptsLoaded = 0;
            const scriptsToLoad = scripts.length;
            const whenEncoderIsAvailable = () => {
                scriptsLoaded++;
                if (scriptsLoaded < scriptsToLoad)
                    return;
                const OggOpusEncoder = window["OggOpusEncoder"];
                const OpusEncoderLib = window["OpusEncoderLib"];
                OggOpusEncoder.prototype.getOpusControl = function (control) {
                    let result = null;
                    const doNotMangle = Math.random() > 2 ? "" : "";
                    const location = this["_" + doNotMangle + "malloc"](4);
                    const outputLocation = this["_" + doNotMangle + "malloc"](4);
                    this.HEAP32[location >> 2] = outputLocation;
                    const returnCode = this["_" + doNotMangle + "opus_encoder_ctl"](this.encoder, control, location);
                    if (returnCode === 0) {
                        result = this.HEAP32[outputLocation >> 2];
                    }
                    this["_" + doNotMangle + "free"](outputLocation);
                    this["_" + doNotMangle + "free"](location);
                    return result;
                };
                OggOpusEncoder.prototype.getLookahead = function () {
                    var _a;
                    return (_a = this.getOpusControl(4027)) !== null && _a !== void 0 ? _a : 0;
                };
                OggOpusEncoder.prototype.setBitrate = function (value) {
                    this.setOpusControl(4002, value);
                };
                OggOpusEncoder.prototype.generateIdPage2 = function (lookahead) {
                    const segmentDataView = new DataView(this.segmentData.buffer);
                    segmentDataView.setUint32(0, 1937076303, true);
                    segmentDataView.setUint32(4, 1684104520, true);
                    segmentDataView.setUint8(8, 1);
                    segmentDataView.setUint8(9, this.config.numberOfChannels);
                    segmentDataView.setUint16(10, lookahead, true);
                    segmentDataView.setUint32(12, this.config.originalSampleRateOverride || this.config.originalSampleRate, true);
                    segmentDataView.setUint16(16, 0, true);
                    segmentDataView.setUint8(18, 0);
                    this.segmentTableIndex = 1;
                    this.segmentDataIndex = this.segmentTable[0] = 19;
                    this.headerType = 2;
                    return this.generatePage();
                };
                const channelCount = 2;
                const frameSizeInMilliseconds = 20;
                const frameSizeInSeconds = frameSizeInMilliseconds / 1000;
                const sampleBlockSize = Math.floor(this.synth.samplesPerSecond * frameSizeInSeconds);
                const oggEncoder = new OggOpusEncoder({
                    numberOfChannels: channelCount,
                    originalSampleRate: this.synth.samplesPerSecond,
                    encoderSampleRate: this.synth.samplesPerSecond,
                    bufferLength: sampleBlockSize,
                    encoderApplication: 2049,
                    encoderComplexity: 10,
                    resampleQuality: 3,
                }, OpusEncoderLib);
                const parts = [];
                const left = this.recordedSamplesL;
                const right = this.recordedSamplesR;
                oggEncoder.setBitrate(256000);
                parts.push(oggEncoder.generateIdPage2(oggEncoder.getLookahead()).page);
                parts.push(oggEncoder.generateCommentPage().page);
                let sampleIndex = 0;
                for (; sampleIndex < left.length; sampleIndex += sampleBlockSize) {
                    const leftChunk = left.subarray(sampleIndex, sampleIndex + sampleBlockSize);
                    const rightChunk = right.subarray(sampleIndex, sampleIndex + sampleBlockSize);
                    const frame = ([leftChunk, rightChunk]) ;
                    oggEncoder.encode(frame).forEach((page) => parts.push(page.page));
                }
                {
                    const paddingSize = sampleIndex - left.length;
                    const leftChunk = new Float32Array(paddingSize);
                    const rightChunk = new Float32Array(paddingSize);
                    const frame = ([leftChunk, rightChunk]) ;
                    oggEncoder.encode(frame).forEach((page) => parts.push(page.page));
                }
                oggEncoder.encodeFinalFrame().forEach((page) => parts.push(page.page));
                oggEncoder.destroy();
                const blob = new Blob(parts, { type: "audio/opus" });
                save$1(blob, this._fileName.value.trim() + ".opus");
                this._close();
            };
            if (("OggOpusEncoder" in window) && ("OpusEncoderLib" in window)) {
                scriptsLoaded = scripts.length;
                whenEncoderIsAvailable();
            }
            else {
                scriptsLoaded = 0;
                for (const src of scripts) {
                    const script = document.createElement("script");
                    script.src = src;
                    script.onload = whenEncoderIsAvailable;
                    document.head.appendChild(script);
                }
            }
        }
        _exportToMidi() {
            const song = this._doc.song;
            const midiTicksPerBeepBoxTick = 2;
            const midiTicksPerBeat = midiTicksPerBeepBoxTick * Config.ticksPerPart * Config.partsPerBeat;
            const midiTicksPerPart = midiTicksPerBeepBoxTick * Config.ticksPerPart;
            const secondsPerMinute = 60;
            const microsecondsPerMinute = secondsPerMinute * 1000000;
            const beatsPerMinute = song.getBeatsPerMinute();
            const microsecondsPerBeat = Math.round(microsecondsPerMinute / beatsPerMinute);
            const midiTicksPerBar = midiTicksPerBeat * song.beatsPerBar;
            const pitchBendRange = 24;
            const defaultNoteVelocity = 90;
            const unrolledBars = [];
            if (this._enableIntro.checked) {
                for (let bar = 0; bar < song.loopStart; bar++) {
                    unrolledBars.push(bar);
                }
            }
            for (let loopIndex = 0; loopIndex < Number(this._loopDropDown.value); loopIndex++) {
                for (let bar = song.loopStart; bar < song.loopStart + song.loopLength; bar++) {
                    unrolledBars.push(bar);
                }
            }
            if (this._enableOutro.checked) {
                for (let bar = song.loopStart + song.loopLength; bar < song.barCount; bar++) {
                    unrolledBars.push(bar);
                }
            }
            const tracks = [{ isMeta: true, channel: -1, midiChannel: -1, isNoise: false, isDrumset: false }];
            let midiChannelCounter = 0;
            let foundADrumset = false;
            for (let channel = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {
                if (!foundADrumset && this._doc.song.channels[channel].instruments[0].type == 4) {
                    tracks.push({ isMeta: false, channel: channel, midiChannel: 9, isNoise: true, isDrumset: true });
                    foundADrumset = true;
                }
                else {
                    if (midiChannelCounter >= 16)
                        continue;
                    tracks.push({ isMeta: false, channel: channel, midiChannel: midiChannelCounter++, isNoise: this._doc.song.getChannelIsNoise(channel), isDrumset: false });
                    if (midiChannelCounter == 9)
                        midiChannelCounter++;
                }
            }
            const writer = new ArrayBufferWriter(1024);
            writer.writeUint32(1297377380);
            writer.writeUint32(6);
            writer.writeUint16(1);
            writer.writeUint16(tracks.length);
            writer.writeUint16(midiTicksPerBeat);
            for (const track of tracks) {
                writer.writeUint32(1297379947);
                const { isMeta, channel, midiChannel, isNoise, isDrumset } = track;
                const trackStartIndex = writer.getWriteIndex();
                writer.writeUint32(0);
                let prevTime = 0;
                let barStartTime = 0;
                const writeEventTime = function (time) {
                    if (time < prevTime)
                        throw new Error("Midi event time cannot go backwards.");
                    writer.writeMidiVariableLength(time - prevTime);
                    prevTime = time;
                };
                const writeControlEvent = function (message, value) {
                    if (!(value >= 0 && value <= 0x7F))
                        throw new Error("Midi control event value out of range: " + value);
                    writer.writeUint8(176 | midiChannel);
                    writer.writeMidi7Bits(message);
                    writer.writeMidi7Bits(value | 0);
                };
                if (isMeta) {
                    writeEventTime(0);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(1);
                    writer.writeMidiAscii("Composed with jummbus.bitbucket.io");
                    writeEventTime(0);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(81);
                    writer.writeMidiVariableLength(3);
                    writer.writeUint24(microsecondsPerBeat);
                    writeEventTime(0);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(88);
                    writer.writeMidiVariableLength(4);
                    writer.writeUint8(song.beatsPerBar);
                    writer.writeUint8(2);
                    writer.writeUint8(24);
                    writer.writeUint8(8);
                    let tempScale = song.scale == Config.scales.dictionary["Custom"].index ? song.scaleCustom : Config.scales[song.scale].flags;
                    const isMinor = tempScale[3] && !tempScale[4];
                    const key = song.key;
                    let numSharps = key;
                    if ((key & 1) == 1)
                        numSharps += 6;
                    if (isMinor)
                        numSharps += 9;
                    while (numSharps > 6)
                        numSharps -= 12;
                    writeEventTime(0);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(89);
                    writer.writeMidiVariableLength(2);
                    writer.writeInt8(numSharps);
                    writer.writeUint8(isMinor ? 1 : 0);
                    if (this._enableIntro.checked)
                        barStartTime += midiTicksPerBar * song.loopStart;
                    writeEventTime(barStartTime);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(6);
                    writer.writeMidiAscii("Loop Start");
                    for (let loopIndex = 0; loopIndex < parseInt(this._loopDropDown.value); loopIndex++) {
                        barStartTime += midiTicksPerBar * song.loopLength;
                        writeEventTime(barStartTime);
                        writer.writeUint8(255);
                        writer.writeMidi7Bits(6);
                        writer.writeMidiAscii(loopIndex < Number(this._loopDropDown.value) - 1 ? "Loop Repeat" : "Loop End");
                    }
                    if (this._enableOutro.checked)
                        barStartTime += midiTicksPerBar * (song.barCount - song.loopStart - song.loopLength);
                    if (barStartTime != midiTicksPerBar * unrolledBars.length)
                        throw new Error("Miscalculated number of bars.");
                }
                else {
                    let channelName = isNoise
                        ? "noise channel " + channel
                        : "pitch channel " + channel;
                    writeEventTime(0);
                    writer.writeUint8(255);
                    writer.writeMidi7Bits(3);
                    writer.writeMidiAscii(channelName);
                    writeEventTime(0);
                    writeControlEvent(101, 0);
                    writeEventTime(0);
                    writeControlEvent(100, 0);
                    writeEventTime(0);
                    writeControlEvent(6, pitchBendRange);
                    writeEventTime(0);
                    writeControlEvent(38, 0);
                    writeEventTime(0);
                    writeControlEvent(101, 127);
                    writeEventTime(0);
                    writeControlEvent(100, 127);
                    let prevInstrumentIndex = -1;
                    function writeInstrumentSettings(instrumentIndex) {
                        const instrument = song.channels[channel].instruments[instrumentIndex];
                        const preset = EditorConfig.valueToPreset(instrument.preset);
                        if (prevInstrumentIndex != instrumentIndex) {
                            prevInstrumentIndex = instrumentIndex;
                            writeEventTime(barStartTime);
                            writer.writeUint8(255);
                            writer.writeMidi7Bits(4);
                            writer.writeMidiAscii("Instrument " + (instrumentIndex + 1));
                            if (!isDrumset) {
                                let instrumentProgram = 81;
                                if (preset != null && preset.midiProgram != undefined) {
                                    instrumentProgram = preset.midiProgram;
                                }
                                else if (instrument.type == 4) {
                                    instrumentProgram = 116;
                                }
                                else {
                                    if (instrument.type == 2 || instrument.type == 3) {
                                        if (isNoise) {
                                            instrumentProgram = 116;
                                        }
                                        else {
                                            instrumentProgram = 75;
                                        }
                                    }
                                    else if (instrument.type == 0) {
                                        if (ExportPrompt.midiChipInstruments.length > instrument.chipWave) {
                                            instrumentProgram = ExportPrompt.midiChipInstruments[instrument.chipWave];
                                        }
                                    }
                                    else if (instrument.type == 6 || instrument.type == 1 || instrument.type == 11 || instrument.type == 5 || instrument.type == 8) {
                                        instrumentProgram = 81;
                                    }
                                    else if (instrument.type == 7) {
                                        instrumentProgram = 0x19;
                                    }
                                    else if (instrument.type == 9) {
                                        instrumentProgram = 81;
                                    }
                                    else {
                                        throw new Error("Unrecognized instrument type.");
                                    }
                                }
                                writeEventTime(barStartTime);
                                writer.writeUint8(192 | midiChannel);
                                writer.writeMidi7Bits(instrumentProgram);
                            }
                            writeEventTime(barStartTime);
                            let instrumentVolume = volumeMultToMidiVolume(Synth.instrumentVolumeToVolumeMult(instrument.volume));
                            writeControlEvent(7, Math.min(0x7f, Math.round(instrumentVolume)));
                            writeEventTime(barStartTime);
                            let instrumentPan = (instrument.pan / Config.panCenter - 1) * 0x3f + 0x40;
                            writeControlEvent(10, Math.min(0x7f, Math.round(instrumentPan)));
                        }
                    }
                    if (song.getPattern(channel, 0) == null) {
                        writeInstrumentSettings(0);
                    }
                    let prevPitchBend = defaultMidiPitchBend;
                    let prevExpression = defaultMidiExpression;
                    let shouldResetExpressionAndPitchBend = false;
                    const channelRoot = isNoise ? Config.spectrumBasePitch : Config.keys[song.key].basePitch;
                    const intervalScale = isNoise ? Config.noiseInterval : 1;
                    for (const bar of unrolledBars) {
                        const pattern = song.getPattern(channel, bar);
                        if (pattern != null) {
                            const instrumentIndex = pattern.instruments[0];
                            const instrument = song.channels[channel].instruments[instrumentIndex];
                            const preset = EditorConfig.valueToPreset(instrument.preset);
                            writeInstrumentSettings(instrumentIndex);
                            let usesArpeggio = instrument.getChord().arpeggiates;
                            let polyphony = usesArpeggio ? 1 : Config.maxChordSize;
                            if (instrument.getChord().customInterval) {
                                if (instrument.type == 0 || instrument.type == 5) {
                                    polyphony = 2;
                                    usesArpeggio = true;
                                }
                                else if (instrument.type == 1) {
                                    polyphony = Config.operatorCount;
                                }
                                else {
                                    console.error("Unrecognized instrument type for harmonizing arpeggio: " + instrument.type);
                                }
                            }
                            for (let noteIndex = 0; noteIndex < pattern.notes.length; noteIndex++) {
                                const note = pattern.notes[noteIndex];
                                const noteStartTime = barStartTime + note.start * midiTicksPerPart;
                                let pinTime = noteStartTime;
                                let pinSize = note.pins[0].size;
                                let pinInterval = note.pins[0].interval;
                                const prevPitches = [-1, -1, -1, -1];
                                const nextPitches = [-1, -1, -1, -1];
                                const toneCount = Math.min(polyphony, note.pitches.length);
                                const velocity = isDrumset ? Math.max(1, Math.round(defaultNoteVelocity * note.pins[0].size / Config.noteSizeMax)) : defaultNoteVelocity;
                                let mainInterval = note.pickMainInterval();
                                let pitchOffset = mainInterval * intervalScale;
                                if (!isDrumset) {
                                    let maxPitchOffset = pitchBendRange;
                                    let minPitchOffset = -pitchBendRange;
                                    for (let pinIndex = 1; pinIndex < note.pins.length; pinIndex++) {
                                        const interval = note.pins[pinIndex].interval * intervalScale;
                                        maxPitchOffset = Math.min(maxPitchOffset, interval + pitchBendRange);
                                        minPitchOffset = Math.max(minPitchOffset, interval - pitchBendRange);
                                    }
                                    pitchOffset = Math.min(maxPitchOffset, Math.max(minPitchOffset, pitchOffset));
                                }
                                for (let pinIndex = 1; pinIndex < note.pins.length; pinIndex++) {
                                    const nextPinTime = noteStartTime + note.pins[pinIndex].time * midiTicksPerPart;
                                    const nextPinSize = note.pins[pinIndex].size;
                                    const nextPinInterval = note.pins[pinIndex].interval;
                                    const length = nextPinTime - pinTime;
                                    for (let midiTick = 0; midiTick < length; midiTick++) {
                                        const midiTickTime = pinTime + midiTick;
                                        const linearSize = lerp(pinSize, nextPinSize, midiTick / length);
                                        const linearInterval = lerp(pinInterval, nextPinInterval, midiTick / length);
                                        const interval = linearInterval * intervalScale - pitchOffset;
                                        const pitchBend = Math.max(0, Math.min(0x3fff, Math.round(0x2000 * (1.0 + interval / pitchBendRange))));
                                        const expression = Math.min(0x7f, Math.round(volumeMultToMidiExpression(Synth.noteSizeToVolumeMult(linearSize))));
                                        if (pitchBend != prevPitchBend) {
                                            writeEventTime(midiTickTime);
                                            writer.writeUint8(224 | midiChannel);
                                            writer.writeMidi7Bits(pitchBend & 0x7f);
                                            writer.writeMidi7Bits((pitchBend >> 7) & 0x7f);
                                            prevPitchBend = pitchBend;
                                        }
                                        if (expression != prevExpression && !isDrumset) {
                                            writeEventTime(midiTickTime);
                                            writeControlEvent(11, expression);
                                            prevExpression = expression;
                                        }
                                        const noteStarting = midiTickTime == noteStartTime;
                                        for (let toneIndex = 0; toneIndex < toneCount; toneIndex++) {
                                            let nextPitch = note.pitches[toneIndex];
                                            if (isDrumset) {
                                                nextPitch += mainInterval;
                                                const drumsetMap = [
                                                    36,
                                                    41,
                                                    45,
                                                    48,
                                                    40,
                                                    39,
                                                    59,
                                                    49,
                                                    46,
                                                    55,
                                                    69,
                                                    54,
                                                ];
                                                if (nextPitch < 0 || nextPitch >= drumsetMap.length)
                                                    throw new Error("Could not find corresponding drumset pitch. " + nextPitch);
                                                nextPitch = drumsetMap[nextPitch];
                                            }
                                            else {
                                                if (usesArpeggio && note.pitches.length > toneIndex + 1 && toneIndex == toneCount - 1) {
                                                    const midiTicksSinceBeat = (midiTickTime - barStartTime) % midiTicksPerBeat;
                                                    const midiTicksPerArpeggio = Config.ticksPerArpeggio * midiTicksPerPart / Config.ticksPerPart;
                                                    const arpeggio = Math.floor(midiTicksSinceBeat / midiTicksPerArpeggio);
                                                    nextPitch = note.pitches[toneIndex + getArpeggioPitchIndex(note.pitches.length - toneIndex, instrument.fastTwoNoteArp, arpeggio)];
                                                }
                                                nextPitch = channelRoot + nextPitch * intervalScale + pitchOffset;
                                                if (preset != null && preset.midiSubharmonicOctaves != undefined) {
                                                    nextPitch += 12 * preset.midiSubharmonicOctaves;
                                                }
                                                else if (isNoise) {
                                                    nextPitch += 12 * (+EditorConfig.presetCategories.dictionary["Drum Presets"].presets.dictionary["taiko drum"].midiSubharmonicOctaves);
                                                }
                                                if (isNoise)
                                                    nextPitch *= 2;
                                            }
                                            nextPitch = Math.max(0, Math.min(127, nextPitch));
                                            nextPitches[toneIndex] = nextPitch;
                                            if (!noteStarting && prevPitches[toneIndex] != nextPitches[toneIndex]) {
                                                writeEventTime(midiTickTime);
                                                writer.writeUint8(128 | midiChannel);
                                                writer.writeMidi7Bits(prevPitches[toneIndex]);
                                                writer.writeMidi7Bits(velocity);
                                            }
                                        }
                                        for (let toneIndex = 0; toneIndex < toneCount; toneIndex++) {
                                            if (noteStarting || prevPitches[toneIndex] != nextPitches[toneIndex]) {
                                                writeEventTime(midiTickTime);
                                                writer.writeUint8(144 | midiChannel);
                                                writer.writeMidi7Bits(nextPitches[toneIndex]);
                                                writer.writeMidi7Bits(velocity);
                                                prevPitches[toneIndex] = nextPitches[toneIndex];
                                            }
                                        }
                                    }
                                    pinTime = nextPinTime;
                                    pinSize = nextPinSize;
                                    pinInterval = nextPinInterval;
                                }
                                const noteEndTime = barStartTime + note.end * midiTicksPerPart;
                                for (let toneIndex = 0; toneIndex < toneCount; toneIndex++) {
                                    writeEventTime(noteEndTime);
                                    writer.writeUint8(128 | midiChannel);
                                    writer.writeMidi7Bits(prevPitches[toneIndex]);
                                    writer.writeMidi7Bits(velocity);
                                }
                                shouldResetExpressionAndPitchBend = true;
                            }
                        }
                        else {
                            if (shouldResetExpressionAndPitchBend) {
                                shouldResetExpressionAndPitchBend = false;
                                if (prevExpression != defaultMidiExpression) {
                                    prevExpression = defaultMidiExpression;
                                    writeEventTime(barStartTime);
                                    writeControlEvent(11, prevExpression);
                                }
                                if (prevPitchBend != defaultMidiPitchBend) {
                                    prevPitchBend = defaultMidiPitchBend;
                                    writeEventTime(barStartTime);
                                    writer.writeUint8(224 | midiChannel);
                                    writer.writeMidi7Bits(prevPitchBend & 0x7f);
                                    writer.writeMidi7Bits((prevPitchBend >> 7) & 0x7f);
                                }
                            }
                        }
                        barStartTime += midiTicksPerBar;
                    }
                }
                writeEventTime(barStartTime);
                writer.writeUint8(255);
                writer.writeMidi7Bits(47);
                writer.writeMidiVariableLength(0x00);
                writer.rewriteUint32(trackStartIndex, writer.getWriteIndex() - trackStartIndex - 4);
            }
            const blob = new Blob([writer.toCompactArrayBuffer()], { type: "audio/midi" });
            save$1(blob, this._fileName.value.trim() + ".mid");
            this._close();
        }
        _exportToJson() {
            const jsonObject = this._doc.song.toJsonObject(this._enableIntro.checked, Number(this._loopDropDown.value), this._enableOutro.checked);
            let whiteSpaceParam = this._removeWhitespace.checked ? undefined : '\t';
            const jsonString = JSON.stringify(jsonObject, null, whiteSpaceParam);
            const blob = new Blob([jsonString], { type: "application/json" });
            save$1(blob, this._fileName.value.trim() + ".json");
            this._close();
        }
        _exportToHtml() {
            const fileContents = `\
<!DOCTYPE html><meta charset="utf-8">

You should be redirected to the song at:<br /><br />

<a id="destination" href="${new URL("#" + this._doc.song.toBase64String(), location.href).href}"></a>

<style>
	:root {
		color: white;
		background: black;
		font-family:
		sans-serif;
	}
	a {
		color: #98f;
	}
	a[href]::before {
		content: attr(href);
	}
</style>

<script>
	location.assign(document.querySelector("a#destination").href);
</script>
`;
            const blob = new Blob([fileContents], { type: "text/html" });
            save$1(blob, this._fileName.value.trim() + ".html");
            this._close();
        }
    }
    ExportPrompt.midiChipInstruments = [
        0x4A,
        0x47,
        0x50,
        0x46,
        0x44,
        0x51,
        0x51,
        0x51,
        0x51,
    ];

    const { button: button$j, p: p$9, div: div$j, h2: h2$i, input: input$b, select: select$c, option: option$c } = HTML;
    class ImportPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this.exportStuff = new ExportPrompt(this._doc);
            this._importButton = button$j({ style: "border-image-source: none !important; height: auto; min-height: var(--button-size); margin: 0.5em; width:50%; color: var(--primary-text); border-bottom: solid; border-bottom-color: var(--link-accent);" }, "Import");
            this._exportButton = button$j({ style: "border-image-source: none !important; height: auto; min-height: var(--button-size); margin: 0.5em; width:50%; color: var(--secondary-text);" }, "Export");
            this._fileInput = input$b({ type: "file", accept: ".json,application/json,.mid,.midi,audio/midi,audio/x-midi" });
            this._cancelButton = button$j({ class: "cancelButton" });
            this._modeImportSelect = select$c({ style: "width: 100%;" }, option$c({ value: "auto" }, "Auto-detect mode (for json)"), option$c({ value: "BeepBox" }, "BeepBox"), option$c({ value: "ModBox" }, "ModBox"), option$c({ value: "JummBox" }, "JummBox"), option$c({ value: "SynthBox" }, "SynthBox"), option$c({ value: "GoldBox" }, "GoldBox"), option$c({ value: "PaandorasBox" }, "PaandorasBox"), option$c({ value: "UltraBox" }, "UltraBox"));
            this._importPrompt = div$j({}, div$j({ class: "promptTitle" }, h2$i({ class: "importExt", style: "text-align: inherit;" }, ""), h2$i({ class: "importTitle" }, "Import")), p$9({ style: "text-align: left; margin: 0.5em 0;" }, "BeepBox songs can be exported and re-imported as .json files. You could also use other means to make .json files for BeepBox as long as they follow the same structure."), p$9({ style: "text-align: left; margin: 0.5em 0;" }, "BeepBox can also (crudely) import .mid files. There are many tools available for creating .mid files. Shorter and simpler songs are more likely to work well."), this._modeImportSelect, this._fileInput, this._cancelButton);
            this._exportPrompt = div$j({ style: "display:none;" }, this.exportStuff._exportPrompt);
            this.customContainer = div$j({ class: "customContainer", id: "customContainer", style: "width: 100%;" }, p$9({ style: "text-align: center; margin: 1em 0; display:flex; flex-direction: row;" }, this._importButton, this._exportButton), this._importPrompt, this._exportPrompt);
            this.container = div$j({ class: "prompt noSelection", style: "width: 300px;" }, this.customContainer);
            this._importCategoryButton = () => {
                this._importPrompt.style.display = "";
                this._exportPrompt.style.display = "none";
                this._importButton.style.borderBottom = "solid";
                this._importButton.style.borderBottomColor = "var(--link-accent)";
                this._importButton.style.color = "var(--primary-text)";
                this._exportButton.style.borderBottom = "none";
                this._exportButton.style.color = "var(--secondary-text)";
                this._exportButton.style.borderBottomColor = "var(--secondary-text";
                this.container.style.width = "300px";
            };
            this._exportCategoryButton = () => {
                this._importPrompt.style.display = "none";
                this._exportPrompt.style.display = "";
                this._importButton.style.borderBottom = "none";
                this._importButton.style.borderBottomColor = "var(--secondary-text)";
                this._importButton.style.color = "var(--secondary-text)";
                this._exportButton.style.borderBottom = "solid";
                this._exportButton.style.color = "var(--primary-text)";
                this._exportButton.style.borderBottomColor = "var(--link-accent)";
                this.container.style.width = "200px";
            };
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._fileInput.removeEventListener("change", this._whenFileSelected);
                this._cancelButton.removeEventListener("click", this._close);
            };
            this._whenFileSelected = () => {
                const file = this._fileInput.files[0];
                if (!file)
                    return;
                const extension = file.name.slice((file.name.lastIndexOf(".") - 1 >>> 0) + 2).toLowerCase();
                if (extension == "json") {
                    const reader = new FileReader();
                    reader.addEventListener("load", (event) => {
                        this._doc.prompt = null;
                        this._doc.goBackToStart();
                        this._doc.record(new ChangeSong(this._doc, reader.result, this._modeImportSelect.value), true, true);
                    });
                    reader.readAsText(file);
                }
                else if (extension == "midi" || extension == "mid") {
                    const reader = new FileReader();
                    reader.addEventListener("load", (event) => {
                        this._doc.prompt = null;
                        this._doc.goBackToStart();
                        this._parseMidiFile(reader.result);
                    });
                    reader.readAsArrayBuffer(file);
                }
                else {
                    console.error("Unrecognized file extension.");
                    this._close();
                }
            };
            this._fileInput.select();
            setTimeout(() => this._fileInput.focus());
            this._fileInput.addEventListener("change", this._whenFileSelected);
            this._cancelButton.addEventListener("click", this._close);
            this._importButton.addEventListener("click", this._importCategoryButton);
            this._exportButton.addEventListener("click", this._exportCategoryButton);
            if (this._doc.prompt == "export") {
                this._exportCategoryButton();
            }
        }
        _parseMidiFile(buffer) {
            const reader = new ArrayBufferReader(new DataView(buffer));
            let headerReader = null;
            const tracks = [];
            while (reader.hasMore()) {
                const chunkType = reader.readUint32();
                const chunkLength = reader.readUint32();
                if (chunkType == 1297377380) {
                    if (headerReader == null) {
                        headerReader = reader.getReaderForNextBytes(chunkLength);
                    }
                    else {
                        console.error("This MIDI file has more than one header chunk.");
                    }
                }
                else if (chunkType == 1297379947) {
                    const trackReader = reader.getReaderForNextBytes(chunkLength);
                    if (trackReader.hasMore()) {
                        tracks.push({
                            reader: trackReader,
                            nextEventMidiTick: trackReader.readMidiVariableLength(),
                            ended: false,
                            runningStatus: -1,
                        });
                    }
                }
                else {
                    reader.skipBytes(chunkLength);
                }
            }
            if (headerReader == null) {
                console.error("No header chunk found in this MIDI file.");
                this._close();
                return;
            }
            const fileFormat = headerReader.readUint16();
            headerReader.readUint16();
            const midiTicksPerBeat = headerReader.readUint16();
            let currentIndependentTrackIndex = 0;
            const currentTrackIndices = [];
            const independentTracks = (fileFormat == 2);
            if (independentTracks) {
                currentTrackIndices.push(currentIndependentTrackIndex);
            }
            else {
                for (let trackIndex = 0; trackIndex < tracks.length; trackIndex++) {
                    currentTrackIndices.push(trackIndex);
                }
            }
            const channelRPNMSB = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
            const channelRPNLSB = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
            const pitchBendRangeMSB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
            const pitchBendRangeLSB = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            const currentInstrumentProgram = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            const currentInstrumentVolumes = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];
            const currentInstrumentPans = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];
            const noteEvents = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
            const pitchBendEvents = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
            const noteSizeEvents = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
            let tempoChanges = [];
            let microsecondsPerBeat = 500000;
            let beatsPerBar = 8;
            let numSharps = 0;
            let isMinor = false;
            let currentMidiTick = 0;
            while (true) {
                let nextEventMidiTick = Number.MAX_VALUE;
                let anyTrackHasMore = false;
                for (const trackIndex of currentTrackIndices) {
                    const track = tracks[trackIndex];
                    while (!track.ended && track.nextEventMidiTick == currentMidiTick) {
                        const peakStatus = track.reader.peakUint8();
                        const eventStatus = (peakStatus & 0x80) ? track.reader.readUint8() : track.runningStatus;
                        const eventType = eventStatus & 0xF0;
                        const eventChannel = eventStatus & 0x0F;
                        if (eventType != 240) {
                            track.runningStatus = eventStatus;
                        }
                        let foundTrackEndEvent = false;
                        switch (eventType) {
                            case 128:
                                {
                                    const pitch = track.reader.readMidi7Bits();
                                    track.reader.readMidi7Bits();
                                    noteEvents[eventChannel].push({ midiTick: currentMidiTick, pitch: pitch, velocity: 0.0, program: -1, instrumentVolume: -1, instrumentPan: -1, on: false });
                                }
                                break;
                            case 144:
                                {
                                    const pitch = track.reader.readMidi7Bits();
                                    const velocity = track.reader.readMidi7Bits();
                                    if (velocity == 0) {
                                        noteEvents[eventChannel].push({ midiTick: currentMidiTick, pitch: pitch, velocity: 0.0, program: -1, instrumentVolume: -1, instrumentPan: -1, on: false });
                                    }
                                    else {
                                        const volume = Math.max(0, Math.min(Config.volumeRange - 1, Math.round(Synth.volumeMultToInstrumentVolume(midiVolumeToVolumeMult(currentInstrumentVolumes[eventChannel])))));
                                        const pan = Math.max(0, Math.min(Config.panMax, Math.round(((currentInstrumentPans[eventChannel] - 64) / 63 + 1) * Config.panCenter)));
                                        noteEvents[eventChannel].push({
                                            midiTick: currentMidiTick,
                                            pitch: pitch,
                                            velocity: Math.max(0.0, Math.min(1.0, (velocity + 14) / 90.0)),
                                            program: currentInstrumentProgram[eventChannel],
                                            instrumentVolume: volume,
                                            instrumentPan: pan,
                                            on: true,
                                        });
                                    }
                                }
                                break;
                            case 160:
                                {
                                    track.reader.readMidi7Bits();
                                    track.reader.readMidi7Bits();
                                }
                                break;
                            case 176:
                                {
                                    const message = track.reader.readMidi7Bits();
                                    const value = track.reader.readMidi7Bits();
                                    switch (message) {
                                        case 6:
                                            {
                                                if (channelRPNMSB[eventChannel] == 0 && channelRPNLSB[eventChannel] == 0) {
                                                    pitchBendRangeMSB[eventChannel] = value;
                                                }
                                            }
                                            break;
                                        case 7:
                                            {
                                                currentInstrumentVolumes[eventChannel] = value;
                                            }
                                            break;
                                        case 10:
                                            {
                                                currentInstrumentPans[eventChannel] = value;
                                            }
                                            break;
                                        case 11:
                                            {
                                                noteSizeEvents[eventChannel].push({ midiTick: currentMidiTick, size: Synth.volumeMultToNoteSize(midiExpressionToVolumeMult(value)) });
                                            }
                                            break;
                                        case 38:
                                            {
                                                if (channelRPNMSB[eventChannel] == 0 && channelRPNLSB[eventChannel] == 0) {
                                                    pitchBendRangeLSB[eventChannel] = value;
                                                }
                                            }
                                            break;
                                        case 100:
                                            {
                                                channelRPNLSB[eventChannel] = value;
                                            }
                                            break;
                                        case 101:
                                            {
                                                channelRPNMSB[eventChannel] = value;
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 192:
                                {
                                    const program = track.reader.readMidi7Bits();
                                    currentInstrumentProgram[eventChannel] = program;
                                }
                                break;
                            case 208:
                                {
                                    track.reader.readMidi7Bits();
                                }
                                break;
                            case 224:
                                {
                                    const lsb = track.reader.readMidi7Bits();
                                    const msb = track.reader.readMidi7Bits();
                                    const pitchBend = (((msb << 7) | lsb) / 0x2000) - 1.0;
                                    const pitchBendRange = pitchBendRangeMSB[eventChannel] + pitchBendRangeLSB[eventChannel] * 0.01;
                                    const interval = pitchBend * pitchBendRange;
                                    pitchBendEvents[eventChannel].push({ midiTick: currentMidiTick, interval: interval });
                                }
                                break;
                            case 240:
                                {
                                    if (eventStatus == 255) {
                                        const message = track.reader.readMidi7Bits();
                                        const length = track.reader.readMidiVariableLength();
                                        if (message == 47) {
                                            foundTrackEndEvent = true;
                                            track.reader.skipBytes(length);
                                        }
                                        else if (message == 81) {
                                            microsecondsPerBeat = track.reader.readUint24();
                                            tempoChanges.push({
                                                midiTick: currentMidiTick,
                                                microsecondsPerBeat: microsecondsPerBeat,
                                            });
                                            track.reader.skipBytes(length - 3);
                                        }
                                        else if (message == 88) {
                                            const numerator = track.reader.readUint8();
                                            let denominatorExponent = track.reader.readUint8();
                                            track.reader.readUint8();
                                            track.reader.readUint8();
                                            track.reader.skipBytes(length - 4);
                                            beatsPerBar = numerator * 4;
                                            while ((beatsPerBar & 1) == 0 && (denominatorExponent > 0 || beatsPerBar > Config.beatsPerBarMax) && beatsPerBar >= Config.beatsPerBarMin * 2) {
                                                beatsPerBar = beatsPerBar >> 1;
                                                denominatorExponent = denominatorExponent - 1;
                                            }
                                            beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, beatsPerBar));
                                        }
                                        else if (message == 89) {
                                            numSharps = track.reader.readInt8();
                                            isMinor = track.reader.readUint8() == 1;
                                            track.reader.skipBytes(length - 2);
                                        }
                                        else {
                                            track.reader.skipBytes(length);
                                        }
                                    }
                                    else if (eventStatus == 0xF0 || eventStatus == 0xF7) {
                                        const length = track.reader.readMidiVariableLength();
                                        track.reader.skipBytes(length);
                                    }
                                    else {
                                        console.error("Unrecognized event status: " + eventStatus);
                                        this._close();
                                        return;
                                    }
                                }
                                break;
                            default: {
                                console.error("Unrecognized event type: " + eventType);
                                this._close();
                                return;
                            }
                        }
                        if (!foundTrackEndEvent && track.reader.hasMore()) {
                            track.nextEventMidiTick = currentMidiTick + track.reader.readMidiVariableLength();
                        }
                        else {
                            track.ended = true;
                            if (independentTracks) {
                                currentIndependentTrackIndex++;
                                if (currentIndependentTrackIndex < tracks.length) {
                                    currentTrackIndices[0] = currentIndependentTrackIndex;
                                    tracks[currentIndependentTrackIndex].nextEventMidiTick += currentMidiTick;
                                    nextEventMidiTick = Math.min(nextEventMidiTick, tracks[currentIndependentTrackIndex].nextEventMidiTick);
                                    anyTrackHasMore = true;
                                }
                            }
                        }
                    }
                    if (!track.ended) {
                        anyTrackHasMore = true;
                        nextEventMidiTick = Math.min(nextEventMidiTick, track.nextEventMidiTick);
                    }
                }
                if (anyTrackHasMore) {
                    currentMidiTick = nextEventMidiTick;
                }
                else {
                    break;
                }
            }
            for (const change of tempoChanges) {
                microsecondsPerBeat = change.microsecondsPerBeat;
                break;
            }
            const microsecondsPerMinute = 60 * 1000 * 1000;
            const beatsPerMinute = Math.max(Config.tempoMin, Math.min(Config.tempoMax, Math.round(microsecondsPerMinute / microsecondsPerBeat)));
            const midiTicksPerPart = midiTicksPerBeat / Config.partsPerBeat;
            const partsPerBar = Config.partsPerBeat * beatsPerBar;
            const songTotalBars = Math.ceil(currentMidiTick / midiTicksPerPart / partsPerBar);
            function quantizeMidiTickToPart(midiTick) {
                return Math.round(midiTick / midiTicksPerPart);
            }
            let key = numSharps;
            if (isMinor)
                key += 3;
            if ((key & 1) == 1)
                key += 6;
            while (key < 0)
                key += 12;
            key = key % 12;
            const pitchChannels = [];
            const noiseChannels = [];
            const modChannels = [];
            for (let midiChannel = 0; midiChannel < 16; midiChannel++) {
                if (noteEvents[midiChannel].length == 0)
                    continue;
                const channel = new Channel();
                const channelPresetValue = EditorConfig.midiProgramToPresetValue(noteEvents[midiChannel][0].program);
                const channelPreset = (channelPresetValue == null) ? null : EditorConfig.valueToPreset(channelPresetValue);
                const isDrumsetChannel = (midiChannel == 9);
                const isNoiseChannel = isDrumsetChannel || (channelPreset != null && channelPreset.isNoise == true);
                const isModChannel = (channelPreset != null && channelPreset.isMod == true);
                const channelBasePitch = isNoiseChannel ? Config.spectrumBasePitch : Config.keys[key].basePitch;
                const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;
                const midiIntervalScale = isNoiseChannel ? 0.5 : 1;
                const channelMaxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;
                if (isNoiseChannel) {
                    if (isDrumsetChannel) {
                        noiseChannels.unshift(channel);
                    }
                    else {
                        noiseChannels.push(channel);
                    }
                }
                else if (isModChannel) {
                    modChannels.push(channel);
                }
                else {
                    pitchChannels.push(channel);
                }
                let currentVelocity = 1.0;
                let currentProgram = 0;
                let currentInstrumentVolume = 0;
                let currentInstrumentPan = Config.panCenter;
                if (isDrumsetChannel) {
                    const heldPitches = [];
                    let currentBar = -1;
                    let pattern = null;
                    let prevEventPart = 0;
                    let setInstrumentVolume = false;
                    const presetValue = EditorConfig.nameToPresetValue("standard drumset");
                    const preset = EditorConfig.valueToPreset(presetValue);
                    const instrument = new Instrument(false, false);
                    instrument.fromJsonObject(preset.settings, false, false, false, false, 1);
                    instrument.preset = presetValue;
                    channel.instruments.push(instrument);
                    for (let noteEventIndex = 0; noteEventIndex <= noteEvents[midiChannel].length; noteEventIndex++) {
                        const noMoreNotes = noteEventIndex == noteEvents[midiChannel].length;
                        const noteEvent = noMoreNotes ? null : noteEvents[midiChannel][noteEventIndex];
                        const nextEventPart = noteEvent == null ? Number.MAX_SAFE_INTEGER : quantizeMidiTickToPart(noteEvent.midiTick);
                        if (heldPitches.length > 0 && nextEventPart > prevEventPart && (noteEvent == null || noteEvent.on)) {
                            const bar = Math.floor(prevEventPart / partsPerBar);
                            const barStartPart = bar * partsPerBar;
                            if (currentBar != bar || pattern == null) {
                                currentBar++;
                                while (currentBar < bar) {
                                    channel.bars[currentBar] = 0;
                                    currentBar++;
                                }
                                pattern = new Pattern();
                                channel.patterns.push(pattern);
                                channel.bars[currentBar] = channel.patterns.length;
                                pattern.instruments[0] = 0;
                                pattern.instruments.length = 1;
                            }
                            if (!setInstrumentVolume || instrument.volume > currentInstrumentVolume) {
                                instrument.volume = currentInstrumentVolume;
                                instrument.pan = currentInstrumentPan;
                                instrument.panDelay = 0;
                                setInstrumentVolume = true;
                            }
                            const drumFreqs = [];
                            let minDuration = channelMaxPitch;
                            let maxDuration = 0;
                            let noteSize = 1;
                            for (const pitch of heldPitches) {
                                const drum = analogousDrumMap[pitch];
                                if (drumFreqs.indexOf(drum.frequency) == -1) {
                                    drumFreqs.push(drum.frequency);
                                }
                                noteSize = Math.max(noteSize, Math.round(drum.volume * currentVelocity));
                                minDuration = Math.min(minDuration, drum.duration);
                                maxDuration = Math.max(maxDuration, drum.duration);
                            }
                            const duration = Math.min(maxDuration, Math.max(minDuration, 2));
                            const noteStartPart = prevEventPart - barStartPart;
                            const noteEndPart = Math.min(partsPerBar, Math.min(nextEventPart - barStartPart, noteStartPart + duration * 6));
                            const note = new Note(-1, noteStartPart, noteEndPart, noteSize, true);
                            note.pitches.length = 0;
                            for (let pitchIndex = 0; pitchIndex < Math.min(Config.maxChordSize, drumFreqs.length); pitchIndex++) {
                                const heldPitch = drumFreqs[pitchIndex + Math.max(0, drumFreqs.length - Config.maxChordSize)];
                                if (note.pitches.indexOf(heldPitch) == -1) {
                                    note.pitches.push(heldPitch);
                                }
                            }
                            pattern.notes.push(note);
                            heldPitches.length = 0;
                        }
                        if (noteEvent != null && noteEvent.on && analogousDrumMap[noteEvent.pitch] != undefined) {
                            heldPitches.push(noteEvent.pitch);
                            prevEventPart = nextEventPart;
                            currentVelocity = noteEvent.velocity;
                            currentInstrumentVolume = noteEvent.instrumentVolume;
                            currentInstrumentPan = noteEvent.instrumentPan;
                        }
                    }
                }
                else {
                    let currentMidiInterval = 0.0;
                    let currentMidiNoteSize = Config.noteSizeMax;
                    let pitchBendEventIndex = 0;
                    let noteSizeEventIndex = 0;
                    function updateCurrentMidiInterval(midiTick) {
                        while (pitchBendEventIndex < pitchBendEvents[midiChannel].length && pitchBendEvents[midiChannel][pitchBendEventIndex].midiTick <= midiTick) {
                            currentMidiInterval = pitchBendEvents[midiChannel][pitchBendEventIndex].interval;
                            pitchBendEventIndex++;
                        }
                    }
                    function updateCurrentMidiNoteSize(midiTick) {
                        while (noteSizeEventIndex < noteSizeEvents[midiChannel].length && noteSizeEvents[midiChannel][noteSizeEventIndex].midiTick <= midiTick) {
                            currentMidiNoteSize = noteSizeEvents[midiChannel][noteSizeEventIndex].size;
                            noteSizeEventIndex++;
                        }
                    }
                    const instrumentByProgram = [];
                    const heldPitches = [];
                    let currentBar = -1;
                    let pattern = null;
                    let prevEventMidiTick = 0;
                    let prevEventPart = 0;
                    let pitchSum = 0;
                    let pitchCount = 0;
                    for (let noteEvent of noteEvents[midiChannel]) {
                        const nextEventMidiTick = noteEvent.midiTick;
                        const nextEventPart = quantizeMidiTickToPart(nextEventMidiTick);
                        if (heldPitches.length > 0 && nextEventPart > prevEventPart) {
                            const startBar = Math.floor(prevEventPart / partsPerBar);
                            const endBar = Math.ceil(nextEventPart / partsPerBar);
                            let createdNote = false;
                            for (let bar = startBar; bar < endBar; bar++) {
                                const barStartPart = bar * partsPerBar;
                                const barStartMidiTick = bar * beatsPerBar * midiTicksPerBeat;
                                const barEndMidiTick = (bar + 1) * beatsPerBar * midiTicksPerBeat;
                                const noteStartPart = Math.max(0, prevEventPart - barStartPart);
                                const noteEndPart = Math.min(partsPerBar, nextEventPart - barStartPart);
                                const noteStartMidiTick = Math.max(barStartMidiTick, prevEventMidiTick);
                                const noteEndMidiTick = Math.min(barEndMidiTick, nextEventMidiTick);
                                if (noteStartPart < noteEndPart) {
                                    const presetValue = EditorConfig.midiProgramToPresetValue(currentProgram);
                                    const preset = (presetValue == null) ? null : EditorConfig.valueToPreset(presetValue);
                                    if (currentBar != bar || pattern == null) {
                                        currentBar++;
                                        while (currentBar < bar) {
                                            channel.bars[currentBar] = 0;
                                            currentBar++;
                                        }
                                        pattern = new Pattern();
                                        channel.patterns.push(pattern);
                                        channel.bars[currentBar] = channel.patterns.length;
                                        if (instrumentByProgram[currentProgram] == undefined) {
                                            const instrument = new Instrument(isNoiseChannel, isModChannel);
                                            instrumentByProgram[currentProgram] = instrument;
                                            if (presetValue != null && preset != null && (preset.isNoise == true) == isNoiseChannel) {
                                                instrument.fromJsonObject(preset.settings, isNoiseChannel, isModChannel, false, false, 1);
                                                instrument.preset = presetValue;
                                            }
                                            else {
                                                instrument.setTypeAndReset(isModChannel ? 10 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);
                                                instrument.chord = 0;
                                            }
                                            instrument.volume = currentInstrumentVolume;
                                            instrument.pan = currentInstrumentPan;
                                            instrument.panDelay = 0;
                                            channel.instruments.push(instrument);
                                        }
                                        pattern.instruments[0] = channel.instruments.indexOf(instrumentByProgram[currentProgram]);
                                        pattern.instruments.length = 1;
                                    }
                                    if (instrumentByProgram[currentProgram] != undefined) {
                                        instrumentByProgram[currentProgram].volume = Math.min(instrumentByProgram[currentProgram].volume, currentInstrumentVolume);
                                        instrumentByProgram[currentProgram].pan = Math.min(instrumentByProgram[currentProgram].pan, currentInstrumentPan);
                                    }
                                    const note = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, false);
                                    note.pins.length = 0;
                                    note.continuesLastPattern = (createdNote && noteStartPart == 0);
                                    createdNote = true;
                                    updateCurrentMidiInterval(noteStartMidiTick);
                                    updateCurrentMidiNoteSize(noteStartMidiTick);
                                    const shiftedHeldPitch = heldPitches[0] * midiIntervalScale - channelBasePitch;
                                    const initialBeepBoxPitch = Math.round((shiftedHeldPitch + currentMidiInterval) / intervalScale);
                                    const heldPitchOffset = Math.round(currentMidiInterval - channelBasePitch);
                                    let firstPin = makeNotePin(0, 0, Math.round(currentVelocity * currentMidiNoteSize));
                                    note.pins.push(firstPin);
                                    const potentialPins = [
                                        { part: 0, pitch: initialBeepBoxPitch, size: firstPin.size, keyPitch: false, keySize: false }
                                    ];
                                    let prevPinIndex = 0;
                                    let prevPartPitch = (shiftedHeldPitch + currentMidiInterval) / intervalScale;
                                    let prevPartSize = currentVelocity * currentMidiNoteSize;
                                    for (let part = noteStartPart + 1; part <= noteEndPart; part++) {
                                        const midiTick = Math.max(noteStartMidiTick, Math.min(noteEndMidiTick - 1, Math.round(midiTicksPerPart * (part + barStartPart))));
                                        const noteRelativePart = part - noteStartPart;
                                        const lastPart = (part == noteEndPart);
                                        updateCurrentMidiInterval(midiTick);
                                        updateCurrentMidiNoteSize(midiTick);
                                        const partPitch = (currentMidiInterval + shiftedHeldPitch) / intervalScale;
                                        const partSize = currentVelocity * currentMidiNoteSize;
                                        const nearestPitch = Math.round(partPitch);
                                        const pitchIsNearInteger = Math.abs(partPitch - nearestPitch) < 0.01;
                                        const pitchCrossedInteger = (Math.abs(prevPartPitch - Math.round(prevPartPitch)) < 0.01)
                                            ? Math.abs(partPitch - prevPartPitch) >= 1.0
                                            : Math.floor(partPitch) != Math.floor(prevPartPitch);
                                        const keyPitch = pitchIsNearInteger || pitchCrossedInteger;
                                        const nearestSize = Math.round(partSize);
                                        const sizeIsNearInteger = Math.abs(partSize - nearestSize) < 0.01;
                                        const sizeCrossedInteger = (Math.abs(prevPartSize - Math.round(prevPartSize)))
                                            ? Math.abs(partSize - prevPartSize) >= 1.0
                                            : Math.floor(partSize) != Math.floor(prevPartSize);
                                        const keySize = sizeIsNearInteger || sizeCrossedInteger;
                                        prevPartPitch = partPitch;
                                        prevPartSize = partSize;
                                        if (keyPitch || keySize || lastPart) {
                                            const currentPin = { part: noteRelativePart, pitch: nearestPitch, size: nearestSize, keyPitch: keyPitch || lastPart, keySize: keySize || lastPart };
                                            const prevPin = potentialPins[prevPinIndex];
                                            let addPin = false;
                                            let addPinAtIndex = Number.MAX_VALUE;
                                            if (currentPin.keyPitch) {
                                                const slope = (currentPin.pitch - prevPin.pitch) / (currentPin.part - prevPin.part);
                                                let furthestIntervalDistance = Math.abs(slope);
                                                let addIntervalPin = false;
                                                let addIntervalPinAtIndex = Number.MAX_VALUE;
                                                for (let potentialIndex = prevPinIndex + 1; potentialIndex < potentialPins.length; potentialIndex++) {
                                                    const potentialPin = potentialPins[potentialIndex];
                                                    if (potentialPin.keyPitch) {
                                                        const interpolatedInterval = prevPin.pitch + slope * (potentialPin.part - prevPin.part);
                                                        const distance = Math.abs(interpolatedInterval - potentialPin.pitch);
                                                        if (furthestIntervalDistance < distance) {
                                                            furthestIntervalDistance = distance;
                                                            addIntervalPin = true;
                                                            addIntervalPinAtIndex = potentialIndex;
                                                        }
                                                    }
                                                }
                                                if (addIntervalPin) {
                                                    addPin = true;
                                                    addPinAtIndex = Math.min(addPinAtIndex, addIntervalPinAtIndex);
                                                }
                                            }
                                            if (currentPin.keySize) {
                                                const slope = (currentPin.size - prevPin.size) / (currentPin.part - prevPin.part);
                                                let furthestSizeDistance = Math.abs(slope);
                                                let addSizePin = false;
                                                let addSizePinAtIndex = Number.MAX_VALUE;
                                                for (let potentialIndex = prevPinIndex + 1; potentialIndex < potentialPins.length; potentialIndex++) {
                                                    const potentialPin = potentialPins[potentialIndex];
                                                    if (potentialPin.keySize) {
                                                        const interpolatedSize = prevPin.size + slope * (potentialPin.part - prevPin.part);
                                                        const distance = Math.abs(interpolatedSize - potentialPin.size);
                                                        if (furthestSizeDistance < distance) {
                                                            furthestSizeDistance = distance;
                                                            addSizePin = true;
                                                            addSizePinAtIndex = potentialIndex;
                                                        }
                                                    }
                                                }
                                                if (addSizePin) {
                                                    addPin = true;
                                                    addPinAtIndex = Math.min(addPinAtIndex, addSizePinAtIndex);
                                                }
                                            }
                                            if (addPin) {
                                                const toBePinned = potentialPins[addPinAtIndex];
                                                note.pins.push(makeNotePin(toBePinned.pitch - initialBeepBoxPitch, toBePinned.part, toBePinned.size));
                                                prevPinIndex = addPinAtIndex;
                                            }
                                            potentialPins.push(currentPin);
                                        }
                                    }
                                    const lastToBePinned = potentialPins[potentialPins.length - 1];
                                    note.pins.push(makeNotePin(lastToBePinned.pitch - initialBeepBoxPitch, lastToBePinned.part, lastToBePinned.size));
                                    let maxPitch = channelMaxPitch;
                                    let minPitch = 0;
                                    for (const notePin of note.pins) {
                                        maxPitch = Math.min(maxPitch, channelMaxPitch - notePin.interval);
                                        minPitch = Math.min(minPitch, -notePin.interval);
                                    }
                                    note.pitches.length = 0;
                                    for (let pitchIndex = 0; pitchIndex < Math.min(Config.maxChordSize, heldPitches.length); pitchIndex++) {
                                        let heldPitch = heldPitches[pitchIndex + Math.max(0, heldPitches.length - Config.maxChordSize)] * midiIntervalScale;
                                        if (preset != null && preset.midiSubharmonicOctaves != undefined) {
                                            heldPitch -= 12 * preset.midiSubharmonicOctaves;
                                        }
                                        const shiftedPitch = Math.max(minPitch, Math.min(maxPitch, Math.round((heldPitch + heldPitchOffset) / intervalScale)));
                                        if (note.pitches.indexOf(shiftedPitch) == -1) {
                                            note.pitches.push(shiftedPitch);
                                            const weight = note.end - note.start;
                                            pitchSum += shiftedPitch * weight;
                                            pitchCount += weight;
                                        }
                                    }
                                    pattern.notes.push(note);
                                }
                            }
                        }
                        if (heldPitches.indexOf(noteEvent.pitch) != -1) {
                            heldPitches.splice(heldPitches.indexOf(noteEvent.pitch), 1);
                        }
                        if (noteEvent.on) {
                            heldPitches.push(noteEvent.pitch);
                            currentVelocity = noteEvent.velocity;
                            currentProgram = noteEvent.program;
                            currentInstrumentVolume = noteEvent.instrumentVolume;
                            currentInstrumentPan = noteEvent.instrumentPan;
                        }
                        prevEventMidiTick = nextEventMidiTick;
                        prevEventPart = nextEventPart;
                    }
                    const averagePitch = pitchSum / pitchCount;
                    channel.octave = (isNoiseChannel || isModChannel) ? 0 : Math.max(0, Math.min(Config.pitchOctaves - 1, Math.floor((averagePitch / 12))));
                }
                while (channel.bars.length < songTotalBars) {
                    channel.bars.push(0);
                }
            }
            if (tempoChanges.length > 1) {
                let tempoModChannel = new Channel();
                modChannels.push(tempoModChannel);
                let tempoModInstrument = new Instrument(false, true);
                tempoModInstrument.setTypeAndReset(9, false, true);
                tempoModInstrument.modulators[0] = Config.modulators.dictionary["tempo"].index;
                tempoModInstrument.modChannels[0] = -1;
                tempoModChannel.instruments.push(tempoModInstrument);
                const tempoModPitch = Config.modCount - 1;
                let currentBar = -1;
                let pattern = null;
                let prevChangeEndPart = 0;
                for (let changeIndex = 0; changeIndex < tempoChanges.length; changeIndex++) {
                    const change = tempoChanges[changeIndex];
                    const changeStartMidiTick = change.midiTick;
                    const changeStartPart = quantizeMidiTickToPart(changeStartMidiTick);
                    let changeEndMidiTick = -1;
                    let changeEndPart = -1;
                    if (changeIndex === tempoChanges.length - 1) {
                        changeEndMidiTick = changeStartMidiTick + 1;
                        changeEndPart = changeStartPart + 1;
                    }
                    else {
                        const nextChange = tempoChanges[changeIndex + 1];
                        changeEndMidiTick = nextChange.midiTick;
                        changeEndPart = quantizeMidiTickToPart(changeEndMidiTick);
                    }
                    let startBar = Math.floor(changeStartPart / partsPerBar);
                    let endBar = Math.ceil(changeEndPart / partsPerBar);
                    for (let bar = startBar; bar < endBar; bar++) {
                        const barStartPart = bar * partsPerBar;
                        const noteStartPart = Math.max(0, prevChangeEndPart - barStartPart);
                        let noteEndPart = Math.min(partsPerBar, changeEndPart - barStartPart);
                        if (noteStartPart < noteEndPart) {
                            if (currentBar != bar || pattern == null) {
                                currentBar++;
                                while (currentBar < bar) {
                                    tempoModChannel.bars[currentBar] = 0;
                                    currentBar++;
                                }
                                pattern = new Pattern();
                                tempoModChannel.patterns.push(pattern);
                                tempoModChannel.bars[currentBar] = tempoModChannel.patterns.length;
                                pattern.instruments[0] = 0;
                                pattern.instruments.length = 1;
                            }
                            const newBPM = Math.max(Config.tempoMin, Math.min(Config.tempoMax, Math.round(microsecondsPerMinute / change.microsecondsPerBeat) - Config.modulators.dictionary["tempo"].convertRealFactor));
                            const note = new Note(tempoModPitch, noteStartPart, noteEndPart, newBPM, false);
                            pattern.notes.push(note);
                        }
                    }
                    prevChangeEndPart = changeEndPart;
                }
            }
            function compactChannels(channels, maxLength) {
                while (channels.length > maxLength) {
                    let bestChannelIndexA = channels.length - 2;
                    let bestChannelIndexB = channels.length - 1;
                    let fewestConflicts = Number.MAX_VALUE;
                    let fewestGaps = Number.MAX_VALUE;
                    for (let channelIndexA = 0; channelIndexA < channels.length - 1; channelIndexA++) {
                        for (let channelIndexB = channelIndexA + 1; channelIndexB < channels.length; channelIndexB++) {
                            const channelA = channels[channelIndexA];
                            const channelB = channels[channelIndexB];
                            let conflicts = 0;
                            let gaps = 0;
                            for (let barIndex = 0; barIndex < channelA.bars.length && barIndex < channelB.bars.length; barIndex++) {
                                if (channelA.bars[barIndex] != 0 && channelB.bars[barIndex] != 0)
                                    conflicts++;
                                if (channelA.bars[barIndex] == 0 && channelB.bars[barIndex] == 0)
                                    gaps++;
                            }
                            if (conflicts <= fewestConflicts) {
                                if (conflicts < fewestConflicts || gaps < fewestGaps) {
                                    bestChannelIndexA = channelIndexA;
                                    bestChannelIndexB = channelIndexB;
                                    fewestConflicts = conflicts;
                                    fewestGaps = gaps;
                                }
                            }
                        }
                    }
                    const channelA = channels[bestChannelIndexA];
                    const channelB = channels[bestChannelIndexB];
                    const channelAInstrumentCount = channelA.instruments.length;
                    const channelAPatternCount = channelA.patterns.length;
                    for (const instrument of channelB.instruments) {
                        channelA.instruments.push(instrument);
                    }
                    for (const pattern of channelB.patterns) {
                        pattern.instruments[0] += channelAInstrumentCount;
                        channelA.patterns.push(pattern);
                    }
                    for (let barIndex = 0; barIndex < channelA.bars.length && barIndex < channelB.bars.length; barIndex++) {
                        if (channelA.bars[barIndex] == 0 && channelB.bars[barIndex] != 0) {
                            channelA.bars[barIndex] = channelB.bars[barIndex] + channelAPatternCount;
                        }
                    }
                    channels.splice(bestChannelIndexB, 1);
                }
            }
            compactChannels(pitchChannels, Config.pitchChannelCountMax);
            compactChannels(noiseChannels, Config.noiseChannelCountMax);
            compactChannels(modChannels, Config.modChannelCountMax);
            class ChangeImportMidi extends ChangeGroup {
                constructor(doc) {
                    super();
                    const song = doc.song;
                    song.tempo = beatsPerMinute;
                    song.beatsPerBar = beatsPerBar;
                    song.key = key;
                    song.scale = 11;
                    song.rhythm = 1;
                    song.layeredInstruments = false;
                    song.patternInstruments = pitchChannels.some(channel => channel.instruments.length > 1) || noiseChannels.some(channel => channel.instruments.length > 1);
                    removeDuplicatePatterns(pitchChannels);
                    removeDuplicatePatterns(noiseChannels);
                    removeDuplicatePatterns(modChannels);
                    this.append(new ChangeReplacePatterns(doc, pitchChannels, noiseChannels, modChannels));
                    song.loopStart = 0;
                    song.loopLength = song.barCount;
                    this._didSomething();
                    doc.notifier.changed();
                }
            }
            this._doc.goBackToStart();
            for (const channel of this._doc.song.channels)
                channel.muted = false;
            this._doc.prompt = null;
            this._doc.record(new ChangeImportMidi(this._doc), true, true);
        }
    }

    class Box {
        constructor(channel, color) {
            this._text = document.createTextNode("");
            this._label = HTML.div({ class: "channelBoxLabel" }, this._text);
            this.container = HTML.div({ class: "channelBox", style: `margin: 1px; height: ${ChannelRow.patternHeight - 2}px;` }, this._label);
            this._renderedIndex = -1;
            this._renderedLabelColor = "?";
            this._renderedBackgroundColor = "?";
            this.container.style.background = ColorConfig.uiWidgetBackground;
            this._label.style.color = color;
        }
        setWidth(width) {
            this.container.style.width = (width - 2) + "px";
        }
        setHeight(height) {
            this.container.style.height = (height - 2) + "px";
        }
        setIndex(index, selected, dim, color, isNoise, isMod) {
            if (this._renderedIndex != index) {
                if (index >= 100) {
                    this._label.setAttribute("font-size", "16");
                    this._label.style.setProperty("transform", "translate(0px, -1.5px)");
                }
                else {
                    this._label.setAttribute("font-size", "20");
                    this._label.style.setProperty("transform", "translate(0px, 0px)");
                }
                this._renderedIndex = index;
                this._text.data = String(index);
            }
            let useColor = selected ? ColorConfig.c_invertedText : color;
            if (this._renderedLabelColor != useColor) {
                this._label.style.color = useColor;
                this._renderedLabelColor = useColor;
            }
            if (!selected) {
                if (isNoise)
                    color = dim ? ColorConfig.c_trackEditorBgNoiseDim : ColorConfig.c_trackEditorBgNoise;
                else if (isMod)
                    color = dim ? ColorConfig.c_trackEditorBgModDim : ColorConfig.c_trackEditorBgMod;
                else
                    color = dim ? ColorConfig.c_trackEditorBgPitchDim : ColorConfig.c_trackEditorBgPitch;
            }
            color = selected ? color : (index == 0) ? "none" : color;
            if (this._renderedBackgroundColor != color) {
                this.container.style.background = color;
                this._renderedBackgroundColor = color;
            }
        }
    }
    class ChannelRow {
        constructor(_doc, index) {
            this._doc = _doc;
            this.index = index;
            this._renderedBarWidth = -1;
            this._renderedBarHeight = -1;
            this._boxes = [];
            this.container = HTML.div({ class: "channelRow" });
        }
        render() {
            ChannelRow.patternHeight = this._doc.getChannelHeight();
            const barWidth = this._doc.getBarWidth();
            if (this._boxes.length != this._doc.song.barCount) {
                for (let x = this._boxes.length; x < this._doc.song.barCount; x++) {
                    const box = new Box(this.index, ColorConfig.getChannelColor(this._doc.song, this.index).secondaryChannel);
                    box.setWidth(barWidth);
                    this.container.appendChild(box.container);
                    this._boxes[x] = box;
                }
                for (let x = this._doc.song.barCount; x < this._boxes.length; x++) {
                    this.container.removeChild(this._boxes[x].container);
                }
                this._boxes.length = this._doc.song.barCount;
            }
            if (this._renderedBarWidth != barWidth) {
                this._renderedBarWidth = barWidth;
                for (let x = 0; x < this._boxes.length; x++) {
                    this._boxes[x].setWidth(barWidth);
                }
            }
            if (this._renderedBarHeight != ChannelRow.patternHeight) {
                this._renderedBarHeight = ChannelRow.patternHeight;
                for (let x = 0; x < this._boxes.length; x++) {
                    this._boxes[x].setHeight(ChannelRow.patternHeight);
                }
            }
            for (let i = 0; i < this._boxes.length; i++) {
                const pattern = this._doc.song.getPattern(this.index, i);
                const selected = (i == this._doc.bar && this.index == this._doc.channel);
                const dim = (pattern == null || pattern.notes.length == 0);
                const box = this._boxes[i];
                if (i < this._doc.song.barCount) {
                    const colors = ColorConfig.getChannelColor(this._doc.song, this.index);
                    box.setIndex(this._doc.song.channels[this.index].bars[i], selected, dim, dim && !selected ? colors.secondaryChannel : colors.primaryChannel, this.index >= this._doc.song.pitchChannelCount && this.index < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount, this.index >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);
                    box.container.style.visibility = "visible";
                }
                else {
                    box.container.style.visibility = "hidden";
                }
                if (i == this._doc.synth.loopBarStart) {
                    box.container.style.setProperty("border-left", `1px dashed ${ColorConfig.uiWidgetFocus}`);
                }
                else {
                    box.container.style.setProperty("border-left", "none");
                }
                if (i == this._doc.synth.loopBarEnd) {
                    box.container.style.setProperty("border-right", `1px dashed ${ColorConfig.uiWidgetFocus}`);
                }
                else {
                    box.container.style.setProperty("border-right", "none");
                }
            }
        }
    }
    ChannelRow.patternHeight = 28;

    const { button: button$i, label: label$1, div: div$i, form, h2: h2$h, input: input$a } = HTML;
    class LayoutPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._fileInput = input$a({ type: "file", accept: ".json,application/json,.mid,.midi,audio/midi,audio/x-midi" });
            this._okayButton = button$i({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._cancelButton = button$i({ class: "cancelButton" });
            this._form = form({ style: "display: flex; gap: 10px; flex-wrap: wrap; justify-content: center;" }, label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "small" }), SVG(`\
					<svg viewBox="-4 -1 28 22">
						<rect x="0" y="0" width="20" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="11" height="10" fill="currentColor"/>
						<rect x="14" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="2" y="13" width="11" height="5" fill="currentColor"/>
					</svg>
				`), div$i("Small")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "long" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="12" height="10" fill="currentColor"/>
						<rect x="15" y="2" width="4" height="10" fill="currentColor"/>
						<rect x="20" y="2" width="4" height="10" fill="currentColor"/>
						<rect x="2" y="13" width="22" height="5" fill="currentColor"/>
					</svg>
				`), div$i("Long")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "tall" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="11" y="2" width="8" height="16" fill="currentColor"/>
						<rect x="20" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="2" y="2" width="8" height="16" fill="currentColor"/>
					</svg>
				`), div$i("Tall")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "wide" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="18" y="2" width="2.5" height="16" fill="currentColor"/>
						<rect x="21.5" y="2" width="2.5" height="16" fill="currentColor"/>
						<rect x="7" y="2" width="10" height="16" fill="currentColor"/>
					</svg>
				`), div$i("Wide (JB)")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "AbyssBox Special" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="7" y="2" width="4" height="11" fill="currentColor"/>
						<rect x="2" y="2" width="4" height="11" fill="currentColor"/>
						<rect x="10" y="2" width="14" height="11" fill="currentColor"/>
						<rect x="2" y="14" width="22" height="4" fill="currentColor"/>
					</svg>
				`), div$i("Flipped (AB)")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "focus" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="17" height="10" fill="currentColor"/>
						<rect x="20" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="2" y="13" width="17" height="5" fill="currentColor"/>
					</svg>
				`), div$i("Focus (AB)")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "long (AB)" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="12" height="10" fill="currentColor"/>
						<rect x="15" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="20" y="2" width="4" height="16" fill="currentColor"/>
						<rect x="2" y="13" width="12" height="5" fill="currentColor"/>
					</svg>
				`), div$i("Long (AB)")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "theatre" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="2" y="2" width="22" height="10" fill="currentColor"></rect>
						<rect x="2" y="13" width="16" height="5" fill="currentColor"></rect>
						<rect x="19" y="13" width="2" height="5" fill="currentColor"></rect>
						<rect x="22" y="13" width="2" height="5" fill="currentColor"></rect>
					</svg>
				`), div$i("theatre (AB)")), label$1({ class: "layout-option" }, input$a({ type: "radio", name: "layout", value: "Upside Down" }), SVG(`\
					<svg viewBox="-1 -1 28 22">
						<rect x="0" y="0" width="26" height="20" fill="none" stroke="currentColor" stroke-width="1"/>
						<rect x="7" y="8" width="17" height="10" fill="currentColor"/> /* pattern area */
						<rect x="2" y="2" width="4" height="16" fill="currentColor"/> /* settings area */
						<rect x="7" y="2" width="17" height="5" fill="currentColor"/> /* track area */
					</svg>
				`), div$i("Upturn (AB)")));
            this.container = div$i({ class: "prompt noSelection", style: "width: 300px;" }, div$i({ class: "promptTitle" }, h2$h({ class: "layoutExt", style: "text-align: inherit;" }, ""), h2$h({ class: "layoutTitle" }, "Layout")), this._form, div$i({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._confirm);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._confirm();
                }
            };
            this._confirm = () => {
                this._doc.prefs.layout = this._form.elements["layout"].value;
                this._doc.prefs.save();
                Layout.setLayout(this._doc.prefs.layout);
                this._close();
            };
            this._fileInput.select();
            setTimeout(() => this._fileInput.focus());
            this._okayButton.addEventListener("click", this._confirm);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._form.elements["layout"].value = this._doc.prefs.layout;
        }
    }

    class EnvelopeEditor {
        constructor(_doc) {
            this._doc = _doc;
            this.container = HTML.div({ class: "envelopeEditor" });
            this._rows = [];
            this._targetSelects = [];
            this._envelopeSelects = [];
            this._deleteButtons = [];
            this._renderedEnvelopeCount = 0;
            this._renderedEqFilterCount = -1;
            this._renderedNoteFilterCount = -1;
            this._renderedEffects = 0;
            this._onChange = (event) => {
                const targetSelectIndex = this._targetSelects.indexOf(event.target);
                const envelopeSelectIndex = this._envelopeSelects.indexOf(event.target);
                if (targetSelectIndex != -1) {
                    const combinedValue = parseInt(this._targetSelects[targetSelectIndex].value);
                    const target = combinedValue % Config.instrumentAutomationTargets.length;
                    const index = (combinedValue / Config.instrumentAutomationTargets.length) >>> 0;
                    this._doc.record(new ChangeSetEnvelopeTarget(this._doc, targetSelectIndex, target, index));
                }
                else if (envelopeSelectIndex != -1) {
                    this._doc.record(new ChangeSetEnvelopeType(this._doc, envelopeSelectIndex, this._envelopeSelects[envelopeSelectIndex].selectedIndex));
                }
            };
            this._onClick = (event) => {
                const index = this._deleteButtons.indexOf(event.target);
                if (index != -1) {
                    this._doc.record(new ChangeRemoveEnvelope(this._doc, index));
                }
            };
            this.container.addEventListener("change", this._onChange);
            this.container.addEventListener("click", this._onClick);
        }
        _makeOption(target, index) {
            let displayName = Config.instrumentAutomationTargets[target].displayName;
            if (Config.instrumentAutomationTargets[target].maxCount > 1) {
                if (displayName.indexOf("#") != -1) {
                    displayName = displayName.replace("#", String(index + 1));
                }
                else {
                    displayName += " " + (index + 1);
                }
            }
            return HTML.option({ value: target + index * Config.instrumentAutomationTargets.length }, displayName);
        }
        _updateTargetOptionVisibility(menu, instrument) {
            for (let optionIndex = 0; optionIndex < menu.childElementCount; optionIndex++) {
                const option = menu.children[optionIndex];
                const combinedValue = parseInt(option.value);
                const target = combinedValue % Config.instrumentAutomationTargets.length;
                const index = (combinedValue / Config.instrumentAutomationTargets.length) >>> 0;
                option.hidden = !instrument.supportsEnvelopeTarget(target, index);
            }
        }
        render() {
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            for (let envelopeIndex = this._rows.length; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {
                const targetSelect = HTML.select();
                for (let target = 0; target < Config.instrumentAutomationTargets.length; target++) {
                    const interleaved = (Config.instrumentAutomationTargets[target].interleave);
                    for (let index = 0; index < Config.instrumentAutomationTargets[target].maxCount; index++) {
                        targetSelect.appendChild(this._makeOption(target, index));
                        if (interleaved) {
                            targetSelect.appendChild(this._makeOption(target + 1, index));
                        }
                    }
                    if (interleaved)
                        target++;
                }
                const envelopeSelect = HTML.select();
                for (let envelope = 0; envelope < Config.envelopes.length; envelope++) {
                    envelopeSelect.appendChild(HTML.option({ value: envelope }, Config.envelopes[envelope].name));
                }
                const deleteButton = HTML.button({ type: "button", class: "delete-envelope" });
                const row = HTML.div({ class: "envelope-row" }, HTML.div({ class: "selectContainer", style: "width: 0; flex: 1;" }, targetSelect), HTML.div({ class: "selectContainer", style: "width: 0; flex: 0.7;" }, envelopeSelect), deleteButton);
                this.container.appendChild(row);
                this._rows[envelopeIndex] = row;
                this._targetSelects[envelopeIndex] = targetSelect;
                this._envelopeSelects[envelopeIndex] = envelopeSelect;
                this._deleteButtons[envelopeIndex] = deleteButton;
            }
            for (let envelopeIndex = this._renderedEnvelopeCount; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {
                this._rows[envelopeIndex].style.display = "";
                this._updateTargetOptionVisibility(this._targetSelects[envelopeIndex], instrument);
            }
            for (let envelopeIndex = instrument.envelopeCount; envelopeIndex < this._renderedEnvelopeCount; envelopeIndex++) {
                this._rows[envelopeIndex].style.display = "none";
            }
            let useControlPointCount = instrument.noteFilter.controlPointCount;
            if (instrument.noteFilterType)
                useControlPointCount = 1;
            if (this._renderedEqFilterCount != instrument.eqFilter.controlPointCount ||
                this._renderedNoteFilterCount != useControlPointCount ||
                this._renderedInstrumentType != instrument.type ||
                this._renderedEffects != instrument.effects) {
                for (let envelopeIndex = 0; envelopeIndex < this._renderedEnvelopeCount; envelopeIndex++) {
                    this._updateTargetOptionVisibility(this._targetSelects[envelopeIndex], instrument);
                }
            }
            for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {
                this._targetSelects[envelopeIndex].value = String(instrument.envelopes[envelopeIndex].target + instrument.envelopes[envelopeIndex].index * Config.instrumentAutomationTargets.length);
                this._envelopeSelects[envelopeIndex].selectedIndex = instrument.envelopes[envelopeIndex].envelope;
            }
            this._renderedEnvelopeCount = instrument.envelopeCount;
            this._renderedEqFilterCount = instrument.eqFilter.controlPointCount;
            this._renderedNoteFilterCount = useControlPointCount;
            this._renderedInstrumentType = instrument.type;
            this._renderedEffects = instrument.effects;
        }
    }

    class FadeInOutEditor {
        constructor(_doc) {
            this._doc = _doc;
            this._editorWidth = 120;
            this._editorHeight = 26;
            this._fadeCurve = SVG.path({ fill: ColorConfig.uiWidgetBackground, "pointer-events": "none" });
            this._dottedLinePath = SVG.path({ fill: "none", stroke: "currentColor", "stroke-width": 1, "stroke-dasharray": "3, 2", "pointer-events": "none" });
            this._controlCurve = SVG.path({ fill: "none", stroke: "currentColor", "stroke-width": 2, "pointer-events": "none" });
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;`, width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._fadeCurve, this._dottedLinePath, this._controlCurve);
            this.container = HTML.div({ class: "fadeInOut", style: "height: 100%;" }, this._svg);
            this._mouseX = 0;
            this._mouseXStart = 0;
            this._mouseDown = false;
            this._mouseDragging = false;
            this._draggingFadeIn = false;
            this._dragChange = null;
            this._renderedFadeIn = -1;
            this._renderedFadeOut = -1;
            this._whenMousePressed = (event) => {
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left);
                this._whenCursorPressed();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left);
                this._whenCursorPressed();
            };
            this._whenMouseMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (this._mouseDown && this._doc.lastChangeWas(this._dragChange) && this._dragChange != null) {
                    if (!this._mouseDragging) {
                        const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                        if (this._draggingFadeIn) {
                            this._doc.record(new ChangeFadeInOut(this._doc, this._xToFadeIn(this._mouseX), instrument.fadeOut));
                        }
                        else {
                            this._doc.record(new ChangeFadeInOut(this._doc, instrument.fadeIn, this._xToFadeOut(this._mouseX)));
                        }
                    }
                    else {
                        this._doc.record(this._dragChange);
                    }
                }
                this._dragChange = null;
                this._mouseDragging = false;
                this._mouseDown = false;
            };
            const dottedLineX = this._fadeOutToX(Config.fadeOutNeutral);
            this._dottedLinePath.setAttribute("d", `M ${dottedLineX} 0 L ${dottedLineX} ${this._editorHeight}`);
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _fadeInToX(fadeIn) {
            return 1.0 + (this._editorWidth - 2.0) * 0.4 * fadeIn / (Config.fadeInRange - 1);
        }
        _xToFadeIn(x) {
            return clamp(0, Config.fadeInRange, Math.round((x - 1.0) * (Config.fadeInRange - 1) / (0.4 * this._editorWidth - 2.0)));
        }
        _fadeOutToX(fadeOut) {
            return 1.0 + (this._editorWidth - 2.0) * (0.5 + 0.5 * fadeOut / (Config.fadeOutTicks.length - 1));
        }
        _xToFadeOut(x) {
            return clamp(0, Config.fadeOutTicks.length, Math.round((Config.fadeOutTicks.length - 1) * ((x - 1.0) / (this._editorWidth - 2.0) - 0.5) / 0.5));
        }
        _whenCursorPressed() {
            if (isNaN(this._mouseX))
                this._mouseX = 0;
            this._mouseXStart = this._mouseX;
            this._mouseDown = true;
            this._mouseDragging = false;
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            const fadeInX = this._fadeInToX(instrument.fadeIn);
            const fadeOutX = this._fadeOutToX(instrument.fadeOut);
            this._draggingFadeIn = this._mouseXStart < (fadeInX + fadeOutX) / 2.0;
            this._dragChange = new ChangeSequence();
            this._doc.setProspectiveChange(this._dragChange);
        }
        _whenCursorMoved() {
            if (this._dragChange != null && this._doc.lastChangeWas(this._dragChange)) {
                this._dragChange.undo();
            }
            else {
                this._mouseDown = false;
            }
            this._dragChange = null;
            if (this._mouseDown) {
                const sequence = new ChangeSequence();
                this._dragChange = sequence;
                this._doc.setProspectiveChange(this._dragChange);
                if (Math.abs(this._mouseX - this._mouseXStart) > 4.0) {
                    this._mouseDragging = true;
                }
                if (this._mouseDragging) {
                    const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                    if (this._draggingFadeIn) {
                        sequence.append(new ChangeFadeInOut(this._doc, this._xToFadeIn(this._fadeInToX(instrument.fadeIn) + this._mouseX - this._mouseXStart), instrument.fadeOut));
                    }
                    else {
                        sequence.append(new ChangeFadeInOut(this._doc, instrument.fadeIn, this._xToFadeOut(this._fadeOutToX(instrument.fadeOut) + this._mouseX - this._mouseXStart)));
                    }
                }
            }
        }
        render() {
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            if (this._renderedFadeIn == instrument.fadeIn && this._renderedFadeOut == instrument.fadeOut) {
                return;
            }
            const fadeInX = this._fadeInToX(instrument.fadeIn);
            const fadeOutX = this._fadeOutToX(instrument.fadeOut);
            this._controlCurve.setAttribute("d", `M ${fadeInX} 0 L ${fadeInX} ${this._editorHeight} M ${fadeOutX} 0 L ${fadeOutX} ${this._editorHeight}`);
            const dottedLineX = this._fadeOutToX(Config.fadeOutNeutral);
            let fadePath = "";
            fadePath += `M 0 ${this._editorHeight} `;
            fadePath += `L ${fadeInX} 0 `;
            if (Synth.fadeOutSettingToTicks(instrument.fadeOut) > 0) {
                fadePath += `L ${dottedLineX} 0 `;
                fadePath += `L ${fadeOutX} ${this._editorHeight} `;
            }
            else {
                fadePath += `L ${fadeOutX} 0 `;
                fadePath += `L ${dottedLineX} ${this._editorHeight} `;
            }
            fadePath += "z";
            this._fadeCurve.setAttribute("d", fadePath);
        }
    }

    const { button: button$h, div: div$h, h2: h2$g, input: input$9 } = HTML;
    class LimiterCanvas {
        constructor(lim) {
            this._editorWidth = 200;
            this._editorHeight = 52;
            this._fill = SVG.path({ fill: ColorConfig.uiWidgetBackground, "pointer-events": "none" });
            this._ticks = SVG.svg({ "pointer-events": "none" });
            this._subticks = SVG.svg({ "pointer-events": "none" });
            this._boostCurve = SVG.path({ fill: "none", stroke: ColorConfig.textSelection, "stroke-width": 2, "pointer-events": "none" });
            this._boostDot = SVG.circle({ fill: ColorConfig.textSelection, stroke: "none", r: "3" });
            this._midCurve = SVG.path({ fill: "none", stroke: ColorConfig.primaryText, "stroke-width": 2, "pointer-events": "none" });
            this._limitCurve = SVG.path({ fill: "none", stroke: ColorConfig.linkAccent, "stroke-width": 2, "pointer-events": "none" });
            this._limitDot = SVG.circle({ fill: ColorConfig.linkAccent, stroke: "none", r: "3" });
            this._label0 = SVG.text({ x: "-1.5%", y: "148.5%", "pointer-events": "none", "font-size": "7pt", fill: "var(--secondary-text)" }, "0");
            this._label1 = SVG.text({ x: "48.2%", y: "148.5%", "pointer-events": "none", "font-size": "7pt", fill: "var(--secondary-text)" }, "1");
            this._label2 = SVG.text({ x: "98.2%", y: "148.5%", "pointer-events": "none", "font-size": "7pt", fill: "var(--secondary-text)" }, "2");
            this._inLabel = SVG.text({ x: "-5%", y: "113.5%", "pointer-events": "none", "font-size": "6pt", fill: "var(--secondary-text)" }, "In");
            this._outLabel = SVG.text({ x: "-9%", y: "131%", "pointer-events": "none", "font-size": "6pt", fill: "var(--secondary-text)" }, "Out");
            this._xAxisLabel = SVG.text({ x: "42%", y: "172%", "pointer-events": "none", "font-size": "7pt", fill: "var(--primary-text)" }, "Volume");
            this._yAxisLabel = SVG.text({ x: "55.2%", y: "160%", "pointer-events": "none", "font-size": "7pt", transform: "rotate(-90 30,120)", fill: "var(--primary-text)" }, "Gain");
            this._inVolumeBg = SVG.rect({ "pointer-events": "none", width: "100%", height: "6px", x: "0%", y: "105%", fill: ColorConfig.uiWidgetBackground });
            this._outVolumeBg = SVG.rect({ "pointer-events": "none", width: "100%", height: "6px", x: "0%", y: "120%", fill: ColorConfig.uiWidgetBackground });
            this._inVolumeBar = SVG.rect({ "pointer-events": "none", height: "6px", x: "0%", y: "105%", fill: "url('#volumeGrad')" });
            this._inVolumeCap = SVG.rect({ "pointer-events": "none", width: "2px", height: "6px", y: "105%", fill: ColorConfig.uiWidgetFocus });
            this._outVolumeBar = SVG.rect({ "pointer-events": "none", height: "6px", x: "0%", y: "120%", fill: "url('#volumeGrad')" });
            this._outVolumeCap = SVG.rect({ "pointer-events": "none", width: "2px", height: "6px", y: "120%", fill: ColorConfig.uiWidgetFocus });
            this._stop1 = SVG.stop({ "stop-color": "lime", offset: "30%" });
            this._stop2 = SVG.stop({ "stop-color": "orange", offset: "45%" });
            this._stop3 = SVG.stop({ "stop-color": "red", offset: "50%" });
            this._gradient = SVG.linearGradient({ id: "volumeGrad", gradientUnits: "userSpaceOnUse" }, this._stop1, this._stop2, this._stop3);
            this._defs = SVG.defs({}, this._gradient);
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; overflow: visible;`, width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._defs, this._fill, this._ticks, this._subticks, this._boostCurve, this._midCurve, this._limitCurve, this._boostDot, this._limitDot, this._label0, this._label1, this._label2, this._inLabel, this._outLabel, this._xAxisLabel, this._yAxisLabel, this._inVolumeBg, this._outVolumeBg, this._inVolumeBar, this._outVolumeBar, this._inVolumeCap, this._outVolumeCap);
            this.container = HTML.div({ class: "", style: "height: 4em; width: 80%; padding-bottom: 1.5em;" }, this._svg);
            for (let i = 0; i <= 2; i++) {
                this._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i * this._editorWidth / 2) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            for (let i = 1; i <= 3; i += 2) {
                this._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i * this._editorWidth / 4) - 1, y: 0, width: 1, height: this._editorHeight }));
            }
            this._limiterPrompt = lim;
        }
        animateVolume(inVolumeCap, historicInCap, outVolumeCap, historicOutCap) {
            this._inVolumeBar.setAttribute("width", "" + Math.min(this._editorWidth, inVolumeCap * (this._editorWidth / 2.0)));
            this._inVolumeCap.setAttribute("x", "" + Math.min(this._editorWidth, historicInCap * (this._editorWidth / 2.0)));
            this._outVolumeBar.setAttribute("width", "" + Math.min(this._editorWidth, outVolumeCap * (this._editorWidth / 2.0)));
            this._outVolumeCap.setAttribute("x", "" + Math.min(this._editorWidth, historicOutCap * (this._editorWidth / 2.0)));
        }
        render() {
            const controlPointToHeight = (point) => {
                return Math.max(0, (1 - (point / 5)) * (this._editorHeight - 1) + 1);
            };
            let lastValue = 0;
            let currentSubpathIdx = 0;
            let lastSubpathIdx = -1;
            let path = "";
            let subPaths = ["", "", ""];
            for (let i = 0; i < 64; i++) {
                let limiterRatio = +this._limiterPrompt.limitRatioSlider.value;
                limiterRatio = (limiterRatio < 10 ? limiterRatio / 10 : (limiterRatio - 9));
                let compressorRatio = +this._limiterPrompt.compressionRatioSlider.value;
                compressorRatio = (compressorRatio < 10 ? compressorRatio / 10 : (1 + (compressorRatio - 10) / 60));
                let limiterThreshold = +this._limiterPrompt.limitThresholdSlider.value;
                let compressorThreshold = +this._limiterPrompt.compressionThresholdSlider.value;
                let useVol = i * 2.0 / 64.0;
                let nextValue = 1 / 1.05;
                if (useVol >= limiterThreshold) {
                    nextValue = 1 / (1.05 * (useVol + 1 - limiterThreshold) * limiterRatio + (1 - limiterRatio));
                }
                else if (useVol < compressorThreshold) {
                    nextValue = 1 / (((useVol + 1 - compressorThreshold) * 0.8 + 0.25) * compressorRatio + 1.05 * (1 - compressorRatio));
                }
                if (i == 0) {
                    path += "M 0 " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                }
                if (currentSubpathIdx > lastSubpathIdx) {
                    if (lastSubpathIdx >= 0) {
                        subPaths[lastSubpathIdx] += "L " + prettyNumber(i * this._editorWidth / 64) + " " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                    }
                    subPaths[currentSubpathIdx] += "M " + prettyNumber(i * this._editorWidth / 64) + " " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                    if (currentSubpathIdx == 1 || (lastSubpathIdx == 0 && currentSubpathIdx == 2)) {
                        this._boostDot.setAttribute("cx", prettyNumber(i * this._editorWidth / 64));
                        this._boostDot.setAttribute("cy", prettyNumber(controlPointToHeight(nextValue)));
                    }
                    if (currentSubpathIdx == 2) {
                        this._limitDot.setAttribute("cx", prettyNumber(i * this._editorWidth / 64));
                        this._limitDot.setAttribute("cy", prettyNumber(controlPointToHeight(nextValue)));
                    }
                    lastSubpathIdx = currentSubpathIdx;
                }
                if (lastValue != 0 || nextValue != 0) {
                    path += "L ";
                    subPaths[currentSubpathIdx] += "L ";
                }
                else {
                    path += "M ";
                    subPaths[currentSubpathIdx] += "M ";
                }
                path += prettyNumber(i * this._editorWidth / 64) + " " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                subPaths[currentSubpathIdx] += prettyNumber(i * this._editorWidth / 64) + " " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                lastValue = nextValue;
                if (currentSubpathIdx == 0 && (i >= compressorThreshold * 32 - 2)) {
                    currentSubpathIdx++;
                }
                if (currentSubpathIdx == 1 && (i >= limiterThreshold * 32 - 2)) {
                    currentSubpathIdx++;
                }
            }
            const lastHeight = controlPointToHeight(lastValue);
            if (lastValue > 0) {
                path += "L " + (this._editorWidth - 1) + " " + prettyNumber(lastHeight) + " ";
                subPaths[currentSubpathIdx] += "L " + (this._editorWidth - 1) + " " + prettyNumber(lastHeight) + " ";
            }
            this._boostCurve.setAttribute("d", subPaths[0]);
            this._midCurve.setAttribute("d", subPaths[1]);
            this._limitCurve.setAttribute("d", subPaths[2]);
            this._fill.setAttribute("d", path + "L " + this._editorWidth + " " + prettyNumber(lastHeight) + " L " + this._editorWidth + " " + prettyNumber(this._editorHeight) + " L 0 " + prettyNumber(this._editorHeight) + " z ");
        }
    }
    class LimiterPrompt {
        constructor(_doc, _songEditor) {
            this._doc = _doc;
            this._songEditor = _songEditor;
            this.limiterCanvas = new LimiterCanvas(this);
            this._playButton = button$h({ style: "width: 55%;", type: "button" });
            this.limitDecaySlider = input$9({ title: "limit decay", style: `width: 5em; flex-grow: 1; margin: 0;`, type: "range", min: "1", max: "30", value: "4", step: "1" });
            this.limitRiseSlider = input$9({ title: "limit rise", style: `width: 5em; flex-grow: 1; margin: 0;`, type: "range", min: "2000", max: "10000", value: "4000", step: "250" });
            this.compressionThresholdSlider = input$9({ title: "compressor threshold", style: `width: 100%; flex-grow: 1; margin: 0;`, type: "range", min: "0", max: "1.1", value: "1", step: "0.05" });
            this.limitThresholdSlider = input$9({ title: "limiter threshold", style: `width: 100%; flex-grow: 1; margin: 0;`, type: "range", min: "0", max: "2", value: "1", step: "0.05" });
            this.compressionRatioSlider = input$9({ title: "compressor ratio", style: `width: 100%; flex-grow: 1; margin: 0;`, type: "range", min: "0", max: "20", value: "10", step: "1" });
            this.limitRatioSlider = input$9({ title: "limiter ratio", style: `width: 100%; flex-grow: 1; margin: 0;`, type: "range", min: "0", max: "20", value: "10", step: "1" });
            this.masterGainSlider = input$9({ title: "master gain", style: `width: 5em; flex-grow: 1; margin: 0;`, type: "range", min: "0", max: "5", value: "1", step: "0.02" });
            this.inVolumeHistoricTimer = 0.0;
            this.inVolumeHistoricCap = 0.0;
            this.outVolumeHistoricTimer = 0.0;
            this.outVolumeHistoricCap = 0.0;
            this._cancelButton = button$h({ class: "cancelButton" });
            this._okayButton = button$h({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._resetButton = button$h({ style: "width:45%;" }, "Reset");
            this.container = div$h({ class: "prompt noSelection", style: "width: 250px;" }, div$h({ class: "promptTitle" }, h2$g({ class: "limiterExt", style: "text-align: inherit;" }, ""), h2$g({ class: "limiterTitle" }, "Limiter Options")), div$h({ style: "display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;" }, this._playButton), div$h({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center;" }, this.limiterCanvas.container), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; margin-top: 1.5em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` }, ""), div$h({ style: `text-align: center; width: 33%; margin-right: 4.5%; color: ${ColorConfig.textSelection};` }, "Boost"), div$h({ style: `text-align: center; width: 33%; margin-right: 0%; color: ${ColorConfig.linkAccent};` }, "Cutoff")), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; margin-top: 0.5em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` }, "Threshold:"), div$h({ style: `width: 33%; margin-right: 4.5%;` }, this.compressionThresholdSlider), div$h({ style: `width: 33%; margin-right: 0%;` }, this.limitThresholdSlider)), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` }, "Ratio:"), div$h({ style: `width: 33%; margin-right: 4.5%;` }, this.compressionRatioSlider), div$h({ style: `width: 33%; margin-right: 0%;` }, this.limitRatioSlider)), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` }, "Limit Decay:"), this.limitDecaySlider), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` }, "Limit Rise:"), this.limitRiseSlider), div$h({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$h({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` }, "Master Gain:"), this.masterGainSlider), div$h({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton, this._resetButton), this._cancelButton);
            this._volumeUpdate = () => {
                this.inVolumeHistoricTimer--;
                if (this.inVolumeHistoricTimer <= 0) {
                    this.inVolumeHistoricCap -= 0.03;
                }
                if (this._doc.song.inVolumeCap > this.inVolumeHistoricCap) {
                    this.inVolumeHistoricCap = this._doc.song.inVolumeCap;
                    this.inVolumeHistoricTimer = 50;
                }
                this.outVolumeHistoricTimer--;
                if (this.outVolumeHistoricTimer <= 0) {
                    this.outVolumeHistoricCap -= 0.03;
                }
                if (this._doc.song.outVolumeCap > this.outVolumeHistoricCap) {
                    this.outVolumeHistoricCap = this._doc.song.outVolumeCap;
                    this.outVolumeHistoricTimer = 50;
                }
                this.limiterCanvas.animateVolume(this._doc.song.inVolumeCap, this.inVolumeHistoricCap, this._doc.song.outVolumeCap, this.outVolumeHistoricCap);
                window.requestAnimationFrame(this._volumeUpdate);
            };
            this._togglePlay = () => {
                this._songEditor.togglePlay();
                this.updatePlayButton();
            };
            this._whenInput = () => {
                if (+this.limitThresholdSlider.value < +this.compressionThresholdSlider.value) {
                    this.limitThresholdSlider.removeEventListener("input", this._whenInputFavorLimitThreshold);
                    this.limitThresholdSlider.value = this.compressionThresholdSlider.value;
                    this.limitThresholdSlider.addEventListener("input", this._whenInputFavorLimitThreshold);
                }
                this.limiterCanvas.render();
                this._updateLimiter();
            };
            this._whenInputFavorLimitThreshold = () => {
                if (+this.limitThresholdSlider.value < +this.compressionThresholdSlider.value) {
                    this.compressionThresholdSlider.removeEventListener("input", this._whenInput);
                    this.compressionThresholdSlider.value = this.limitThresholdSlider.value;
                    this.compressionThresholdSlider.addEventListener("input", this._whenInput);
                }
                this.limiterCanvas.render();
                this._updateLimiter();
            };
            this._close = () => {
                this.limitRatioSlider.value = "" + this.startingLimitRatio;
                this.compressionRatioSlider.value = "" + this.startingCompressionRatio;
                this.limitThresholdSlider.value = "" + this.startingLimitThreshold;
                this.compressionThresholdSlider.value = "" + this.startingCompressionThreshold;
                this.limitDecaySlider.value = "" + this.startingLimitDecay;
                this.limitRiseSlider.value = "" + this.startingLimitRise;
                this.masterGainSlider.value = "" + this.startingMasterGain;
                this._updateLimiter();
                this._doc.prompt = null;
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._resetButton.removeEventListener("click", this._resetDefaults);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this.whenKeyPressed);
                this.limitDecaySlider.removeEventListener("input", this._whenInput);
                this.limitRiseSlider.removeEventListener("input", this._whenInput);
                this.limitThresholdSlider.removeEventListener("input", this._whenInputFavorLimitThreshold);
                this.limitRatioSlider.removeEventListener("input", this._whenInput);
                this.compressionRatioSlider.removeEventListener("input", this._whenInput);
                this.compressionThresholdSlider.removeEventListener("input", this._whenInput);
                this.masterGainSlider.removeEventListener("input", this._whenInput);
                this._playButton.removeEventListener("click", this._togglePlay);
            };
            this.whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
                if (event.keyCode == 32) {
                    this._togglePlay();
                    event.preventDefault();
                }
            };
            this._resetDefaults = () => {
                if (this.limitRatioSlider.value != "10" || this.limitRiseSlider.value != "4000" || this.limitDecaySlider.value != "4" || this.limitThresholdSlider.value != "1" || this.compressionRatioSlider.value != "10" || this.compressionThresholdSlider.value != "1" || this.masterGainSlider.value != "1") {
                    this.limitRatioSlider.value = "10";
                    this.limitRiseSlider.value = "4000";
                    this.limitDecaySlider.value = "4";
                    this.limitThresholdSlider.value = "1";
                    this.compressionRatioSlider.value = "10";
                    this.compressionThresholdSlider.value = "1";
                    this.masterGainSlider.value = "1";
                    this._whenInput();
                }
            };
            this._updateLimiter = () => {
                this._doc.record(new ChangeLimiterSettings(this._doc, (+this.limitRatioSlider.value < 10 ? +this.limitRatioSlider.value / 10 : (+this.limitRatioSlider.value - 9)), (+this.compressionRatioSlider.value < 10 ? +this.compressionRatioSlider.value / 10 : (1 + (+this.compressionRatioSlider.value - 10) / 60)), +this.limitThresholdSlider.value, +this.compressionThresholdSlider.value, +this.limitRiseSlider.value, +this.limitDecaySlider.value, +this.masterGainSlider.value), true);
            };
            this._saveChanges = () => {
                this._updateLimiter();
                this._doc.prompt = null;
            };
            this._okayButton.addEventListener("click", this._saveChanges);
            this._resetButton.addEventListener("click", this._resetDefaults);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this.whenKeyPressed);
            this.limitRatioSlider.value = "" + (this._doc.song.limitRatio < 1 ? this._doc.song.limitRatio * 10 : 9 + this._doc.song.limitRatio);
            this.compressionRatioSlider.value = "" + (this._doc.song.compressionRatio < 1 ? this._doc.song.compressionRatio * 10 : 10 + (this._doc.song.compressionRatio - 1) * 60);
            this.limitThresholdSlider.value = "" + this._doc.song.limitThreshold;
            this.compressionThresholdSlider.value = "" + this._doc.song.compressionThreshold;
            this.limitDecaySlider.value = "" + this._doc.song.limitDecay;
            this.limitRiseSlider.value = "" + this._doc.song.limitRise;
            this.masterGainSlider.value = "" + this._doc.song.masterGain;
            this.startingLimitRatio = +this.limitRatioSlider.value;
            this.startingCompressionRatio = +this.compressionRatioSlider.value;
            this.startingLimitThreshold = +this.limitThresholdSlider.value;
            this.startingCompressionThreshold = +this.compressionThresholdSlider.value;
            this.startingLimitDecay = +this.limitDecaySlider.value;
            this.startingLimitRise = +this.limitRiseSlider.value;
            this.startingMasterGain = +this.masterGainSlider.value;
            this.limitDecaySlider.addEventListener("input", this._whenInput);
            this.limitRiseSlider.addEventListener("input", this._whenInput);
            this.limitRatioSlider.addEventListener("input", this._whenInput);
            this.limitThresholdSlider.addEventListener("input", this._whenInputFavorLimitThreshold);
            this.compressionRatioSlider.addEventListener("input", this._whenInput);
            this.compressionThresholdSlider.addEventListener("input", this._whenInput);
            this.masterGainSlider.addEventListener("input", this._whenInput);
            this._playButton.addEventListener("click", this._togglePlay);
            window.requestAnimationFrame(this._volumeUpdate);
            this.updatePlayButton();
            setTimeout(() => this._playButton.focus());
            this.limiterCanvas.render();
        }
        updatePlayButton() {
            if (this._doc.synth.playing) {
                this._playButton.classList.remove("playButton");
                this._playButton.classList.add("pauseButton");
                this._playButton.title = "Pause (Space)";
                this._playButton.innerText = "Pause";
            }
            else {
                this._playButton.classList.remove("pauseButton");
                this._playButton.classList.add("playButton");
                this._playButton.title = "Play (Space)";
                this._playButton.innerText = "Play";
            }
        }
    }

    const { button: button$g, div: div$g, h2: h2$f, input: input$8 } = HTML;
    class CustomScalePrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._flags = [];
            this._scaleFlags = [];
            this._scaleRows = [];
            this._cancelButton = button$g({ class: "cancelButton" });
            this._okayButton = button$g({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this.whenKeyPressed);
            };
            this.whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                for (var i = 1; i < this._scaleFlags.length; i++) {
                    this._flags[i] = this._scaleFlags[i].checked;
                }
                this._doc.prompt = null;
                this._doc.record(new ChangeCustomScale(this._doc, this._flags));
            };
            this._flags = _doc.song.scaleCustom.slice();
            let scaleHolder = div$g({});
            for (var i = 1; i < Config.pitchesPerOctave; i++) {
                this._scaleFlags[i] = input$8({ type: "checkbox", style: "width: 1em; padding: 0; margin-right: 4em;", "checked": this._flags[i], "value": i });
                this._scaleRows[i] = div$g({ style: "text-align: right; height: 2em;" }, "note " + i + ":", this._scaleFlags[i]);
                scaleHolder.appendChild(this._scaleRows[i]);
            }
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container = div$g({ class: "prompt noSelection", style: "width: 250px;" }, div$g({ class: "promptTitle" }, h2$f({ class: "sclaeExt", style: "text-align: inherit;" }, ""), h2$f({ class: "scaleTitle" }, "Custom Scale")), div$g({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end;" }, scaleHolder), div$g({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this.container.addEventListener("keydown", this.whenKeyPressed);
        }
    }

    class LoopEditor {
        constructor(_doc, _trackEditor) {
            this._doc = _doc;
            this._trackEditor = _trackEditor;
            this._editorHeight = 20;
            this._startMode = 0;
            this._endMode = 1;
            this._bothMode = 2;
            this._loopMode = 3;
            this._loopAtPointStart = -1;
            this._loopAtPointEnd = -1;
            this._loop = SVG.path({ fill: "none", stroke: ColorConfig.loopAccent, "stroke-width": 4 });
            this._barLoop = SVG.path({ fill: "none", stroke: ColorConfig.uiWidgetFocus, "stroke-width": 2 });
            this._highlight = SVG.path({ fill: ColorConfig.hoverPreview, "pointer-events": "none" });
            this._svg = SVG.svg({ style: `touch-action: pan-y; position: absolute;`, height: this._editorHeight }, this._loop, this._highlight, this._barLoop);
            this.container = HTML.div({ class: "loopEditor" }, this._svg);
            this._barWidth = 32;
            this._change = null;
            this._cursor = { startBar: -1, mode: -1 };
            this._mouseX = 0;
            this._clientStartX = 0;
            this._clientStartY = 0;
            this._startedScrolling = false;
            this._draggingHorizontally = false;
            this._mouseDown = false;
            this._mouseOver = false;
            this._renderedLoopStart = -1;
            this._renderedLoopStop = -1;
            this._renderedBarCount = 0;
            this._renderedBarWidth = -1;
            this._renderedBarLoopStart = -1;
            this._renderedBarLoopEnd = -1;
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
                this._updatePreview();
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
                this._updatePreview();
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.clientX || event.pageX) - boundingRect.left;
                this._updateCursorStatus();
                this._updatePreview();
                this._whenMouseMoved(event);
            };
            this._whenTouchPressed = (event) => {
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = event.touches[0].clientX - boundingRect.left;
                this._updateCursorStatus();
                this._updatePreview();
                this._clientStartX = event.touches[0].clientX;
                this._clientStartY = event.touches[0].clientY;
                this._draggingHorizontally = false;
                this._startedScrolling = false;
            };
            this._whenMouseMoved = (event) => {
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.clientX || event.pageX) - boundingRect.left;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (!this._mouseDown)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = event.touches[0].clientX - boundingRect.left;
                if (!this._draggingHorizontally && !this._startedScrolling) {
                    if (Math.abs(event.touches[0].clientY - this._clientStartY) > 10) {
                        this._startedScrolling = true;
                    }
                    else if (Math.abs(event.touches[0].clientX - this._clientStartX) > 10) {
                        this._draggingHorizontally = true;
                    }
                }
                if (this._draggingHorizontally) {
                    this._whenCursorMoved();
                    event.preventDefault();
                }
            };
            this._whenTouchReleased = (event) => {
                event.preventDefault();
                if (!this._startedScrolling) {
                    this._whenCursorMoved();
                    this._mouseOver = false;
                    this._whenCursorReleased(event);
                    this._updatePreview();
                }
                this._mouseDown = false;
            };
            this._whenCursorReleased = (event) => {
                if (this._change != null)
                    this._doc.record(this._change);
                this._change = null;
                this._mouseDown = false;
                this._updateCursorStatus();
                this._render();
            };
            this._documentChanged = () => {
                this._render();
            };
            this._updateCursorStatus();
            this._render();
            this._doc.notifier.watch(this._documentChanged);
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("mouseover", this._whenMouseOver);
            this.container.addEventListener("mouseout", this._whenMouseOut);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenTouchReleased);
            this.container.addEventListener("touchcancel", this._whenTouchReleased);
        }
        _updateCursorStatus() {
            const bar = this._mouseX / this._barWidth;
            this._cursor.startBar = bar;
            if (bar >= this._loopAtPointStart && bar <= this._loopAtPointEnd + 1) {
                this._cursor.mode = this._loopMode;
            }
            else if (bar > this._doc.song.loopStart - 0.25 && bar < this._doc.song.loopStart + this._doc.song.loopLength + 0.25) {
                if (bar - this._doc.song.loopStart < this._doc.song.loopLength * 0.5) {
                    this._cursor.mode = this._startMode;
                }
                else {
                    this._cursor.mode = this._endMode;
                }
            }
            else {
                this._cursor.mode = this._bothMode;
            }
        }
        _findEndPoints(middle) {
            let start = Math.round(middle - this._doc.song.loopLength / 2);
            let end = start + this._doc.song.loopLength;
            if (start < 0) {
                end -= start;
                start = 0;
            }
            if (end > this._doc.song.barCount) {
                start -= end - this._doc.song.barCount;
                end = this._doc.song.barCount;
            }
            return { start: start, length: end - start };
        }
        _whenCursorMoved() {
            if (this._mouseDown) {
                let oldStart = this._doc.song.loopStart;
                let oldEnd = this._doc.song.loopStart + this._doc.song.loopLength;
                if (this._change != null && this._doc.lastChangeWas(this._change)) {
                    oldStart = this._change.oldStart;
                    oldEnd = oldStart + this._change.oldLength;
                }
                const bar = this._mouseX / this._barWidth;
                let start;
                let end;
                let temp;
                if (this._cursor.mode == this._startMode) {
                    start = oldStart + Math.round(bar - this._cursor.startBar);
                    end = oldEnd;
                    if (start < 0)
                        start = 0;
                    if (start >= this._doc.song.barCount)
                        start = this._doc.song.barCount;
                    if (start == end) {
                        start = end - 1;
                    }
                    else if (start > end) {
                        temp = start;
                        start = end;
                        end = temp;
                    }
                    this._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, start, end - start);
                }
                else if (this._cursor.mode == this._endMode) {
                    start = oldStart;
                    end = oldEnd + Math.round(bar - this._cursor.startBar);
                    if (end < 0)
                        end = 0;
                    if (end >= this._doc.song.barCount)
                        end = this._doc.song.barCount;
                    if (end == start) {
                        end = start + 1;
                    }
                    else if (end < start) {
                        temp = start;
                        start = end;
                        end = temp;
                    }
                    this._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, start, end - start);
                }
                else if (this._cursor.mode == this._bothMode) {
                    const endPoints = this._findEndPoints(bar);
                    this._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, endPoints.start, endPoints.length);
                }
                else if (this._cursor.mode == this._loopMode) {
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                    this.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                }
                this._doc.synth.jumpIntoLoop();
                if (this._doc.prefs.autoFollow) {
                    new ChangeChannelBar(this._doc, this._doc.channel, Math.floor(this._doc.synth.playhead), true);
                }
                this._doc.setProspectiveChange(this._change);
            }
            else {
                this._updateCursorStatus();
                this._updatePreview();
            }
        }
        _updatePreview() {
            const showHighlight = this._mouseOver && !this._mouseDown;
            this._highlight.style.visibility = showHighlight ? "visible" : "hidden";
            if (showHighlight) {
                const radius = this._editorHeight / 2;
                let highlightStart = (this._doc.song.loopStart) * this._barWidth;
                let highlightStop = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth;
                if (this._cursor.mode == this._startMode) {
                    highlightStop = (this._doc.song.loopStart) * this._barWidth + radius * 2;
                }
                else if (this._cursor.mode == this._endMode) {
                    highlightStart = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth - radius * 2;
                }
                else if (this._cursor.mode == this._bothMode) {
                    const endPoints = this._findEndPoints(this._cursor.startBar);
                    highlightStart = (endPoints.start) * this._barWidth;
                    highlightStop = (endPoints.start + endPoints.length) * this._barWidth;
                }
                if (this._cursor.mode == this._loopMode) {
                    const barLoopStart = (this._loopAtPointStart + 0.5) * this._barWidth;
                    const barLoopEnd = (this._loopAtPointEnd + 0.5) * this._barWidth;
                    this._highlight.setAttribute("d", `M ${barLoopStart} ${radius * 1.7} ` +
                        `L ${barLoopStart - radius * 1.5} ${radius}` +
                        `L ${barLoopStart} ${radius * 0.3}` +
                        `L ${barLoopEnd} ${radius * 0.3}` +
                        `L ${barLoopEnd + radius * 1.5} ${radius}` +
                        `L ${barLoopEnd} ${radius * 1.7}` +
                        `z`);
                }
                else {
                    this._highlight.setAttribute("d", `M ${highlightStart + radius} ${4} ` +
                        `L ${highlightStop - radius} ${4} ` +
                        `A ${radius - 4} ${radius - 4} ${0} ${0} ${1} ${highlightStop - radius} ${this._editorHeight - 4} ` +
                        `L ${highlightStart + radius} ${this._editorHeight - 4} ` +
                        `A ${radius - 4} ${radius - 4} ${0} ${0} ${1} ${highlightStart + radius} ${4} ` +
                        `z`);
                }
            }
        }
        setLoopAt(startBar, endBar) {
            this._loopAtPointStart = startBar;
            this._loopAtPointEnd = endBar;
            this._trackEditor.render();
            this._render();
        }
        _render() {
            this._barWidth = this._doc.getBarWidth();
            const radius = this._editorHeight / 2;
            const loopStart = (this._doc.song.loopStart) * this._barWidth;
            const loopStop = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth;
            if (this._renderedBarCount != this._doc.song.barCount || this._renderedBarWidth != this._barWidth) {
                this._renderedBarCount = this._doc.song.barCount;
                this._renderedBarWidth = this._barWidth;
                const editorWidth = this._barWidth * this._doc.song.barCount;
                this.container.style.width = editorWidth + "px";
                this._svg.setAttribute("width", editorWidth + "");
            }
            if (this._renderedLoopStart != loopStart || this._renderedLoopStop != loopStop) {
                this._renderedLoopStart = loopStart;
                this._renderedLoopStop = loopStop;
                this._loop.setAttribute("d", `M ${loopStart + radius} ${2} ` +
                    `L ${loopStop - radius} ${2} ` +
                    `A ${radius - 2} ${radius - 2} ${0} ${0} ${1} ${loopStop - radius} ${this._editorHeight - 2} ` +
                    `L ${loopStart + radius} ${this._editorHeight - 2} ` +
                    `A ${radius - 2} ${radius - 2} ${0} ${0} ${1} ${loopStart + radius} ${2} ` +
                    `z`);
            }
            const barLoopStart = (this._loopAtPointStart + 0.5) * this._barWidth;
            const barLoopEnd = (this._loopAtPointEnd + 0.5) * this._barWidth;
            if (this._renderedBarLoopStart != barLoopStart || this._renderedBarLoopEnd != barLoopEnd) {
                if (barLoopStart < 0 || barLoopEnd < 0) {
                    this._barLoop.setAttribute("d", "");
                }
                else {
                    this._barLoop.setAttribute("d", `M ${barLoopStart} ${radius * 1.5} ` +
                        `L ${barLoopStart - radius} ${radius}` +
                        `L ${barLoopStart} ${radius * 0.5}` +
                        `L ${barLoopEnd} ${radius * 0.5}` +
                        `L ${barLoopEnd + radius} ${radius}` +
                        `L ${barLoopEnd} ${radius * 1.5}` +
                        `z`);
                }
                this._renderedBarLoopStart = barLoopStart;
                this._renderedBarLoopEnd = barLoopEnd;
            }
            this._updatePreview();
        }
    }

    const { button: button$f, div: div$f, span: span$4, h2: h2$e, input: input$7, br: br$1, select: select$b, option: option$b } = HTML;
    class MoveNotesSidewaysPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._beatsStepper = input$7({ style: "width: 3em; margin-left: 1em;", type: "number", step: "0.01", value: "0" });
            this._conversionStrategySelect = select$b({ style: "width: 100%;" }, option$b({ value: "overflow" }, "Overflow notes across bars."), option$b({ value: "wrapAround" }, "Wrap notes around within bars."));
            this._cancelButton = button$f({ class: "cancelButton" });
            this._okayButton = button$f({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$f({ class: "prompt noSelection", style: "width: 250px;" }, div$f({ class: "promptTitle" }, h2$e({ class: "mnsExt", style: "text-align: inherit;" }, ""), h2$e({ class: "mnsTitle" }, "Move Notes Sideways")), div$f({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$f({ style: "text-align: right;" }, "Beats to move:", br$1(), span$4({ style: `font-size: smaller; color: ${ColorConfig.secondaryText};` }, "(Negative is left, positive is right)")), this._beatsStepper), div$f({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$f({ class: "selectContainer", style: "width: 100%;" }, this._conversionStrategySelect)), div$f({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._beatsStepper.removeEventListener("blur", MoveNotesSidewaysPrompt._validateNumber);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                window.localStorage.setItem("moveNotesSidewaysStrategy", this._conversionStrategySelect.value);
                this._doc.prompt = null;
                this._doc.record(new ChangeMoveNotesSideways(this._doc, +this._beatsStepper.value, this._conversionStrategySelect.value), true);
            };
            this._beatsStepper.min = (-this._doc.song.beatsPerBar) + "";
            this._beatsStepper.max = this._doc.song.beatsPerBar + "";
            const lastStrategy = window.localStorage.getItem("moveNotesSidewaysStrategy");
            if (lastStrategy != null) {
                this._conversionStrategySelect.value = lastStrategy;
            }
            this._beatsStepper.select();
            setTimeout(() => this._beatsStepper.focus(), 100);
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._beatsStepper.addEventListener("blur", MoveNotesSidewaysPrompt._validateNumber);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
        static _validateNumber(event) {
            const input = event.target;
            let value = +input.value;
            value = Math.round(value * Config.partsPerBeat) / Config.partsPerBeat;
            value = Math.round(value * 100) / 100;
            input.value = Math.max(+input.min, Math.min(+input.max, value)) + "";
        }
    }

    class MuteEditor {
        constructor(_doc, _editor) {
            this._doc = _doc;
            this._editor = _editor;
            this._cornerFiller = HTML.div({ style: `background: ${ColorConfig.editorBackground}; position: sticky; bottom: 0; left: 0; width: 32px; height: 30px;` });
            this._loopButtonInput = HTML.button({ class: "songLoopButton", style: 'width: 100%;' });
            this._buttons = [];
            this._channelCounts = [];
            this._channelNameDisplay = HTML.div({ style: `background-color: ${ColorConfig.uiWidgetFocus}; white-space:nowrap; display: none; transform:translate(20px); width: auto; pointer-events: none; position: absolute; border-radius: 0.2em; z-index: 2;`, "color": ColorConfig.primaryText }, "");
            this._channelNameInput = new InputBox(HTML.input({ style: `color: ${ColorConfig.primaryText}; background-color: ${ColorConfig.uiWidgetFocus}; margin-top: -2px; display: none; width: 6em; position: absolute; border-radius: 0.2em; z-index: 2;`, "color": ColorConfig.primaryText }, ""), this._doc, (oldValue, newValue) => new ChangeChannelName(this._doc, oldValue, newValue));
            this._channelDropDown = HTML.select({ style: "width: 14px; left: 19px; height: 28px; position:absolute; opacity:0" }, HTML.option({ value: "rename" }, "Rename..."), HTML.option({ value: "chnUp" }, "Move Channel Up"), HTML.option({ value: "chnDown" }, "Move Channel Down"), HTML.option({ value: "chnMute" }, "Mute Channel"), HTML.option({ value: "chnSolo" }, "Solo Channel"), HTML.option({ value: "chnInsert" }, "Insert Channel Below"), HTML.option({ value: "chnDelete" }, "Delete This Channel"));
            this.container = HTML.div({ class: "muteEditor", style: "position: sticky; padding-top: " + Config.barEditorHeight + "px;" }, this._channelNameDisplay, this._channelNameInput.input, this._channelDropDown);
            this._editorHeight = 128;
            this._renderedPitchChannels = 0;
            this._renderedNoiseChannels = 0;
            this._renderedChannelHeight = -1;
            this._renderedModChannels = 0;
            this._channelDropDownChannel = 0;
            this._channelDropDownOpen = false;
            this._channelDropDownLastState = false;
            this._channelNameInputWhenInput = () => {
                let newValue = this._channelNameInput.input.value;
                if (newValue.length > 15) {
                    this._channelNameInput.input.value = newValue.substring(0, 15);
                }
            };
            this._channelNameInputClicked = (event) => {
                event.stopPropagation();
            };
            this._changeLoopType = () => {
                changeLoopType();
            };
            this._channelNameInputHide = () => {
                this._channelNameInput.input.style.setProperty("display", "none");
                this._channelNameDisplay.style.setProperty("display", "none");
            };
            this._channelDropDownClick = (event) => {
                this._channelDropDownOpen = !this._channelDropDownLastState;
                this._channelDropDownGetOpenedPosition(event);
            };
            this._channelDropDownBlur = () => {
                this._channelDropDownOpen = false;
                this._channelNameDisplay.style.setProperty("display", "none");
            };
            this._channelDropDownGetOpenedPosition = (event) => {
                this._channelDropDownLastState = this._channelDropDownOpen;
                this._channelDropDownChannel = Math.floor(Math.min(this._buttons.length, Math.max(0, parseInt(this._channelDropDown.style.getPropertyValue("top")) / ChannelRow.patternHeight)));
                this._doc.muteEditorChannel = this._channelDropDownChannel;
                this._channelNameDisplay.style.setProperty("display", "");
                if ((this._channelDropDownChannel < this._doc.song.pitchChannelCount && this._doc.song.pitchChannelCount == Config.pitchChannelCountMax)
                    || (this._channelDropDownChannel >= this._doc.song.pitchChannelCount && this._channelDropDownChannel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount && this._doc.song.noiseChannelCount == Config.noiseChannelCountMax)
                    || (this._channelDropDownChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount && this._doc.song.modChannelCount == Config.modChannelCountMax)) {
                    this._channelDropDown.options[5].disabled = true;
                }
                else {
                    this._channelDropDown.options[5].disabled = false;
                }
                if (this._channelDropDownChannel == 0 || this._channelDropDownChannel == this._doc.song.pitchChannelCount || this._channelDropDownChannel == this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                    this._channelDropDown.options[1].disabled = true;
                }
                else {
                    this._channelDropDown.options[1].disabled = false;
                }
                if (this._channelDropDownChannel == this._doc.song.pitchChannelCount - 1 || this._channelDropDownChannel == this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount - 1 || this._channelDropDownChannel == this._doc.song.getChannelCount() - 1) {
                    this._channelDropDown.options[2].disabled = true;
                }
                else {
                    this._channelDropDown.options[2].disabled = false;
                }
                if (this._doc.song.pitchChannelCount == 1 && this._channelDropDownChannel == 0) {
                    this._channelDropDown.options[6].disabled = true;
                }
                else {
                    this._channelDropDown.options[6].disabled = false;
                }
            };
            this._channelDropDownHandler = (event) => {
                this._channelNameDisplay.style.setProperty("display", "none");
                this._channelDropDown.style.setProperty("display", "none");
                this._channelDropDownOpen = false;
                event.stopPropagation();
                switch (this._channelDropDown.value) {
                    case "rename":
                        this._channelNameInput.input.style.setProperty("display", "");
                        this._channelNameInput.input.style.setProperty("transform", this._channelNameDisplay.style.getPropertyValue("transform"));
                        if (this._channelNameDisplay.textContent != null) {
                            this._channelNameInput.input.value = this._channelNameDisplay.textContent;
                        }
                        else {
                            this._channelNameInput.input.value = "";
                        }
                        this._channelNameInput.input.select();
                        break;
                    case "chnUp":
                        this._doc.record(new ChangeChannelOrder(this._doc, this._channelDropDownChannel, this._channelDropDownChannel, -1));
                        break;
                    case "chnDown":
                        this._doc.record(new ChangeChannelOrder(this._doc, this._channelDropDownChannel, this._channelDropDownChannel, 1));
                        break;
                    case "chnMute":
                        this._doc.song.channels[this._channelDropDownChannel].muted = !this._doc.song.channels[this._channelDropDownChannel].muted;
                        this.render();
                        break;
                    case "chnSolo": {
                        let shouldSolo = false;
                        for (let channel = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {
                            if (this._doc.song.channels[channel].muted == (channel == this._channelDropDownChannel)) {
                                shouldSolo = true;
                                channel = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount;
                            }
                        }
                        if (shouldSolo) {
                            for (let channel = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {
                                this._doc.song.channels[channel].muted = (channel != this._channelDropDownChannel);
                            }
                        }
                        else {
                            for (let channel = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {
                                this._doc.song.channels[channel].muted = false;
                            }
                        }
                        this.render();
                        break;
                    }
                    case "chnInsert": {
                        this._doc.channel = this._channelDropDownChannel;
                        this._doc.selection.resetBoxSelection();
                        this._doc.selection.insertChannel();
                        break;
                    }
                    case "chnDelete": {
                        this._doc.record(new ChangeRemoveChannel(this._doc, this._channelDropDownChannel, this._channelDropDownChannel));
                        break;
                    }
                }
                if (this._channelDropDown.value != "rename")
                    this._editor.refocusStage();
                this._channelDropDown.selectedIndex = -1;
            };
            this._onClick = (event) => {
                const index = this._buttons.indexOf(event.target);
                if (index == -1)
                    return;
                let xPos = event.clientX - this._buttons[0].getBoundingClientRect().left;
                if (xPos < 21.0) {
                    this._doc.song.channels[index].muted = !this._doc.song.channels[index].muted;
                }
                this._doc.notifier.changed();
            };
            this._onMouseMove = (event) => {
                const index = this._buttons.indexOf(event.target);
                if (index == -1) {
                    if (!this._channelDropDownOpen && event.target != this._channelNameDisplay && event.target != this._channelDropDown) {
                        this._channelNameDisplay.style.setProperty("display", "none");
                        this._channelDropDown.style.setProperty("display", "none");
                        this._channelDropDown.style.setProperty("width", "0px");
                    }
                    return;
                }
                if (this._channelDropDownOpen && this._channelNameDisplay.style.getPropertyValue("display") == "none" && this._channelNameInput.input.style.getPropertyValue("display") == "none") {
                    this._channelDropDownOpen = false;
                }
                let xPos = event.clientX - this._buttons[0].getBoundingClientRect().left;
                if (xPos >= 21.0) {
                    if (!this._channelDropDownOpen) {
                        this._channelDropDown.style.setProperty("display", "");
                        var height = ChannelRow.patternHeight;
                        this._channelNameDisplay.style.setProperty("transform", "translate(20px, " + (height / 4 + height * index) + "px)");
                        if (this._doc.song.channels[index].name != "") {
                            this._channelNameDisplay.textContent = this._doc.song.channels[index].name;
                            this._channelNameDisplay.style.setProperty("display", "");
                        }
                        else {
                            if (index < this._doc.song.pitchChannelCount) {
                                this._channelNameDisplay.textContent = "Pitch " + (index + 1);
                            }
                            else if (index < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                                this._channelNameDisplay.textContent = "Noise " + (index - this._doc.song.pitchChannelCount + 1);
                            }
                            else {
                                this._channelNameDisplay.textContent = "Mod " + (index - this._doc.song.pitchChannelCount - this._doc.song.noiseChannelCount + 1);
                            }
                            this._channelNameDisplay.style.setProperty("display", "none");
                        }
                        this._channelDropDown.style.top = (Config.barEditorHeight + 2 + index * ChannelRow.patternHeight) + "px";
                        this._channelDropDown.style.setProperty("width", "15px");
                    }
                }
                else {
                    if (!this._channelDropDownOpen) {
                        this._channelNameDisplay.style.setProperty("display", "none");
                        this._channelDropDown.style.setProperty("display", "none");
                        this._channelDropDown.style.setProperty("width", "0px");
                    }
                }
            };
            this._onMouseLeave = (event) => {
                if (!this._channelDropDownOpen) {
                    this._channelNameDisplay.style.setProperty("display", "none");
                    this._channelDropDown.style.setProperty("width", "0px");
                }
            };
            this.container.addEventListener("click", this._onClick);
            this.container.addEventListener("mousemove", this._onMouseMove);
            this.container.addEventListener("mouseleave", this._onMouseLeave);
            this._channelDropDown.selectedIndex = -1;
            this._channelDropDown.addEventListener("change", this._channelDropDownHandler);
            this._channelDropDown.addEventListener("mousedown", this._channelDropDownGetOpenedPosition);
            this._channelDropDown.addEventListener("blur", this._channelDropDownBlur);
            this._channelDropDown.addEventListener("click", this._channelDropDownClick);
            this._channelNameInput.input.addEventListener("change", this._channelNameInputHide);
            this._channelNameInput.input.addEventListener("blur", this._channelNameInputHide);
            this._channelNameInput.input.addEventListener("mousedown", this._channelNameInputClicked);
            this._channelNameInput.input.addEventListener("input", this._channelNameInputWhenInput);
            this._loopButtonInput.addEventListener("click", this._changeLoopType);
        }
        onKeyUp(event) {
            switch (event.keyCode) {
                case 27:
                    this._channelDropDownOpen = false;
                    this._channelNameDisplay.style.setProperty("display", "none");
                    break;
                case 13:
                    this._channelDropDownOpen = false;
                    this._channelNameDisplay.style.setProperty("display", "none");
                    break;
            }
        }
        render() {
            if (!this._doc.prefs.enableChannelMuting)
                return;
            let startingChannelCount = this._buttons.length;
            if (this._buttons.length != this._doc.song.getChannelCount()) {
                for (let y = this._buttons.length; y < this._doc.song.getChannelCount(); y++) {
                    const channelCountText = HTML.div({ class: "noSelection muteButtonText", style: "display: table-cell; -webkit-text-stroke: 1.5px; vertical-align: middle; text-align: center; -webkit-user-select: none; -webkit-touch-callout: none; -moz-user-select: none; -ms-user-select: none; user-select: none; pointer-events: none; width: 12px; height: 20px; transform: translate(0px, 1px);" });
                    const muteButton = HTML.div({ class: "mute-button", title: "Mute (M), Mute All (⇧M), Solo (S), Exclude (⇧S)", style: `display: block; pointer-events: none; width: 16px; height: 20px; transform: translate(2px, 1px);` });
                    const muteContainer = HTML.div({ style: `align-items: center; height: 20px; margin: 0px; display: table; flex-direction: row; justify-content: space-between;` }, [
                        muteButton,
                        channelCountText,
                    ]);
                    this.container.appendChild(muteContainer);
                    this._buttons[y] = muteContainer;
                    this._channelCounts[y] = channelCountText;
                }
                for (let y = this._doc.song.getChannelCount(); y < this._buttons.length; y++) {
                    this.container.removeChild(this._buttons[y]);
                }
                this._buttons.length = this._doc.song.getChannelCount();
                this.container.appendChild(this._cornerFiller);
                this._cornerFiller.appendChild(this._loopButtonInput);
            }
            for (let y = 0; y < this._doc.song.getChannelCount(); y++) {
                if (this._doc.song.channels[y].muted) {
                    this._buttons[y].children[0].classList.add("muted");
                    if (y < this._doc.song.pitchChannelCount)
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgPitchDim;
                    else if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgNoiseDim;
                    else
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgModDim;
                }
                else {
                    this._buttons[y].children[0].classList.remove("muted");
                    if (y < this._doc.song.pitchChannelCount)
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgPitch;
                    else if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgNoise;
                    else
                        this._channelCounts[y].style.color = ColorConfig.trackEditorBgMod;
                }
            }
            if (this._renderedChannelHeight != ChannelRow.patternHeight || startingChannelCount != this._buttons.length) {
                for (let y = 0; y < this._doc.song.getChannelCount(); y++) {
                    this._buttons[y].style.marginTop = ((ChannelRow.patternHeight - 20) / 2) + "px";
                    this._buttons[y].style.marginBottom = ((ChannelRow.patternHeight - 20) / 2) + "px";
                }
            }
            if (this._renderedModChannels != this._doc.song.modChannelCount || startingChannelCount != this._buttons.length) {
                for (let y = 0; y < this._doc.song.getChannelCount(); y++) {
                    if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                        this._buttons[y].children[0].classList.remove("modMute");
                    }
                    else {
                        this._buttons[y].children[0].classList.add("modMute");
                    }
                }
            }
            if (this._renderedModChannels != this._doc.song.modChannelCount || this._renderedPitchChannels != this._doc.song.pitchChannelCount || this._renderedNoiseChannels != this._doc.song.noiseChannelCount) {
                for (let y = 0; y < this._doc.song.getChannelCount(); y++) {
                    if (y < this._doc.song.pitchChannelCount) {
                        let val = (y + 1);
                        this._channelCounts[y].textContent = val + "";
                        this._channelCounts[y].style.fontSize = (val >= 10) ? "xx-small" : "inherit";
                    }
                    else if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                        let val = (y - this._doc.song.pitchChannelCount + 1);
                        this._channelCounts[y].textContent = val + "";
                        this._channelCounts[y].style.fontSize = (val >= 10) ? "xx-small" : "inherit";
                    }
                    else {
                        let val = (y - this._doc.song.pitchChannelCount - this._doc.song.noiseChannelCount + 1);
                        this._channelCounts[y].textContent = val + "";
                        this._channelCounts[y].style.fontSize = (val >= 10) ? "xx-small" : "inherit";
                    }
                }
                this._renderedPitchChannels = this._doc.song.pitchChannelCount;
                this._renderedNoiseChannels = this._doc.song.noiseChannelCount;
                this._renderedModChannels = this._doc.song.modChannelCount;
            }
            if (startingChannelCount != this._buttons.length || this._renderedChannelHeight != ChannelRow.patternHeight) {
                this._renderedChannelHeight = ChannelRow.patternHeight;
                this._editorHeight = Config.barEditorHeight + this._doc.song.getChannelCount() * ChannelRow.patternHeight;
                this._channelNameDisplay.style.setProperty("display", "none");
                this.container.style.height = (this._editorHeight + 16) + "px";
                if (ChannelRow.patternHeight < 27) {
                    this._channelNameDisplay.style.setProperty("margin-top", "-2px");
                    this._channelDropDown.style.setProperty("margin-top", "-4px");
                    this._channelNameInput.input.style.setProperty("margin-top", "-4px");
                }
                else if (ChannelRow.patternHeight < 30) {
                    this._channelNameDisplay.style.setProperty("margin-top", "-1px");
                    this._channelDropDown.style.setProperty("margin-top", "-3px");
                    this._channelNameInput.input.style.setProperty("margin-top", "-3px");
                }
                else {
                    this._channelNameDisplay.style.setProperty("margin-top", "0px");
                    this._channelDropDown.style.setProperty("margin-top", "0px");
                    this._channelNameInput.input.style.setProperty("margin-top", "-2px");
                }
            }
        }
    }

    class OctaveScrollBar {
        constructor(_doc, _piano) {
            this._doc = _doc;
            this._piano = _piano;
            this._editorWidth = 20;
            this._editorHeight = 481;
            this._notchHeight = 4.0;
            this._octaveCount = Config.pitchOctaves;
            this._octaveHeight = (this._editorHeight - this._notchHeight) / this._octaveCount;
            this._handle = SVG.rect({ fill: "var(--octave-scrollbar, var(--ui-widget-background, #444444))", x: 2, y: 0, width: this._editorWidth - 4 });
            this._handleHighlight = SVG.rect({ fill: "none", stroke: ColorConfig.hoverPreview, "stroke-width": 2, "pointer-events": "none", x: 1, y: 0, width: this._editorWidth - 2 });
            this._upHighlight = SVG.path({ fill: ColorConfig.hoverPreview, "pointer-events": "none" });
            this._downHighlight = SVG.path({ fill: ColorConfig.hoverPreview, "pointer-events": "none" });
            this._svg = SVG.svg({ style: "background-color: ${ColorConfig.editorBackground}; touch-action: pan-x; position: absolute;", width: this._editorWidth, height: "100%", viewBox: "0 0 20 " + this._editorHeight, preserveAspectRatio: "none" });
            this.container = HTML.div({ id: "octaveScrollBarContainer", style: "width: 20px; height: 100%; overflow: hidden; position: relative; flex-shrink: 0;" }, this._svg);
            this._mouseY = 0;
            this._mouseDown = false;
            this._mouseOver = false;
            this._dragging = false;
            this._renderedBarBottom = -1;
            this._renderedVisibleOctaveCount = -1;
            this._change = null;
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
                this._updatePreview();
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
                this._updatePreview();
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                if (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel))
                    return;
                this._updatePreview();
                if (this._mouseY >= this._barBottom - this._barHeight && this._mouseY <= this._barBottom) {
                    this._dragging = true;
                    this._change = null;
                    this._dragStart = this._mouseY;
                }
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                if (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel))
                    return;
                this._updatePreview();
                if (this._mouseY >= this._barBottom - this._barHeight && this._mouseY <= this._barBottom) {
                    this._dragging = true;
                    this._change = null;
                    this._dragStart = this._mouseY;
                }
            };
            this._whenMouseMoved = (event) => {
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (!this._doc.song.getChannelIsNoise(this._doc.channel) && !this._doc.song.getChannelIsMod(this._doc.channel) && this._mouseDown) {
                    if (this._dragging) {
                        if (this._change != null)
                            this._doc.record(this._change);
                    }
                    else {
                        const visibleOctaveCount = this._doc.getVisibleOctaveCount();
                        const scrollableOctaves = Config.pitchOctaves - visibleOctaveCount;
                        const canReplaceLastChange = this._doc.lastChangeWas(this._change);
                        const oldValue = canReplaceLastChange ? this._change.oldValue : this._doc.song.channels[this._doc.channel].octave;
                        const currentOctave = this._doc.getBaseVisibleOctave(this._doc.channel);
                        if (this._mouseY < this._barBottom - this._barHeight * 0.5) {
                            if (currentOctave < scrollableOctaves) {
                                this._change = new ChangeOctave(this._doc, oldValue, Math.floor(currentOctave + 1 + visibleOctaveCount * 0.5));
                                this._doc.record(this._change, canReplaceLastChange);
                            }
                        }
                        else {
                            if (currentOctave > 0) {
                                this._change = new ChangeOctave(this._doc, oldValue, Math.floor(currentOctave - 1 + visibleOctaveCount * 0.5));
                                this._doc.record(this._change, canReplaceLastChange);
                            }
                        }
                    }
                }
                this._mouseDown = false;
                this._dragging = false;
                this._updatePreview();
            };
            this._documentChanged = () => {
                this._barBottom = this._editorHeight - (this._octaveHeight * this._doc.getBaseVisibleOctave(this._doc.channel));
                this._svg.style.visibility = (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) ? "hidden" : "visible";
                const visibleOctaveCount = this._doc.getVisibleOctaveCount();
                if (this._renderedBarBottom != this._barBottom || this._renderedVisibleOctaveCount != visibleOctaveCount) {
                    this._renderedBarBottom = this._barBottom;
                    this._renderedVisibleOctaveCount = visibleOctaveCount;
                    this._barHeight = (this._octaveHeight * visibleOctaveCount + this._notchHeight);
                    this._handle.setAttribute("height", String(this._barHeight));
                    this._handleHighlight.setAttribute("height", String(this._barHeight));
                    this._handle.setAttribute("y", String(this._barBottom - this._barHeight));
                    this._handleHighlight.setAttribute("y", String(this._barBottom - this._barHeight));
                    this._piano.forceRender();
                }
                this._updatePreview();
            };
            this._doc.notifier.watch(this._documentChanged);
            this._documentChanged();
            this._svg.appendChild(this._handle);
            for (let i = 0; i <= this._octaveCount; i++) {
                this._svg.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: 0, y: i * this._octaveHeight, width: this._editorWidth, height: this._notchHeight }));
            }
            this._svg.appendChild(this._handleHighlight);
            this._svg.appendChild(this._upHighlight);
            this._svg.appendChild(this._downHighlight);
            const center = this._editorWidth * 0.5;
            const base = 20;
            const tip = 9;
            const arrowWidth = 6;
            this._upHighlight.setAttribute("d", `M ${center} ${tip} L ${center + arrowWidth} ${base} L ${center - arrowWidth} ${base} z`);
            this._downHighlight.setAttribute("d", `M ${center} ${this._editorHeight - tip} L ${center + arrowWidth} ${this._editorHeight - base} L ${center - arrowWidth} ${this._editorHeight - base} z`);
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("mouseover", this._whenMouseOver);
            this.container.addEventListener("mouseout", this._whenMouseOut);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _whenCursorMoved() {
            if (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel))
                return;
            if (this._dragging) {
                const visibleOctaveCount = this._doc.getVisibleOctaveCount();
                const scrollableOctaves = Config.pitchOctaves - visibleOctaveCount;
                const continuingProspectiveChange = this._doc.lastChangeWas(this._change);
                const oldValue = continuingProspectiveChange ? this._change.oldValue : this._doc.song.channels[this._doc.channel].octave;
                const currentOctave = this._doc.getBaseVisibleOctave(this._doc.channel);
                let octave = currentOctave;
                while (this._mouseY - this._dragStart < -this._octaveHeight * 0.5) {
                    if (octave < scrollableOctaves) {
                        octave++;
                        this._dragStart -= this._octaveHeight;
                    }
                    else {
                        break;
                    }
                }
                while (this._mouseY - this._dragStart > this._octaveHeight * 0.5) {
                    if (octave > 0) {
                        octave--;
                        this._dragStart += this._octaveHeight;
                    }
                    else {
                        break;
                    }
                }
                this._change = new ChangeOctave(this._doc, oldValue, Math.floor(octave + visibleOctaveCount * 0.5));
                this._doc.setProspectiveChange(this._change);
            }
            if (this._mouseOver)
                this._updatePreview();
        }
        _updatePreview() {
            const showHighlight = this._mouseOver && !this._mouseDown;
            let showUpHighlight = false;
            let showDownHighlight = false;
            let showHandleHighlight = false;
            if (showHighlight) {
                if (this._mouseY < this._barBottom - this._barHeight) {
                    showUpHighlight = true;
                }
                else if (this._mouseY > this._barBottom) {
                    showDownHighlight = true;
                }
                else {
                    showHandleHighlight = true;
                }
            }
            this._upHighlight.style.visibility = showUpHighlight ? "inherit" : "hidden";
            this._downHighlight.style.visibility = showDownHighlight ? "inherit" : "hidden";
            this._handleHighlight.style.visibility = showHandleHighlight ? "inherit" : "hidden";
        }
    }

    var __awaiter = (exports && exports.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const id = ((Math.random() * 0xffffffff) >>> 0).toString(16);
    class MidiInputHandler {
        constructor(_doc) {
            this._doc = _doc;
            this._takeMidiHandlerFocus = (event) => {
                localStorage.setItem("midiHandlerId", id);
            };
            this._handleStateChange = (event) => {
                if (event.port.type !== "input")
                    return;
                switch (event.port.state) {
                    case "connected":
                        this._registerMidiInput(event.port);
                        break;
                    case "disconnected":
                        this._unregisterMidiInput(event.port);
                        break;
                }
            };
            this._registerMidiInput = (midiInput) => {
                midiInput.addEventListener("midimessage", this._onMidiMessage);
            };
            this._unregisterMidiInput = (midiInput) => {
                midiInput.removeEventListener("midimessage", this._onMidiMessage);
                this._doc.performance.clearAllPitches();
            };
            this._onMidiMessage = (event) => {
                if (!this._doc.prefs.enableMidi || localStorage.getItem("midiHandlerId") != id)
                    return;
                const isDrum = this._doc.song.getChannelIsNoise(this._doc.channel);
                let [eventType, key, velocity] = event.data;
                eventType &= 0xF0;
                if (isDrum) {
                    const drum = analogousDrumMap[key];
                    if (drum != undefined) {
                        key = drum.frequency;
                    }
                    else {
                        return;
                    }
                }
                else {
                    key -= Config.keys[this._doc.song.key].basePitch;
                    if (key < 0 || key > Config.maxPitch)
                        return;
                }
                if (eventType == 144 && velocity == 0) {
                    eventType = 128;
                }
                switch (eventType) {
                    case 144:
                        this._doc.synth.preferLowerLatency = true;
                        this._doc.performance.addPerformedPitch(key);
                        break;
                    case 128:
                        this._doc.performance.removePerformedPitch(key);
                        break;
                }
            };
            this.registerMidiAccessHandler();
        }
        registerMidiAccessHandler() {
            return __awaiter(this, void 0, void 0, function* () {
                if (navigator.requestMIDIAccess == null)
                    return;
                try {
                    const midiAccess = yield navigator.requestMIDIAccess();
                    midiAccess.inputs.forEach(this._registerMidiInput);
                    midiAccess.addEventListener("statechange", this._handleStateChange);
                    this._takeMidiHandlerFocus();
                    window.addEventListener("focus", this._takeMidiHandlerFocus);
                }
                catch (e) {
                    console.error("Failed to get MIDI access", e);
                }
            });
        }
    }

    class KeyboardLayout {
        static keyPosToPitch(doc, x, y, keyboardLayout) {
            let pitchOffset = null;
            let forcedKey = null;
            switch (keyboardLayout) {
                case "wickiHayden":
                    pitchOffset = y * 5 + x * 2 - 2;
                    break;
                case "songScale":
                    const scaleFlags = doc.song.scale == Config.scales.dictionary["Custom"].index ? doc.song.scaleCustom : Config.scales[doc.song.scale].flags;
                    const scaleIndices = scaleFlags.map((flag, index) => flag ? index : null).filter((index) => index != null);
                    pitchOffset = (y - 1 + Math.floor(x / scaleIndices.length)) * Config.pitchesPerOctave + scaleIndices[(x + scaleIndices.length) % scaleIndices.length];
                    break;
                case "pianoAtC":
                    pitchOffset = KeyboardLayout._pianoAtC[y][x];
                    forcedKey = Config.keys.dictionary["C"].basePitch;
                    break;
                case "pianoAtA":
                    pitchOffset = KeyboardLayout._pianoAtA[y][x];
                    forcedKey = Config.keys.dictionary["A"].basePitch;
                    break;
                case "pianoTransposingC":
                    pitchOffset = KeyboardLayout._pianoAtC[y][x];
                    break;
                case "pianoTransposingA":
                    pitchOffset = KeyboardLayout._pianoAtA[y][x];
                    break;
            }
            if (pitchOffset == null)
                return null;
            const octaveOffset = Math.max(0, doc.song.channels[doc.channel].octave - 1) * Config.pitchesPerOctave;
            let keyOffset = 0;
            if (forcedKey != null) {
                const keyBasePitch = Config.keys[doc.song.key].basePitch;
                keyOffset = (forcedKey - keyBasePitch + 144) % 12;
            }
            const pitch = octaveOffset + keyOffset + pitchOffset;
            if (pitch < 0 || pitch > Config.maxPitch)
                return null;
            return pitch;
        }
        constructor(_doc) {
            this._doc = _doc;
            this._possiblyPlayingPitchesFromKeyboard = false;
            this._onWindowBlur = (event) => {
                if (this._possiblyPlayingPitchesFromKeyboard) {
                    this._doc.performance.clearAllPitches();
                    this._possiblyPlayingPitchesFromKeyboard = false;
                }
            };
            window.addEventListener("blur", this._onWindowBlur);
        }
        handleKeyEvent(event, pressed) {
            switch (event.code) {
                case "Backquote":
                    this.handleKey(-1, 3, pressed);
                    break;
                case "Digit1":
                    this.handleKey(0, 3, pressed);
                    break;
                case "Digit2":
                    this.handleKey(1, 3, pressed);
                    break;
                case "Digit3":
                    this.handleKey(2, 3, pressed);
                    break;
                case "Digit4":
                    this.handleKey(3, 3, pressed);
                    break;
                case "Digit5":
                    this.handleKey(4, 3, pressed);
                    break;
                case "Digit6":
                    this.handleKey(5, 3, pressed);
                    break;
                case "Digit7":
                    this.handleKey(6, 3, pressed);
                    break;
                case "Digit8":
                    this.handleKey(7, 3, pressed);
                    break;
                case "Digit9":
                    this.handleKey(8, 3, pressed);
                    break;
                case "Digit0":
                    this.handleKey(9, 3, pressed);
                    break;
                case "Minus":
                    this.handleKey(10, 3, pressed);
                    break;
                case "Equal":
                    this.handleKey(11, 3, pressed);
                    break;
                case "IntlYen":
                    this.handleKey(12, 3, pressed);
                    break;
                case "KeyQ":
                    this.handleKey(0, 2, pressed);
                    break;
                case "KeyW":
                    this.handleKey(1, 2, pressed);
                    break;
                case "KeyE":
                    this.handleKey(2, 2, pressed);
                    break;
                case "KeyR":
                    this.handleKey(3, 2, pressed);
                    break;
                case "KeyT":
                    this.handleKey(4, 2, pressed);
                    break;
                case "KeyY":
                    this.handleKey(5, 2, pressed);
                    break;
                case "KeyU":
                    this.handleKey(6, 2, pressed);
                    break;
                case "KeyI":
                    this.handleKey(7, 2, pressed);
                    break;
                case "KeyO":
                    this.handleKey(8, 2, pressed);
                    break;
                case "KeyP":
                    this.handleKey(9, 2, pressed);
                    break;
                case "BracketLeft":
                    this.handleKey(10, 2, pressed);
                    break;
                case "BracketRight":
                    this.handleKey(11, 2, pressed);
                    break;
                case "Backslash":
                    if (event.key == "\\" || event.key == "|") {
                        this.handleKey(12, 2, pressed);
                    }
                    else {
                        this.handleKey(11, 1, pressed);
                    }
                    break;
                case "KeyA":
                    this.handleKey(0, 1, pressed);
                    break;
                case "KeyS":
                    this.handleKey(1, 1, pressed);
                    break;
                case "KeyD":
                    this.handleKey(2, 1, pressed);
                    break;
                case "KeyF":
                    this.handleKey(3, 1, pressed);
                    break;
                case "KeyG":
                    this.handleKey(4, 1, pressed);
                    break;
                case "KeyH":
                    this.handleKey(5, 1, pressed);
                    break;
                case "KeyJ":
                    this.handleKey(6, 1, pressed);
                    break;
                case "KeyK":
                    this.handleKey(7, 1, pressed);
                    break;
                case "KeyL":
                    this.handleKey(8, 1, pressed);
                    break;
                case "Semicolon":
                    this.handleKey(9, 1, pressed);
                    break;
                case "Quote":
                    this.handleKey(10, 1, pressed);
                    break;
                case "IntlHash":
                    this.handleKey(11, 1, pressed);
                    break;
                case "IntlBackslash":
                    this.handleKey(-1, 0, pressed);
                    break;
                case "KeyZ":
                    this.handleKey(0, 0, pressed);
                    break;
                case "KeyX":
                    this.handleKey(1, 0, pressed);
                    break;
                case "KeyC":
                    this.handleKey(2, 0, pressed);
                    break;
                case "KeyV":
                    this.handleKey(3, 0, pressed);
                    break;
                case "KeyB":
                    this.handleKey(4, 0, pressed);
                    break;
                case "KeyN":
                    this.handleKey(5, 0, pressed);
                    break;
                case "KeyM":
                    this.handleKey(6, 0, pressed);
                    break;
                case "Comma":
                    this.handleKey(7, 0, pressed);
                    break;
                case "Period":
                    this.handleKey(8, 0, pressed);
                    break;
                case "Slash":
                    this.handleKey(9, 0, pressed);
                    break;
                case "IntlRo":
                    this.handleKey(10, 0, pressed);
                    break;
                default: return;
            }
            event.preventDefault();
        }
        handleKey(x, y, pressed) {
            const isDrum = this._doc.song.getChannelIsNoise(this._doc.channel);
            if (isDrum) {
                if (x >= 0 && x < Config.drumCount) {
                    if (pressed) {
                        this._doc.synth.preferLowerLatency = true;
                        this._doc.performance.addPerformedPitch(x);
                        this._possiblyPlayingPitchesFromKeyboard = true;
                    }
                    else {
                        this._doc.performance.removePerformedPitch(x);
                    }
                }
                return;
            }
            const pitch = KeyboardLayout.keyPosToPitch(this._doc, x, y, this._doc.prefs.keyboardLayout);
            if (pitch != null) {
                if (pressed) {
                    this._doc.synth.preferLowerLatency = true;
                    this._doc.performance.addPerformedPitch(pitch);
                    this._possiblyPlayingPitchesFromKeyboard = true;
                }
                else {
                    this._doc.performance.removePerformedPitch(pitch);
                }
            }
        }
    }
    KeyboardLayout._pianoAtC = [
        [0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 17],
        [null, 1, 3, null, 6, 8, 10, null, 13, 15, null, 18],
        [12, 14, 16, 17, 19, 21, 23, 24, 26, 28, 29, 31, 33],
        [null, 13, 15, null, 18, 20, 22, null, 25, 27, null, 30, 32],
    ];
    KeyboardLayout._pianoAtA = [
        [0, 2, 3, 5, 7, 8, 10, 12, 14, 15, 17],
        [-1, 1, null, 4, 6, null, 9, 11, 13, null, 16, 18],
        [12, 14, 15, 17, 19, 20, 22, 24, 26, 27, 29, 31, 32],
        [11, 13, null, 16, 18, null, 21, 23, 25, null, 28, 30, null],
    ];

    function makeEmptyReplacementElement(node) {
        const clone = node.cloneNode(false);
        node.parentNode.replaceChild(clone, node);
        return clone;
    }
    class PatternCursor {
        constructor() {
            this.valid = false;
            this.prevNote = null;
            this.curNote = null;
            this.nextNote = null;
            this.pitch = 0;
            this.pitchIndex = -1;
            this.curIndex = 0;
            this.start = 0;
            this.end = 0;
            this.part = 0;
            this.exactPart = 0;
            this.nearPinIndex = 0;
            this.pins = [];
        }
    }
    class PatternEditor {
        constructor(_doc, _interactive, _barOffset) {
            this._doc = _doc;
            this._interactive = _interactive;
            this._barOffset = _barOffset;
            this.controlMode = false;
            this.shiftMode = false;
            this._svgNoteBackground = SVG.pattern({ id: "patternEditorNoteBackground" + this._barOffset, x: "0", y: "0", patternUnits: "userSpaceOnUse" });
            this._svgDrumBackground = SVG.pattern({ id: "patternEditorDrumBackground" + this._barOffset, x: "0", y: "0", patternUnits: "userSpaceOnUse" });
            this._svgModBackground = SVG.pattern({ id: "patternEditorModBackground" + this._barOffset, x: "0", y: "0", patternUnits: "userSpaceOnUse" });
            this._svgBackground = SVG.rect({ id: "pitchEditorBackground", x: "0", y: "0", style: `opacity: ${getLocalStorageItem("customThemeImageOpacity", "1")};`, "pointer-events": "none", fill: "url(#patternEditorNoteBackground" + this._barOffset + ")" });
            this._svgNoteContainer = SVG.svg();
            this._svgPlayhead = SVG.rect({ x: "0", y: "0", width: "4", fill: ColorConfig.playhead, "pointer-events": "none" });
            this._selectionRect = SVG.rect({ class: "dashed-line dash-move", fill: ColorConfig.boxSelectionFill, stroke: ColorConfig.hoverPreview, "stroke-width": 2, "stroke-dasharray": "5, 3", "fill-opacity": "0.4", "pointer-events": "none", visibility: "hidden" });
            this._svgPreview = SVG.path({ fill: "none", stroke: ColorConfig.hoverPreview, "stroke-width": "2", "pointer-events": "none" });
            this.modDragValueLabel = HTML.div({ width: "90", "text-anchor": "start", contenteditable: "true", style: "display: flex, justify-content: center; align-items:center; position:absolute; pointer-events: none;", "dominant-baseline": "central", });
            this._svg = SVG.svg({ id: 'firstImage', style: `background-image: url(${getLocalStorageItem("customTheme", "")}); background-repeat: no-repeat; background-size: 100% 100%; background-color: ${ColorConfig.editorBackground}; touch-action: none; position: absolute;`, width: "100%", height: "100%" }, SVG.defs(this._svgNoteBackground, this._svgDrumBackground, this._svgModBackground), this._svgBackground, this._selectionRect, this._svgNoteContainer, this._svgPreview, this._svgPlayhead);
            this.container = HTML.div({ style: "height: 100%; overflow:hidden; position: relative; flex-grow: 1;" }, this._svg, this.modDragValueLabel);
            this._defaultModBorder = 34;
            this._backgroundPitchRows = [];
            this._backgroundDrumRow = SVG.rect();
            this._backgroundModRow = SVG.rect();
            this._modDragValueLabelLeft = 0;
            this._modDragValueLabelTop = 0;
            this._modDragValueLabelWidth = 0;
            this.editingModLabel = false;
            this._modDragStartValue = 0;
            this._modDragLowerBound = 0;
            this._modDragUpperBound = 6;
            this._pitchHeight = -1;
            this._mouseX = 0;
            this._mouseY = 0;
            this._mouseDown = false;
            this._mouseOver = false;
            this._mouseDragging = false;
            this._mouseHorizontal = false;
            this._usingTouch = false;
            this._copiedPinChannels = [];
            this._mouseXStart = 0;
            this._mouseYStart = 0;
            this._touchTime = 0;
            this._shiftHeld = false;
            this._dragConfirmed = false;
            this._draggingStartOfSelection = false;
            this._draggingEndOfSelection = false;
            this._draggingSelectionContents = false;
            this._dragTime = 0;
            this._dragPitch = 0;
            this._dragSize = 0;
            this._dragVisible = false;
            this._dragChange = null;
            this._changePatternSelection = null;
            this._lastChangeWasPatternSelection = false;
            this._cursor = new PatternCursor();
            this._stashCursorPinVols = [];
            this._pattern = null;
            this._playheadX = 0.0;
            this._octaveOffset = 0;
            this._renderedWidth = -1;
            this._renderedHeight = -1;
            this._renderedBeatWidth = -1;
            this._renderedPitchHeight = -1;
            this._renderedFifths = false;
            this._renderedThirds = false;
            this._renderedACS = false;
            this._renderedPiano = false;
            this._setKey = 12;
            this._renderedDrums = false;
            this._renderedMod = false;
            this._renderedRhythm = -1;
            this._renderedPitchChannelCount = -1;
            this._renderedNoiseChannelCount = -1;
            this._renderedModChannelCount = -1;
            this._followPlayheadBar = -1;
            this._validateModDragLabelInput = (event) => {
                const label = event.target;
                let converted = Number(label.innerText);
                if (!isNaN(converted) && converted >= 0 && converted < this._modDragLowerBound)
                    return;
                if (label.innerText != "" && label.innerText != "-") {
                    if (isNaN(converted)) {
                        converted = this._modDragLowerBound;
                        label.innerText = "" + this._modDragLowerBound;
                    }
                    let presValue = Math.floor(Math.max(Number(this._modDragLowerBound), Math.min(Number(this._modDragUpperBound), converted)));
                    if (label.innerText != presValue + "")
                        label.innerText = presValue + "";
                    let xOffset = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));
                    this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._modDragNote.start + this._modDragPin.time) - 4 - xOffset * 4), 2));
                    this.modDragValueLabel.style.setProperty("left", "" + this._modDragValueLabelLeft + "px");
                    const sequence = new ChangeSequence();
                    this._dragChange = sequence;
                    this._doc.setProspectiveChange(this._dragChange);
                    sequence.append(new ChangeSizeBend(this._doc, this._modDragNote, this._modDragPin.time, presValue - Config.modulators[this._modDragSetting].convertRealFactor, this._modDragPin.interval, this.shiftMode));
                }
            };
            this.resetCopiedPins = () => {
                const maxDivision = this._getMaxDivision();
                let cap = this._doc.song.getVolumeCap(false);
                this._copiedPinChannels.length = this._doc.song.getChannelCount();
                this._stashCursorPinVols.length = this._doc.song.getChannelCount();
                for (let i = 0; i < this._doc.song.pitchChannelCount; i++) {
                    this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, cap)];
                    this._stashCursorPinVols[i] = [cap, cap];
                }
                for (let i = this._doc.song.pitchChannelCount; i < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i++) {
                    this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, 0)];
                    this._stashCursorPinVols[i] = [cap, 0];
                }
                for (let i = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i < this._doc.song.getChannelCount(); i++) {
                    this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, 0)];
                    this._stashCursorPinVols[i] = [cap, 0];
                }
            };
            this._animatePlayhead = (timestamp) => {
                if (this._usingTouch && !this.shiftMode && !this._mouseDragging && this._mouseDown && performance.now() > this._touchTime + 1000 && this._cursor.valid && this._doc.lastChangeWas(this._dragChange)) {
                    this._dragChange.undo();
                    this._shiftHeld = true;
                    this._dragConfirmed = false;
                    this._whenCursorPressed();
                    this._doc.notifier.notifyWatchers();
                }
                const playheadBar = Math.floor(this._doc.synth.playhead);
                const noteFlashElements = this._svgNoteContainer.querySelectorAll('.note-flash');
                if (this._doc.synth.playing && ((this._pattern != null && this._doc.song.getPattern(this._doc.channel, Math.floor(this._doc.synth.playhead)) == this._pattern) || Math.floor(this._doc.synth.playhead) == this._doc.bar + this._barOffset)) {
                    this._svgPlayhead.setAttribute("visibility", "visible");
                    const modPlayhead = this._doc.synth.playhead - playheadBar;
                    for (var i = 0; i < noteFlashElements.length; i++) {
                        var element = noteFlashElements[i];
                        const noteStart = Number(element.getAttribute("note-start")) / (this._doc.song.beatsPerBar * Config.partsPerBeat);
                        const noteEnd = Number(element.getAttribute("note-end")) / (this._doc.song.beatsPerBar * Config.partsPerBeat);
                        if ((modPlayhead >= noteStart) && this._doc.prefs.notesFlashWhenPlayed) {
                            const dist = noteEnd - noteStart;
                            element.style.opacity = String((1 - (((modPlayhead - noteStart) - (dist / 2)) / (dist / 2))));
                        }
                        else {
                            element.style.opacity = "0";
                        }
                    }
                    if (Math.abs(modPlayhead - this._playheadX) > 0.1) {
                        this._playheadX = modPlayhead;
                    }
                    else {
                        this._playheadX += (modPlayhead - this._playheadX) * 0.2;
                    }
                    this._svgPlayhead.setAttribute("x", "" + prettyNumber(this._playheadX * this._editorWidth - 2));
                }
                else {
                    this._svgPlayhead.setAttribute("visibility", "hidden");
                    for (var i = 0; i < noteFlashElements.length; i++) {
                        var element = noteFlashElements[i];
                        element.style.opacity = "0";
                    }
                }
                if (this._doc.synth.playing && (this._doc.synth.recording || this._doc.prefs.autoFollow) && this._followPlayheadBar != playheadBar) {
                    new ChangeChannelBar(this._doc, this._doc.channel, playheadBar);
                    this._doc.notifier.notifyWatchers();
                }
                this._followPlayheadBar = playheadBar;
                if (this._doc.currentPatternIsDirty) {
                    this._redrawNotePatterns();
                }
                window.requestAnimationFrame(this._animatePlayhead);
            };
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
                this._usingTouch = false;
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._usingTouch = false;
                this._shiftHeld = event.shiftKey;
                this._dragConfirmed = false;
                this._whenCursorPressed();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._usingTouch = true;
                this._shiftHeld = event.shiftKey;
                this._dragConfirmed = false;
                this._touchTime = performance.now();
                this._whenCursorPressed();
            };
            this._whenMouseMoved = (event) => {
                this.controlMode = event.ctrlKey;
                this.shiftMode = event.shiftKey;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._usingTouch = false;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (!this._cursor.valid)
                    return;
                const continuousState = this._doc.lastChangeWas(this._dragChange);
                if (this._mouseDown && continuousState && this._dragChange != null) {
                    if (this._draggingSelectionContents) {
                        this._doc.record(this._dragChange);
                        this._dragChange = null;
                        if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel))
                            this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                    }
                    else if (this._draggingStartOfSelection || this._draggingEndOfSelection || this._shiftHeld) {
                        this._setPatternSelection(this._dragChange);
                        this._dragChange = null;
                    }
                    else if (this._mouseDragging || this._cursor.curNote == null || !this._dragChange.isNoop() || this._draggingStartOfSelection || this._draggingEndOfSelection || this._draggingSelectionContents || this._shiftHeld) {
                        this._doc.record(this._dragChange);
                        this._dragChange = null;
                        if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel))
                            this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                    }
                    else {
                        if (this._pattern == null)
                            throw new Error();
                        const sequence = new ChangeSequence();
                        sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                        if (this._cursor.pitchIndex == -1) {
                            if (this._cursor.curNote.pitches.length == Config.maxChordSize) {
                                sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.curNote.pitches[0], 0, true));
                            }
                            sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.pitch, this._cursor.curNote.pitches.length));
                            this._copyPins(this._cursor.curNote);
                            if (this._doc.prefs.enableNotePreview && !this._doc.synth.playing) {
                                const duration = Math.min(Config.partsPerBeat, this._cursor.end - this._cursor.start);
                                this._doc.performance.setTemporaryPitches(this._cursor.curNote.pitches, duration);
                            }
                        }
                        else {
                            if (this._cursor.curNote.pitches.length == 1) {
                                sequence.append(new ChangeNoteAdded(this._doc, this._pattern, this._cursor.curNote, this._cursor.curIndex, true));
                            }
                            else {
                                sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.pitch, this._cursor.curNote.pitches.indexOf(this._cursor.pitch), true));
                            }
                        }
                        this._doc.record(sequence);
                    }
                }
                this._mouseDown = false;
                this._mouseDragging = false;
                this._draggingStartOfSelection = false;
                this._draggingEndOfSelection = false;
                this._draggingSelectionContents = false;
                this._lastChangeWasPatternSelection = false;
                this.modDragValueLabel.setAttribute("fill", ColorConfig.secondaryText);
                this._updateCursorStatus();
                this._updatePreview();
            };
            for (let i = 0; i < Config.pitchesPerOctave; i++) {
                const rectangle = SVG.rect();
                rectangle.setAttribute("x", "1");
                rectangle.setAttribute("fill", (i == 0) ? ColorConfig.tonic : ColorConfig.pitchBackground);
                this._svgNoteBackground.appendChild(rectangle);
                this._backgroundPitchRows[i] = rectangle;
            }
            this._backgroundDrumRow.setAttribute("x", "1");
            this._backgroundDrumRow.setAttribute("y", "1");
            this._backgroundDrumRow.setAttribute("fill", ColorConfig.pitchBackground);
            this._svgDrumBackground.appendChild(this._backgroundDrumRow);
            this._backgroundModRow.setAttribute("fill", ColorConfig.pitchBackground);
            this._svgModBackground.appendChild(this._backgroundModRow);
            if (this._interactive) {
                this._updateCursorStatus();
                this._updatePreview();
                window.requestAnimationFrame(this._animatePlayhead);
                this._svg.addEventListener("mousedown", this._whenMousePressed);
                document.addEventListener("mousemove", this._whenMouseMoved);
                document.addEventListener("mouseup", this._whenCursorReleased);
                this._svg.addEventListener("mouseover", this._whenMouseOver);
                this._svg.addEventListener("mouseout", this._whenMouseOut);
                this._svg.addEventListener("touchstart", this._whenTouchPressed);
                this._svg.addEventListener("touchmove", this._whenTouchMoved);
                this._svg.addEventListener("touchend", this._whenCursorReleased);
                this._svg.addEventListener("touchcancel", this._whenCursorReleased);
                this.modDragValueLabel.addEventListener("input", this._validateModDragLabelInput);
            }
            else {
                this._svgPlayhead.style.display = "none";
                this._svg.appendChild(SVG.rect({ x: 0, y: 0, width: 10000, height: 10000, fill: ColorConfig.editorBackground, style: "opacity: 0.5;" }));
            }
            this.resetCopiedPins();
        }
        _getMaxPitch() {
            return this._doc.song.getChannelIsMod(this._doc.channel) ? Config.modCount - 1 : (this._doc.song.getChannelIsNoise(this._doc.channel) ? Config.drumCount - 1 : Config.maxPitch);
        }
        _getMaxDivision() {
            if (this.controlMode && this._mouseHorizontal)
                return Config.partsPerBeat;
            const rhythmStepsPerBeat = Config.rhythms[this._doc.song.rhythm].stepsPerBeat;
            if (rhythmStepsPerBeat % 4 == 0) {
                return Config.partsPerBeat / 2;
            }
            else if (rhythmStepsPerBeat % 3 == 0) {
                return Config.partsPerBeat / 3;
            }
            else if (rhythmStepsPerBeat % 2 == 0) {
                return Config.partsPerBeat / 2;
            }
            return Config.partsPerBeat;
        }
        _getMinDivision() {
            if (this.controlMode && this._mouseHorizontal)
                return 1;
            return Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat;
        }
        _snapToMinDivision(input) {
            const minDivision = this._getMinDivision();
            return Math.floor(input / minDivision) * minDivision;
        }
        _updateCursorStatus() {
            this._cursor = new PatternCursor();
            if (this._mouseX < 0 || this._mouseX > this._editorWidth || this._mouseY < 0 || this._mouseY > this._editorHeight || this._pitchHeight <= 0)
                return;
            const minDivision = this._getMinDivision();
            this._cursor.exactPart = this._mouseX / this._partWidth;
            this._cursor.part =
                Math.floor(Math.max(0, Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat - minDivision, this._cursor.exactPart))
                    / minDivision) * minDivision;
            let foundNote = false;
            if (this._pattern != null) {
                for (const note of this._pattern.notes) {
                    if (note.end <= this._cursor.exactPart) {
                        if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                            if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {
                                this._cursor.prevNote = note;
                            }
                            if (!foundNote)
                                this._cursor.curIndex++;
                        }
                        else {
                            this._cursor.prevNote = note;
                            this._cursor.curIndex++;
                        }
                    }
                    else if (note.start <= this._cursor.exactPart && note.end > this._cursor.exactPart) {
                        if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                            if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {
                                this._cursor.curNote = note;
                                foundNote = true;
                            }
                            else if (!foundNote || (this._cursor.curNote != null && note.start < this._cursor.curNote.start))
                                this._cursor.curIndex++;
                        }
                        else {
                            this._cursor.curNote = note;
                        }
                    }
                    else if (note.start > this._cursor.exactPart) {
                        if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                            if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {
                                this._cursor.nextNote = note;
                                break;
                            }
                        }
                        else {
                            this._cursor.nextNote = note;
                            break;
                        }
                    }
                }
                if (this._doc.song.getChannelIsMod(this._doc.channel) && !this.editingModLabel) {
                    if (this._pattern.notes[this._cursor.curIndex] != null && this._cursor.curNote != null) {
                        let pinIdx = 0;
                        while (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time < this._cursor.exactPart && pinIdx < this._cursor.curNote.pins.length) {
                            pinIdx++;
                        }
                        if (pinIdx > 0) {
                            if (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time - this._cursor.exactPart > this._cursor.exactPart - (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx - 1].time)) {
                                pinIdx--;
                            }
                        }
                        this.modDragValueLabel.style.setProperty("color", "#666688");
                        this.modDragValueLabel.style.setProperty("display", "");
                        const mod = Math.max(0, Config.modCount - 1 - this._cursor.curNote.pitches[0]);
                        let setting = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)].modulators[mod];
                        let presValue = this._cursor.curNote.pins[pinIdx].size + Config.modulators[setting].convertRealFactor;
                        let xOffset = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));
                        this._modDragValueLabelWidth = 8 + xOffset * 8;
                        this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time) - 4 - xOffset * 4), 2));
                        this._modDragValueLabelTop = +prettyNumber(this._pitchToPixelHeight(this._cursor.curNote.pitches[0] - this._octaveOffset) - 17 - (this._pitchHeight - this._pitchBorder) / 2);
                        this._modDragStartValue = this._cursor.curNote.pins[pinIdx].size;
                        this._modDragNote = this._cursor.curNote;
                        this._modDragPin = this._cursor.curNote.pins[pinIdx];
                        this._modDragLowerBound = Config.modulators[setting].convertRealFactor;
                        this._modDragUpperBound = Config.modulators[setting].convertRealFactor + Config.modulators[setting].maxRawVol;
                        this._modDragSetting = setting;
                        this.modDragValueLabel.style.setProperty("left", "" + this._modDragValueLabelLeft + "px");
                        this.modDragValueLabel.style.setProperty("top", "" + this._modDragValueLabelTop + "px");
                        this.modDragValueLabel.textContent = "" + presValue;
                    }
                    else {
                        this.modDragValueLabel.style.setProperty("display", "none");
                        this.modDragValueLabel.style.setProperty("pointer-events", "none");
                        this.modDragValueLabel.setAttribute("contenteditable", "false");
                    }
                }
                else if (!this.editingModLabel) {
                    this.modDragValueLabel.style.setProperty("display", "none");
                    this.modDragValueLabel.style.setProperty("pointer-events", "none");
                    this.modDragValueLabel.setAttribute("contenteditable", "false");
                }
            }
            else {
                this.modDragValueLabel.style.setProperty("display", "none");
                this.modDragValueLabel.style.setProperty("pointer-events", "none");
                this.modDragValueLabel.setAttribute("contenteditable", "false");
            }
            let mousePitch = this._findMousePitch(this._mouseY);
            if (this._cursor.curNote != null) {
                this._cursor.start = this._cursor.curNote.start;
                this._cursor.end = this._cursor.curNote.end;
                this._cursor.pins = this._cursor.curNote.pins;
                let interval = 0;
                let error = 0;
                let prevPin;
                let nextPin = this._cursor.curNote.pins[0];
                for (let j = 1; j < this._cursor.curNote.pins.length; j++) {
                    prevPin = nextPin;
                    nextPin = this._cursor.curNote.pins[j];
                    const leftSide = this._partWidth * (this._cursor.curNote.start + prevPin.time);
                    const rightSide = this._partWidth * (this._cursor.curNote.start + nextPin.time);
                    if (this._mouseX > rightSide)
                        continue;
                    if (this._mouseX < leftSide)
                        throw new Error();
                    const intervalRatio = (this._mouseX - leftSide) / (rightSide - leftSide);
                    const arc = Math.sqrt(1.0 / Math.sqrt(4.0) - Math.pow(intervalRatio - 0.5, 2.0)) - 0.5;
                    const bendHeight = Math.abs(nextPin.interval - prevPin.interval);
                    interval = prevPin.interval * (1.0 - intervalRatio) + nextPin.interval * intervalRatio;
                    error = arc * bendHeight + 0.95;
                    break;
                }
                let minInterval = Number.MAX_VALUE;
                let maxInterval = -Number.MAX_VALUE;
                let bestDistance = Number.MAX_VALUE;
                for (const pin of this._cursor.curNote.pins) {
                    if (minInterval > pin.interval)
                        minInterval = pin.interval;
                    if (maxInterval < pin.interval)
                        maxInterval = pin.interval;
                    const pinDistance = Math.abs(this._cursor.curNote.start + pin.time - this._mouseX / this._partWidth);
                    if (bestDistance > pinDistance) {
                        bestDistance = pinDistance;
                        this._cursor.nearPinIndex = this._cursor.curNote.pins.indexOf(pin);
                    }
                }
                mousePitch -= interval;
                this._cursor.pitch = this._snapToPitch(mousePitch, -minInterval, this._getMaxPitch() - maxInterval);
                if (!this._doc.song.getChannelIsNoise(this._doc.channel) && !this._doc.song.getChannelIsMod(this._doc.channel)) {
                    let nearest = error;
                    for (let i = 0; i < this._cursor.curNote.pitches.length; i++) {
                        const distance = Math.abs(this._cursor.curNote.pitches[i] - mousePitch + 0.5);
                        if (distance > nearest)
                            continue;
                        nearest = distance;
                        this._cursor.pitch = this._cursor.curNote.pitches[i];
                    }
                }
                for (let i = 0; i < this._cursor.curNote.pitches.length; i++) {
                    if (this._cursor.curNote.pitches[i] == this._cursor.pitch) {
                        this._cursor.pitchIndex = i;
                        break;
                    }
                }
            }
            else {
                this._cursor.pitch = this._snapToPitch(mousePitch, 0, this._getMaxPitch());
                const defaultLength = this._copiedPins[this._copiedPins.length - 1].time;
                const fullBeats = Math.floor(this._cursor.part / Config.partsPerBeat);
                const maxDivision = this._getMaxDivision();
                const modMouse = this._cursor.part % Config.partsPerBeat;
                if (defaultLength == 1) {
                    this._cursor.start = this._cursor.part;
                }
                else if (defaultLength > Config.partsPerBeat) {
                    this._cursor.start = fullBeats * Config.partsPerBeat;
                }
                else if (defaultLength == Config.partsPerBeat) {
                    this._cursor.start = fullBeats * Config.partsPerBeat;
                    if (maxDivision < Config.partsPerBeat && modMouse > maxDivision) {
                        this._cursor.start += Math.floor(modMouse / maxDivision) * maxDivision;
                    }
                }
                else {
                    this._cursor.start = fullBeats * Config.partsPerBeat;
                    let division = Config.partsPerBeat % defaultLength == 0 ? defaultLength : Math.min(defaultLength, maxDivision);
                    while (division < maxDivision && Config.partsPerBeat % division != 0) {
                        division++;
                    }
                    this._cursor.start += Math.floor(modMouse / division) * division;
                }
                this._cursor.end = this._cursor.start + defaultLength;
                let forceStart = 0;
                let forceEnd = this._doc.song.beatsPerBar * Config.partsPerBeat;
                if (this._cursor.prevNote != null) {
                    forceStart = this._cursor.prevNote.end;
                }
                if (this._cursor.nextNote != null) {
                    forceEnd = this._cursor.nextNote.start;
                }
                if (this._cursor.start < forceStart) {
                    this._cursor.start = forceStart;
                    this._cursor.end = this._cursor.start + defaultLength;
                    if (this._cursor.end > forceEnd) {
                        this._cursor.end = forceEnd;
                    }
                }
                else if (this._cursor.end > forceEnd) {
                    this._cursor.end = forceEnd;
                    this._cursor.start = this._cursor.end - defaultLength;
                    if (this._cursor.start < forceStart) {
                        this._cursor.start = forceStart;
                    }
                }
                if (this._cursor.end - this._cursor.start == defaultLength) {
                    if (this._copiedPinChannels.length > this._doc.channel) {
                        this._copiedPins = this._copiedPinChannels[this._doc.channel];
                        this._cursor.pins = this._copiedPins;
                    }
                    else {
                        const cap = this._doc.song.getVolumeCap(false);
                        this._cursor.pins = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, cap)];
                    }
                }
                else {
                    this._cursor.pins = [];
                    for (const oldPin of this._copiedPins) {
                        if (oldPin.time <= this._cursor.end - this._cursor.start) {
                            this._cursor.pins.push(makeNotePin(0, oldPin.time, oldPin.size));
                            if (oldPin.time == this._cursor.end - this._cursor.start)
                                break;
                        }
                        else {
                            this._cursor.pins.push(makeNotePin(0, this._cursor.end - this._cursor.start, oldPin.size));
                            break;
                        }
                    }
                }
                if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                    this._cursor.pitch = Math.max(0, Math.min(Config.modCount - 1, this._cursor.pitch));
                    if (this._stashCursorPinVols != null && this._stashCursorPinVols[this._doc.channel] != null) {
                        for (let pin = 0; pin < this._cursor.pins.length; pin++) {
                            this._cursor.pins[pin].size = this._stashCursorPinVols[this._doc.channel][pin];
                        }
                    }
                    let maxHeight = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);
                    let maxFoundHeight = 0;
                    for (const pin of this._cursor.pins) {
                        if (pin.size > maxFoundHeight) {
                            maxFoundHeight = pin.size;
                        }
                    }
                    if (maxFoundHeight > maxHeight) {
                        for (const pin of this._cursor.pins) {
                            pin.size = Math.round(pin.size * (maxHeight / maxFoundHeight));
                        }
                    }
                }
            }
            this._cursor.valid = true;
        }
        _cursorIsInSelection() {
            return this._cursor.valid && this._doc.selection.patternSelectionActive && this._doc.selection.patternSelectionStart <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionEnd;
        }
        _cursorAtStartOfSelection() {
            return this._cursor.valid && this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1 && this._doc.selection.patternSelectionStart - 3 <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionStart + 1.25;
        }
        _cursorAtEndOfSelection() {
            return this._cursor.valid && this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1 && this._doc.selection.patternSelectionEnd - 1.25 <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionEnd + 3;
        }
        _findMousePitch(pixelY) {
            return Math.max(0, Math.min(this._pitchCount - 1, this._pitchCount - (pixelY / this._pitchHeight))) + this._octaveOffset;
        }
        _snapToPitch(guess, min, max) {
            if (guess < min)
                guess = min;
            if (guess > max)
                guess = max;
            const scale = this._doc.prefs.notesOutsideScale ? Config.scales.dictionary["Free"].flags : this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
            if (scale[Math.floor(guess) % Config.pitchesPerOctave] || this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) {
                return Math.floor(guess);
            }
            else {
                let topPitch = Math.floor(guess) + 1;
                let bottomPitch = Math.floor(guess) - 1;
                while (!scale[topPitch % Config.pitchesPerOctave]) {
                    topPitch++;
                }
                while (!scale[(bottomPitch) % Config.pitchesPerOctave]) {
                    bottomPitch--;
                }
                if (topPitch > max) {
                    if (bottomPitch < min) {
                        return min;
                    }
                    else {
                        return bottomPitch;
                    }
                }
                else if (bottomPitch < min) {
                    return topPitch;
                }
                let topRange = topPitch;
                let bottomRange = bottomPitch + 1;
                if (topPitch % Config.pitchesPerOctave == 0 || topPitch % Config.pitchesPerOctave == 7) {
                    topRange -= 0.5;
                }
                if (bottomPitch % Config.pitchesPerOctave == 0 || bottomPitch % Config.pitchesPerOctave == 7) {
                    bottomRange += 0.5;
                }
                return guess - bottomRange > topRange - guess ? topPitch : bottomPitch;
            }
        }
        _copyPins(note) {
            this._copiedPins = [];
            for (const oldPin of note.pins) {
                this._copiedPins.push(makeNotePin(0, oldPin.time, oldPin.size));
            }
            for (let i = 1; i < this._copiedPins.length - 1;) {
                if (this._copiedPins[i - 1].size == this._copiedPins[i].size &&
                    this._copiedPins[i].size == this._copiedPins[i + 1].size) {
                    this._copiedPins.splice(i, 1);
                }
                else {
                    i++;
                }
            }
            this._copiedPinChannels[this._doc.channel] = this._copiedPins;
            this._stashCursorPinVols[this._doc.channel] = [];
            for (let pin = 0; pin < this._copiedPins.length; pin++) {
                this._stashCursorPinVols[this._doc.channel].push(this._copiedPins[pin].size);
            }
        }
        movePlayheadToMouse() {
            if (this._mouseOver) {
                this._doc.synth.playhead = this._doc.bar + this._barOffset + (this._mouseX / this._editorWidth);
                return true;
            }
            return false;
        }
        setModSettingsForChange(change, songEditor) {
            const thisRef = this;
            const timeQuantum = Math.max(4, (Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat));
            const currentBar = Math.floor(this._doc.synth.playhead);
            const realPart = this._doc.synth.getCurrentPart();
            let changedPatterns = false;
            const currentPart = (realPart < timeQuantum / 2) ? 0 : Math.ceil(realPart / timeQuantum) * timeQuantum;
            function getMatchingInstrumentAndMod(applyToMod, modChannel, modInsIndex, modFilterIndex) {
                let startIndex = (modInsIndex == undefined) ? 0 : modInsIndex;
                let endIndex = (modInsIndex == undefined) ? modChannel.instruments.length - 1 : modInsIndex;
                for (let instrumentIndex = startIndex; instrumentIndex <= endIndex; instrumentIndex++) {
                    let instrument = modChannel.instruments[instrumentIndex];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        if (instrument.modulators[mod] == applyToMod && !Config.modulators[instrument.modulators[mod]].forSong && (instrument.modChannels[mod] == thisRef._doc.channel)) {
                            if (thisRef._doc.getCurrentInstrument() == instrument.modInstruments[mod]
                                || instrument.modInstruments[mod] >= thisRef._doc.song.channels[thisRef._doc.channel].instruments.length) {
                                if (modFilterIndex != undefined && (applyToMod == Config.modulators.dictionary["eq filter"].index || applyToMod == Config.modulators.dictionary["note filter"].index)) {
                                    if (instrument.modFilterTypes[mod] == modFilterIndex)
                                        return [instrumentIndex, mod];
                                }
                                else
                                    return [instrumentIndex, mod];
                            }
                        }
                        else if (instrument.modulators[mod] == applyToMod && Config.modulators[instrument.modulators[mod]].forSong && (instrument.modChannels[mod] == -1)) {
                            return [instrumentIndex, mod];
                        }
                    }
                }
                return [-1, -1];
            }
            function sanitizeInterval(doc, startPart, endPart, pattern, forMod, sequence) {
                if (startPart >= endPart)
                    return;
                for (let noteIndex = 0; noteIndex < pattern.notes.length; noteIndex++) {
                    const note = pattern.notes[noteIndex];
                    if (note.pitches[0] != forMod)
                        continue;
                    if (note.start < endPart && note.end > startPart) {
                        let couldIntersectStart = false;
                        let intersectsEnd = false;
                        let firstInteriorPin = -1;
                        let interiorPinCount = 0;
                        if (note.start <= startPart && note.end >= endPart) {
                            for (let pinIndex = 0; pinIndex < note.pins.length; pinIndex++) {
                                const pin = note.pins[pinIndex];
                                if (note.start + pin.time > startPart && note.start + pin.time < endPart) {
                                    if (firstInteriorPin < 0)
                                        firstInteriorPin = pinIndex;
                                    interiorPinCount++;
                                }
                            }
                            if (interiorPinCount > 0)
                                note.pins.splice(firstInteriorPin, interiorPinCount);
                            return;
                        }
                        for (let pinIndex = 0; pinIndex < note.pins.length; pinIndex++) {
                            const pin = note.pins[pinIndex];
                            if (note.start + pin.time >= startPart && note.start + pin.time <= endPart) {
                                if (firstInteriorPin < 0)
                                    firstInteriorPin = pinIndex;
                                interiorPinCount++;
                            }
                            else {
                                if (interiorPinCount == 0)
                                    couldIntersectStart = true;
                                if (interiorPinCount > 0)
                                    intersectsEnd = true;
                            }
                        }
                        if (couldIntersectStart && interiorPinCount > 0) {
                            note.pins[firstInteriorPin].time = startPart - note.start;
                            firstInteriorPin++;
                            interiorPinCount--;
                        }
                        if (intersectsEnd && interiorPinCount > 0) {
                            note.pins[firstInteriorPin + interiorPinCount - 1].time = endPart - note.start;
                            interiorPinCount--;
                        }
                        note.pins.splice(firstInteriorPin, interiorPinCount);
                        if (note.pins.length < 2) {
                            sequence.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));
                            noteIndex--;
                            continue;
                        }
                        let timeAdjust = 0;
                        timeAdjust = note.pins[0].time;
                        note.start += timeAdjust;
                        for (let i = 0; i < note.pins.length; i++) {
                            note.pins[i].time -= timeAdjust;
                        }
                        note.end = note.start + note.pins[note.pins.length - 1].time;
                        if (note.end <= note.start) {
                            sequence.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));
                            noteIndex--;
                        }
                    }
                }
            }
            const sequence = new ChangeSequence();
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            let applyToMods = [];
            let applyToFilterTargets = [];
            let applyValues = [];
            let toApply = true;
            let slider = null;
            if (change == null) {
                var modulator = Config.modulators.dictionary["song volume"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(this._doc.prefs.volume - modulator.convertRealFactor);
            }
            else if (this._doc.continuingModRecordingChange != null && this._doc.continuingModRecordingChange.storedChange == null && this._doc.continuingModRecordingChange.storedSlider == null) {
                var modulator = Config.modulators.dictionary["song volume"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(this._doc.continuingModRecordingChange.storedValues[0]);
            }
            else if (change instanceof ChangeTempo) {
                var modulator = Config.modulators.dictionary["tempo"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(this._doc.song.tempo - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    this._doc.song.tempo = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeVolume) {
                var modulator = Config.modulators.dictionary["mix volume"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.volume - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null)
                    instrument.volume = slider.getValueBeforeProspectiveChange();
            }
            else if (change instanceof ChangePan) {
                var modulator = Config.modulators.dictionary["pan"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.pan - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.pan = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeReverb) {
                var modulator = Config.modulators.dictionary["reverb"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.reverb - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.reverb = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeDistortion) {
                var modulator = Config.modulators.dictionary["distortion"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.distortion - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.distortion = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeOperatorAmplitude) {
                var modulator = Config.modulators.dictionary["fm slider " + (change.operatorIndex + 1)];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.operators[change.operatorIndex].amplitude - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.operators[change.operatorIndex].amplitude = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeFeedbackAmplitude) {
                var modulator = Config.modulators.dictionary["fm feedback"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.feedbackAmplitude - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.feedbackAmplitude = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangePulseWidth) {
                var modulator = Config.modulators.dictionary["pulse width"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.pulseWidth - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.pulseWidth = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeDecimalOffset) {
                var modulator = Config.modulators.dictionary["decimal offset"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.decimalOffset - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.decimalOffset = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeDetune) {
                var modulator = Config.modulators.dictionary["detune"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.detune - modulator.convertRealFactor - Config.detuneCenter);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.detune = slider.getValueBeforeProspectiveChange() + Config.detuneCenter;
                }
            }
            else if (change instanceof ChangeVibratoDepth) {
                var modulator = Config.modulators.dictionary["vibrato depth"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.vibratoDepth * 25 - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.vibratoDepth = slider.getValueBeforeProspectiveChange() / 25;
                }
            }
            else if (change instanceof ChangeVibratoSpeed) {
                var modulator = Config.modulators.dictionary["vibrato speed"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.vibratoSpeed - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.vibratoSpeed = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeVibratoDelay) {
                var modulator = Config.modulators.dictionary["vibrato delay"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.vibratoDelay - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.vibratoDelay = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeArpeggioSpeed) {
                var modulator = Config.modulators.dictionary["arp speed"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.arpeggioSpeed - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.arpeggioSpeed = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangePanDelay) {
                var modulator = Config.modulators.dictionary["pan delay"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.panDelay - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.panDelay = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeSequence && change.checkFirst() instanceof ChangeFilterMovePoint && !change.isCommitted()) {
                const useChange = change.checkFirst();
                const preMoveData = useChange.getMoveData(true);
                const postMoveData = useChange.getMoveData(false);
                let useFilter = instrument.eqFilter;
                var modulatorIndex;
                if (useChange.useNoteFilter) {
                    modulatorIndex = Config.modulators.dictionary["note filter"].index;
                    useFilter = instrument.noteFilter;
                    if (instrument.tmpNoteFilterEnd == null) {
                        instrument.tmpNoteFilterStart = new FilterSettings();
                        instrument.tmpNoteFilterStart.fromJsonObject(instrument.noteFilter.toJsonObject());
                        instrument.tmpNoteFilterEnd = instrument.tmpNoteFilterStart;
                    }
                    const modifyPoint = instrument.tmpNoteFilterEnd.controlPoints[useChange.pointIndex];
                    if (modifyPoint != null && modifyPoint.type == useChange.pointType) {
                        modifyPoint.freq = postMoveData.freq;
                        modifyPoint.gain = postMoveData.gain;
                    }
                }
                else {
                    modulatorIndex = Config.modulators.dictionary["eq filter"].index;
                    if (instrument.tmpEqFilterEnd == null) {
                        instrument.tmpEqFilterStart = new FilterSettings();
                        instrument.tmpEqFilterStart.fromJsonObject(instrument.eqFilter.toJsonObject());
                        instrument.tmpEqFilterEnd = instrument.tmpEqFilterStart;
                    }
                    const modifyPoint = instrument.tmpEqFilterEnd.controlPoints[useChange.pointIndex];
                    if (modifyPoint != null && modifyPoint.type == useChange.pointType) {
                        modifyPoint.freq = postMoveData.freq;
                        modifyPoint.gain = postMoveData.gain;
                    }
                }
                applyToMods.push(modulatorIndex);
                applyToMods.push(modulatorIndex);
                if (toApply)
                    applyValues.push(postMoveData.freq);
                if (toApply)
                    applyValues.push(postMoveData.gain);
                applyToFilterTargets.push(1 + useChange.pointIndex * 2);
                applyToFilterTargets.push(1 + useChange.pointIndex * 2 + 1);
                for (let i = 0; i < useFilter.controlPointCount; i++) {
                    var point = useFilter.controlPoints[i];
                    if (Object.is(point, preMoveData.point)) {
                        point.freq = preMoveData.freq;
                        point.gain = preMoveData.gain;
                    }
                }
            }
            else if (change instanceof ChangeBitcrusherQuantization) {
                var modulator = Config.modulators.dictionary["bit crush"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.bitcrusherQuantization - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.bitcrusherQuantization = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeBitcrusherFreq) {
                var modulator = Config.modulators.dictionary["freq crush"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.bitcrusherFreq - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.bitcrusherFreq = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeEchoSustain) {
                var modulator = Config.modulators.dictionary["echo"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.echoSustain - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.echoSustain = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeChorus) {
                var modulator = Config.modulators.dictionary["chorus"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.chorus - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.chorus = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeEQFilterSimpleCut) {
                var modulator = Config.modulators.dictionary["eq filt cut"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.eqFilterSimpleCut - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.eqFilterSimpleCut = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeEQFilterSimplePeak) {
                var modulator = Config.modulators.dictionary["eq filt peak"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.eqFilterSimplePeak - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.eqFilterSimplePeak = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeNoteFilterSimpleCut) {
                var modulator = Config.modulators.dictionary["note filt cut"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.noteFilterSimpleCut - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.noteFilterSimpleCut = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeNoteFilterSimplePeak) {
                var modulator = Config.modulators.dictionary["note filt peak"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.noteFilterSimplePeak - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.noteFilterSimplePeak = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangePitchShift) {
                var modulator = Config.modulators.dictionary["pitch shift"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.pitchShift - Config.pitchShiftCenter - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.pitchShift = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeStringSustain) {
                var modulator = Config.modulators.dictionary["sustain"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.stringSustain - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.stringSustain = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeEnvelopeSpeed) {
                var modulator = Config.modulators.dictionary["envelope speed"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.envelopeSpeed - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.envelopeSpeed = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeSupersawDynamism) {
                var modulator = Config.modulators.dictionary["dynamism"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.supersawDynamism - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.supersawDynamism = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeSupersawSpread) {
                var modulator = Config.modulators.dictionary["spread"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.supersawSpread - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.supersawSpread = slider.getValueBeforeProspectiveChange();
                }
            }
            else if (change instanceof ChangeSupersawShape) {
                var modulator = Config.modulators.dictionary["saw shape"];
                applyToMods.push(modulator.index);
                if (toApply)
                    applyValues.push(instrument.supersawShape - modulator.convertRealFactor);
                slider = songEditor.getSliderForModSetting(modulator.index);
                if (slider != null) {
                    instrument.supersawShape = slider.getValueBeforeProspectiveChange();
                }
            }
            for (let applyIndex = 0; applyIndex < applyValues.length; applyIndex++) {
                applyValues[applyIndex] = Math.round(applyValues[applyIndex]);
            }
            if (this._doc.continuingModRecordingChange != null && applyToFilterTargets.length == 0) {
                if (slider == null && this._doc.continuingModRecordingChange.storedSlider != null)
                    slider = this._doc.continuingModRecordingChange.storedSlider;
                if (slider != null && +slider.input.value == slider.getValueBeforeProspectiveChange()) {
                    applyValues = this._doc.continuingModRecordingChange.storedValues;
                    toApply = false;
                }
                this._doc.continuingModRecordingChange = null;
            }
            if (slider != null)
                slider.updateValue(slider.getValueBeforeProspectiveChange());
            for (let applyIndex = 0; applyIndex < applyToMods.length; applyIndex++) {
                let usedPatterns = [];
                let usedInstruments = [];
                let usedInstrumentIndices = [];
                let usedModIndices = [];
                for (let channelIndex = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {
                    const channel = this._doc.song.channels[channelIndex];
                    let pattern = this._doc.song.getPattern(channelIndex, currentBar);
                    let useInstrumentIndex = 0;
                    let useModIndex = 0;
                    if (pattern == null) {
                        var rtn;
                        if (applyToFilterTargets.length > applyIndex)
                            rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, undefined, applyToFilterTargets[applyIndex]);
                        else
                            rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel);
                        useInstrumentIndex = rtn[0];
                        useModIndex = rtn[1];
                        if (useInstrumentIndex != -1) {
                            sequence.append(new ChangeEnsurePatternExists(this._doc, channelIndex, currentBar));
                            new ChangeDuplicateSelectedReusedPatterns(this._doc, currentBar, 1, channelIndex, 1);
                            pattern = this._doc.song.getPattern(channelIndex, currentBar);
                            pattern.instruments[0] = useInstrumentIndex;
                            changedPatterns = true;
                        }
                    }
                    else {
                        var rtn;
                        if (applyToFilterTargets.length > applyIndex)
                            rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, pattern.instruments[0], applyToFilterTargets[applyIndex]);
                        else
                            rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, pattern.instruments[0]);
                        useInstrumentIndex = rtn[0];
                        useModIndex = rtn[1];
                        if (useInstrumentIndex != -1) {
                            new ChangeDuplicateSelectedReusedPatterns(this._doc, currentBar, 1, channelIndex, 1);
                            pattern = this._doc.song.getPattern(channelIndex, currentBar);
                            changedPatterns = true;
                        }
                    }
                    if (useInstrumentIndex != -1) {
                        usedPatterns.push(pattern);
                        usedInstrumentIndices.push(useInstrumentIndex);
                        usedInstruments.push(channel.instruments[useInstrumentIndex]);
                        usedModIndices.push(useModIndex);
                    }
                }
                if (usedInstrumentIndices.length == 0) {
                    for (let channelIndex = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {
                        const channel = this._doc.song.channels[channelIndex];
                        let pattern = this._doc.song.getPattern(channelIndex, currentBar);
                        let useInstrument = -1;
                        if (pattern != null) {
                            useInstrument = pattern.instruments[0];
                        }
                        else {
                            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                                for (let mod = 0; mod < Config.modCount; mod++) {
                                    if (channel.instruments[instrumentIndex].modulators[mod] == Config.modulators.dictionary["none"].index) {
                                        useInstrument = instrumentIndex;
                                        sequence.append(new ChangeEnsurePatternExists(this._doc, channelIndex, currentBar));
                                        pattern = this._doc.song.getPattern(channelIndex, currentBar);
                                        pattern.instruments[0] = instrumentIndex;
                                        mod = Config.modCount;
                                        instrumentIndex = channel.instruments.length;
                                        channelIndex = this._doc.song.getChannelCount();
                                        changedPatterns = true;
                                    }
                                }
                            }
                        }
                        if (useInstrument != -1) {
                            let instrument = channel.instruments[useInstrument];
                            for (let mod = 0; mod < Config.modCount; mod++) {
                                if (instrument.modulators[mod] == Config.modulators.dictionary["none"].index) {
                                    instrument.modulators[mod] = applyToMods[applyIndex];
                                    if (Config.modulators[applyToMods[applyIndex]].forSong) {
                                        instrument.modChannels[mod] = -1;
                                    }
                                    else {
                                        instrument.modChannels[mod] = this._doc.channel;
                                        if (this._doc.song.channels[this._doc.channel].instruments.length > 1)
                                            instrument.modInstruments[mod] = this._doc.song.channels[this._doc.channel].instruments.length + 1;
                                        else
                                            instrument.modInstruments[mod] = 0;
                                        if (applyToFilterTargets.length > applyIndex) {
                                            instrument.modFilterTypes[mod] = applyToFilterTargets[applyIndex];
                                        }
                                    }
                                    usedPatterns.push(pattern);
                                    usedInstrumentIndices.push(useInstrument);
                                    usedInstruments.push(instrument);
                                    usedModIndices.push(mod);
                                    mod = Config.modCount;
                                    channelIndex = this._doc.song.getChannelCount();
                                }
                            }
                        }
                    }
                }
                for (let i = 0; i < usedPatterns.length; i++) {
                    const addLength = (applyToFilterTargets.length == 0) ? 0 : 24;
                    const newNoteDist = +(timeQuantum >= 6) * 6 + 12;
                    let latestPart = -1;
                    let latestNote = null;
                    let latestPin = null;
                    let latestPinIdx = -1;
                    let prevNotePart = -1;
                    let prevNote = null;
                    const modNoteIndex = Config.modCount - 1 - usedModIndices[i];
                    const usedInstrument = usedInstruments[i];
                    if (usedInstrument.modChannels[usedModIndices[i]] >= -1) {
                        let usedNewInstrumentIndices = [];
                        if (Config.modulators[applyToMods[applyIndex]].forSong) {
                            usedNewInstrumentIndices.push(0);
                        }
                        else {
                            if (usedInstrument.modInstruments[usedModIndices[i]] == this._doc.synth.song.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length) {
                                for (let k = 0; k < this._doc.synth.song.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length; k++) {
                                    usedNewInstrumentIndices.push(k);
                                }
                            }
                            else if (usedInstrument.modInstruments[usedModIndices[i]] > this._doc.synth.song.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length) {
                                if (this._doc.synth.song.getPattern(usedInstrument.modChannels[usedModIndices[i]], currentBar) != null)
                                    usedNewInstrumentIndices = this._doc.synth.song.getPattern(usedInstrument.modChannels[usedModIndices[i]], currentBar).instruments;
                            }
                            else {
                                usedNewInstrumentIndices.push(usedInstrument.modInstruments[usedModIndices[i]]);
                            }
                        }
                        for (let instrumentIndex = 0; instrumentIndex < usedNewInstrumentIndices.length; instrumentIndex++) {
                            this._doc.synth.setModValue(applyValues[applyIndex], applyValues[applyIndex], usedInstruments[i].modChannels[usedModIndices[i]], usedNewInstrumentIndices[instrumentIndex], applyToMods[applyIndex]);
                            this._doc.synth.forceHoldMods(applyValues[applyIndex], usedInstruments[i].modChannels[usedModIndices[i]], usedNewInstrumentIndices[instrumentIndex], applyToMods[applyIndex]);
                        }
                    }
                    for (let j = 0; j < usedPatterns[i].notes.length; j++) {
                        const note = usedPatterns[i].notes[j];
                        if (note.pitches[0] == modNoteIndex && note.start <= currentPart) {
                            for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {
                                const pin = note.pins[pinIdx];
                                if (note.start + pin.time <= currentPart && (note.start + pin.time > latestPart || (note.start == latestPart))) {
                                    latestPart = note.start + pin.time;
                                    latestPin = pin;
                                    latestPinIdx = pinIdx;
                                    latestNote = note;
                                }
                            }
                        }
                        if (note.pitches[0] == modNoteIndex && note.end <= currentPart && note.end > prevNotePart) {
                            prevNotePart = note.end;
                            prevNote = note;
                        }
                    }
                    let prevPart = Math.max(0, currentPart - timeQuantum);
                    let endPart = Math.min(currentPart + timeQuantum + addLength, Config.partsPerBeat * this._doc.song.beatsPerBar);
                    let continuous = (toApply == false);
                    if (latestNote == null || currentPart - latestNote.end >= newNoteDist) {
                        if (currentPart == endPart)
                            continue;
                        sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);
                        latestNote = new Note(modNoteIndex, currentPart, endPart, applyValues[applyIndex], this._doc.song.getChannelIsNoise(this._doc.channel));
                        sequence.append(new ChangeNoteAdded(this._doc, usedPatterns[i], latestNote, usedPatterns[i].notes.length));
                    }
                    else if (latestPart == currentPart) {
                        sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);
                        sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);
                        latestPin.size = applyValues[applyIndex];
                        if (continuous) {
                            for (let usePin = 0; usePin < latestNote.pins.length; usePin++) {
                                if (latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)
                                    latestNote.pins[usePin].size = applyValues[applyIndex];
                            }
                        }
                        if (prevNote != null && prevNote.pins.length >= 2) {
                            if (prevNote.end == currentPart) {
                                prevNote.pins[prevNote.pins.length - 1].size = applyValues[applyIndex];
                                if (continuous) {
                                    for (let usePin = 0; usePin < prevNote.pins.length; usePin++) {
                                        if (prevNote.pins[usePin].time + prevNote.start >= prevPart)
                                            prevNote.pins[usePin].size = applyValues[applyIndex];
                                    }
                                }
                            }
                            else if (prevNote.end == prevPart && latestNote.start == currentPart) {
                                prevNote.pins.push(makeNotePin(0, currentPart - prevNote.start, applyValues[applyIndex]));
                                prevNote.end = currentPart;
                            }
                        }
                    }
                    else if (currentPart - latestPart < 8 && latestNote.pins[latestPinIdx].size == applyValues[applyIndex]) {
                        if (continuous) {
                            for (let usePin = 0; usePin < latestNote.pins.length; usePin++) {
                                if (latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)
                                    latestNote.pins[usePin].size = applyValues[applyIndex];
                            }
                        }
                    }
                    else {
                        if (latestNote.pins.length - 1 > latestPinIdx) {
                            sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);
                            sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);
                            let k;
                            let usePin = null;
                            for (k = 0; k < latestNote.pins.length; k++) {
                                if (latestNote.pins[k].time == currentPart - latestNote.start) {
                                    usePin = latestNote.pins[k];
                                    break;
                                }
                                else if (latestNote.pins[k].time > currentPart - latestNote.start)
                                    break;
                            }
                            if (usePin != null)
                                usePin.size = applyValues[applyIndex];
                            else
                                latestNote.pins.splice(k, 0, makeNotePin(0, currentPart - latestNote.start, applyValues[applyIndex]));
                        }
                        else {
                            sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);
                            sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);
                            latestNote.pins.push(makeNotePin(0, currentPart - latestNote.start, applyValues[applyIndex]));
                            latestNote.end = currentPart;
                        }
                        if (continuous) {
                            for (let usePin = 0; usePin < latestNote.pins.length; usePin++) {
                                if (latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)
                                    latestNote.pins[usePin].size = applyValues[applyIndex];
                            }
                        }
                    }
                    let lastNoteEnds = [-1, -1, -1, -1, -1, -1];
                    usedPatterns[i].notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                    for (let checkIndex = 0; checkIndex < usedPatterns[i].notes.length; checkIndex++) {
                        const note = usedPatterns[i].notes[checkIndex];
                        if (note.start < lastNoteEnds[note.pitches[0]])
                            throw new Error("Error in mod note recording!");
                        lastNoteEnds[note.pitches[0]] = note.end;
                        if (note.pins.length < 2 || note.pins[0].time > 0 || note.start == note.end
                            || note.pins[note.pins.length - 1].time != note.end - note.start) {
                            throw new Error("Error in mod note recording!");
                        }
                        let latestPinTime = -1;
                        for (let k = 0; k < note.pins.length; k++) {
                            if (note.pins[k].time <= latestPinTime) {
                                throw new Error("Error in mod note recording!");
                            }
                            latestPinTime = note.pins[k].time;
                        }
                    }
                }
            }
            if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                this._doc.currentPatternIsDirty = true;
            }
            if (applyValues.length > 0) {
                this._doc.continuingModRecordingChange = new ChangeHoldingModRecording(this._doc, change, applyValues, slider);
            }
            return changedPatterns;
        }
        stopEditingModLabel(discardChanges) {
            if (this.editingModLabel) {
                this.editingModLabel = false;
                this.modDragValueLabel.style.setProperty("pointer-events", "none");
                if (window.getSelection) {
                    let sel = window.getSelection();
                    if (sel != null)
                        sel.removeAllRanges();
                }
                if (discardChanges) {
                    this._modDragPin.size = this._modDragStartValue;
                    let presValue = this._modDragStartValue + Config.modulators[this._modDragSetting].convertRealFactor;
                    let xOffset = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));
                    this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._modDragNote.start + this._modDragPin.time) - 4 - xOffset * 4), 2));
                    this.modDragValueLabel.style.setProperty("left", "" + this._modDragValueLabelLeft + "px");
                    const sequence = new ChangeSequence();
                    this._dragChange = sequence;
                    this._doc.setProspectiveChange(this._dragChange);
                    sequence.append(new ChangeSizeBend(this._doc, this._modDragNote, this._modDragPin.time, this._modDragStartValue, this._modDragPin.interval, this.shiftMode));
                    this._dragChange = null;
                }
                const continuousState = this._doc.lastChangeWas(this._dragChange);
                if (continuousState) {
                    if (this._dragChange != null) {
                        this._doc.record(this._dragChange);
                        this._dragChange = null;
                    }
                }
            }
        }
        _whenCursorPressed() {
            if (this._doc.song.getChannelIsMod(this._doc.channel) && this.modDragValueLabel.style.getPropertyValue("display") != "none" &&
                this._mouseX > +this._modDragValueLabelLeft - 6 &&
                this._mouseX < +this._modDragValueLabelLeft + this._modDragValueLabelWidth + 6 &&
                this._mouseY > +this._modDragValueLabelTop - 8 &&
                this._mouseY < +this._modDragValueLabelTop + 11) {
                this.modDragValueLabel.style.setProperty("pointer-events", "fill");
                this.modDragValueLabel.setAttribute("contenteditable", "true");
                if (window.getSelection) {
                    let sel = window.getSelection();
                    if (sel != null)
                        sel.selectAllChildren(this.modDragValueLabel);
                }
                window.setTimeout(() => { this.modDragValueLabel.focus(); });
                this.editingModLabel = true;
            }
            else {
                this.stopEditingModLabel(false);
                if (this._doc.prefs.enableNotePreview)
                    this._doc.synth.maintainLiveInput();
                this._mouseDown = true;
                this._mouseXStart = this._mouseX;
                this._mouseYStart = this._mouseY;
                this._updateCursorStatus();
                this._updatePreview();
                const sequence = new ChangeSequence();
                this._dragChange = sequence;
                this._lastChangeWasPatternSelection = this._doc.lastChangeWas(this._changePatternSelection);
                this._doc.setProspectiveChange(this._dragChange);
                if (this._cursorAtStartOfSelection()) {
                    this._draggingStartOfSelection = true;
                }
                else if (this._cursorAtEndOfSelection()) {
                    this._draggingEndOfSelection = true;
                }
                else if (this._shiftHeld) {
                    if ((this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1) || this._cursorIsInSelection()) {
                        sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                    }
                    else {
                        if (this._cursor.curNote != null) {
                            sequence.append(new ChangePatternSelection(this._doc, this._cursor.curNote.start, this._cursor.curNote.end));
                        }
                        else {
                            const start = Math.max(0, Math.min((this._doc.song.beatsPerBar - 1) * Config.partsPerBeat, Math.floor(this._cursor.exactPart / Config.partsPerBeat) * Config.partsPerBeat));
                            const end = start + Config.partsPerBeat;
                            sequence.append(new ChangePatternSelection(this._doc, start, end));
                        }
                    }
                }
                else if (this._cursorIsInSelection()) {
                    this._draggingSelectionContents = true;
                }
                else if (this._cursor.valid && this._cursor.curNote == null) {
                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                    const note = new Note(this._cursor.pitch, this._cursor.start, this._cursor.end, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.channel));
                    note.pins = [];
                    for (const oldPin of this._cursor.pins) {
                        note.pins.push(makeNotePin(0, oldPin.time, oldPin.size));
                    }
                    sequence.append(new ChangeEnsurePatternExists(this._doc, this._doc.channel, this._doc.bar));
                    const pattern = this._doc.getCurrentPattern(this._barOffset);
                    if (pattern == null)
                        throw new Error();
                    sequence.append(new ChangeNoteAdded(this._doc, pattern, note, this._cursor.curIndex));
                    if (this._doc.prefs.enableNotePreview && !this._doc.synth.playing) {
                        const duration = Math.min(Config.partsPerBeat, this._cursor.end - this._cursor.start);
                        this._doc.performance.setTemporaryPitches([this._cursor.pitch], duration);
                    }
                }
                this._updateSelection();
            }
        }
        _whenCursorMoved() {
            if (this._doc.prefs.enableNotePreview && this._mouseOver)
                this._doc.synth.maintainLiveInput();
            const continuousState = this._doc.lastChangeWas(this._dragChange);
            if (!this._mouseDragging && this._mouseDown && this._cursor.valid && continuousState) {
                const dx = this._mouseX - this._mouseXStart;
                const dy = this._mouseY - this._mouseYStart;
                if (Math.sqrt(dx * dx + dy * dy) > 5) {
                    this._mouseDragging = true;
                    this._mouseHorizontal = Math.abs(dx) >= Math.abs(dy);
                }
            }
            if (this._shiftHeld && this._mouseHorizontal && Math.abs(this._mouseXStart - this._mouseX) > 5) {
                this._dragConfirmed = true;
            }
            if (this._mouseDragging && this._mouseDown && this._cursor.valid && continuousState) {
                this._dragChange.undo();
                const sequence = new ChangeSequence();
                this._dragChange = sequence;
                this._doc.setProspectiveChange(this._dragChange);
                const minDivision = this._getMinDivision();
                const currentPart = this._snapToMinDivision(this._mouseX / this._partWidth);
                if (this._draggingStartOfSelection) {
                    sequence.append(new ChangePatternSelection(this._doc, Math.max(0, Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat, currentPart)), this._doc.selection.patternSelectionEnd));
                    this._updateSelection();
                }
                else if (this._draggingEndOfSelection) {
                    sequence.append(new ChangePatternSelection(this._doc, this._doc.selection.patternSelectionStart, Math.max(0, Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat, currentPart))));
                    this._updateSelection();
                }
                else if (this._draggingSelectionContents) {
                    const pattern = this._doc.getCurrentPattern(this._barOffset);
                    if (this._mouseDragging && pattern != null) {
                        this._dragChange.undo();
                        const sequence = new ChangeSequence();
                        this._dragChange = sequence;
                        this._doc.setProspectiveChange(this._dragChange);
                        let scale = this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
                        const notesInScale = scale.filter(x => x).length;
                        const pitchRatio = this._doc.song.getChannelIsNoise(this._doc.channel) ? 1 : 12 / notesInScale;
                        const draggedParts = Math.round((this._mouseX - this._mouseXStart) / (this._partWidth * minDivision)) * minDivision;
                        const draggedTranspose = Math.round((this._mouseYStart - this._mouseY) / (this._pitchHeight * pitchRatio));
                        sequence.append(new ChangeDragSelectedNotes(this._doc, this._doc.channel, pattern, draggedParts, draggedTranspose));
                    }
                }
                else if (this._shiftHeld && this._dragConfirmed) {
                    if (this._mouseDragging) {
                        let start = Math.max(0, Math.min((this._doc.song.beatsPerBar - 1) * Config.partsPerBeat, Math.floor(this._cursor.exactPart / Config.partsPerBeat) * Config.partsPerBeat));
                        let end = start + Config.partsPerBeat;
                        if (this._cursor.curNote != null) {
                            start = Math.max(start, this._cursor.curNote.start);
                            end = Math.min(end, this._cursor.curNote.end);
                        }
                        if (currentPart < start) {
                            start = 0;
                            const pattern = this._doc.getCurrentPattern(this._barOffset);
                            if (pattern != null) {
                                for (let i = 0; i < pattern.notes.length; i++) {
                                    if (pattern.notes[i].start <= currentPart) {
                                        start = pattern.notes[i].start;
                                    }
                                    if (pattern.notes[i].end <= currentPart) {
                                        start = pattern.notes[i].end;
                                    }
                                }
                            }
                            for (let beat = 0; beat <= this._doc.song.beatsPerBar; beat++) {
                                const part = beat * Config.partsPerBeat;
                                if (start <= part && part <= currentPart) {
                                    start = part;
                                }
                            }
                        }
                        if (currentPart > end) {
                            end = Config.partsPerBeat * this._doc.song.beatsPerBar;
                            const pattern = this._doc.getCurrentPattern(this._barOffset);
                            if (pattern != null) {
                                for (let i = 0; i < pattern.notes.length; i++) {
                                    if (pattern.notes[i].start >= currentPart) {
                                        end = pattern.notes[i].start;
                                        break;
                                    }
                                    if (pattern.notes[i].end >= currentPart) {
                                        end = pattern.notes[i].end;
                                        break;
                                    }
                                }
                            }
                            for (let beat = 0; beat <= this._doc.song.beatsPerBar; beat++) {
                                const part = beat * Config.partsPerBeat;
                                if (currentPart < part && part < end) {
                                    end = part;
                                }
                            }
                        }
                        sequence.append(new ChangePatternSelection(this._doc, start, end));
                        this._updateSelection();
                    }
                }
                else {
                    if (this._cursor.curNote == null) {
                        sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                        let backwards;
                        let directLength;
                        if (currentPart < this._cursor.start) {
                            backwards = true;
                            directLength = this._cursor.start - currentPart;
                        }
                        else {
                            backwards = false;
                            directLength = currentPart - this._cursor.start + minDivision;
                        }
                        let defaultLength = minDivision;
                        for (let i = minDivision; i <= this._doc.song.beatsPerBar * Config.partsPerBeat; i += minDivision) {
                            if (minDivision == 1) {
                                if (i < 5) ;
                                else if (i <= Config.partsPerBeat / 2.0) {
                                    if (i % 3 != 0 && i % 4 != 0) {
                                        continue;
                                    }
                                }
                                else if (i <= Config.partsPerBeat * 1.5) {
                                    if (i % 6 != 0 && i % 8 != 0) {
                                        continue;
                                    }
                                }
                                else if (i % Config.partsPerBeat != 0) {
                                    continue;
                                }
                            }
                            else {
                                if (i >= 5 * minDivision &&
                                    i % Config.partsPerBeat != 0 &&
                                    i != Config.partsPerBeat * 3.0 / 4.0 &&
                                    i != Config.partsPerBeat * 3.0 / 2.0 &&
                                    i != Config.partsPerBeat * 4.0 / 3.0) {
                                    continue;
                                }
                            }
                            const blessedLength = i;
                            if (blessedLength == directLength) {
                                defaultLength = blessedLength;
                                break;
                            }
                            if (blessedLength < directLength) {
                                defaultLength = blessedLength;
                            }
                            if (blessedLength > directLength) {
                                if (defaultLength < directLength - minDivision) {
                                    defaultLength = blessedLength;
                                }
                                break;
                            }
                        }
                        let start;
                        let end;
                        if (backwards) {
                            end = this._cursor.start;
                            start = end - defaultLength;
                        }
                        else {
                            start = this._cursor.start;
                            end = start + defaultLength;
                        }
                        const continuesLastPattern = (start < 0 && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);
                        if (start < 0)
                            start = 0;
                        if (end > this._doc.song.beatsPerBar * Config.partsPerBeat)
                            end = this._doc.song.beatsPerBar * Config.partsPerBeat;
                        if (start < end) {
                            sequence.append(new ChangeEnsurePatternExists(this._doc, this._doc.channel, this._doc.bar));
                            const pattern = this._doc.getCurrentPattern(this._barOffset);
                            if (pattern == null)
                                throw new Error();
                            sequence.append(new ChangeNoteTruncate(this._doc, pattern, start, end, new Note(this._cursor.pitch, 0, 0, 0)));
                            let i;
                            for (i = 0; i < pattern.notes.length; i++) {
                                if (pattern.notes[i].start >= end)
                                    break;
                            }
                            const theNote = new Note(this._cursor.pitch, start, end, this._doc.song.getNewNoteVolume(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch), this._doc.song.getChannelIsNoise(this._doc.channel));
                            theNote.continuesLastPattern = continuesLastPattern;
                            sequence.append(new ChangeNoteAdded(this._doc, pattern, theNote, i));
                            this._copyPins(theNote);
                            this._dragTime = backwards ? start : end;
                            this._dragPitch = this._cursor.pitch;
                            this._dragSize = theNote.pins[backwards ? 0 : 1].size;
                            this._dragVisible = true;
                        }
                        let prevPattern = this._pattern;
                        this._pattern = this._doc.getCurrentPattern(this._barOffset);
                        if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel) && this._interactive && prevPattern != this._pattern) {
                            this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                        }
                    }
                    else if (this._mouseHorizontal) {
                        sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                        const shift = (this._mouseX - this._mouseXStart) / this._partWidth;
                        const shiftedPin = this._cursor.curNote.pins[this._cursor.nearPinIndex];
                        let shiftedTime = Math.round((this._cursor.curNote.start + shiftedPin.time + shift) / minDivision) * minDivision;
                        const continuesLastPattern = (shiftedTime < 0.0 && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);
                        if (shiftedTime < 0)
                            shiftedTime = 0;
                        if (shiftedTime > this._doc.song.beatsPerBar * Config.partsPerBeat)
                            shiftedTime = this._doc.song.beatsPerBar * Config.partsPerBeat;
                        if (this._pattern == null)
                            throw new Error();
                        if (shiftedTime <= this._cursor.curNote.start && this._cursor.nearPinIndex == this._cursor.curNote.pins.length - 1 ||
                            shiftedTime >= this._cursor.curNote.end && this._cursor.nearPinIndex == 0) {
                            sequence.append(new ChangeNoteAdded(this._doc, this._pattern, this._cursor.curNote, this._cursor.curIndex, true));
                            this._dragVisible = false;
                        }
                        else {
                            const start = Math.min(this._cursor.curNote.start, shiftedTime);
                            const end = Math.max(this._cursor.curNote.end, shiftedTime);
                            this._dragTime = shiftedTime;
                            this._dragPitch = this._cursor.curNote.pitches[this._cursor.pitchIndex == -1 ? 0 : this._cursor.pitchIndex] + this._cursor.curNote.pins[this._cursor.nearPinIndex].interval;
                            this._dragSize = this._cursor.curNote.pins[this._cursor.nearPinIndex].size;
                            this._dragVisible = true;
                            sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, start, end, this._cursor.curNote));
                            sequence.append(new ChangePinTime(this._doc, this._cursor.curNote, this._cursor.nearPinIndex, shiftedTime, continuesLastPattern));
                            this._copyPins(this._cursor.curNote);
                        }
                    }
                    else if (this._cursor.pitchIndex == -1 || this._doc.song.getChannelIsMod(this._doc.channel)) {
                        if (!this._mouseDragging)
                            sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                        const bendPart = Math.max(this._cursor.curNote.start, Math.min(this._cursor.curNote.end, Math.round(this._mouseX / (this._partWidth * minDivision)) * minDivision)) - this._cursor.curNote.start;
                        let prevPin;
                        let nextPin = this._cursor.curNote.pins[0];
                        let bendSize = 0;
                        let bendInterval = 0;
                        let cap = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);
                        let dragFactorSlow = 25.0 / Math.pow(cap, 0.4);
                        let dragFactorFast = 22.0 / Math.pow(cap, 0.5);
                        let dragSign = (this._mouseYStart > this._mouseY ? 1 : -1);
                        let dragCounts = Math.min(Math.abs(this._mouseYStart - this._mouseY) / dragFactorSlow, 8) + Math.max(0, Math.abs(this._mouseYStart - this._mouseY) / dragFactorFast - 8);
                        if (dragCounts > 0) {
                            this._shiftHeld = false;
                        }
                        for (let i = 1; i < this._cursor.curNote.pins.length; i++) {
                            prevPin = nextPin;
                            nextPin = this._cursor.curNote.pins[i];
                            if (bendPart > nextPin.time)
                                continue;
                            if (bendPart < prevPin.time)
                                throw new Error();
                            const sizeRatio = (bendPart - prevPin.time) / (nextPin.time - prevPin.time);
                            bendSize = Math.round(prevPin.size * (1.0 - sizeRatio) + nextPin.size * sizeRatio + dragSign * dragCounts);
                            if (!this.controlMode && !this._doc.prefs.alwaysFineNoteVol && !this._doc.song.getChannelIsMod(this._doc.channel)) {
                                bendSize = Math.floor(bendSize / 2) * 2;
                            }
                            if (bendSize < 0)
                                bendSize = 0;
                            if (bendSize > cap)
                                bendSize = cap;
                            bendInterval = this._snapToPitch(prevPin.interval * (1.0 - sizeRatio) + nextPin.interval * sizeRatio + this._cursor.curNote.pitches[0], 0, this._getMaxPitch()) - this._cursor.curNote.pitches[0];
                            break;
                        }
                        if (this._doc.song.getChannelIsMod(this._doc.channel) && this.controlMode) {
                            if (bendPart >= this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time) {
                                if (this._cursor.curNote.start + this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time < this._doc.song.beatsPerBar * Config.partsPerBeat) {
                                    for (const note of this._pattern.notes) {
                                        if (note.start == this._cursor.curNote.start + this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time && note.pitches[0] == this._cursor.curNote.pitches[0]) {
                                            sequence.append(new ChangeSizeBend(this._doc, note, note.pins[0].time, bendSize, bendInterval, this.shiftMode));
                                        }
                                    }
                                }
                                else {
                                    const nextPattern = this._doc.getCurrentPattern(1);
                                    if (nextPattern != null && nextPattern.instruments[0] == this._pattern.instruments[0]) {
                                        for (const note of nextPattern.notes) {
                                            if (note.start == 0 && note.pitches[0] == this._cursor.curNote.pitches[0]) {
                                                sequence.append(new ChangeSizeBend(this._doc, note, note.pins[0].time, bendSize, bendInterval, this.shiftMode));
                                            }
                                        }
                                    }
                                }
                            }
                            else if (bendPart <= this._cursor.curNote.pins[0].time) {
                                if (this._cursor.curNote.start > 0) {
                                    for (const note of this._pattern.notes) {
                                        if (note.end == this._cursor.curNote.start && note.pitches[0] == this._cursor.curNote.pitches[0]) {
                                            sequence.append(new ChangeSizeBend(this._doc, note, note.pins[note.pins.length - 1].time, bendSize, bendInterval, this.shiftMode));
                                        }
                                    }
                                }
                                else {
                                    const prevPattern = this._doc.getCurrentPattern(-1);
                                    if (prevPattern != null && prevPattern.instruments[0] == this._pattern.instruments[0]) {
                                        for (const note of prevPattern.notes) {
                                            if (note.end == this._doc.song.beatsPerBar * Config.partsPerBeat && note.pitches[0] == this._cursor.curNote.pitches[0]) {
                                                sequence.append(new ChangeSizeBend(this._doc, note, note.pins[note.pins.length - 1].time, bendSize, bendInterval, this.shiftMode));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        this._dragTime = this._cursor.curNote.start + bendPart;
                        this._dragPitch = this._cursor.curNote.pitches[this._cursor.pitchIndex == -1 ? 0 : this._cursor.pitchIndex] + bendInterval;
                        this._dragSize = bendSize;
                        this._dragVisible = true;
                        sequence.append(new ChangeSizeBend(this._doc, this._cursor.curNote, bendPart, bendSize, bendInterval, this.shiftMode));
                        this._copyPins(this._cursor.curNote);
                    }
                    else {
                        sequence.append(new ChangePatternSelection(this._doc, 0, 0));
                        this._dragSize = this._cursor.curNote.pins[this._cursor.nearPinIndex].size;
                        if (this._pattern == null)
                            throw new Error();
                        let bendStart;
                        let bendEnd;
                        if (this._mouseX >= this._mouseXStart) {
                            bendStart = Math.max(this._cursor.curNote.start, this._cursor.part);
                            bendEnd = currentPart + minDivision;
                        }
                        else {
                            bendStart = Math.min(this._cursor.curNote.end, this._cursor.part + minDivision);
                            bendEnd = currentPart;
                        }
                        if (bendEnd < 0)
                            bendEnd = 0;
                        if (bendEnd > this._doc.song.beatsPerBar * Config.partsPerBeat)
                            bendEnd = this._doc.song.beatsPerBar * Config.partsPerBeat;
                        if (bendEnd > this._cursor.curNote.end) {
                            sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, this._cursor.curNote.start, bendEnd, this._cursor.curNote));
                        }
                        if (bendEnd < this._cursor.curNote.start) {
                            sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, bendEnd, this._cursor.curNote.end, this._cursor.curNote));
                        }
                        let minPitch = Number.MAX_VALUE;
                        let maxPitch = -Number.MAX_VALUE;
                        for (const pitch of this._cursor.curNote.pitches) {
                            if (minPitch > pitch)
                                minPitch = pitch;
                            if (maxPitch < pitch)
                                maxPitch = pitch;
                        }
                        minPitch -= this._cursor.curNote.pitches[this._cursor.pitchIndex];
                        maxPitch -= this._cursor.curNote.pitches[this._cursor.pitchIndex];
                        if (!this._doc.song.getChannelIsMod(this._doc.channel)) {
                            const bendTo = this._snapToPitch(this._findMousePitch(this._mouseY), -minPitch, this._getMaxPitch() - maxPitch);
                            sequence.append(new ChangePitchBend(this._doc, this._cursor.curNote, bendStart, bendEnd, bendTo, this._cursor.pitchIndex));
                            this._dragPitch = bendTo;
                        }
                        else {
                            const bendTo = this._snapToPitch(this._dragPitch, -minPitch, Config.modCount - 1);
                            sequence.append(new ChangePitchBend(this._doc, this._cursor.curNote, bendStart, bendEnd, bendTo, this._cursor.pitchIndex));
                            this._dragPitch = bendTo;
                        }
                        this._copyPins(this._cursor.curNote);
                        this._dragTime = bendEnd;
                        this._dragVisible = true;
                    }
                }
            }
            if (!(this._mouseDown && this._cursor.valid && continuousState)) {
                this._updateCursorStatus();
                this._updatePreview();
            }
        }
        _setPatternSelection(change) {
            this._changePatternSelection = change;
            this._doc.record(this._changePatternSelection, this._lastChangeWasPatternSelection);
        }
        _updatePreview() {
            if (this._usingTouch) {
                if (!this._mouseDown || !this._cursor.valid || !this._mouseDragging || !this._dragVisible || this._shiftHeld || this._draggingStartOfSelection || this._draggingEndOfSelection || this._draggingSelectionContents) {
                    this._svgPreview.setAttribute("visibility", "hidden");
                    if (!this.editingModLabel) {
                        this.modDragValueLabel.style.setProperty("display", "none");
                        this.modDragValueLabel.style.setProperty("pointer-events", "none");
                        this.modDragValueLabel.setAttribute("contenteditable", "false");
                    }
                }
                else {
                    this._svgPreview.setAttribute("visibility", "visible");
                    const x = this._partWidth * this._dragTime;
                    const y = this._pitchToPixelHeight(this._dragPitch - this._octaveOffset);
                    const radius = (this._pitchHeight - this._pitchBorder) / 2;
                    const width = 80;
                    const height = 60;
                    const cap = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);
                    let pathString = "";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y - radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x) + " " + prettyNumber(y - radius * (this._dragSize / cap) - height) + " ";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y + radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x) + " " + prettyNumber(y + radius * (this._dragSize / cap) + height) + " ";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y - radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x + width) + " " + prettyNumber(y - radius * (this._dragSize / cap)) + " ";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y + radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x + width) + " " + prettyNumber(y + radius * (this._dragSize / cap)) + " ";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y - radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x - width) + " " + prettyNumber(y - radius * (this._dragSize / cap)) + " ";
                    pathString += "M " + prettyNumber(x) + " " + prettyNumber(y + radius * (this._dragSize / cap)) + " ";
                    pathString += "L " + prettyNumber(x - width) + " " + prettyNumber(y + radius * (this._dragSize / cap)) + " ";
                    this._svgPreview.setAttribute("d", pathString);
                }
            }
            else {
                if (!this._mouseOver || this._mouseDown || !this._cursor.valid) {
                    this._svgPreview.setAttribute("visibility", "hidden");
                    if (!this.editingModLabel) {
                        this.modDragValueLabel.style.setProperty("display", "none");
                        this.modDragValueLabel.style.setProperty("pointer-events", "none");
                        this.modDragValueLabel.setAttribute("contenteditable", "false");
                    }
                }
                else {
                    this._svgPreview.setAttribute("visibility", "visible");
                    if (this._cursorAtStartOfSelection()) {
                        const center = this._partWidth * this._doc.selection.patternSelectionStart;
                        const left = prettyNumber(center - 4);
                        const right = prettyNumber(center + 4);
                        const bottom = this._pitchToPixelHeight(-0.5);
                        this._svgPreview.setAttribute("d", "M " + left + " 0 L " + left + " " + bottom + " L " + right + " " + bottom + " L " + right + " 0 z");
                    }
                    else if (this._cursorAtEndOfSelection()) {
                        const center = this._partWidth * this._doc.selection.patternSelectionEnd;
                        const left = prettyNumber(center - 4);
                        const right = prettyNumber(center + 4);
                        const bottom = this._pitchToPixelHeight(-0.5);
                        this._svgPreview.setAttribute("d", "M " + left + " 0 L " + left + " " + bottom + " L " + right + " " + bottom + " L " + right + " 0 z");
                    }
                    else if (this._cursorIsInSelection()) {
                        const left = prettyNumber(this._partWidth * this._doc.selection.patternSelectionStart - 2);
                        const right = prettyNumber(this._partWidth * this._doc.selection.patternSelectionEnd + 2);
                        const bottom = this._pitchToPixelHeight(-0.5);
                        this._svgPreview.setAttribute("d", "M " + left + " 0 L " + left + " " + bottom + " L " + right + " " + bottom + " L " + right + " 0 z");
                    }
                    else {
                        this._drawNote(this._svgPreview, this._cursor.pitch, this._cursor.start, this._cursor.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, true, this._octaveOffset);
                    }
                }
            }
        }
        _updateSelection() {
            if (this._doc.selection.patternSelectionActive) {
                this._selectionRect.setAttribute("visibility", "visible");
                this._selectionRect.setAttribute("x", String(this._partWidth * this._doc.selection.patternSelectionStart));
                this._selectionRect.setAttribute("width", String(this._partWidth * (this._doc.selection.patternSelectionEnd - this._doc.selection.patternSelectionStart)));
            }
            else {
                this._selectionRect.setAttribute("visibility", "hidden");
            }
        }
        render() {
            const nextPattern = this._doc.getCurrentPattern(this._barOffset);
            if (this._pattern != nextPattern) {
                if (this._doc.song.getChannelIsMod(this._doc.channel) && this._interactive && nextPattern != null) {
                    nextPattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                }
                if (this._pattern != null) {
                    this._dragChange = null;
                    this._whenCursorReleased(null);
                }
            }
            this._pattern = nextPattern;
            this._editorWidth = this.container.clientWidth;
            this._editorHeight = this.container.clientHeight;
            this._partWidth = this._editorWidth / (this._doc.song.beatsPerBar * Config.partsPerBeat);
            this._octaveOffset = (this._doc.channel >= this._doc.song.pitchChannelCount) ? 0 : this._doc.song.channels[this._doc.channel].octave * Config.pitchesPerOctave;
            if (this._doc.song.getChannelIsNoise(this._doc.channel)) {
                this._pitchBorder = 0;
                this._pitchCount = Config.drumCount;
            }
            else if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                this._pitchBorder = this._defaultModBorder;
                this._pitchCount = Config.modCount;
                if (this._pattern != null) {
                    for (const note of this._pattern.notes) {
                        let pitch = note.pitches[0];
                        let maxHeight = this._doc.song.getVolumeCap(true, this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), pitch);
                        let maxFoundHeight = 0;
                        for (const pin of note.pins) {
                            if (pin.size > maxFoundHeight) {
                                maxFoundHeight = pin.size;
                            }
                        }
                        if (maxFoundHeight > maxHeight) {
                            for (const pin of note.pins) {
                                pin.size = Math.round(pin.size * (maxHeight / maxFoundHeight));
                            }
                        }
                    }
                }
            }
            else {
                this._pitchBorder = 0;
                this._pitchCount = this._doc.getVisiblePitchCount();
            }
            this._pitchHeight = this._editorHeight / this._pitchCount;
            this._octaveOffset = (this._doc.channel >= this._doc.song.pitchChannelCount) ? 0 : this._doc.getBaseVisibleOctave(this._doc.channel) * Config.pitchesPerOctave;
            if (this._renderedRhythm != this._doc.song.rhythm ||
                this._renderedPitchChannelCount != this._doc.song.pitchChannelCount ||
                this._renderedNoiseChannelCount != this._doc.song.noiseChannelCount ||
                this._renderedModChannelCount != this._doc.song.modChannelCount) {
                this._renderedRhythm = this._doc.song.rhythm;
                this._renderedPitchChannelCount = this._doc.song.pitchChannelCount;
                this._renderedNoiseChannelCount = this._doc.song.noiseChannelCount;
                this._renderedModChannelCount = this._doc.song.modChannelCount;
                this.resetCopiedPins();
            }
            this._copiedPins = this._copiedPinChannels[this._doc.channel];
            if (this._renderedWidth != this._editorWidth || this._renderedHeight != this._editorHeight) {
                this._renderedWidth = this._editorWidth;
                this._renderedHeight = this._editorHeight;
                this._svgBackground.setAttribute("width", "" + this._editorWidth);
                this._svgBackground.setAttribute("height", "" + this._editorHeight);
                this._svgPlayhead.setAttribute("height", "" + this._editorHeight);
                this._selectionRect.setAttribute("y", "0");
                this._selectionRect.setAttribute("height", "" + this._editorHeight);
            }
            const beatWidth = this._editorWidth / this._doc.song.beatsPerBar;
            if (this._renderedBeatWidth != beatWidth || this._renderedPitchHeight != this._pitchHeight) {
                this._renderedBeatWidth = beatWidth;
                this._renderedPitchHeight = this._pitchHeight;
                this._svgNoteBackground.setAttribute("width", "" + beatWidth);
                this._svgNoteBackground.setAttribute("height", "" + (this._pitchHeight * Config.pitchesPerOctave));
                this._svgDrumBackground.setAttribute("width", "" + beatWidth);
                this._svgDrumBackground.setAttribute("height", "" + this._pitchHeight);
                this._svgModBackground.setAttribute("width", "" + beatWidth);
                this._svgModBackground.setAttribute("height", "" + (this._pitchHeight));
                this._svgModBackground.setAttribute("y", "" + (this._pitchBorder / 2));
                this._backgroundDrumRow.setAttribute("width", "" + (beatWidth - 2));
                this._backgroundDrumRow.setAttribute("height", "" + (this._pitchHeight - 2));
                if (this._pitchHeight > this._pitchBorder) {
                    this._backgroundModRow.setAttribute("width", "" + (beatWidth - 2));
                    this._backgroundModRow.setAttribute("height", "" + (this._pitchHeight - this._pitchBorder));
                }
                for (let j = 0; j < Config.pitchesPerOctave; j++) {
                    const rectangle = this._backgroundPitchRows[j];
                    const y = (Config.pitchesPerOctave - j) % Config.pitchesPerOctave;
                    rectangle.setAttribute("width", "" + (beatWidth - 2));
                    rectangle.setAttribute("y", "" + (y * this._pitchHeight + 1));
                    rectangle.setAttribute("height", "" + (this._pitchHeight - 2));
                }
            }
            if (this._interactive) {
                if (!this._mouseDown)
                    this._updateCursorStatus();
                this._updatePreview();
                this._updateSelection();
            }
            if (this._doc.prefs.advancedColorScheme == false) {
                if (this._renderedFifths != this._doc.prefs.showFifth) {
                    this._renderedFifths = this._doc.prefs.showFifth;
                    this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.showFifth ? ColorConfig.fifthNote : ColorConfig.pitchBackground);
                }
                if (this._renderedThirds != this._doc.prefs.showThird) {
                    this._renderedThirds = this._doc.prefs.showThird;
                    this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.showThird ? ColorConfig.thirdNote : ColorConfig.pitchBackground);
                }
                if (this._renderedPiano == true) {
                    this._renderedPiano = false;
                }
                if (this._renderedACS == true) {
                    this._backgroundPitchRows[0].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--tonic, var(--pitch-background))" : ColorConfig.tonic);
                    this._backgroundPitchRows[1].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch1-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[2].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch2-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[3].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch3-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.showThird ? "var(--third-note, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[5].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch5-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[6].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch6-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.showFifth ? "var(--fifth-note, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[8].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch8-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[9].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch9-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[10].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch10-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._backgroundPitchRows[11].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch11-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                    this._renderedACS = false;
                }
                this._setKey = -1;
            }
            else {
                if (ColorConfig.usesPianoScheme == false) {
                    if (this._renderedACS != this._doc.prefs.advancedColorScheme) {
                        this._backgroundPitchRows[0].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--tonic, var(--pitch-background))" : ColorConfig.tonic);
                        this._backgroundPitchRows[1].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch1-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[2].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch2-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[3].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch3-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--third-note, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[5].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch5-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[6].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch6-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--fifth-note, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[8].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch8-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[9].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch9-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[10].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch10-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._backgroundPitchRows[11].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch11-background, var(--pitch-background))" : ColorConfig.pitchBackground);
                        this._renderedACS = true;
                    }
                    if (this._renderedPiano == true) {
                        this._renderedACS = false;
                        this._renderedPiano = false;
                        this._setKey = -1;
                    }
                }
                else {
                    if (this._setKey != this._doc.song.key) {
                        this._setKey = this._doc.song.key;
                        this._renderedPiano = true;
                        if ((this._setKey == 0) || (this._setKey == 2) || (this._setKey == 4) || (this._setKey == 5) || (this._setKey == 7) || (this._setKey == 9) || (this._setKey == 11)) {
                            this._backgroundPitchRows[0].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--white-tonic, var(--pitch-white-key, var(--pitch-background)))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[0].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--black-tonic, var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 1) || (this._setKey == 3) || (this._setKey == 4) || (this._setKey == 6) || (this._setKey == 8) || (this._setKey == 10) || (this._setKey == 11)) {
                            this._backgroundPitchRows[1].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[1].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 0) || (this._setKey == 2) || (this._setKey == 3) || (this._setKey == 5) || (this._setKey == 7) || (this._setKey == 9) || (this._setKey == 10)) {
                            this._backgroundPitchRows[2].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[2].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 1) || (this._setKey == 2) || (this._setKey == 4) || (this._setKey == 6) || (this._setKey == 8) || (this._setKey == 9) || (this._setKey == 11)) {
                            this._backgroundPitchRows[3].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[3].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 0) || (this._setKey == 1) || (this._setKey == 3) || (this._setKey == 5) || (this._setKey == 7) || (this._setKey == 8) || (this._setKey == 10)) {
                            if (this._doc.prefs.showThird == true) {
                                this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--white-third-note, var(--pitch-white-key, var(--pitch-background)))" : ColorConfig.pitchBackground);
                            }
                            else {
                                this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.advancedColorScheme ? " var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                            }
                        }
                        else {
                            if (this._doc.prefs.showThird == true) {
                                this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--black-third-note, var(--pitch-black-key, var(--pitch-background)))" : ColorConfig.pitchBackground);
                            }
                            else {
                                this._backgroundPitchRows[4].setAttribute("fill", this._doc.prefs.advancedColorScheme ? " var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                            }
                        }
                        if ((this._setKey == 0) || (this._setKey == 2) || (this._setKey == 4) || (this._setKey == 6) || (this._setKey == 7) || (this._setKey == 9) || (this._setKey == 11)) {
                            this._backgroundPitchRows[5].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[5].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 1) || (this._setKey == 3) || (this._setKey == 5) || (this._setKey == 6) || (this._setKey == 8) || (this._setKey == 10) || (this._setKey == 11)) {
                            this._backgroundPitchRows[6].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[6].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 0) || (this._setKey == 2) || (this._setKey == 4) || (this._setKey == 5) || (this._setKey == 7) || (this._setKey == 9) || (this._setKey == 10)) {
                            if (this._doc.prefs.showFifth == true) {
                                this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--white-fifth-note, var(--pitch-white-key, var(--pitch-background)))" : ColorConfig.pitchBackground);
                            }
                            else {
                                this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.advancedColorScheme ? " var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                            }
                        }
                        else {
                            if (this._doc.prefs.showFifth == true) {
                                this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--black-fifth-note, var(--pitch-black-key, var(--pitch-background)))" : ColorConfig.pitchBackground);
                            }
                            else {
                                this._backgroundPitchRows[7].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                            }
                        }
                        if ((this._setKey == 1) || (this._setKey == 3) || (this._setKey == 4) || (this._setKey == 6) || (this._setKey == 8) || (this._setKey == 9) || (this._setKey == 11)) {
                            this._backgroundPitchRows[8].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[8].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 0) || (this._setKey == 2) || (this._setKey == 3) || (this._setKey == 5) || (this._setKey == 7) || (this._setKey == 8) || (this._setKey == 10)) {
                            this._backgroundPitchRows[9].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[9].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 1) || (this._setKey == 2) || (this._setKey == 4) || (this._setKey == 6) || (this._setKey == 7) || (this._setKey == 9) || (this._setKey == 11)) {
                            this._backgroundPitchRows[10].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[10].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if ((this._setKey == 0) || (this._setKey == 1) || (this._setKey == 3) || (this._setKey == 5) || (this._setKey == 6) || (this._setKey == 8) || (this._setKey == 10)) {
                            this._backgroundPitchRows[11].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-white-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        else {
                            this._backgroundPitchRows[11].setAttribute("fill", this._doc.prefs.advancedColorScheme ? "var(--pitch-black-key, var(--pitch-background))" : ColorConfig.pitchBackground);
                        }
                        if (this._renderedACS == false) {
                            this._renderedACS = true;
                        }
                    }
                }
                if (this._renderedThirds != this._doc.prefs.showThird) {
                    this._setKey = -1;
                }
                if (this._renderedFifths != this._doc.prefs.showFifth) {
                    this._setKey = -1;
                }
            }
            for (let j = 0; j < Config.pitchesPerOctave; j++) {
                let scale = this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
                this._backgroundPitchRows[j].style.visibility = scale[j] ? "visible" : "hidden";
            }
            if (this._doc.song.getChannelIsNoise(this._doc.channel)) {
                if (!this._renderedDrums) {
                    this._renderedDrums = true;
                    this._renderedMod = false;
                    this._svgBackground.setAttribute("fill", "url(#patternEditorDrumBackground" + this._barOffset + ")");
                }
            }
            else if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                if (!this._renderedMod) {
                    this._renderedDrums = false;
                    this._renderedMod = true;
                    this._svgBackground.setAttribute("fill", "url(#patternEditorModBackground" + this._barOffset + ")");
                }
            }
            else {
                if (this._renderedDrums || this._renderedMod) {
                    this._renderedDrums = false;
                    this._renderedMod = false;
                    this._svgBackground.setAttribute("fill", "url(#patternEditorNoteBackground" + this._barOffset + ")");
                }
            }
            this._redrawNotePatterns();
        }
        _redrawNotePatterns() {
            this._svgNoteContainer = makeEmptyReplacementElement(this._svgNoteContainer);
            if (this._doc.prefs.showChannels) {
                if (!this._doc.song.getChannelIsMod(this._doc.channel)) {
                    for (let channel = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount - 1; channel >= 0; channel--) {
                        if (channel == this._doc.channel)
                            continue;
                        if (this._doc.song.getChannelIsNoise(channel) != this._doc.song.getChannelIsNoise(this._doc.channel))
                            continue;
                        const pattern2 = this._doc.song.getPattern(channel, this._doc.bar + this._barOffset);
                        if (pattern2 == null)
                            continue;
                        const octaveOffset = this._doc.getBaseVisibleOctave(channel) * Config.pitchesPerOctave;
                        for (const note of pattern2.notes) {
                            for (const pitch of note.pitches) {
                                var notePath = SVG.path();
                                notePath.setAttribute("fill", ColorConfig.getChannelColor(this._doc.song, channel).secondaryNote);
                                notePath.setAttribute("pointer-events", "none");
                                this._drawNote(notePath, pitch, note.start, note.pins, this._pitchHeight * 0.19, false, octaveOffset);
                                this._svgNoteContainer.appendChild(notePath);
                                if (this._doc.prefs.notesFlashWhenPlayed) {
                                    notePath = SVG.path();
                                    const noteFlashColor = ColorConfig.getComputed("--note-flash-secondary") !== "" ? "var(--note-flash-secondary)" : "#ffffff77";
                                    notePath.setAttribute("fill", noteFlashColor);
                                    notePath.setAttribute("pointer-events", "none");
                                    this._drawNote(notePath, pitch, note.start, note.pins, this._pitchHeight * 0.19, false, octaveOffset);
                                    this._svgNoteContainer.appendChild(notePath);
                                    notePath.classList.add('note-flash');
                                    notePath.style.opacity = "0";
                                    notePath.setAttribute('note-start', String(note.start));
                                    notePath.setAttribute('note-end', String(note.end));
                                }
                            }
                        }
                    }
                }
            }
            if (this._pattern != null) {
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)];
                const chord = instrument.getChord();
                const transition = instrument.getTransition();
                const displayNumberedChords = chord.customInterval || chord.arpeggiates || chord.strumParts > 0 || transition.slides;
                for (const note of this._pattern.notes) {
                    let disabled = false;
                    if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                        const modIndex = instrument.modulators[Config.modCount - 1 - note.pitches[0]];
                        if ((modIndex == Config.modulators.dictionary["none"].index)
                            || instrument.invalidModulators[Config.modCount - 1 - note.pitches[0]])
                            disabled = true;
                    }
                    for (let i = 0; i < note.pitches.length; i++) {
                        const pitch = note.pitches[i];
                        let notePath = SVG.path();
                        let colorPrimary = (disabled ? ColorConfig.disabledNotePrimary : ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);
                        let colorSecondary = (disabled ? ColorConfig.disabledNoteSecondary : ColorConfig.getChannelColor(this._doc.song, this._doc.channel).secondaryNote);
                        notePath.setAttribute("fill", colorSecondary);
                        notePath.setAttribute("pointer-events", "none");
                        if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                            notePath.setAttribute("class", "mod-note-secondary");
                        }
                        else {
                            notePath.setAttribute("class", "note-secondary");
                        }
                        this._drawNote(notePath, pitch, note.start, note.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, false, this._octaveOffset);
                        this._svgNoteContainer.appendChild(notePath);
                        notePath = SVG.path();
                        notePath.setAttribute("fill", colorPrimary);
                        notePath.setAttribute("pointer-events", "none");
                        this._drawNote(notePath, pitch, note.start, note.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, true, this._octaveOffset);
                        this._svgNoteContainer.appendChild(notePath);
                        if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                            notePath.setAttribute("class", "mod-note-primary");
                        }
                        else {
                            notePath.setAttribute("class", "note-primary");
                        }
                        if (this._doc.prefs.notesFlashWhenPlayed && !disabled) {
                            notePath = SVG.path();
                            const noteFlashColor = ColorConfig.getComputed("--note-flash") !== "" ? "var(--note-flash)" : "#ffffff";
                            notePath.setAttribute("fill", noteFlashColor);
                            notePath.setAttribute("pointer-events", "none");
                            this._drawNote(notePath, pitch, note.start, note.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, true, this._octaveOffset);
                            this._svgNoteContainer.appendChild(notePath);
                            notePath.classList.add('note-flash');
                            notePath.style.opacity = "0";
                            notePath.setAttribute('note-start', String(note.start));
                            notePath.setAttribute('note-end', String(note.end));
                            if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                                notePath.setAttribute("class", "mod-note-flash");
                            }
                        }
                        let indicatorOffset = 2;
                        if (note.continuesLastPattern) {
                            const arrowHeight = Math.min(this._pitchHeight, 20);
                            let arrowPath;
                            arrowPath = "M " + prettyNumber(this._partWidth * note.start + indicatorOffset) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.1 * arrowHeight);
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.3 * arrowHeight);
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset + 12) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset));
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.3 * arrowHeight);
                            arrowPath += "L " + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + " " + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.1 * arrowHeight);
                            const arrow = SVG.path();
                            arrow.setAttribute("d", arrowPath);
                            arrow.setAttribute("fill", ColorConfig.invertedText);
                            this._svgNoteContainer.appendChild(arrow);
                            indicatorOffset += 12;
                        }
                        if (note.pitches.length > 1) {
                            if (displayNumberedChords) {
                                const oscillatorLabel = SVG.text();
                                oscillatorLabel.setAttribute("x", "" + prettyNumber(this._partWidth * note.start + indicatorOffset));
                                oscillatorLabel.setAttribute("y", "" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset)));
                                oscillatorLabel.setAttribute("width", "30");
                                oscillatorLabel.setAttribute("fill", ColorConfig.invertedText);
                                oscillatorLabel.setAttribute("text-anchor", "start");
                                oscillatorLabel.setAttribute("dominant-baseline", "central");
                                oscillatorLabel.setAttribute("pointer-events", "none");
                                oscillatorLabel.textContent = "" + (i + 1);
                                this._svgNoteContainer.appendChild(oscillatorLabel);
                            }
                        }
                    }
                    if (this._doc.song.getChannelIsMod(this._doc.channel) && this._mouseDragging && !this._mouseHorizontal && note == this._cursor.curNote) {
                        this.modDragValueLabel.style.setProperty("display", "");
                        this.modDragValueLabel.style.setProperty("pointer-events", "none");
                        this.modDragValueLabel.setAttribute("contenteditable", "false");
                        this.modDragValueLabel.style.setProperty("color", "#FFFFFF");
                        let setting = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)].modulators[Config.modCount - 1 - note.pitches[0]];
                        let presValue = this._dragSize + Config.modulators[setting].convertRealFactor;
                        let xOffset = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));
                        this._modDragValueLabelWidth = 8 + xOffset * 8;
                        this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * this._dragTime - 4 - xOffset * 4), 2));
                        this._modDragValueLabelTop = +prettyNumber(this._pitchToPixelHeight(note.pitches[0] - this._octaveOffset) - 17 - (this._pitchHeight - this._pitchBorder) / 2);
                        this.modDragValueLabel.style.setProperty("left", "" + this._modDragValueLabelLeft + "px");
                        this.modDragValueLabel.style.setProperty("top", "" + this._modDragValueLabelTop + "px");
                        this.modDragValueLabel.textContent = "" + presValue;
                    }
                }
            }
            this._doc.currentPatternIsDirty = false;
        }
        _drawNote(svgElement, pitch, start, pins, radius, showSize, offset) {
            const totalWidth = this._partWidth * (pins[pins.length - 1].time + pins[0].time);
            const endOffset = 0.5 * Math.min(2, totalWidth - 1);
            let nextPin = pins[0];
            const cap = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), pitch);
            let pathString = "";
            if (window.localStorage.getItem("oldModNotes") != "true") {
                if (this._doc.song.getChannelIsMod(this._doc.channel)) {
                    let pathStringPart1 = "M " + prettyNumber(this._partWidth * (start + nextPin.time) + endOffset) + " ";
                    let pathStringPart2 = prettyNumber(this._pitchToPixelHeight(pitch + offset) + radius) + " ";
                    pathString = pathStringPart1 + pathStringPart2;
                    for (let i = 1; i < pins.length; i++) {
                        let prevPin = nextPin;
                        nextPin = pins[i];
                        let prevSide = this._partWidth * (start + prevPin.time) + (i == 1 ? endOffset : 0);
                        let nextSide = this._partWidth * (start + nextPin.time) - (i == pins.length - 1 ? endOffset : 0);
                        let prevHeight = this._pitchToPixelHeight(pitch + prevPin.interval - offset);
                        let nextHeight = this._pitchToPixelHeight(pitch + nextPin.interval - offset);
                        let prevSize = showSize ? prevPin.size / cap : 1.0;
                        let nextSize = showSize ? nextPin.size / cap : 1.0;
                        pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber((prevHeight + radius) - (radius * 2) * prevSize) + " ";
                        if (prevPin.interval > nextPin.interval)
                            pathString += "L " + prettyNumber(prevSide + 1) + " " + prettyNumber((prevHeight + radius) - (radius * 2) * prevSize) + " ";
                        if (prevPin.interval < nextPin.interval)
                            pathString += "L " + prettyNumber(nextSide - 1) + " " + prettyNumber((nextHeight + radius) - (radius * 2) * nextSize) + " ";
                        pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber((nextHeight + radius) - (radius * 2) * nextSize) + " ";
                    }
                    for (let i = 0; i >= 0; i--) {
                        let prevPin = nextPin;
                        nextPin = pins[i];
                        let prevSide = this._partWidth * (start + prevPin.time) - (i == pins.length - 2 ? endOffset : 0);
                        let nextSide = this._partWidth * (start + nextPin.time) + (i == 0 ? endOffset : 0);
                        let prevHeight = this._pitchToPixelHeight(pitch);
                        let nextHeight = this._pitchToPixelHeight(pitch);
                        pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber(prevHeight + radius) + " ";
                        if (prevPin.interval < nextPin.interval)
                            pathString += "L " + prettyNumber(prevSide - 1) + " " + prettyNumber(prevHeight + radius) + " ";
                        if (prevPin.interval > nextPin.interval)
                            pathString += "L " + prettyNumber(nextSide + 1) + " " + prettyNumber(nextHeight + radius) + " ";
                        pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber(nextHeight + radius) + " ";
                    }
                    pathString += "z";
                }
                else {
                    pathString = "M " + prettyNumber(this._partWidth * (start + nextPin.time) + endOffset) + " " + prettyNumber(this._pitchToPixelHeight(pitch - offset) + radius * (showSize ? nextPin.size / cap : 1.0)) + " ";
                    for (let i = 1; i < pins.length; i++) {
                        let prevPin = nextPin;
                        nextPin = pins[i];
                        let prevSide = this._partWidth * (start + prevPin.time) + (i == 1 ? endOffset : 0);
                        let nextSide = this._partWidth * (start + nextPin.time) - (i == pins.length - 1 ? endOffset : 0);
                        let prevHeight = this._pitchToPixelHeight(pitch + prevPin.interval - offset);
                        let nextHeight = this._pitchToPixelHeight(pitch + nextPin.interval - offset);
                        let prevSize = showSize ? prevPin.size / cap : 1.0;
                        let nextSize = showSize ? nextPin.size / cap : 1.0;
                        pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber(prevHeight - radius * prevSize) + " ";
                        if (prevPin.interval > nextPin.interval)
                            pathString += "L " + prettyNumber(prevSide + 1) + " " + prettyNumber(prevHeight - radius * prevSize) + " ";
                        if (prevPin.interval < nextPin.interval)
                            pathString += "L " + prettyNumber(nextSide - 1) + " " + prettyNumber(nextHeight - radius * nextSize) + " ";
                        pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber(nextHeight - radius * nextSize) + " ";
                    }
                    for (let i = pins.length - 2; i >= 0; i--) {
                        let prevPin = nextPin;
                        nextPin = pins[i];
                        let prevSide = this._partWidth * (start + prevPin.time) - (i == pins.length - 2 ? endOffset : 0);
                        let nextSide = this._partWidth * (start + nextPin.time) + (i == 0 ? endOffset : 0);
                        let prevHeight = this._pitchToPixelHeight(pitch + prevPin.interval - offset);
                        let nextHeight = this._pitchToPixelHeight(pitch + nextPin.interval - offset);
                        let prevSize = showSize ? prevPin.size / cap : 1.0;
                        let nextSize = showSize ? nextPin.size / cap : 1.0;
                        pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber(prevHeight + radius * prevSize) + " ";
                        if (prevPin.interval < nextPin.interval)
                            pathString += "L " + prettyNumber(prevSide - 1) + " " + prettyNumber(prevHeight + radius * prevSize) + " ";
                        if (prevPin.interval > nextPin.interval)
                            pathString += "L " + prettyNumber(nextSide + 1) + " " + prettyNumber(nextHeight + radius * nextSize) + " ";
                        pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber(nextHeight + radius * nextSize) + " ";
                    }
                    pathString += "z";
                }
                svgElement.setAttribute("d", pathString);
            }
            else {
                pathString = "M " + prettyNumber(this._partWidth * (start + nextPin.time) + endOffset) + " " + prettyNumber(this._pitchToPixelHeight(pitch - offset) + radius * (showSize ? nextPin.size / cap : 1.0)) + " ";
                for (let i = 1; i < pins.length; i++) {
                    let prevPin = nextPin;
                    nextPin = pins[i];
                    let prevSide = this._partWidth * (start + prevPin.time) + (i == 1 ? endOffset : 0);
                    let nextSide = this._partWidth * (start + nextPin.time) - (i == pins.length - 1 ? endOffset : 0);
                    let prevHeight = this._pitchToPixelHeight(pitch + prevPin.interval - offset);
                    let nextHeight = this._pitchToPixelHeight(pitch + nextPin.interval - offset);
                    let prevSize = showSize ? prevPin.size / cap : 1.0;
                    let nextSize = showSize ? nextPin.size / cap : 1.0;
                    pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber(prevHeight - radius * prevSize) + " ";
                    if (prevPin.interval > nextPin.interval)
                        pathString += "L " + prettyNumber(prevSide + 1) + " " + prettyNumber(prevHeight - radius * prevSize) + " ";
                    if (prevPin.interval < nextPin.interval)
                        pathString += "L " + prettyNumber(nextSide - 1) + " " + prettyNumber(nextHeight - radius * nextSize) + " ";
                    pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber(nextHeight - radius * nextSize) + " ";
                }
                for (let i = pins.length - 2; i >= 0; i--) {
                    let prevPin = nextPin;
                    nextPin = pins[i];
                    let prevSide = this._partWidth * (start + prevPin.time) - (i == pins.length - 2 ? endOffset : 0);
                    let nextSide = this._partWidth * (start + nextPin.time) + (i == 0 ? endOffset : 0);
                    let prevHeight = this._pitchToPixelHeight(pitch + prevPin.interval - offset);
                    let nextHeight = this._pitchToPixelHeight(pitch + nextPin.interval - offset);
                    let prevSize = showSize ? prevPin.size / cap : 1.0;
                    let nextSize = showSize ? nextPin.size / cap : 1.0;
                    pathString += "L " + prettyNumber(prevSide) + " " + prettyNumber(prevHeight + radius * prevSize) + " ";
                    if (prevPin.interval < nextPin.interval)
                        pathString += "L " + prettyNumber(prevSide - 1) + " " + prettyNumber(prevHeight + radius * prevSize) + " ";
                    if (prevPin.interval > nextPin.interval)
                        pathString += "L " + prettyNumber(nextSide + 1) + " " + prettyNumber(nextHeight + radius * nextSize) + " ";
                    pathString += "L " + prettyNumber(nextSide) + " " + prettyNumber(nextHeight + radius * nextSize) + " ";
                }
                pathString += "z";
                svgElement.setAttribute("d", pathString);
            }
        }
        _pitchToPixelHeight(pitch) {
            return this._pitchHeight * (this._pitchCount - (pitch) - 0.5);
        }
    }

    class Piano {
        forceRender() {
            this._renderedScale = -1;
            this._documentChanged();
        }
        static getBassCutoffPitch(doc) {
            const octaveOffset = doc.getBaseVisibleOctave(doc.channel);
            return octaveOffset * Config.pitchesPerOctave + Math.floor(doc.getVisiblePitchCount() / (Config.pitchesPerOctave * 2)) * Config.pitchesPerOctave;
        }
        constructor(_doc) {
            this._doc = _doc;
            this._pianoContainer = HTML.div({ style: "width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;" });
            this._drumContainer = HTML.div({ style: "width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;" });
            this._modContainer = HTML.div({ style: "width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;" });
            this._preview = HTML.div({ style: `width: 100%; height: 40px; border: 2px solid ${ColorConfig.primaryText}; position: absolute; box-sizing: border-box; pointer-events: none;` });
            this.container = HTML.div({ style: "width: 32px; height: 100%; overflow: hidden; position: relative; flex-shrink: 0; touch-action: none;" }, this._pianoContainer, this._drumContainer, this._modContainer, this._preview);
            this._editorHeight = 481;
            this._pianoKeys = [];
            this._pianoLabels = [];
            this._modFirstLabels = [];
            this._modSecondLabels = [];
            this._modCountLabels = [];
            this._modCountRects = [];
            this._mouseY = 0;
            this._mouseDown = false;
            this._mouseOver = false;
            this._playedPitch = -1;
            this._renderedScale = -1;
            this._renderedDrums = false;
            this._renderedMod = false;
            this._renderedKey = -1;
            this._renderedPitchCount = -1;
            this._renderedLiveInputPitches = [];
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
                this._updatePreview();
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
                this._updatePreview();
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._doc.synth.maintainLiveInput();
                this._mouseDown = true;
                const boundingRect = this.container.getBoundingClientRect();
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._updateCursorPitch();
                this._playLiveInput();
                this._updatePreview();
            };
            this._whenMouseMoved = (event) => {
                if (this._mouseDown || this._mouseOver)
                    this._doc.synth.maintainLiveInput();
                const boundingRect = this.container.getBoundingClientRect();
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._updateCursorPitch();
                if (this._mouseDown)
                    this._playLiveInput();
                this._updatePreview();
            };
            this._whenMouseReleased = (event) => {
                if (this._mouseDown)
                    this._releaseLiveInput();
                this._mouseDown = false;
                this._updatePreview();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._doc.synth.maintainLiveInput();
                this._mouseDown = true;
                const boundingRect = this.container.getBoundingClientRect();
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._updateCursorPitch();
                this._playLiveInput();
            };
            this._whenTouchMoved = (event) => {
                event.preventDefault();
                this._doc.synth.maintainLiveInput();
                const boundingRect = this.container.getBoundingClientRect();
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._updateCursorPitch();
                if (this._mouseDown)
                    this._playLiveInput();
            };
            this._whenTouchReleased = (event) => {
                event.preventDefault();
                this._mouseDown = false;
                this._releaseLiveInput();
            };
            this._onAnimationFrame = () => {
                window.requestAnimationFrame(this._onAnimationFrame);
                let liveInputChanged = false;
                let liveInputPitchCount = !this._doc.performance.pitchesAreTemporary() ? this._doc.synth.liveInputPitches.length : 0;
                liveInputPitchCount += !this._doc.performance.bassPitchesAreTemporary() ? this._doc.synth.liveBassInputPitches.length : 0;
                if (this._renderedLiveInputPitches.length != liveInputPitchCount) {
                    liveInputChanged = true;
                }
                for (let i = 0; i < this._doc.synth.liveInputPitches.length; i++) {
                    if (this._renderedLiveInputPitches[i] != this._doc.synth.liveInputPitches[i]) {
                        this._renderedLiveInputPitches[i] = this._doc.synth.liveInputPitches[i];
                        liveInputChanged = true;
                    }
                }
                for (let i = this._doc.synth.liveInputPitches.length; i < liveInputPitchCount; i++) {
                    if (this._renderedLiveInputPitches[i] != this._doc.synth.liveBassInputPitches[i - this._doc.synth.liveInputPitches.length]) {
                        this._renderedLiveInputPitches[i] = this._doc.synth.liveBassInputPitches[i - this._doc.synth.liveInputPitches.length];
                        liveInputChanged = true;
                    }
                }
                this._renderedLiveInputPitches.length = liveInputPitchCount;
                if (liveInputChanged) {
                    this._updatePreview();
                }
            };
            this._documentChanged = () => {
                const isDrum = this._doc.song.getChannelIsNoise(this._doc.channel);
                const isMod = this._doc.song.getChannelIsMod(this._doc.channel);
                this._pitchCount = isMod ? Config.modCount : (isDrum ? Config.drumCount : this._doc.getVisiblePitchCount());
                this._pitchHeight = this._editorHeight / this._pitchCount;
                this._updateCursorPitch();
                if (this._mouseDown)
                    this._playLiveInput();
                if (!this._doc.prefs.showLetters)
                    return;
                if ((this._renderedScale == this._doc.song.scale && this._doc.song.scale != Config.scales.dictionary["Custom"].index) && this._renderedKey == this._doc.song.key && this._renderedDrums == isDrum && this._renderedMod == isMod && this._renderedPitchCount == this._pitchCount)
                    return;
                this._renderedScale = this._doc.song.scale;
                this._renderedKey = this._doc.song.key;
                this._renderedDrums = isDrum;
                this._renderedMod = isMod;
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                this._pianoContainer.style.display = (isDrum || isMod) ? "none" : "flex";
                this._drumContainer.style.display = isDrum ? "flex" : "none";
                this._modContainer.style.display = isMod ? "flex" : "none";
                if (!isDrum && !isMod) {
                    if (this._renderedPitchCount != this._pitchCount) {
                        this._pianoContainer.innerHTML = "";
                        for (let i = 0; i < this._pitchCount; i++) {
                            const pianoLabel = HTML.div({ class: "piano-label", style: "font-weight: bold; -webkit-text-stroke-width: 0; font-size: 11px; font-family: sans-serif; position: absolute; padding-left: 15px;" });
                            const pianoKey = HTML.div({ class: "piano-button", style: "background: gray;" }, pianoLabel);
                            this._pianoContainer.appendChild(pianoKey);
                            this._pianoLabels[i] = pianoLabel;
                            this._pianoKeys[i] = pianoKey;
                        }
                        this._pianoLabels.length = this._pitchCount;
                        this._pianoKeys.length = this._pitchCount;
                        this._renderedPitchCount = this._pitchCount;
                    }
                    for (let j = 0; j < this._pitchCount; j++) {
                        const pitchNameIndex = (j + Config.keys[this._doc.song.key].basePitch) % Config.pitchesPerOctave;
                        const isWhiteKey = Config.keys[pitchNameIndex].isWhiteKey;
                        this._pianoKeys[j].style.background = isWhiteKey ? ColorConfig.whitePianoKey : ColorConfig.blackPianoKey;
                        let scale = this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
                        if (!scale[j % Config.pitchesPerOctave]) {
                            this._pianoKeys[j].classList.add("disabled");
                            this._pianoLabels[j].style.display = "none";
                        }
                        else {
                            this._pianoKeys[j].classList.remove("disabled");
                            this._pianoLabels[j].style.display = "";
                            const label = this._pianoLabels[j];
                            if ((j % 12) == 0) {
                                label.style.transform = "translate(-5px, 0px)";
                            }
                            else {
                                label.style.transform = "translate(0px, 0px)";
                            }
                            label.style.color = Config.keys[pitchNameIndex].isWhiteKey ? ColorConfig.whitePianoKeyText : ColorConfig.blackPianoKeyText;
                            label.textContent = Piano.getPitchName(pitchNameIndex, j, this._doc.getBaseVisibleOctave(this._doc.channel) + this._doc.song.octave);
                        }
                    }
                }
                else if (isMod) {
                    let firstRow = "";
                    let secondRow = "";
                    let useFirstColor = ColorConfig.modLabelPrimaryText;
                    let useSecondColor = ColorConfig.modLabelSecondaryText;
                    for (let j = 0; j < Config.modCount; j++) {
                        let usingSecondRow = true;
                        let usingMod = true;
                        let instrumentVal = instrument.modInstruments[Config.modCount - j - 1] + 1;
                        let channelVal = instrument.modChannels[Config.modCount - j - 1] + 1;
                        let modulator = instrument.modulators[Config.modCount - j - 1];
                        let status = 1 + +(channelVal - 1 >= this._doc.song.pitchChannelCount);
                        if (instrument.modChannels[Config.modCount - j - 1] == -2)
                            status = 0;
                        else if (instrument.modChannels[Config.modCount - j - 1] == -1)
                            status = 3;
                        let instrumentsLength = this._doc.song.channels[Math.max(0, channelVal - 1)].instruments.length;
                        switch (status) {
                            case 0:
                                firstRow = "Mod";
                                usingSecondRow = false;
                                useSecondColor = ColorConfig.modLabelSecondaryText;
                                usingMod = false;
                                break;
                            case 1:
                                if (this._doc.song.channels[channelVal - 1].name == "") {
                                    if (instrumentsLength > 1) {
                                        if (channelVal >= 10 || instrumentVal >= 10) {
                                            firstRow = "P" + channelVal;
                                            if (instrumentVal - 1 == instrumentsLength) {
                                                firstRow += " All";
                                            }
                                            else if (instrumentVal - 1 > instrumentsLength) {
                                                firstRow += " Act";
                                            }
                                            else {
                                                firstRow += " I" + instrumentVal;
                                            }
                                        }
                                        else {
                                            firstRow = "Pitch" + channelVal;
                                            if (instrumentVal - 1 == instrumentsLength) {
                                                firstRow += " All";
                                            }
                                            else if (instrumentVal - 1 > instrumentsLength) {
                                                firstRow += " Act";
                                            }
                                            else {
                                                firstRow += " Ins" + instrumentVal;
                                            }
                                        }
                                    }
                                    else {
                                        firstRow = "Pitch " + channelVal;
                                    }
                                }
                                else {
                                    let insText;
                                    if (instrumentVal - 1 == instrumentsLength) {
                                        insText = " All";
                                    }
                                    else if (instrumentVal - 1 > instrumentsLength) {
                                        insText = " Act";
                                    }
                                    else {
                                        insText = " I" + instrumentVal;
                                    }
                                    if (instrumentsLength > 1) {
                                        firstRow = "P" + channelVal + " " + this._doc.song.channels[channelVal - 1].name + insText;
                                    }
                                    else {
                                        firstRow = "P" + channelVal + " " + this._doc.song.channels[channelVal - 1].name;
                                    }
                                }
                                break;
                            case 2:
                                const absoluteChannelVal = instrument.modChannels[Config.modCount - j - 1];
                                const relativeChannelVal = absoluteChannelVal - this._doc.song.pitchChannelCount;
                                if (this._doc.song.channels[absoluteChannelVal].name == "") {
                                    if (instrumentsLength > 1) {
                                        if ((relativeChannelVal + 1) >= 10 || instrumentVal >= 10) {
                                            firstRow = "N" + (relativeChannelVal + 1);
                                            if (instrumentVal - 1 == instrumentsLength) {
                                                firstRow += " All";
                                            }
                                            else if (instrumentVal - 1 > instrumentsLength) {
                                                firstRow += " Act";
                                            }
                                            else {
                                                firstRow += " I" + instrumentVal;
                                            }
                                        }
                                        else {
                                            firstRow = "Noise" + (relativeChannelVal + 1);
                                            if (instrumentVal - 1 == instrumentsLength) {
                                                firstRow += " All";
                                            }
                                            else if (instrumentVal - 1 > instrumentsLength) {
                                                firstRow += " Act";
                                            }
                                            else {
                                                firstRow += " Ins" + instrumentVal;
                                            }
                                        }
                                    }
                                    else {
                                        firstRow = "Noise " + (relativeChannelVal + 1);
                                    }
                                }
                                else {
                                    if (instrumentsLength > 1) {
                                        let insText;
                                        if (instrumentVal - 1 == instrumentsLength) {
                                            insText = " All";
                                        }
                                        else if (instrumentVal - 1 > instrumentsLength) {
                                            insText = " Act";
                                        }
                                        else {
                                            insText = " I" + instrumentVal;
                                        }
                                        firstRow = "N" + (relativeChannelVal + 1) + " " + this._doc.song.channels[absoluteChannelVal].name + insText;
                                    }
                                    else {
                                        firstRow = "N" + (relativeChannelVal + 1) + " " + this._doc.song.channels[absoluteChannelVal].name;
                                    }
                                }
                                break;
                            case 3:
                                firstRow = "Song";
                                break;
                        }
                        if (usingSecondRow) {
                            secondRow = Config.modulators[modulator].pianoName;
                            if (modulator == Config.modulators.dictionary["none"].index) {
                                useSecondColor = ColorConfig.modLabelSecondaryText;
                                usingMod = false;
                            }
                            else if (modulator == Config.modulators.dictionary["eq filter"].index || modulator == Config.modulators.dictionary["note filter"].index) {
                                var text = " Morph";
                                var filterVal = instrument.modFilterTypes[Config.modCount - j - 1];
                                if (filterVal > 0 && (filterVal % 2)) {
                                    text = " Dot" + Math.ceil(filterVal / 2) + "X";
                                }
                                else if (filterVal > 0) {
                                    text = " Dot" + Math.ceil(filterVal / 2) + "Y";
                                }
                                secondRow += text;
                            }
                        }
                        const firstLabel = this._modFirstLabels[j];
                        const secondLabel = this._modSecondLabels[j];
                        const modCountLabel = this._modCountLabels[j];
                        const modCountRect = this._modCountRects[j];
                        firstLabel.style.fill = useFirstColor;
                        firstLabel.textContent = firstRow;
                        secondLabel.style.fill = useSecondColor;
                        secondLabel.textContent = usingSecondRow ? secondRow : "Not set";
                        modCountLabel.textContent = "" + (Config.modCount - j);
                        modCountRect.style.fill = usingMod ? ColorConfig.indicatorPrimary : ColorConfig.modLabelSecondaryText;
                        if (this._doc.song.channels[Math.max(0, instrument.modChannels[Config.modCount - j - 1])].name != "") {
                            let scaleFactor = "1";
                            let height = firstLabel.parentElement.parentElement.getBoundingClientRect().height;
                            let length = firstLabel.getComputedTextLength();
                            let squeeze = 0;
                            if (length > height - 8) {
                                scaleFactor = "0.65";
                                squeeze = 2;
                            }
                            else if (length > height - 24) {
                                scaleFactor = "0.8";
                                squeeze = 1;
                            }
                            firstLabel.style.transform = "rotate(-90deg) translate(" + (-20 - squeeze - Math.round(Math.max(0, (height - 80) / 2))) + "px, 39px) scale(" + scaleFactor + ", 1)";
                            while (scaleFactor == "0.65" && firstLabel.getComputedTextLength() > height + 8) {
                                var offset = 4 + (instrumentVal >= 10 ? 1 : 0);
                                firstLabel.textContent = firstLabel.textContent.substr(0, firstLabel.textContent.length - offset) + firstLabel.textContent.substr(firstLabel.textContent.length - offset + 1);
                            }
                        }
                        else {
                            let height = firstLabel.parentElement.parentElement.getBoundingClientRect().height;
                            firstLabel.style.transform = "rotate(-90deg) translate(" + (-20 - Math.round(Math.max(0, (height - 80) / 2))) + "px, 39px) scale(1, 1)";
                        }
                    }
                }
                this._updatePreview();
            };
            for (let i = 0; i < Config.drumCount; i++) {
                const scale = (1.0 - (i / Config.drumCount) * 0.35) * 100;
                this._drumContainer.appendChild(HTML.div({ class: "drum-button", style: `background-size: ${scale}% ${scale}%;` }));
            }
            for (let i = 0; i < Config.modCount; i++) {
                const firstRowText = SVG.text({ class: "modulator-label", "text-anchor": "left", fill: ColorConfig.modLabelPrimaryText, style: "font-weight: bold; align-self: flex-start; transform-origin: center; transform: rotate(-90deg) translate(-19px, 39px); font-size: 11px; font-family: sans-serif;" });
                const secondRowText = SVG.text({ class: "modulator-label", "text-anchor": "left", fill: ColorConfig.modLabelPrimaryText, style: "font-weight: bold; align-self: flex-end; transform-origin: center; transform: rotate(-90deg) translate(-26px, 42px); font-size: 11px; font-family: sans-serif;" });
                const countText = SVG.text({ class: "modulator-inverse-label", fill: ColorConfig.modLabelPrimary, style: "font-weight: bold; align-self: flex-start; transform-origin: center; transform: rotate(-90deg) translate(4px, 13px); font-size: 11px; font-family: sans-serif;" });
                const countRect = SVG.rect({ width: "12px", height: "9px", fill: ColorConfig.indicatorPrimary, style: "pointer-events: none; transform: translate(4px, 4px);" });
                const firstRowSVG = SVG.svg({ viewBox: "0 0 16 66", width: "16px", style: "pointer-events: none; flex-grow: 1;" }, [
                    firstRowText,
                ]);
                const countSVG = SVG.svg({ viewBox: "0 0 16 14", width: "16px", style: "pointer-events: none;" }, [
                    countRect,
                    countText,
                ]);
                const secondRowSVG = SVG.svg({ viewBox: "0 0 16 80", width: "16px", style: "pointer-events: none;" }, [
                    secondRowText,
                ]);
                const flexRow1 = HTML.div({ style: "display: flex; flex-direction: column; justify-content: space-between; pointer-events: none;" }, [
                    countSVG,
                    firstRowSVG,
                ]);
                const flexRow2 = HTML.div({ style: "display: flex; flex-direction: column-reverse; justify-content: space-between; pointer-events: none;" }, [
                    secondRowSVG,
                ]);
                const flexContainer = HTML.div({ style: "display: flex; flex-direction: row; justify-content: space-between; padding: 0px; width: 32px; height: 100%; overflow: hidden; pointer-events: none;" }, [
                    flexRow1,
                    flexRow2,
                ]);
                const modKey = HTML.div({ class: "modulator-button", style: "background: " + ColorConfig.modLabelPrimary + ";" }, flexContainer);
                this._modContainer.appendChild(modKey);
                this._modFirstLabels.push(firstRowText);
                this._modSecondLabels.push(secondRowText);
                this._modCountLabels.push(countText);
                this._modCountRects.push(countRect);
            }
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenMouseReleased);
            this.container.addEventListener("mouseover", this._whenMouseOver);
            this.container.addEventListener("mouseout", this._whenMouseOut);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenTouchReleased);
            this.container.addEventListener("touchcancel", this._whenTouchReleased);
            this._doc.notifier.watch(this._documentChanged);
            this._documentChanged();
            window.requestAnimationFrame(this._onAnimationFrame);
        }
        _updateCursorPitch() {
            const scale = this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
            const mousePitch = Math.max(0, Math.min(this._pitchCount - 1, this._pitchCount - (this._mouseY / this._pitchHeight)));
            if (scale[Math.floor(mousePitch) % Config.pitchesPerOctave] || this._doc.song.getChannelIsNoise(this._doc.channel)) {
                this._cursorPitch = Math.floor(mousePitch);
            }
            else {
                let topPitch = Math.floor(mousePitch) + 1;
                let bottomPitch = Math.floor(mousePitch) - 1;
                while (!scale[topPitch % Config.pitchesPerOctave]) {
                    topPitch++;
                }
                while (!scale[(bottomPitch) % Config.pitchesPerOctave]) {
                    bottomPitch--;
                }
                let topRange = topPitch;
                let bottomRange = bottomPitch + 1;
                if (topPitch % Config.pitchesPerOctave == 0 || topPitch % Config.pitchesPerOctave == 7) {
                    topRange -= 0.5;
                }
                if (bottomPitch % Config.pitchesPerOctave == 0 || bottomPitch % Config.pitchesPerOctave == 7) {
                    bottomRange += 0.5;
                }
                this._cursorPitch = mousePitch - bottomRange > topRange - mousePitch ? topPitch : bottomPitch;
            }
        }
        _playLiveInput() {
            const octaveOffset = this._doc.getBaseVisibleOctave(this._doc.channel) * Config.pitchesPerOctave;
            const currentPitch = this._cursorPitch + octaveOffset;
            if (this._playedPitch == currentPitch)
                return;
            this._doc.performance.removePerformedPitch(this._playedPitch);
            this._playedPitch = currentPitch;
            this._doc.performance.addPerformedPitch(currentPitch);
        }
        _releaseLiveInput() {
            this._doc.performance.removePerformedPitch(this._playedPitch);
            this._playedPitch = -1;
        }
        _updatePreview() {
            this._preview.style.visibility = (!this._mouseOver || this._mouseDown) ? "hidden" : "visible";
            if (this._mouseOver && !this._mouseDown) {
                const boundingRect = this.container.getBoundingClientRect();
                const pitchHeight = this._pitchHeight / (this._editorHeight / (boundingRect.bottom - boundingRect.top));
                this._preview.style.left = "0px";
                this._preview.style.top = pitchHeight * (this._pitchCount - this._cursorPitch - 1) + "px";
                this._preview.style.height = pitchHeight + "px";
            }
            const octaveOffset = this._doc.getBaseVisibleOctave(this._doc.channel) * Config.pitchesPerOctave;
            const container = this._doc.song.getChannelIsNoise(this._doc.channel) ? this._drumContainer : this._pianoContainer;
            const children = container.children;
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (this._renderedLiveInputPitches.indexOf(i + octaveOffset) == -1) {
                    child.classList.remove("pressed");
                }
                else {
                    child.classList.add("pressed");
                }
            }
        }
        static getPitchName(pitchNameIndex, scaleIndex, baseVisibleOctave) {
            let text;
            if (Config.keys[pitchNameIndex].isWhiteKey) {
                text = Config.keys[pitchNameIndex].name;
            }
            else {
                const shiftDir = Config.blackKeyNameParents[scaleIndex % Config.pitchesPerOctave];
                text = Config.keys[(pitchNameIndex + Config.pitchesPerOctave + shiftDir) % Config.pitchesPerOctave].name;
                if (shiftDir == 1) {
                    text += "♭";
                }
                else if (shiftDir == -1) {
                    text += "♯";
                }
            }
            if (scaleIndex % 12 == 0) {
                text += Math.floor(scaleIndex / 12) + baseVisibleOctave;
            }
            return text;
        }
    }

    const { button: button$e, div: div$e, span: span$3, h2: h2$d, input: input$6, br, select: select$a, option: option$a } = HTML;
    class SongDurationPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._barsStepper = input$6({ style: "width: 3em; margin-left: 1em;", type: "number", step: "1" });
            this._positionSelect = select$a({ style: "width: 100%;" }, option$a({ value: "end" }, "Apply change at end of song."), option$a({ value: "beginning" }, "Apply change at beginning of song."));
            this._cancelButton = button$e({ class: "cancelButton" });
            this._okayButton = button$e({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$e({ class: "prompt noSelection", style: "width: 250px;" }, div$e({ class: "promptTitle" }, h2$d({ class: "song-lengthExt", style: "text-align: inherit;" }, ""), h2$d({ class: "song-lengthTitle" }, "Song Length")), div$e({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$e({ style: "display: inline-block; text-align: right;" }, "Bars per song:", br(), span$3({ style: `font-size: smaller; color: ${ColorConfig.secondaryText};` }, "(Multiples of 4 are recommended)")), this._barsStepper), div$e({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$e({ class: "selectContainer", style: "width: 100%;" }, this._positionSelect)), div$e({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._barsStepper.removeEventListener("keypress", SongDurationPrompt._validateKey);
                this._barsStepper.removeEventListener("blur", SongDurationPrompt._validateNumber);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                window.localStorage.setItem("barCountPosition", this._positionSelect.value);
                const group = new ChangeGroup();
                group.append(new ChangeBarCount(this._doc, SongDurationPrompt._validate(this._barsStepper), this._positionSelect.value == "beginning"));
                this._doc.prompt = null;
                this._doc.record(group, true);
            };
            this._barsStepper.value = this._doc.song.barCount + "";
            this._barsStepper.min = Config.barCountMin + "";
            this._barsStepper.max = Config.barCountMax + "";
            const lastPosition = window.localStorage.getItem("barCountPosition");
            if (lastPosition != null) {
                this._positionSelect.value = lastPosition;
            }
            this._barsStepper.select();
            setTimeout(() => this._barsStepper.focus());
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._barsStepper.addEventListener("keypress", SongDurationPrompt._validateKey);
            this._barsStepper.addEventListener("blur", SongDurationPrompt._validateNumber);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
        static _validateKey(event) {
            const charCode = (event.which) ? event.which : event.keyCode;
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                event.preventDefault();
                return true;
            }
            return false;
        }
        static _validateNumber(event) {
            const input = event.target;
            input.value = String(SongDurationPrompt._validate(input));
        }
        static _validate(input) {
            return Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));
        }
    }

    const { button: button$d, div: div$d, h2: h2$c, p: p$8, select: select$9, option: option$9 } = HTML;
    class SustainPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._typeSelect = select$9({ style: "width: 100%;" }, option$9({ value: "acoustic" }, "(A) Acoustic"), option$9({ value: "bright" }, "(B) Bright"));
            this._cancelButton = button$d({ class: "cancelButton" });
            this._okayButton = button$d({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$d({ class: "prompt", style: "width: 300px;" }, div$d(h2$c("String Sustain"), p$8("This setting controls how quickly the picked string vibration decays."), p$8("Unlike most of BeepBox's instrument synthesizer features, a picked string cannot change frequency suddenly while maintaining its decay. If a tone's pitch changes suddenly (e.g. if the chord type is set to \"arpeggio\" or the transition type is set to \"continues\") then the string will be re-picked and start decaying from the beginning again, even if the envelopes don't otherwise restart.")), div$d({ style: { display: Config.enableAcousticSustain ? undefined : "none" } }, p$8("BeepBox comes with two slightly different sustain designs. You can select one here and press \"Okay\" to confirm it."), div$d({ class: "selectContainer", style: "width: 100%;" }, this._typeSelect)), div$d({ style: { display: Config.enableAcousticSustain ? "flex" : "none", "flex-direction": "row-reverse", "justify-content": "space-between" } }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                if (Config.enableAcousticSustain) {
                    const group = new ChangeGroup();
                    group.append(new ChangeStringSustainType(this._doc, Config.sustainTypeNames.indexOf(this._typeSelect.value)));
                    this._doc.prompt = null;
                    this._doc.record(group, true);
                }
                else {
                    this._close();
                }
            };
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            this._typeSelect.value = Config.sustainTypeNames[instrument.stringSustainType];
            setTimeout(() => this._cancelButton.focus());
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
    }

    const versionPrefix = "songVersion: ";
    const maximumSongCount = 8;
    const maximumWorkPerVersion = 3 * 60 * 1000;
    const minimumWorkPerSpan = 1 * 60 * 1000;
    function keyIsVersion(key) {
        return key.indexOf(versionPrefix) == 0;
    }
    function keyToVersion(key) {
        return JSON.parse(key.substring(versionPrefix.length));
    }
    function versionToKey(version) {
        return versionPrefix + JSON.stringify(version);
    }
    function generateUid() {
        return ((Math.random() * (-1 >>> 0)) >>> 0).toString(32);
    }
    function compareSongs(a, b) {
        return b.versions[0].time - a.versions[0].time;
    }
    function errorAlert(error) {
        console.warn(error);
        window.alert(`uh oh..! seems like your song corrupted! If you use the "Recover Recent Song..." option in AbyssBox's "File" menu, there's a chance you might get it back. If that doesn't work then searching in your History might help.`);
    }
    function compareVersions(a, b) {
        return b.time - a.time;
    }
    class SongRecovery {
        constructor() {
            this._song = new Song();
        }
        static getAllRecoveredSongs() {
            const songs = [];
            const songsByUid = {};
            for (let i = 0; i < localStorage.length; i++) {
                const itemKey = localStorage.key(i);
                if (keyIsVersion(itemKey)) {
                    const version = keyToVersion(itemKey);
                    let song = songsByUid[version.uid];
                    if (song == undefined) {
                        song = { versions: [] };
                        songsByUid[version.uid] = song;
                        songs.push(song);
                    }
                    song.versions.push(version);
                }
            }
            for (const song of songs) {
                song.versions.sort(compareVersions);
            }
            songs.sort(compareSongs);
            return songs;
        }
        saveVersion(uid, name, songData) {
            const newName = name;
            const newTime = Math.round(Date.now());
            clearTimeout(this._saveVersionTimeoutHandle);
            this._saveVersionTimeoutHandle = setTimeout(() => {
                try {
                    this._song.fromBase64String(songData);
                }
                catch (error) {
                    errorAlert(error);
                    return;
                }
                const songs = SongRecovery.getAllRecoveredSongs();
                let currentSong = null;
                for (const song of songs) {
                    if (song.versions[0].uid == uid) {
                        currentSong = song;
                    }
                }
                if (currentSong == null) {
                    currentSong = { versions: [] };
                    songs.unshift(currentSong);
                }
                let versions = currentSong.versions;
                let newWork = 1000;
                if (versions.length > 0) {
                    const mostRecentTime = versions[0].time;
                    const mostRecentWork = versions[0].work;
                    newWork = mostRecentWork + Math.min(maximumWorkPerVersion, newTime - mostRecentTime);
                }
                const newVersion = { uid: uid, name: newName, time: newTime, work: newWork };
                const newKey = versionToKey(newVersion);
                versions.unshift(newVersion);
                localStorage.setItem(newKey, songData);
                let minSpan = minimumWorkPerSpan;
                const spanMult = Math.pow(2, 1 / 2);
                for (var i = 1; i < versions.length; i++) {
                    const currentWork = versions[i].work;
                    const olderWork = (i == versions.length - 1) ? 0.0 : versions[i + 1].work;
                    if (currentWork - olderWork < minSpan) {
                        let indexToDiscard = i;
                        if (i < versions.length - 1) {
                            const currentTime = versions[i].time;
                            const newerTime = versions[i - 1].time;
                            const olderTime = versions[i + 1].time;
                            if ((currentTime - olderTime) < 0.5 * (newerTime - currentTime)) {
                                indexToDiscard = i + 1;
                            }
                        }
                        localStorage.removeItem(versionToKey(versions[indexToDiscard]));
                        break;
                    }
                    minSpan *= spanMult;
                }
                while (songs.length > maximumSongCount) {
                    let leastImportantSong = null;
                    let leastImportance = Number.POSITIVE_INFINITY;
                    for (let i = Math.round(maximumSongCount / 2); i < songs.length; i++) {
                        const song = songs[i];
                        const timePassed = newTime - song.versions[0].time;
                        const timeScale = 1.0 / ((timePassed / (12 * 60 * 60 * 1000)) + 1.0);
                        const adjustedWork = song.versions[0].work + 5 * 60 * 1000;
                        const weight = adjustedWork * timeScale;
                        if (leastImportance > weight) {
                            leastImportance = weight;
                            leastImportantSong = song;
                        }
                    }
                    for (const version of leastImportantSong.versions) {
                        localStorage.removeItem(versionToKey(version));
                    }
                    songs.splice(songs.indexOf(leastImportantSong), 1);
                }
            }, 750);
        }
    }

    const { button: button$c, div: div$c, h2: h2$b, p: p$7, select: select$8, option: option$8, iframe } = HTML;
    class SongRecoveryPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._songContainer = div$c();
            this._cancelButton = button$c({ class: "cancelButton" });
            this.container = div$c({ class: "prompt", style: "width: 300px;" }, div$c({ class: "promptTitle" }, h2$b({ class: "songRecovExt", style: "text-align: inherit;" }, ""), h2$b({ class: "songRecovTitle" }, "Song Recovery")), div$c({ style: "max-height: 385px; overflow-y: auto;" }, p$7("This is a TEMPORARY list of songs you have recently modified. Please keep your own backups of songs you care about! SONGS THAT USE SAMPLES WILL TAKE A WHILE TO LOAD, so be patient!"), this._songContainer, p$7("(If \"Display Song Data in URL\" is enabled in your preferences, then you may also be able to find song versions in your browser history. However, song recovery won't work if you were browsing in private/incognito mode.)")), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._cancelButton.removeEventListener("click", this._close);
            };
            this._cancelButton.addEventListener("click", this._close);
            const songs = SongRecovery.getAllRecoveredSongs();
            if (songs.length == 0) {
                this._songContainer.appendChild(p$7("There are no recovered songs available yet. Try making a song!"));
            }
            for (const song of songs) {
                const versionMenu = select$8({ style: "width: 100%;" });
                for (const version of song.versions) {
                    versionMenu.appendChild(option$8({ value: version.time }, version.name + ": " + new Date(version.time).toLocaleString()));
                }
                const player = iframe({ style: "width: 100%; height: 60px; border: none; display: block;" });
                player.src = "sr-player/#song=" + window.localStorage.getItem(versionToKey(song.versions[0]));
                const container = div$c({ style: "margin: 4px 0;" }, div$c({ class: "selectContainer", style: "width: 100%; margin: 2px 0;" }, versionMenu), player);
                this._songContainer.appendChild(container);
                versionMenu.addEventListener("change", () => {
                    const version = song.versions[versionMenu.selectedIndex];
                    player.contentWindow.location.replace("sr-player/#song=" + window.localStorage.getItem(versionToKey(version)));
                    player.contentWindow.dispatchEvent(new Event("hashchange"));
                });
            }
        }
    }

    const { button: button$b, label, div: div$b, p: p$6, a: a$3, h2: h2$a, input: input$5, select: select$7, option: option$7 } = HTML;
    class RecordingSetupPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._keyboardMode = select$7({ style: "width: 100%;" }, option$7({ value: "useCapsLockForNotes" }, "simple shortcuts, use caps lock to play notes"), option$7({ value: "pressControlForShortcuts" }, "simple notes, press " + EditorConfig.ctrlName + " for shortcuts"));
            this._keyboardLayout = select$7({ style: "width: 100%;" }, option$7({ value: "wickiHayden" }, "Wicki-Hayden"), option$7({ value: "songScale" }, "selected song scale"), option$7({ value: "pianoAtC" }, "piano starting at C :)"), option$7({ value: "pianoAtA" }, "piano starting at A :("), option$7({ value: "pianoTransposingC" }, "piano transposing C :) to song key"), option$7({ value: "pianoTransposingA" }, "piano transposing A :( to song key"));
            this._bassOffset = select$7({ style: "width: 100%;" }, option$7({ value: "0" }, "disabled"), option$7({ value: "-1" }, "before"), option$7({ value: "1" }, "after"));
            this._keyboardLayoutPreview = div$b({ style: "display: grid; row-gap: 4px; margin: 4px auto; font-size: 10px;" });
            this._enableMidi = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._showRecordButton = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._snapRecordedNotesToRhythm = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._ignorePerformedNotesNotInScale = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._metronomeCountIn = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._metronomeWhileRecording = input$5({ style: "width: 2em; margin-left: 1em;", type: "checkbox" });
            this._okayButton = button$b({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._cancelButton = button$b({ class: "cancelButton" });
            this.container = div$b({ class: "prompt noSelection recordingSetupPrompt", style: "width: 600px; text-align: right; max-height: 90%;" }, div$b({ class: "promptTitle" }, h2$a({ class: "nrsExt", style: "text-align: inherit;" }, ""), h2$a({ class: "nrsTitle" }, "Note Recording Setup")), div$b({ style: "display: grid; overflow-y: auto; overflow-x: hidden; flex-shrink: 1;" }, p$6("AbyssBox can record notes as you perform them. You can start recording by pressing Ctrl+Space (or " + EditorConfig.ctrlSymbol + "P)."), label({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, "Add ● record button next to ▶ play button:", this._showRecordButton), label({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, "Snap recorded notes to the song's rhythm:", this._snapRecordedNotesToRhythm), label({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, "Ignore notes not in the song's scale:", this._ignorePerformedNotesNotInScale), p$6("While recording, you can perform notes on your keyboard!"), label({ style: "display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; margin-bottom: 0.5em; height: 2em; justify-content: center;" }, "Keyboard layout:", div$b({ class: "selectContainer", style: "width: 65%; margin-left: 1em;" }, this._keyboardLayout)), this._keyboardLayoutPreview, p$6("When not recording, you can use the computer keyboard either for shortcuts (like C and V for copy and paste) or for performing notes, depending on this mode:"), label({ style: "display: flex; margin-top: 0.5em; margin-bottom: 0.5em; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, div$b({ class: "selectContainer", style: "width: 50%;" }, this._keyboardMode)), p$6("Performing music takes practice! Try slowing the tempo and using this metronome to help you keep a rhythm."), label({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, "Hear metronome while recording:", this._metronomeWhileRecording), label({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;" }, "Count-in 1 bar of metronome before recording:", this._metronomeCountIn), p$6("If you have a ", a$3({ href: "https://caniuse.com/midi", target: "_blank" }, "compatible browser"), " on a device connected to a MIDI keyboard, you can use it to perform notes in AbyssBox! (Or you could buy ", a$3({ href: "https://imitone.com/", target: "_blank" }, "Imitone"), " or ", a$3({ href: "https://vochlea.com/", target: "_blank" }, "Dubler"), " to hum notes into a microphone while wearing headphones!)"), label({ style: "display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; height: 2em; justify-content: center;" }, "Enable MIDI performance:", this._enableMidi), p$6("The range of pitches available to play via your computer keyboard is affected by the octave scrollbar of the currently selected channel."), p$6("If you set the channel offset below to 'before' or 'after', notes below the middle octave in the view will be 'bass' notes, and placed in the channel before or after the viewed one. Using this, you can play bass and lead at the same time!"), label({ style: "display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; margin-bottom: 0.5em; height: 2em; justify-content: center;" }, "Bass Offset:", div$b({ class: "selectContainer", style: "width: 50%; margin-left: 1em;" }, this._bassOffset)), p$6("Once you enable the setting, the keyboard layout above will darken to denote the new bass notes. The notes will be recorded with independent timing and this works with MIDI devices, too. Be aware that the octave offset of both used channels will impact how high/low the bass/lead are relative to one another."), p$6("Recorded notes often overlap such that one note ends after the next note already started. In UltraBox, these notes get split into multiple notes which may sound different when re-played than they did when you were recording. To fix the sound, you can either manually clean up the notes in the pattern editor, or you could try enabling the \"transition type\" effect on the instrument and setting it to \"continue\"."), div$b({ style: `width: 100%; height: 80px; background: linear-gradient(rgba(0,0,0,0), ${ColorConfig.editorBackground}); position: sticky; bottom: 0; pointer-events: none;` })), div$b({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._confirm);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._confirm();
                }
            };
            this._confirm = () => {
                this._doc.prefs.pressControlForShortcuts = (this._keyboardMode.value == "pressControlForShortcuts");
                this._doc.prefs.keyboardLayout = this._keyboardLayout.value;
                this._doc.prefs.bassOffset = Number(this._bassOffset.value);
                this._doc.prefs.enableMidi = this._enableMidi.checked;
                this._doc.prefs.showRecordButton = this._showRecordButton.checked;
                this._doc.prefs.snapRecordedNotesToRhythm = this._snapRecordedNotesToRhythm.checked;
                this._doc.prefs.ignorePerformedNotesNotInScale = this._ignorePerformedNotesNotInScale.checked;
                this._doc.prefs.metronomeCountIn = this._metronomeCountIn.checked;
                this._doc.prefs.metronomeWhileRecording = this._metronomeWhileRecording.checked;
                this._doc.prefs.save();
                this._close();
            };
            this._renderKeyboardLayoutPreview = () => {
                while (this._keyboardLayoutPreview.firstChild) {
                    this._keyboardLayoutPreview.removeChild(this._keyboardLayoutPreview.firstChild);
                }
                const rowLengths = [12, 12, 11, 10];
                const scale = this._doc.song.scale == Config.scales.dictionary["Custom"].index ? this._doc.song.scaleCustom : Config.scales[this._doc.song.scale].flags;
                for (let rowIndex = 0; rowIndex < 4; rowIndex++) {
                    const row = div$b({ style: "display: flex;" });
                    this._keyboardLayoutPreview.appendChild(row);
                    const spacer = div$b({ style: "width: " + (rowIndex * 12) + "px; height: 20px; flex-shrink: 0;" });
                    row.appendChild(spacer);
                    for (let colIndex = 0; colIndex < rowLengths[rowIndex]; colIndex++) {
                        const key = div$b({ style: `width: 20px; height: 20px; margin: 0 2px; box-sizing: border-box; flex-shrink: 0; display: flex; justify-content: center; align-items: center;` });
                        row.appendChild(key);
                        const pitch = KeyboardLayout.keyPosToPitch(this._doc, colIndex, 3 - rowIndex, this._keyboardLayout.value);
                        if (pitch != null) {
                            const scalePitch = pitch % 12;
                            if (scale[scalePitch]) {
                                if (scalePitch == 0) {
                                    key.style.background = ColorConfig.tonic;
                                }
                                else if (scalePitch == 7 && this._doc.prefs.showFifth) {
                                    key.style.background = ColorConfig.fifthNote;
                                }
                                else {
                                    key.style.background = ColorConfig.pitchBackground;
                                }
                            }
                            else {
                                key.style.border = "2px solid " + ColorConfig.pitchBackground;
                            }
                            if (this._bassOffset.selectedIndex != 0 && pitch <= Piano.getBassCutoffPitch(this._doc)) {
                                key.style.setProperty("filter", "hue-rotate(60deg) brightness(0.5)");
                            }
                            else {
                                key.style.setProperty("filter", "");
                            }
                            const pitchNameIndex = (scalePitch + Config.keys[this._doc.song.key].basePitch) % Config.pitchesPerOctave;
                            key.textContent = Piano.getPitchName(pitchNameIndex, scalePitch, Math.floor(pitch / 12));
                        }
                    }
                }
            };
            this._keyboardMode.value = this._doc.prefs.pressControlForShortcuts ? "pressControlForShortcuts" : "useCapsLockForNotes";
            this._keyboardLayout.value = this._doc.prefs.keyboardLayout;
            this._enableMidi.checked = this._doc.prefs.enableMidi;
            this._bassOffset.value = String(this._doc.prefs.bassOffset);
            this._showRecordButton.checked = this._doc.prefs.showRecordButton;
            this._snapRecordedNotesToRhythm.checked = this._doc.prefs.snapRecordedNotesToRhythm;
            this._ignorePerformedNotesNotInScale.checked = this._doc.prefs.ignorePerformedNotesNotInScale;
            this._metronomeCountIn.checked = this._doc.prefs.metronomeCountIn;
            this._metronomeWhileRecording.checked = this._doc.prefs.metronomeWhileRecording;
            setTimeout(() => this._showRecordButton.focus());
            this._okayButton.addEventListener("click", this._confirm);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._renderKeyboardLayoutPreview();
            this._keyboardLayout.addEventListener("change", this._renderKeyboardLayoutPreview);
            this._bassOffset.addEventListener("change", this._renderKeyboardLayoutPreview);
        }
    }

    class SpectrumEditor {
        constructor(_doc, _spectrumIndex) {
            this._doc = _doc;
            this._spectrumIndex = _spectrumIndex;
            this._editorWidth = 120;
            this._editorHeight = 26;
            this._fill = SVG.path({ fill: ColorConfig.uiWidgetBackground, "pointer-events": "none" });
            this._octaves = SVG.svg({ "pointer-events": "none" });
            this._fifths = SVG.svg({ "pointer-events": "none" });
            this._curve = SVG.path({ fill: "none", stroke: "currentColor", "stroke-width": 2, "pointer-events": "none" });
            this._arrow = SVG.path({ fill: "currentColor", "pointer-events": "none" });
            this._svg = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;`, width: "100%", height: "100%", viewBox: "0 0 " + this._editorWidth + " " + this._editorHeight, preserveAspectRatio: "none" }, this._fill, this._octaves, this._fifths, this._curve, this._arrow);
            this.container = HTML.div({ class: "spectrum", style: "height: 100%;" }, this._svg);
            this._mouseX = 0;
            this._mouseY = 0;
            this._freqPrev = 0;
            this._ampPrev = 0;
            this._mouseDown = false;
            this._change = null;
            this._renderedPath = "";
            this._renderedFifths = true;
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._freqPrev = this._xToFreq(this._mouseX);
                this._ampPrev = this._yToAmp(this._mouseY);
                this._whenCursorMoved();
            };
            this._whenTouchPressed = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._freqPrev = this._xToFreq(this._mouseX);
                this._ampPrev = this._yToAmp(this._mouseY);
                this._whenCursorMoved();
            };
            this._whenMouseMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenTouchMoved = (event) => {
                if (this.container.offsetParent == null)
                    return;
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const boundingRect = this._svg.getBoundingClientRect();
                this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);
                this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);
                if (isNaN(this._mouseX))
                    this._mouseX = 0;
                if (isNaN(this._mouseY))
                    this._mouseY = 0;
                this._whenCursorMoved();
            };
            this._whenCursorReleased = (event) => {
                if (this._mouseDown) {
                    this._doc.record(this._change);
                    this._change = null;
                }
                this._mouseDown = false;
            };
            for (let i = 0; i < Config.spectrumControlPoints; i += Config.spectrumControlPointsPerOctave) {
                this._octaves.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i + 1) * this._editorWidth / (Config.spectrumControlPoints + 2) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            for (let i = 4; i <= Config.spectrumControlPoints; i += Config.spectrumControlPointsPerOctave) {
                this._fifths.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i + 1) * this._editorWidth / (Config.spectrumControlPoints + 2) - 1, y: 0, width: 2, height: this._editorHeight }));
            }
            this.container.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenCursorReleased);
            this.container.addEventListener("touchstart", this._whenTouchPressed);
            this.container.addEventListener("touchmove", this._whenTouchMoved);
            this.container.addEventListener("touchend", this._whenCursorReleased);
            this.container.addEventListener("touchcancel", this._whenCursorReleased);
        }
        _xToFreq(x) {
            return (Config.spectrumControlPoints + 2) * x / this._editorWidth - 1;
        }
        _yToAmp(y) {
            return Config.spectrumMax * (1 - (y - 1) / (this._editorHeight - 2));
        }
        _whenCursorMoved() {
            if (this._mouseDown) {
                const freq = this._xToFreq(this._mouseX);
                const amp = this._yToAmp(this._mouseY);
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                const spectrumWave = (this._spectrumIndex == null) ? instrument.spectrumWave : instrument.drumsetSpectrumWaves[this._spectrumIndex];
                if (freq != this._freqPrev) {
                    const slope = (amp - this._ampPrev) / (freq - this._freqPrev);
                    const offset = this._ampPrev - this._freqPrev * slope;
                    const lowerFreq = Math.ceil(Math.min(this._freqPrev, freq));
                    const upperFreq = Math.floor(Math.max(this._freqPrev, freq));
                    for (let i = lowerFreq; i <= upperFreq; i++) {
                        if (i < 0 || i >= Config.spectrumControlPoints)
                            continue;
                        spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(i * slope + offset)));
                    }
                }
                spectrumWave.spectrum[Math.max(0, Math.min(Config.spectrumControlPoints - 1, Math.round(freq)))] = Math.max(0, Math.min(Config.spectrumMax, Math.round(amp)));
                this._freqPrev = freq;
                this._ampPrev = amp;
                this._change = new ChangeSpectrum(this._doc, instrument, spectrumWave);
                this._doc.setProspectiveChange(this._change);
            }
        }
        render() {
            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            const spectrumWave = (this._spectrumIndex == null) ? instrument.spectrumWave : instrument.drumsetSpectrumWaves[this._spectrumIndex];
            const controlPointToHeight = (point) => {
                return (1 - (point / Config.spectrumMax)) * (this._editorHeight - 1) + 1;
            };
            let lastValue = 0;
            let path = "M 0 " + prettyNumber(this._editorHeight) + " ";
            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                let nextValue = spectrumWave.spectrum[i];
                if (lastValue != 0 || nextValue != 0) {
                    path += "L ";
                }
                else {
                    path += "M ";
                }
                path += prettyNumber((i + 1) * this._editorWidth / (Config.spectrumControlPoints + 2)) + " " + prettyNumber(controlPointToHeight(nextValue)) + " ";
                lastValue = nextValue;
            }
            const lastHeight = controlPointToHeight(lastValue);
            if (lastValue > 0) {
                path += "L " + (this._editorWidth - 1) + " " + prettyNumber(lastHeight) + " ";
            }
            if (this._renderedPath != path) {
                this._renderedPath = path;
                this._curve.setAttribute("d", path);
                this._fill.setAttribute("d", path + "L " + this._editorWidth + " " + prettyNumber(lastHeight) + " L " + this._editorWidth + " " + prettyNumber(this._editorHeight) + " L 0 " + prettyNumber(this._editorHeight) + " z ");
                this._arrow.setAttribute("d", "M " + this._editorWidth + " " + prettyNumber(lastHeight) + " L " + (this._editorWidth - 4) + " " + prettyNumber(lastHeight - 4) + " L " + (this._editorWidth - 4) + " " + prettyNumber(lastHeight + 4) + " z");
                this._arrow.style.display = (lastValue > 0) ? "" : "none";
            }
            if (this._renderedFifths != this._doc.prefs.showFifth) {
                this._renderedFifths = this._doc.prefs.showFifth;
                this._fifths.style.display = this._doc.prefs.showFifth ? "" : "none";
            }
        }
    }

    const { button: button$a, div: div$a, h2: h2$9, option: option$6, select: select$6, optgroup: optgroup$1 } = HTML;
    class ThemePrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._themeSelect = select$6({ style: "width: 100%;", id: "themeSelect" }, optgroup$1({ label: "AbyssBox Themes" }, option$6({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$6({ value: "AbyssBox Competitive" }, "AbyssBox Competitive"), option$6({ value: "AbyssBox Light" }, "AbyssBox Light"), option$6({ value: "AbyssBox 0.8" }, "AbyssBox 0.8"), option$6({ value: "AbyssBox Piano" }, "AbyssBox Piano [!]"), option$6({ value: "Half-Life" }, "Half-Life"), option$6({ value: "Half-Life: Source" }, "Half-Life: Source"), option$6({ value: "Doom 1993" }, "Doom 1993"), option$6({ value: "Undertale" }, "Undertale"), option$6({ value: "Yume Nikki" }, "Yume Nikki [!]"), option$6({ value: "Scratch" }, "Scratch"), option$6({ value: "Scratch Addons" }, "Scratch Addons"), option$6({ value: "Windows Xp" }, "Windows Xp"), option$6({ value: "Frutiger Aero" }, "Frutiger Aero"), option$6({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$6({ value: "corporate dark" }, "Corporate Dark"), option$6({ value: "corporate light" }, "Corporate Light"), option$6({ value: "Glyde" }, "Glyde"), option$6({ value: "starry studio" }, "Starry Studio"), option$6({ value: "Terminal 2.0 (AB)" }, "Terminal 2.0 (AB)"), option$6({ value: "Slushie" }, "Slushie"), option$6({ value: "Slushie Pixel" }, "Slushie 2"), option$6({ value: "BeepBox Pixel" }, "BeepBox Pixel"), option$6({ value: "forest 2" }, "Forest 2"), option$6({ value: "canyon 2" }, "Canyon 2"), option$6({ value: "Nebula 2" }, "Nebula 2"), option$6({ value: "Ghost House" }, "Ghost House"), option$6({ value: "Ghost House 2" }, "Ghost House 2")), optgroup$1({ label: "BeepBox Themes" }, option$6({ value: "dark classic" }, "BeepBox Dark"), option$6({ value: "light classic" }, "BeepBox Light"), option$6({ value: "dark competition" }, "BeepBox Competition Dark")), optgroup$1({ label: "JummBox Themes" }, option$6({ value: "jummbox classic" }, "JummBox Dark"), option$6({ value: "jummbox light" }, "JummBox Light"), option$6({ value: "forest" }, "Forest"), option$6({ value: "canyon" }, "Canyon"), option$6({ value: "midnight" }, "Midnight"), option$6({ value: "beachcombing" }, "Beachcombing"), option$6({ value: "violet verdant" }, "Violet Verdant"), option$6({ value: "sunset" }, "Sunset"), option$6({ value: "autumn" }, "Autumn"), option$6({ value: "fruit" }, "Shadowfruit"), option$6({ value: "toxic" }, "Toxic"), option$6({ value: "roe" }, "Roe"), option$6({ value: "moonlight" }, "Moonlight"), option$6({ value: "portal" }, "Portal"), option$6({ value: "fusion" }, "Fusion"), option$6({ value: "inverse" }, "Inverse"), option$6({ value: "nebula" }, "Nebula"), option$6({ value: "roe light" }, "Roe Light"), option$6({ value: "amoled dark" }, "High Contrast Dark"), option$6({ value: "energized" }, "Energized"), option$6({ value: "neapolitan" }, "Neapolitan"), option$6({ value: "mono" }, "Poly"), option$6({ value: "blutonium" }, "Blutonium")), optgroup$1({ label: "ModBox Themes" }, option$6({ value: "modbox classic" }, "Modbox"), option$6({ value: "modbox 2" }, "Modbox 2.0"), option$6({ value: "modbox artic" }, "Artic"), option$6({ value: "modbox cinnamon" }, "Cinnamon Roll [!]"), option$6({ value: "modbox ocean" }, "Ocean"), option$6({ value: "modbox rainbow" }, "Rainbow [!]"), option$6({ value: "modbox float" }, "Float [!]"), option$6({ value: "modbox windows" }, "Windows"), option$6({ value: "modbox grassland" }, "Grassland"), option$6({ value: "modbox dessert" }, "Dessert"), option$6({ value: "modbox kahoot" }, "Kahootiest"), option$6({ value: "modbox bitbeam" }, "Beam to the Bit [!]"), option$6({ value: "modbox egg" }, "Pretty Egg"), option$6({ value: "modbox pony" }, "Poniryoshka"), option$6({ value: "modbox gameboy" }, "Gameboy [!]"), option$6({ value: "modbox woodkid" }, "Woodkid [!]"), option$6({ value: "modbox midnight" }, "Midnight [!]"), option$6({ value: "modbox snedbox" }, "Snedbox"), option$6({ value: "modbox unnamed" }, "unnamed [!]"), option$6({ value: "modbox piano" }, "Piano [!]"), option$6({ value: "modbox halloween" }, "Halloween [!]"), option$6({ value: "modbox frozen" }, "FrozenOver❄️ [!]")), optgroup$1({ label: "ShitBox Themes" }, option$6({ value: "shitbox 1.0" }, "Shitbox 1.0"), option$6({ value: "shitbox 2.0" }, "Shitbox 2.0"), option$6({ value: "shitbox 3.0" }, "Shitbox 3.0/shitbox4"), option$6({ value: "shitbox ModBox 2.0" }, "Shitbox ModBox 2.0"), option$6({ value: "shitbox Realm" }, "Shitbox Realm [!]")), optgroup$1({ label: "Nepbox Themes" }, option$6({ value: "nepbox" }, "Nepbox"), option$6({ value: "nepbox laffey" }, "Laffey"), option$6({ value: "nepbox snedbox" }, "Snedbox (Nb) [!]"), option$6({ value: "nepbox piano" }, "Piano (Nb) [!]")), optgroup$1({ label: "Mod Default Themes" }, option$6({ value: "sandbox classic" }, "Sandbox"), option$6({ value: "harrybox" }, "Haileybox"), option$6({ value: "brucebox" }, "Brucebox"), option$6({ value: "nerdbox" }, "NerdBox"), option$6({ value: "zefbox" }, "Zefbox"), option$6({ value: "cardboardbox classic" }, "Cardboardbox"), option$6({ value: "blubox classic" }, "Blubox"), option$6({ value: "dogebox classic" }, "Dogebox"), option$6({ value: "dogebox dark" }, "Way too Dark (DB)/TOO DARK(BluB)"), option$6({ value: "wackybox" }, "Wackybox"), option$6({ value: "todbox dark mode" }, "Todbox Dark Mode"), option$6({ value: "mainbox 1.0" }, "Mainbox"), option$6({ value: "microbox" }, "MicroBox"), option$6({ value: "paandorasbox" }, "PaandorasBox"), option$6({ value: "foxbox" }, "FoxBox"), option$6({ value: "midbox" }, "Midbox"), option$6({ value: "gold light" }, "Gold Light"), option$6({ value: "dogebox2" }, "Dogebox2"), option$6({ value: "WeebBox" }, "WeebBox"), option$6({ value: "BoxBeep Dark" }, "BoxBeep Dark"), option$6({ value: "BoxBeep light" }, "BoxBeep Light"), option$6({ value: "birdbox dark" }, "BirdBox Dark"), option$6({ value: "birdbox light" }, "BirdBox Light")), optgroup$1({ label: "Miscellaneous Themes" }, option$6({ value: "azur lane" }, "Azur Lane"), option$6({ value: "AWeebyssBox" }, "AWeebyssBox"), option$6({ value: "Deuteranopia" }, "Deuteranopia"), option$6({ value: "Protanopia" }, "Protanopia"), option$6({ value: "Tritanopia" }, "Tritanopia"), option$6({ value: "2012 Video Tutorial" }, "2012 Video Tutorial"), option$6({ value: "I am on fire" }, "I am on fire"), option$6({ value: "custom" }, "Custom")));
            this._cancelButton = button$a({ class: "cancelButton" });
            this._okayButton = button$a({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.lastTheme = window.localStorage.getItem("colorTheme");
            this.container = div$a({ class: "prompt noSelection", id: "themeContainerPrompt", style: "width: 220px;" }, div$a({ class: "promptTitle" }, h2$9({ class: "themeExt", style: "text-align: inherit;" }, ""), h2$9({ class: "themeTitle", style: "margin-bottom: 0.5em;" }, "Set Theme")), div$a({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$a({ class: "selectContainer", style: "width: 100%;" }, this._themeSelect)), div$a({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                window.localStorage.setItem("colorTheme", this._themeSelect.value);
                this._doc.prompt = null;
                this._doc.prefs.colorTheme = this._themeSelect.value;
                this._doc.undo();
            };
            this._previewTheme = () => {
                ColorConfig.setTheme(this._themeSelect.value);
                if (this._themeSelect.value != "custom") {
                    CustomThemeBases.setFont("none");
                    CustomThemeBases.setBackground("none");
                    CustomThemeBases.setBorder("none");
                    CustomThemeBases.setIcons("none");
                    CustomThemeBases.setCursor("none");
                }
                else {
                    const localFont = window.localStorage.getItem("customFontName") || "none";
                    const localBG = window.localStorage.getItem("backgroundName") || "none";
                    const localBorder = window.localStorage.getItem("customBorderName") || "none";
                    const localIcons = window.localStorage.getItem("customIconsName") || "none";
                    const localCursor = window.localStorage.getItem("customCursorName") || "none";
                    CustomThemeBases.setFont(localFont);
                    CustomThemeBases.setBackground(localBG);
                    CustomThemeBases.setBackground(localIcons);
                    CustomThemeBases.setBorder(localBorder);
                    CustomThemeBases.setCursor(localCursor);
                }
                this._doc.notifier.changed();
            };
            this._close = () => {
                if (this.lastTheme != null) {
                    ColorConfig.setTheme(this.lastTheme);
                }
                else {
                    ColorConfig.setTheme("AbyssBox Classic");
                }
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._close);
                this._cancelButton.removeEventListener("click", this._close);
            };
            if (this.lastTheme != null) {
                this._themeSelect.value = this.lastTheme;
            }
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._themeSelect.addEventListener("change", this._previewTheme);
        }
    }

    const t={id:"",classname:"",theme:"light",toggle:!0,popover:!0,position:"bottom-start",margin:4,preset:!0,color:"#000",default:"#000",target:"",disabled:!1,format:"rgb",singleInput:!1,inputs:!0,opacity:!0,preview:!0,copy:!0,swatches:[],toggleSwatches:!1,closeOnScroll:!1,i18n:{palette:"Color picker",buttons:{copy:"Copy color to clipboard",changeFormat:"Change color format",swatch:"Color swatch",toggleSwatches:"Toggle Swatches"},sliders:{hue:"Change hue",alpha:"Change opacity"}}},e="alwan",s=`${e}__container`,o=`${e}__palette`,r=`${e}__marker`,n=`${e}__preview`,i=`${e}__button `,a$2=`${e}__copy-button`,l=`${e}__slider `,h=`${e}__hue`,c=`${e}__alpha`,p$5=`${e}__input`,g=`${e}__inputs`,u=`${e}__swatch`,d=`${e}__swatches`,_=`${e}__reference `,b=`${e}__backdrop`,w=`${e}__toggle-button`,f=`${e}--open`,$$1=`${e}--collapse`,y=parseInt,{min:v,max:m,abs:x,round:A,PI:C}=Math,S=(t,e=100,s=0)=>t>e?e:t<s?s:t,k=t=>A((t%=360)<0?t+360:t),H=document,L=H.documentElement,M="button",O="open",V="close",z="color",B="click",E="pointerdown",I="keydown",j="input",D="change",F="blur",P="rgb",T="hsl",Z=["hex",P,T],K="afterbegin",N="afterend",R="beforeend",U="aria-label",q={ArrowUp:[0,-1],ArrowDown:[0,1],ArrowRight:[1,0],ArrowLeft:[-1,0]},G={deg:1,turn:360,rad:180/C,grad:.9},J=/^#[0-9a-f]{6}$/i,Q=/^hsla?\(\s*([+-]?\d*\.?\d+)(\w*)?\s*[\s,]\s*([+-]?\d*\.?\d+)%?\s*,?\s*([+-]?\d*\.?\d+)%?(?:\s*[\/,]\s*([+-]?\d*\.?\d+)(%)?)?\s*\)?$/,W=(t,e,s,o)=>{t.addEventListener(e,s,o);},X=(t,e,s)=>{t.removeEventListener(e,s);},Y=t=>"string"==typeof t,tt=t=>null!=t,et=t=>t instanceof Element,st=t=>Number.isFinite(Y(t)&&""!==t.trim()?+t:t),{keys:ot,assign:rt,setPrototypeOf:nt,prototype:it}=Object,{from:at,isArray:lt}=Array,ht=t=>tt(t)&&"object"==typeof t&&!lt(t)&&!et(t),ct=(t,e)=>ot(t).forEach((s=>e(s,t[s]))),pt=(t,e)=>(ht(t)||(t={}),ct(e,((e,s)=>{tt(s)&&rt(t,{[e]:ht(s)?pt(t[e]||{},s):s});})),t),gt=()=>H.body,ut=(t,e=gt())=>Y(t)&&t.trim()?at(e.querySelectorAll(t)):et(t)&&gt().contains(t)&&t!==gt()?[t]:[],dt=t=>ut(`${j},${M},[tabindex]`,t),_t=(t,e,s=R)=>{t&&e&&e.insertAdjacentElement(s,t);},bt=(t,e)=>{t.innerHTML=e;},wt=(t,e,s)=>{t&&t.setAttribute(e,s+"");},ft=(t,e,s,o,r,n)=>{const i=H.createElement(t);return e&&(i.className=e),o&&bt(i,o),ct(r||{},((t,e)=>{tt(e)&&wt(i,t,e);})),s&&_t(i,s,n),i},$t=(t,e,s,o)=>ft("div",t,e,"",s,o),yt=t=>(t&&t.remove(),null),vt=(t,e)=>(t.replaceWith(e),e),mt=(t,e,s,o,r,n,a)=>ft(M,i+t,e,s,rt({type:M,[U]:r,title:n||r},o),a),xt=(t,e,s,o=1)=>ft(j,l+t,e,"",{max:s,step:o,type:"range"}),At=(t,e)=>$t(s,t,{},e),Ct=(t,e,s)=>{t&&t.style.setProperty("--"+e,s+"");},St=(t,e,s)=>t.classList.toggle(e,s),kt=(t,e,s)=>{t.style.transform=`translate(${e}px,${s}px)`;},Ht=(t,e=[H])=>(t&&(t=t.parentElement),t&&t!==gt()?(/auto|scroll|overflow|clip|hidden/.test(getComputedStyle(t).overflow)&&e.push(t),Ht(t,e)):e),Lt=t=>{let e,s,o,r,n,i;return et(t)?({x:e,y:s,width:o,height:r,right:n,bottom:i}=t.getBoundingClientRect()):(e=s=0,o=n=L.clientWidth,r=i=L.clientHeight),[e,s,o,r,n,i]},Mt='<svg width="18" height="18" viewBox="0 0 24 24" aria-role="none"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',Ot=(t,e=P)=>{let s=t.a,o="",r=e;return s<1&&(o+=", "+s,r+="a"),e===P?r+`(${t.r}, ${t.g}, ${t.b+o})`:r+`(${t.h}, ${t.s}%, ${t.l}%${o})`},Vt=ft("canvas").getContext("2d");function zt(t,e){let s,o,r="";Y(t)?r=t.trim():ht(t)&&(s=[P,T].find((e=>e.split("").every((e=>st(t[e]))))),s&&(r=Ot(t,s)));const[n,i,a,l,h,c="1",p]=Q.exec(r)||[];if(n)o={h:k(+i*(G[a]?G[a]:1)),s:S(+l),l:S(+h),a:S(+c/(p?100:1),1)},s=T;else if(s=P,Vt.fillStyle="#000",Vt.fillStyle=r,r=Vt.fillStyle,J.test(r))o={r:y(r.slice(1,3),16),g:y(r.slice(3,5),16),b:y(r.slice(5,7),16),a:1};else {const[t,e,s,n]=/\((.+)\)/.exec(r)[1].split(",").map((t=>+t));o={r:t,g:e,b:s,a:n};}return o.a=A(100*o.a)/100,r=Ot(o,s),e?r:[o,s,r]}const Bt={top:[1,5,4,0],bottom:[5,1,4,0],right:[4,0,1,5],left:[0,4,1,5]},Et={start:[0,1,2],center:[1,0,2],end:[2,1,0]},It=(t,e,s,{margin:o,position:r,toggle:n,closeOnScroll:i},{t:a,o:l})=>{o=st(o)?+o:0;const[h,c]=Y(r)?r.split("-"):[],p=Bt[h]||Bt.bottom,g=Et[c]||Et.center,u=Ht(t),d=e.style,_=()=>{d.height="";const s=Lt(H),r=Lt(t),n=Lt(e),i=[null,null];p.some((t=>{let e=t%2;const a=s[t],l=r[t],h=o+n[e+2];if(h<=x(a-l)){i[e]=l+(t<=1?-h:o),e=(e+1)%2;const a=n[e+2],c=r[e],p=r[e+4],u=s[e+4]-c,d=(a+r[e+2])/2;return g.some((t=>0===t&&a<=u?(i[e]=c,!0):1===t&&d<=p&&d<=u?(i[e]=p-d,!0):2===t&&a<=p&&(i[e]=p-a,!0))),!0}})),kt(e,...i.map(((t,e)=>(e&&null===t&&n[3]>s[5]&&(d.height=s[5]-6+"px",n[3]=s[5]-3),A(tt(t)?t:(s[e+4]-n[e+2])/2)))));},b=()=>{!a()&&n||(((t,e)=>e.every((e=>{const[s,o,,,r,n]=Lt(t),[i,a,,,l,h]=Lt(e);return o<h&&n>a&&s<l&&r>i})))(t,u)?a()?(_(),i&&l(!1)):l(!0,!0):l(!1,!0));},w=t=>{if(a()){const{target:o,key:r,shiftKey:n}=t;if("Escape"===r)l(!1);else if("Tab"===r){const r=dt(e),i=r[0],a=r.pop(),l=o!==s||n?n&&o===i||!n&&o===a?s:null:i;l&&(t.preventDefault(),l.focus());}}},f=({target:t})=>{!a()||t===s||e.contains(t)||at(s.labels||[]).some((e=>e.contains(t)))||l(!1);},$=t=>{u.forEach((e=>{t(e,"scroll",b);})),t(window,"resize",b),t(H,I,w),t(H,E,f);};return _(),$(W),{i:_,p:()=>{$(X),e.style.transform="";}}},jt=(t,s)=>{const l=t.config,y=$t(e,gt()),x=((t,e)=>{let s=e||mt("",gt());const o=()=>{t.u.o();};return {_:()=>s,$({preset:t,classname:r}){e&&t!==(e!==s)&&(t?(s=vt(e,mt()),e.id&&(s.id=e.id)):s=vt(s,e)),W(s,B,o),e&&!t||!Y(r)||(s.className=(i+_+r).trim());},p(){e?e!==s&&vt(s,e):yt(s);}}})(t,ut(s)[0]),A=(({v:t},e)=>{let s,n,i,a;const l=$t(o,e),h=$t(r,l),c=(e,[o,r]=[0,0])=>{let a,l,[c,p,g,u]=i;e?(s=e.clientX-c,n=e.clientY-p):(s+=o*g/100,n+=r*u/100),s=S(s,g),n=S(n,u),kt(h,s,n),a=1-n/u,l=a*(1-s/(2*g)),t.i({s:1===l||0===l?0:(a-l)/v(l,1-l)*100,l:100*l},1);},p=t=>{t.buttons?c(t):d(!1);},g=()=>{t.m(),d(!1);},u=()=>{t.m();},d=t=>{St(L,b,t),(t?W:X)(H,"pointermove",p),(t?W:X)(window,F,u);};return W(l,E,(e=>{a||(t.A(),i=Lt(l),c(e),d(!0),W(H,"pointerup",g,{once:!0}));})),W(l,I,(e=>{const s=q[e.key];s&&(e.preventDefault(),i=Lt(l),t.A(),c(null,s),t.m());})),{el:l,$({i18n:t,disabled:e}){wt(l,U,t.palette),wt(l,"tabindex",e?"":0),a=e;},C(t,e){let o=e+t*v(e,1-e);i=Lt(l),s=(o?2*(1-e/o):0)*i[2],n=(1-o)*i[3],kt(h,s,n);}}})(t,y),C=At(y),k=((t,e)=>{let s,o,r=!1;const i=t=>{r=t,bt(o,t?'<svg width="18" height="18" viewBox="0 0 24 24" aria-role="none"><path d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z"></path></svg>':Mt);},l=t=>{const e=ft(j,"",L,"",{value:t});e.select(),H.execCommand("copy"),yt(e),o.focus(),i(!0);},h=()=>{if(!r){const e=navigator.clipboard,s=t.v.S();e?e.writeText(s).then((()=>i(!0))).catch((()=>l(s))):l(s);}};return {$({preview:t,copy:l,i18n:c}){s=yt(s),o=yt(o),t&&(s=$t(n,e,{},K)),l&&(o=mt(a$2,s||e,Mt,{},c.buttons.copy,"",K),W(o,B,h),W(o,F,(()=>r&&i(!1))),W(o,"mouseout",(()=>o.blur())));}}})(t,C),M=(({v:t,k:e},s)=>{let o;const r=$t("",s),n=xt(h,r,360);return W(n,j,(()=>t.i({h:+n.value},2))),W(r,D,(()=>e.H(D))),{$({opacity:e,i18n:{sliders:s}}){o=yt(o),e?(o=xt(c,r,1,.01),W(o,j,(()=>t.i({a:+o.value},2)))):t.i({a:1}),wt(n,U,s.hue),wt(o,U,s.alpha);},L(t,e){n.value=t+"",o&&(o.value=e+"");}}})(t,C),T=((t,e)=>{let s,o,r,n,i,{config:a,v:l}=t,h=[],c=!1;const u=()=>a.singleInput||"hex"===h[n],d=t=>{let e=t.target.value,s={};c||(l.A(),c=!0),u()||(ct(i,((t,e)=>{s[t]=+e.value;})),e=Ot(s,h[n])),l.M(e,3,!1,!0);},_=()=>{i={},yt(o),o=$t(g,s,{},K);const e=h[n],r=u()?[e]:(e+(a.opacity?"a":"")).split(""),_=l.O;r.forEach((t=>{const e=ft("label","",o);i[t]=ft(j,p$5,e,"",{type:"text",value:_[t]}),ft("span","",e,t);})),W(o,j,d),W(o,D,(()=>{l.m(),c=!1;})),W(o,"focusin",(t=>t.target.select())),W(o,I,(e=>"Enter"===e.key&&t.u.o(!1)));},b=()=>{n=(n+1)%h.length,l.V(h[n]),_();};return {$({inputs:t,format:o,i18n:i}){s=yt(s),r=yt(r),h=Z,!0!==t&&(t=t||{},h=h.filter((e=>t[e])));const a=h.length;a||(h=Z),n=m(h.indexOf(o),0),l.V(h[n]),a&&(s=At(e,N),_(),a>1&&(r=mt("",s,'<svg width="15" height="15" viewBox="0 0 20 20" aria-role="none"><path d="M10 1L5 8h10l-5-7zm0 18l5-7H5l5 7z"></path></svg>',{},i.buttons.changeFormat),W(r,B,b)));},L(t){ct(i||{},((e,s)=>{s.value=t[e]+"";}));}}})(t,C),G=((t,e)=>{let s,o;return {$({swatches:r,toggleSwatches:n,i18n:{buttons:i}}){lt(r)&&(s=yt(s),o=yt(o),r.length&&(s=$t(d,e),r.forEach((t=>{Ct(mt(u,s,"",{},i.swatch,Y(t)?t:zt(t,!0)),z,zt(t,!0));})),n&&(o=mt(w,e,'<svg width="20" height="20" viewBox="0 0 24 24" aria-role="none"><path d="M6.984 14.016l5.016-5.016 5.016 5.016h-10.031z"></path></svg>',{},i.toggleSwatches),W(o,B,(()=>{St(s,$$1),t.u.B();}))),W(s,B,(({target:e})=>{e!==s&&t.v.M(e.style.getPropertyValue("--"+z),0,!0,!0);}))));}}})(t,y);let J,Q=!1,et=null;return {I(e){e=e||{};const s=this,o=y.dataset,r=t.v,{id:n,color:i}=e,{theme:a,toggle:h,popover:c,target:p,disabled:g}=pt(l,e);[x,A,k,M,T,G].forEach((t=>t.$(l))),J=x._();let u=ut(p)[0]||J;Y(n)&&(y.id=n),o.theme=a,o.display=c?"popover":"block",h||s.o(!0,!0),J.style.display=c||h?"":"none",et&&(et.p(),et=null),c?et=It(u,y,J,l,s):_t(y,u,u===J?N:R),tt(i)?r.M(i):r.i({}),[J,...dt(y)].forEach((t=>{t.disabled=!!g;})),g&&(c?s.o(!1,!0):h||s.o(!0,!0));},i(t,e){const{r:s,g:o,b:r,a:n,h:i,s:a,l:l,rgb:h}=t;Ct(J,z,h),Ct(y,P,`${s},${o},${r}`),Ct(y,"a",n),Ct(A.el,"h",i),1!==e&&2!==e&&(A.C(a/100,l/100),M.L(i,n)),3!==e&&T.L(t);},o(e=!Q,s=!1){e===Q||l.disabled&&(!s||e&&l.popover)||!l.toggle&&!s||(e&&et&&et.i(),Q=e,St(y,f,e),t.k.H(Q?O:V));},t:()=>Q,B(){et&&et.i();},p(){yt(y),et&&et.p(),x.p();}}},Dt=t=>(t<16?"0":"")+t.toString(16),Ft=(t,e,s)=>(t%=12,A(255*(s-e*v(s,1-s)*m(-1,v(t-3,9-t,1))))),Pt=t=>{const e={h:0,s:0,l:0,r:0,g:0,b:0,a:1,rgb:"",hsl:"",hex:""},s=t.k.H;let o,r,n;return {O:e,i(o,r,i=!0,a){n=e.hex,rt(e,o),rt(e,a||(({h:t,s:e,l:s})=>({r:Ft(t/=30,e/=100,s/=100),g:Ft(t+8,e,s),b:Ft(t+4,e,s)}))(e)),e.s=A(e.s),e.l=A(e.l),e.rgb=Ot(e),e.hsl=Ot(e,T),e.hex=(({r:t,g:e,b:s,a:o})=>"#"+Dt(t)+Dt(e)+Dt(s)+(o<1?Dt(A(255*o)):""))(e),t.u.i(e,r),i&&n!==e.hex&&s(z,e);},M(t,o,r,n){const[i,a,l]=zt(t);let h,c;e[a]!==l&&(a===P?(h=i,c=(({r:t,g:e,b:s,a:o})=>{const r=m(t/=255,e/=255,s/=255),n=v(t,e,s),i=r-n,a=(r+n)/2;return {h:k(60*(0===i?0:r===t?(e-s)/i%6:r===e?(s-t)/i+2:r===s?(t-e)/i+4:0)),s:i?i/(1-x(2*a-1))*100:0,l:100*a,a:o}})(h)):c=i,this.i(c,o,n,h),r&&s(D,e));},A(){r=e[o];},m(){r!==e[o]&&s(D,e);},V(e){o=t.config.format=e;},S:()=>e[o]}};class Tt{static version(){return "2.0.2"}static setDefaults(e){pt(t,e);}constructor(e,s){this.config=pt({},t),this.k=(t=>{const e={[O]:[],[V]:[],[D]:[],[z]:[]};return {H(s,o=t.v.O){t.config.disabled||(e[s]||[]).forEach((e=>{e(rt({type:s,source:t},o));}));},j(t,s){e[t]&&!e[t].includes(s)&&"function"==typeof s&&e[t].push(s);},D(t,s){tt(t)?e[t]&&(tt(s)?e[t]=e[t].filter((t=>t!==s)):e[t]=[]):ct(e,(t=>{e[t]=[];}));}}})(this),this.v=Pt(this),this.u=jt(this,e),this.u.I(s);}setOptions(t){this.u.I(t);}setColor(t){return this.v.M(t),this}getColor(){return {...this.v.O}}isOpen(){return this.u.t()}open(){this.u.o(!0);}close(){this.u.o(!1);}toggle(){this.u.o();}on(t,e){this.k.j(t,e);}off(t,e){this.k.D(t,e);}addSwatches(...t){this.u.I({swatches:this.config.swatches.concat(t)});}removeSwatches(...t){this.u.I({swatches:this.config.swatches.filter(((e,s)=>!t.some((t=>st(t)?+t===s:t===e))))});}enable(){this.u.I({disabled:!1});}disable(){this.u.I({disabled:!0});}reset(){this.v.M(this.config.default);}reposition(){this.u.B();}trigger(t){this.k.H(t);}destroy(){this.u.p(),ct(this,(t=>delete this[t])),nt(this,it);}}

    const { button: button$9, div: div$9, h2: h2$8, input: input$4, p: p$4, option: option$5, select: select$5 } = HTML;
    const longText = `:root {
	--page-margin: black;
	--editor-background: black;
	--hover-preview: white;
	--playhead: white;
	--primary-text: white;
	--secondary-text: #999;
	--inverted-text: black;
	--text-selection: rgba(119,68,255,0.99);
	--box-selection-fill: rgba(255,255,255,0.2);
	--loop-accent: #74f;
	--link-accent: #98f;
	--ui-widget-background: #444;
	--ui-widget-focus: #777;
	--pitch-background: #444;
	--tonic: #864;
	--fifth-note: #468;
	--third-note: #258822;
	--white-piano-key: #bbb;
	--black-piano-key: #444;
	--white-piano-key-text: #131200;
	--black-piano-key-text: #fff;
	--use-color-formula: false;
	--track-editor-bg-pitch: #444;
	--track-editor-bg-pitch-dim: #333;
	--track-editor-bg-noise: #444;
	--track-editor-bg-noise-dim: #333;
	--track-editor-bg-mod: #234;
	--track-editor-bg-mod-dim: #123;
	--multiplicative-mod-slider: #456;
	--overwriting-mod-slider: #654;
	--indicator-primary: #74f;
	--indicator-secondary: #444;
	--select2-opt-group: #585858;
	--input-box-outline: #333;
	--mute-button-normal: #ffa033;
	--mute-button-mod: #9a6bff;
	--mod-label-primary:        #999;
	--mod-label-secondary-text: #333;
	--mod-label-primary-text:   black;
	--disabled-note-primary:    #999;
	--disabled-note-secondary:  #666;
	--pitch1-secondary-channel: #0099A1;
	--pitch1-primary-channel:   #25F3FF;
	--pitch1-secondary-note:    #00BDC7;
	--pitch1-primary-note:      #92F9FF;
	--pitch2-secondary-channel: #A1A100;
	--pitch2-primary-channel:   #FFFF25;
	--pitch2-secondary-note:    #C7C700;
	--pitch2-primary-note:      #FFFF92;
	--pitch3-secondary-channel: #C75000;
	--pitch3-primary-channel:   #FF9752;
	--pitch3-secondary-note:    #FF771C;
	--pitch3-primary-note:      #FFCDAB;
	--pitch4-secondary-channel: #00A100;
	--pitch4-primary-channel:   #50FF50;
	--pitch4-secondary-note:    #00C700;
	--pitch4-primary-note:      #A0FFA0;
	--pitch5-secondary-channel: #D020D0;
	--pitch5-primary-channel:   #FF90FF;
	--pitch5-secondary-note:    #E040E0;
	--pitch5-primary-note:      #FFC0FF;
	--pitch6-secondary-channel: #7777B0;
	--pitch6-primary-channel:   #A0A0FF;
	--pitch6-secondary-note:    #8888D0;
	--pitch6-primary-note:      #D0D0FF;
	--pitch7-secondary-channel: #8AA100;
	--pitch7-primary-channel:   #DEFF25;
	--pitch7-secondary-note:    #AAC700;
	--pitch7-primary-note:      #E6FF92;
	--pitch8-secondary-channel: #DF0019;
	--pitch8-primary-channel:   #FF98A4;
	--pitch8-secondary-note:    #FF4E63;
	--pitch8-primary-note:      #FFB2BB;
	--pitch9-secondary-channel: #00A170;
	--pitch9-primary-channel:   #50FFC9;
	--pitch9-secondary-note:    #00C78A;
	--pitch9-primary-note:      #83FFD9;
	--pitch10-secondary-channel:#A11FFF;
	--pitch10-primary-channel:  #CE8BFF;
	--pitch10-secondary-note:   #B757FF;
	--pitch10-primary-note:     #DFACFF;
	--noise1-secondary-channel: #6F6F6F;
	--noise1-primary-channel:   #AAAAAA;
	--noise1-secondary-note:    #A7A7A7;
	--noise1-primary-note:      #E0E0E0;
	--noise2-secondary-channel: #996633;
	--noise2-primary-channel:   #DDAA77;
	--noise2-secondary-note:    #CC9966;
	--noise2-primary-note:      #F0D0BB;
	--noise3-secondary-channel: #4A6D8F;
	--noise3-primary-channel:   #77AADD;
	--noise3-secondary-note:    #6F9FCF;
	--noise3-primary-note:      #BBD7FF;
	--noise4-secondary-channel: #7A4F9A;
	--noise4-primary-channel:   #AF82D2;
	--noise4-secondary-note:    #9E71C1;
	--noise4-primary-note:      #D4C1EA;
	--noise5-secondary-channel: #607837;
	--noise5-primary-channel:   #A2BB77;
	--noise5-secondary-note:    #91AA66;
	--noise5-primary-note:      #C5E2B2;
--mod1-secondary-channel:   #339955;
		--mod1-primary-channel:     #77fc55;
		--mod1-secondary-note:      #77ff8a;
		--mod1-primary-note:        #cdffee;
		--mod2-secondary-channel:   #993355;
		--mod2-primary-channel:     #f04960;
		--mod2-secondary-note:      #f057a0;
		--mod2-primary-note:        #ffb8de;
		--mod3-secondary-channel:   #553399;
		--mod3-primary-channel:     #8855fc;
		--mod3-secondary-note:      #aa64ff;
		--mod3-primary-note:	    #f8ddff;
		--mod4-secondary-channel:   #a86436;
		--mod4-primary-channel:     #c8a825;
		--mod4-secondary-note:      #e8ba46;
		--mod4-primary-note:        #fff6d3;
	--note-flash: #ffffff;
	--note-flash-secondary: #badfe6;
	--song-player-margin: black;
	--progress-bar: #74f;
}`;
    function save(blob, name) {
        if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(blob, name);
            return;
        }
        const anchor = document.createElement("a");
        if (anchor.download != undefined) {
            const url = URL.createObjectURL(blob);
            setTimeout(function () { URL.revokeObjectURL(url); }, 60000);
            anchor.href = url;
            anchor.download = name;
            setTimeout(function () { anchor.dispatchEvent(new MouseEvent("click")); }, 0);
        }
        else {
            const url = URL.createObjectURL(blob);
            setTimeout(function () { URL.revokeObjectURL(url); }, 60000);
            if (!window.open(url, "_blank"))
                window.location.href = url;
        }
    }
    let doReload = false;
    class CustomPrompt {
        constructor(_doc, _pattern, _pattern2, _pattern3) {
            this._doc = _doc;
            this._pattern = _pattern;
            this._pattern2 = _pattern2;
            this._pattern3 = _pattern3;
            this._currentThemeProperty = "--page-margin";
            this._fileInput = input$4({ type: "file", accept: ".png,.jpg,.jpeg,.gif", text: "choose editor background image" });
            this._fileInput2 = input$4({ type: "file", accept: ".png,.jpg,.jpeg,.gif", text: "choose website background image" });
            this._advancedSettings = select$5({ style: "width: 100%; margin-top: 1.5em; margin-bottom: 1.5em;" }, option$5({ value: "basic" }, "Templates"), option$5({ value: "editor" }, "Editor"), option$5({ value: "css" }, "Import/Export"));
            this._basicCatagoryButton = button$9({ style: "border-image-source: none !important; height: auto; min-height: var(--button-size); margin: 0.5em; width: 34%; border-bottom: solid; border-bottom-color: var(--link-accent);" }, "Templates");
            this._editorCatagoryButton = button$9({ style: "border-image-source: none !important; height: auto; min-height: var(--button-size); margin: 0.5em; width:34%; color: var(--secondary-text);" }, "Editor");
            this._cssCatagoryButton = button$9({ style: "border-image-source: none !important; height: auto; min-height: var(--button-size); margin: 0.5em; width:34%; color: var(--secondary-text);" }, "Import/Export");
            this._fullThemeSelect = select$5({ style: "width: 100%;", id: "themeSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a Base Theme"), option$5({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$5({ value: "AbyssBox Competitive" }, "AbyssBox Competitive"), option$5({ value: "AbyssBox Light" }, "AbyssBox Light"), option$5({ value: "AbyssBox 0.8" }, "AbyssBox 0.8"), option$5({ value: "AbyssBox Piano" }, "AbyssBox Piano"), option$5({ value: "Half-Life" }, "Half-Life"), option$5({ value: "Half-Life: Source" }, "Half-Life: Source"), option$5({ value: "Doom 1993" }, "Doom 1993"), option$5({ value: "Undertale" }, "Undertale"), option$5({ value: "Yume Nikki" }, "Yume Nikki [!]"), option$5({ value: "Scratch" }, "Scratch"), option$5({ value: "Scratch Addons" }, "Scratch Addons"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "Frutiger Aero" }, "Frutiger Aero"), option$5({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$5({ value: "corporate dark" }, "Corporate Dark"), option$5({ value: "corporate light" }, "Corporate Light"), option$5({ value: "Glyde" }, "Glyde"), option$5({ value: "starry studio" }, "Starry Studio"), option$5({ value: "Terminal 2.0 (AB)" }, "Terminal 2.0 (AB)"), option$5({ value: "Slushie" }, "Slushie"), option$5({ value: "Slushie Pixel" }, "Slushie 2"), option$5({ value: "dark classic" }, "BeepBox Dark"), option$5({ value: "light classic" }, "BeepBox Light"), option$5({ value: "dark competition" }, "BeepBox Competition Dark"), option$5({ value: "BeepBox Pixel" }, "BeepBox Pixel"), option$5({ value: "jummbox classic" }, "JummBox Dark"), option$5({ value: "jummbox light" }, "JummBox Light"), option$5({ value: "gold light" }, "Gold Light"), option$5({ value: "forest" }, "Forest"), option$5({ value: "forest 2" }, "Forest 2"), option$5({ value: "canyon" }, "Canyon"), option$5({ value: "canyon 2" }, "Canyon 2"), option$5({ value: "midnight" }, "Midnight"), option$5({ value: "beachcombing" }, "Beachcombing"), option$5({ value: "violet verdant" }, "Violet Verdant"), option$5({ value: "sunset" }, "Sunset"), option$5({ value: "autumn" }, "Autumn"), option$5({ value: "fruit" }, "Shadowfruit"), option$5({ value: "toxic" }, "Toxic"), option$5({ value: "roe" }, "Roe"), option$5({ value: "moonlight" }, "Moonlight"), option$5({ value: "portal" }, "Portal"), option$5({ value: "fusion" }, "Fusion"), option$5({ value: "inverse" }, "Inverse"), option$5({ value: "nebula" }, "Nebula"), option$5({ value: "Nebula 2" }, "Nebula 2"), option$5({ value: "roe light" }, "Roe Light"), option$5({ value: "amoled dark" }, "High Contrast Dark"), option$5({ value: "energized" }, "Energized"), option$5({ value: "neapolitan" }, "Neapolitan"), option$5({ value: "mono" }, "Poly"), option$5({ value: "blutonium" }, "Blutonium"), option$5({ value: "modbox classic" }, "Modbox"), option$5({ value: "modbox 2" }, "Modbox 2.0"), option$5({ value: "modbox artic" }, "Artic"), option$5({ value: "modbox cinnamon" }, "Cinnamon Roll [!]"), option$5({ value: "modbox ocean" }, "Ocean"), option$5({ value: "modbox rainbow" }, "Rainbow [!]"), option$5({ value: "modbox float" }, "Float [!]"), option$5({ value: "modbox windows" }, "Windows"), option$5({ value: "modbox grassland" }, "Grassland"), option$5({ value: "modbox dessert" }, "Dessert"), option$5({ value: "modbox kahoot" }, "Kahootiest"), option$5({ value: "modbox bitbeam" }, "Beam to the Bit [!]"), option$5({ value: "modbox egg" }, "Pretty Egg"), option$5({ value: "modbox pony" }, "Poniryoshka"), option$5({ value: "modbox gameboy" }, "Gameboy [!]"), option$5({ value: "modbox woodkid" }, "Woodkid [!]"), option$5({ value: "modbox midnight" }, "Midnight [!]"), option$5({ value: "modbox snedbox" }, "Snedbox"), option$5({ value: "modbox unnamed" }, "unnamed [!]"), option$5({ value: "modbox piano" }, "Piano [!]"), option$5({ value: "modbox halloween" }, "Halloween [!]"), option$5({ value: "modbox frozen" }, "FrozenOver❄️ [!]"), option$5({ value: "Ghost House" }, "Ghost House"), option$5({ value: "Ghost House 2" }, "Ghost House 2"), option$5({ value: "azur lane" }, "Azur Lane"), option$5({ value: "sandbox classic" }, "Sandbox"), option$5({ value: "harrybox" }, "Haileybox"), option$5({ value: "brucebox" }, "Brucebox"), option$5({ value: "shitbox 1.0" }, "Shitbox 1.0"), option$5({ value: "shitbox 2.0" }, "Shitbox 2.0"), option$5({ value: "shitbox 3.0" }, "Shitbox 3.0/shitbox4"), option$5({ value: "shitbox ModBox 2.0" }, "Shitbox ModBox 2.0"), option$5({ value: "shitbox Realm" }, "Shitbox Realm [!]"), option$5({ value: "nerdbox" }, "NerdBox"), option$5({ value: "zefbox" }, "Zefbox"), option$5({ value: "cardboardbox classic" }, "Cardboardbox"), option$5({ value: "blubox classic" }, "Blubox"), option$5({ value: "dogebox classic" }, "Dogebox"), option$5({ value: "wackybox" }, "Wackybox"), option$5({ value: "todbox dark mode" }, "Todbox Dark Mode"), option$5({ value: "mainbox 1.0" }, "Mainbox"), option$5({ value: "microbox" }, "MicroBox"), option$5({ value: "paandorasbox" }, "PaandorasBox"), option$5({ value: "foxbox" }, "FoxBox"), option$5({ value: "midbox" }, "Midbox"), option$5({ value: "dogebox2" }, "Dogebox2"), option$5({ value: "nepbox" }, "Nepbox"), option$5({ value: "nepbox laffey" }, "Laffey"), option$5({ value: "nepbox snedbox" }, "Snedbox (Nb) [!]"), option$5({ value: "nepbox piano" }, "Piano (Nb) [!]"), option$5({ value: "WeebBox" }, "WeebBox"), option$5({ value: "BoxBeep Dark" }, "BoxBeep Dark"), option$5({ value: "BoxBeep light" }, "BoxBeep Light"), option$5({ value: "AWeebyssBox" }, "AWeebyssBox"), option$5({ value: "Deuteranopia" }, "Deuteranopia"), option$5({ value: "Protanopia" }, "Protanopia"), option$5({ value: "Tritanopia" }, "Tritanopia"), option$5({ value: "2012 Video Tutorial" }, "2012 Video Tutorial"), option$5({ value: "I am on fire" }, "I am on fire"), option$5({ value: "custom" }, "Custom"));
            this._baseColorSelect = select$5({ style: "width: 100%; display:none; margin: 0.5em 0;", id: "baseColorSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a Base Color Palette"), option$5({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$5({ value: "AbyssBox Competitive" }, "AbyssBox Competitive"), option$5({ value: "AbyssBox Light" }, "AbyssBox Light"), option$5({ value: "Half-Life" }, "Half-Life"), option$5({ value: "Doom 1993" }, "Doom 1993"), option$5({ value: "Undertale" }, "Undertale"), option$5({ value: "Yume Nikki" }, "Yume Nikki [!]"), option$5({ value: "Scratch" }, "Scratch"), option$5({ value: "Scratch Addons" }, "Scratch Addons"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "Frutiger Aero" }, "Frutiger Aero"), option$5({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$5({ value: "corporate dark" }, "Corporate Dark"), option$5({ value: "corporate light" }, "Corporate Light"), option$5({ value: "Glyde" }, "Glyde"), option$5({ value: "starry studio" }, "Starry Studio"), option$5({ value: "Terminal 2.0 (AB)" }, "Terminal 2.0 (AB)"), option$5({ value: "Slushie" }, "Slushie"), option$5({ value: "dark classic" }, "BeepBox Dark"), option$5({ value: "light classic" }, "BeepBox Light"), option$5({ value: "dark competition" }, "BeepBox Competition Dark"), option$5({ value: "jummbox classic" }, "JummBox Dark"), option$5({ value: "jummbox light" }, "JummBox Light"), option$5({ value: "gold light" }, "Gold Light"), option$5({ value: "forest" }, "Forest"), option$5({ value: "forest 2" }, "Forest 2"), option$5({ value: "canyon" }, "Canyon"), option$5({ value: "canyon 2" }, "Canyon 2"), option$5({ value: "midnight" }, "Midnight"), option$5({ value: "beachcombing" }, "Beachcombing"), option$5({ value: "violet verdant" }, "Violet Verdant"), option$5({ value: "sunset" }, "Sunset"), option$5({ value: "autumn" }, "Autumn"), option$5({ value: "fruit" }, "Shadowfruit"), option$5({ value: "toxic" }, "Toxic"), option$5({ value: "roe" }, "Roe"), option$5({ value: "moonlight" }, "Moonlight"), option$5({ value: "portal" }, "Portal"), option$5({ value: "fusion" }, "Fusion"), option$5({ value: "inverse" }, "Inverse"), option$5({ value: "nebula" }, "Nebula"), option$5({ value: "Nebula 2" }, "Nebula 2"), option$5({ value: "roe light" }, "Roe Light"), option$5({ value: "amoled dark" }, "High Contrast Dark"), option$5({ value: "energized" }, "Energized"), option$5({ value: "neapolitan" }, "Neapolitan"), option$5({ value: "mono" }, "Poly"), option$5({ value: "blutonium" }, "Blutonium"), option$5({ value: "modbox classic" }, "Modbox"), option$5({ value: "modbox 2" }, "Modbox 2.0"), option$5({ value: "modbox artic" }, "Artic"), option$5({ value: "modbox cinnamon" }, "Cinnamon Roll [!]"), option$5({ value: "modbox ocean" }, "Ocean"), option$5({ value: "modbox rainbow" }, "Rainbow [!]"), option$5({ value: "modbox float" }, "Float [!]"), option$5({ value: "modbox windows" }, "Windows"), option$5({ value: "modbox grassland" }, "Grassland"), option$5({ value: "modbox dessert" }, "Dessert"), option$5({ value: "modbox kahoot" }, "Kahootiest"), option$5({ value: "modbox bitbeam" }, "Beam to the Bit [!]"), option$5({ value: "modbox egg" }, "Pretty Egg"), option$5({ value: "modbox pony" }, "Poniryoshka"), option$5({ value: "modbox gameboy" }, "Gameboy [!]"), option$5({ value: "modbox woodkid" }, "Woodkid [!]"), option$5({ value: "modbox midnight" }, "Midnight [!]"), option$5({ value: "modbox snedbox" }, "Snedbox"), option$5({ value: "modbox unnamed" }, "unnamed [!]"), option$5({ value: "modbox piano" }, "Piano [!]"), option$5({ value: "modbox halloween" }, "Halloween [!]"), option$5({ value: "modbox frozen" }, "FrozenOver❄️ [!]"), option$5({ value: "Ghost House" }, "Ghost House"), option$5({ value: "azur lane" }, "Azur Lane"), option$5({ value: "modbox classic" }, "Modbox"), option$5({ value: "sandbox classic" }, "Sandbox"), option$5({ value: "harrybox" }, "Haileybox"), option$5({ value: "brucebox" }, "Brucebox"), option$5({ value: "shitbox 3.0" }, "Shitbox 1.0/3.0"), option$5({ value: "shitbox 2.0" }, "Shitbox 2.0"), option$5({ value: "nerdbox" }, "NerdBox"), option$5({ value: "zefbox" }, "Zefbox"), option$5({ value: "cardboardbox classic" }, "Cardboardbox"), option$5({ value: "blubox classic" }, "Blubox"), option$5({ value: "dogebox classic" }, "Dogebox"), option$5({ value: "wackybox" }, "Wackybox"), option$5({ value: "todbox dark mode" }, "Todbox Dark Mode"), option$5({ value: "mainbox 1.0" }, "Mainbox"), option$5({ value: "microbox" }, "MicroBox"), option$5({ value: "paandorasbox" }, "PaandorasBox"), option$5({ value: "foxbox" }, "FoxBox"), option$5({ value: "midbox" }, "Midbox"), option$5({ value: "dogebox2" }, "Dogebox2"), option$5({ value: "nepbox" }, "Nepbox"), option$5({ value: "BoxBeep Dark" }, "BoxBeep Dark"), option$5({ value: "BoxBeep light" }, "BoxBeep Light"), option$5({ value: "Deuteranopia" }, "Deuteranopia"), option$5({ value: "Protanopia" }, "Protanopia"), option$5({ value: "Tritanopia" }, "Tritanopia"), option$5({ value: "custom" }, "Custom"));
            this._backgroundSelect = select$5({ style: "width: 100%; display:none; margin: 0.5em 0;", id: "backgroundSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a Background"), option$5({ value: "none" }, "None"), option$5({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$5({ value: "AbyssBox Light" }, "AbyssBox Light"), option$5({ value: "Undertale" }, "Undertale"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "Frutiger Aero" }, "Frutiger Aero"), option$5({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$5({ value: "Glyde" }, "Glyde"), option$5({ value: "starry studio" }, "Starry Studio"), option$5({ value: "Slushie 2" }, "Slushie 2"), option$5({ value: "BeepBox Pixel" }, "BeepBox Pixel"), option$5({ value: "Forest 2" }, "Forest 2"), option$5({ value: "Canyon 2" }, "Canyon 2"), option$5({ value: "Nebula 2" }, "Nebula 2"), option$5({ value: "Ghost House 2" }, "Ghost House 2"), option$5({ value: "azur lane" }, "Azur Lane"));
            this._borderSelect = select$5({ style: "width: 100%; display:none; margin: 0.5em 0;", id: "borderSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a Border"), option$5({ value: "none" }, "None"), option$5({ value: "AbyssBox Classic" }, "AbyssBox Classic"), option$5({ value: "AbyssBox Competitive" }, "AbyssBox Competitive"), option$5({ value: "AbyssBox Light" }, "AbyssBox Light"), option$5({ value: "Scratch" }, "Scratch"), option$5({ value: "Scratch Addons" }, "Scratch Addons"), option$5({ value: "Undertale" }, "Undertale"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "Frutiger Aero" }, "Frutiger Aero"), option$5({ value: "Skeuomorphic" }, "Skeuomorphic/Early 2000's (LeoV)"), option$5({ value: "Glyde" }, "Glyde"), option$5({ value: "Slushie 2" }, "Slushie 2"), option$5({ value: "BeepBox Pixel" }, "BeepBox Pixel"), option$5({ value: "Forest 2" }, "Forest 2"), option$5({ value: "Canyon 2" }, "Canyon 2"), option$5({ value: "Nebula 2" }, "Nebula 2"), option$5({ value: "Ghost House 2" }, "Ghost House 2"));
            this._overlaySelect = select$5({ style: "width: 100%; display:none; margin: 0.5em 0;", id: "overlaySelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick an Overlay"), option$5({ value: "none" }, "None"), option$5({ value: "scanlines" }, "Scanlines"), option$5({ value: "bandicam" }, "Bandicam"), option$5({ value: "fire" }, "Fire"), option$5({ value: "invert" }, "Screen Color Inversion"), option$5({ value: "480p" }, '"Low Quality" Blur (Mimics 480p)'), option$5({ value: "contrast" }, 'High Contrast'), option$5({ value: "Sepia" }, 'Sepia'), option$5({ value: "grayscale" }, 'Grayscale/Black and White'));
            this._iconSelect = select$5({ style: "width: 100%; display:none; margin: 0.5em 0;", id: "iconSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick icons"), option$5({ value: "none" }, "Default"), option$5({ value: "AbyssBox Classic" }, "AbyssBox"), option$5({ value: "Scratch" }, "Scratch"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "Frutiger Aero" }, "Frutiger Aero"));
            this._fontSelect = select$5({ style: "width: 100%; margin: 0.5em 0;", id: "fontSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a font"), option$5({ value: "none" }, "Default"), option$5({ value: "AbyssType" }, "AbyssType"), option$5({ value: "AbyssType Small" }, "AbyssType Small"), option$5({ value: "AbyssType Fusion" }, "AbyssType Fusion"), option$5({ value: "Doom 1993" }, "Doom 1993"), option$5({ value: "Tahoma Pixel" }, "Tahoma (Windows Xp)"), option$5({ value: "Trebuchet" }, "Trebuchet MS"), option$5({ value: "Monospace" }, "Monospace"), option$5({ value: "Frutiger" }, "Frutiger"), option$5({ value: "Workbench" }, "Workbench"), option$5({ value: "Varela" }, "Varela"), option$5({ value: "Arial" }, "Arial"), option$5({ value: "Comic Sans" }, "Comic Sans"));
            this._cursorSelect = select$5({ style: "width: 100%; margin: 1em 0;", id: "fontSelect" }, option$5({ selected: true, disabled: true, hidden: false }, "Pick a Cursor"), option$5({ value: "none" }, "Default"), option$5({ value: "My Abyss" }, "My Abyss"), option$5({ value: "Retro" }, "Retro"), option$5({ value: "Ghost House 2" }, "Ghost House"), option$5({ value: "Slushie 2" }, "Slushie 2"), option$5({ value: "Windows Xp" }, "Windows Xp"), option$5({ value: "WackyBox" }, "WackyBox"), option$5({ value: "Azur Lane" }, "Azur Lane"));
            this._colorMenu = select$5({ style: "width: 100%;" }, option$5({ selected: true, disabled: true, hidden: false }, "Select an asset to change"), option$5({ selected: false, disabled: true, hidden: false }, "General Items"), option$5({ value: "--page-margin" }, "Page Margin"), option$5({ value: "--editor-background" }, "Editor Background"), option$5({ value: "--primary-text" }, "Primary Text"), option$5({ value: "--secondary-text" }, "Secondary Text"), option$5({ value: "--inverted-text" }, "Inverted Text"), option$5({ value: "--loop-accent" }, "Loop Accent"), option$5({ value: "--link-accent" }, "Link Accent"), option$5({ value: "--ui-widget-background" }, "UI Widget Background"), option$5({ value: "--ui-widget-focus" }, "UI Widget Focus"), option$5({ value: "--white-piano-key" }, "White Piano Key"), option$5({ value: "--black-piano-key" }, "Black Piano Key"), option$5({ value: "--white-piano-key-text" }, "White Piano Key Text"), option$5({ value: "--black-piano-key-text" }, "Black Piano Key Text"), option$5({ selected: false, disabled: true, hidden: false }, "Pitch Backgrounds"), option$5({ value: "--pitch-background" }, "Pitch Background"), option$5({ value: "--tonic" }, "Tonic"), option$5({ value: "--pitch1-background" }, "1st Pitch Background [!]"), option$5({ value: "--pitch2-background" }, "2nd Pitch Background [!]"), option$5({ value: "--pitch3-background" }, "3rd Pitch Background [!]"), option$5({ value: "--third-note" }, "Third note"), option$5({ value: "--pitch5-background" }, "5th Pitch Background [!]"), option$5({ value: "--pitch6-background" }, "6th Pitch Background [!]"), option$5({ value: "--fifth-note" }, "Fifth note"), option$5({ value: "--pitch8-background" }, "8th Pitch Background [!]"), option$5({ value: "--pitch9-background" }, "9th Pitch Background [!]"), option$5({ value: "--pitch10-background" }, "10th Pitch Background [!]"), option$5({ value: "--pitch11-background" }, "11th Pitch Background [!]"), option$5({ selected: false, disabled: true, hidden: false }, "Track Editor Backgrounds"), option$5({ value: "--track-editor-bg-pitch" }, "Track Editor Pitch BG"), option$5({ value: "--track-editor-bg-pitch-dim" }, "Empty Track Editor Pitch BG"), option$5({ value: "--track-editor-bg-noise" }, "Track Editor Noise BG"), option$5({ value: "--track-editor-bg-noise-dim" }, "Empty Track Editor Noise BG"), option$5({ value: "--track-editor-bg-mod" }, "Track Editor Mod BG"), option$5({ value: "--track-editor-bg-mod-dim" }, "Empty Track Editor Mod BG"), option$5({ selected: false, disabled: true, hidden: false }, "Extras"), option$5({ value: "--multiplicative-mod-slider" }, "Multiplicative Mod Slider"), option$5({ value: "--overwriting-mod-slider" }, "Overwriting Mod Slider"), option$5({ value: "--indicator-primary" }, "Primary Indicator"), option$5({ value: "--indicator-secondary" }, "Secondary Indicator"), option$5({ value: "--select2-opt-group" }, "Preset Catagory Background"), option$5({ value: "--input-box-outline" }, "Input Box Outline"), option$5({ value: "--mute-button-normal" }, "Mute Button (Normal)"), option$5({ value: "--mute-button-mod" }, "Mute Button (Mod)"), option$5({ value: "--mod-label-primary" }, "Mod Label Primary"), option$5({ value: "--mod-label-secondary-text" }, "Mod Label Secondary"), option$5({ value: "--mod-label-primary-text" }, "Mod Label Primary Text"), option$5({ value: "--note-flash" }, "Note Flash"), option$5({ value: "--note-flash-secondary" }, "Note Flash Secondary"), option$5({ value: "--song-player-margin" }, "Song Player Background"), option$5({ value: "--progress-bar" }, "Song Player Progress Bar"), option$5({ value: "--empty-sample-bar" }, "Empty Sample Bar"), option$5({ value: "--octave-scrollbar" }, "Octave Scrollbar"), option$5({ value: "--scrollbar-color" }, "Primary Scrollbar Color"), option$5({ value: "--scrollbar-background" }, "Secondary Scrollbar Color"));
            this._colorInput = input$4({ type: "text", value: localStorage.getItem("customColors") || longText });
            this._fileNameInput = input$4({ type: "text", value: "Your Theme" });
            this._colorpickerInput = input$4({ type: "color", id: "colorPicker", value: "#000000", style: "width: 50%; height: 30px;" });
            this._hexColorInput = input$4({ type: "text", value: "#000000", style: "width: 25%; height: 30px;" });
            this._resetButton = button$9({ style: "height: auto; min-height: var(--button-size);" }, "Reset to defaults");
            this._removeFirstImageButton = button$9({ style: "height: auto; min-height: var(--button-size); margin-bottom: 0.5em;" }, "Remove First Image");
            this._removeSecondImageButton = button$9({ style: "height: auto; min-height: var(--button-size); margin-bottom: 0.5em;" }, "Remove Second Image");
            this._basicButton = button$9({ style: "height: auto; min-height: var(--button-size); margin: 0.5em; width: 50%; border-bottom: solid; border-bottom-color: var(--link-accent);" }, "Basic Template Editor");
            this._advancedButton = button$9({ style: "height: auto; min-height: var(--button-size); margin: 0.5em; width: 50%; border-bottom-color: var(--link-accent); color: var(--secondary-text);" }, "Advanced Template Editor");
            this._cancelButton = button$9({ class: "cancelButton" });
            this._okayButton = button$9({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.editorContainer = div$9({ class: "editorContainer", id: "editorContainer", style: "display:none;" }, div$9({ class: "promptTitle" }, h2$8({ class: "customThemeExt", style: "text-align: inherit;" }, ""), h2$8({ class: "customThemeTitle", style: "margin-bottom: 0.5em;" }, "Custom Theme Editor")), p$4({ style: "text-align: left; margin: 0.5em 0;" }, "Thank you to leoV on discord for basically writing the whole system on how this works, without him this wouldn't be possible!"), p$4({ style: "text-align: left; margin: 0.5em 0;" }, "To use the custom theme editor, simply use the options below!"), div$9(), p$4({ style: "text-align: center; margin: 1em 0;" }, this._colorMenu), p$4({ style: "text-align: center; margin: 1em 0;" }, "Pick a color: ", this._colorpickerInput), div$9({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between; width: 30%; align-self: end; margin: 0.5em;" }, this._resetButton));
            this.fullThemeContainer = div$9({ class: "fullThemeContainer", style: "" }, p$4({ style: "text-align: left; margin: 1em 0;" }, "Basics", this._fullThemeSelect));
            this._exportButton = button$9({ style: "height: auto; min-height: var(--button-size);", id: "exportThemeButton" }, "Export Theme");
            this._importButton = input$4({ type: "file", accept: ".css", style: "height: auto; min-height: var(--button-size);", id: "importThemeButton" }, "Import Theme");
            this.basicContainer = div$9({ class: "basicContainer", style: "" }, div$9({ class: "promptTitle" }, h2$8({ class: "customThemeBasicExt", style: "text-align: inherit;" }, ""), h2$8({ class: "customThemeBasicTitle", style: "margin-bottom: 0.5em;" }, "Template Theme Editor")), p$4({ style: "text-align: left; margin: 1em 0;" }, p$4({ style: "text-align: left; margin: 1em 0; display: flex; flex-direction: row; justify-content: space-between;" }, this._basicButton, this._advancedButton), "Using Template assets from other themes, you can build your own theme easily! Simply input the files below or use assets from the dropdown menus."), p$4({ style: "text-align: left; margin: 1em 0;" }, this.fullThemeContainer, p$4({ style: "text-align: left; margin: 1em 0;" }, "Advanced", this._baseColorSelect, this._backgroundSelect, this._borderSelect, this._iconSelect, this._fontSelect, this._cursorSelect)), p$4({ style: "text-align: left;" }, "Editor Background Image:", this._fileInput), p$4({ style: "text-align: left;" }, "Website Background Image:", this._fileInput2), div$9({ style: "display: flex; flex-direction: row-reverse;" }, div$9({ style: "display: flex; flex-direction: column; justify-content: space-between; width: 30%; align-self: end; margin: 0.5em;" }, this._removeFirstImageButton, this._removeSecondImageButton)));
            this.exportContainer = div$9({ class: "exportContainer", style: "display:none;" }, div$9({ class: "promptTitle" }, h2$8({ class: "customThemeExportExt", style: "text-align: inherit;" }, ""), h2$8({ class: "customThemeExportTitle", style: "margin-bottom: 0.5em;" }, "Import/Export Custom Theme")), p$4({ style: "text-align: left; margin: 0.5em 0;" }, "In here, you can export your theme by copying the text input below, or you could import an already existing theme in the same place."), p$4({ style: "text-align: left; margin: 0.5em 0;" }, "Though it's worth noting that exporting themes will not include the template assets that aren't the base colors or basic overall theme."), p$4({ style: "text-align: center; margin: 1em 0;" }, this._colorInput), p$4({ style: "text-align: center; margin: 1em 0;" }), p$4({ style: "text-align: center; margin: 0.5em 0;" }, "Input your file name here: "), p$4({ style: "text-align: center; margin: 1em 0;" }, this._fileNameInput), div$9({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._exportButton, this._importButton));
            this.customContainer = div$9({ class: "customContainer", id: "customContainer", style: "width: 100%;" }, p$4({ style: "text-align: center; margin: 1em 0; display:flex; flex-direction: row;" }, this._basicCatagoryButton, this._editorCatagoryButton, this._cssCatagoryButton), this.basicContainer, this.editorContainer, this.exportContainer);
            this.container = div$9({ class: "prompt noSelection", id: "themeContainerPrompt", style: "width: 500px;" }, this.customContainer, div$9({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._exportToCSS = () => {
                const fileContents = window.localStorage.getItem("customColors") || longText;
                const blob = new Blob([fileContents], { type: "text/css" });
                save(blob, this._fileNameInput.value + ".css");
            };
            this._importTheme = () => {
                if (this._importButton.files === null)
                    return;
                const files = this._importButton.files[0];
                if (!files)
                    return;
                const fileName = this._importButton.files[0].name;
                let split = fileName.split('.');
                split.pop();
                let finalName = split.join(".");
                this._fileNameInput.value = finalName;
                const reader = new FileReader();
                reader.addEventListener("load", (event) => {
                    ColorConfig.setTheme("AbyssBox Classic");
                    let content = reader.result;
                    console.log(content);
                    window.localStorage.setItem("customColors", content);
                    this._colorInput.value = content;
                    console.log('done');
                    ColorConfig.themes["custom"] = content;
                    ColorConfig.setTheme("custom");
                    this._doc.notifier.changed();
                });
                reader.readAsText(files);
                doReload = true;
            };
            this._whenFullThemeChange = () => {
                ColorConfig.setTheme(this._fullThemeSelect.value);
                const allThemeColors = ColorConfig.getFullTheme();
                ColorConfig.themes["custom"] = allThemeColors;
                window.localStorage.setItem("customColors", allThemeColors);
                CustomThemeBases.setBackground("none");
                CustomThemeBases.setIcons("none");
                CustomThemeBases.setBorder("none");
                localStorage.setItem("backgroundName", "none");
                localStorage.setItem("customIconsName", "none");
                localStorage.setItem("customBorderName", "none");
                this._colorInput.value = allThemeColors;
                ColorConfig.setTheme("custom");
                this._doc.notifier.changed();
            };
            this._whenFontChange = () => {
                CustomThemeBases.setFont(this._fontSelect.value);
                localStorage.setItem("customFontName", this._fontSelect.value);
                doReload = true;
            };
            this._whenBackgroundChange = () => {
                CustomThemeBases.setBackground(this._backgroundSelect.value);
                localStorage.setItem("backgroundName", this._backgroundSelect.value);
                doReload = true;
            };
            this._whenIconsChange = () => {
                CustomThemeBases.setIcons(this._iconSelect.value);
                localStorage.setItem("customIconsName", this._iconSelect.value);
                doReload = true;
            };
            this._whenBorderChange = () => {
                CustomThemeBases.setBorder(this._borderSelect.value);
                localStorage.setItem("customBorderName", this._borderSelect.value);
                doReload = true;
            };
            this._whenCursorChange = () => {
                CustomThemeBases.setCursor(this._cursorSelect.value);
                localStorage.setItem("customCursorName", this._cursorSelect.value);
                doReload = true;
            };
            this._whenBasicButton = () => {
                this.fullThemeContainer.style.display = "unset";
                this._baseColorSelect.style.display = "none";
                this._backgroundSelect.style.display = "none";
                this._borderSelect.style.display = "none";
                this._iconSelect.style.display = "none";
                this._overlaySelect.style.display = "none";
                this._basicButton.style.borderBottom = "solid";
                this._basicButton.style.borderBottomColor = "var(--link-accent)";
                this._basicButton.style.color = "var(--primary-text)";
                this._advancedButton.style.borderBottom = "none";
                this._advancedButton.style.color = "var(--secondary-text)";
            };
            this._whenAdvancedButton = () => {
                this.fullThemeContainer.style.display = "none";
                this._baseColorSelect.style.display = "unset";
                this._backgroundSelect.style.display = "unset";
                this._borderSelect.style.display = "unset";
                this._iconSelect.style.display = "unset";
                this._overlaySelect.style.display = "unset";
                this._basicButton.style.borderBottom = "none";
                this._basicButton.style.color = "var(--secondary-text)";
                this._advancedButton.style.borderBottom = "solid";
                this._advancedButton.style.borderBottomColor = "var(--link-accent)";
                this._advancedButton.style.color = "var(--primary-text)";
            };
            this._whenBaseColorsPicked = () => {
                ColorConfig.setTheme(this._baseColorSelect.value);
                const themeString = ColorConfig.getThemeProperties();
                const customThemeString = this._colorInput.value;
                if (this._baseColorSelect.value != "custom") {
                    window.localStorage.setItem("customColors", themeString);
                    ColorConfig.themes["custom"] = themeString;
                }
                else {
                    window.localStorage.setItem("customColors", customThemeString);
                    ColorConfig.themes["custom"] = customThemeString;
                }
                ColorConfig.setTheme("custom");
                this._doc.notifier.changed();
                doReload = true;
            };
            this._whenBasicCatagoryButton = () => {
                this.basicContainer.style.display = "";
                this.editorContainer.style.display = "none";
                this.exportContainer.style.display = "none";
                this._basicCatagoryButton.style.borderBottom = "solid";
                this._basicCatagoryButton.style.borderBottomColor = "var(--link-accent)";
                this._basicCatagoryButton.style.color = "var(--primary-text)";
                this._editorCatagoryButton.style.borderBottom = "none";
                this._cssCatagoryButton.style.borderBottom = "none";
                this._editorCatagoryButton.style.color = "var(--secondary-text)";
                this._cssCatagoryButton.style.color = "var(--secondary-text)";
            };
            this._whenEditorCatagoryButton = () => {
                this.basicContainer.style.display = "none";
                this.editorContainer.style.display = "";
                this.exportContainer.style.display = "none";
                this._basicCatagoryButton.style.borderBottom = "none";
                this._editorCatagoryButton.style.borderBottom = "solid";
                this._editorCatagoryButton.style.borderBottomColor = "var(--link-accent)";
                this._editorCatagoryButton.style.color = "var(--primary-text)";
                this._cssCatagoryButton.style.borderBottom = "none";
                this._basicCatagoryButton.style.color = "var(--secondary-text)";
                this._cssCatagoryButton.style.color = "var(--secondary-text)";
            };
            this._whenCssCatagoryButton = () => {
                this.basicContainer.style.display = "none";
                this.editorContainer.style.display = "none";
                this.exportContainer.style.display = "";
                this._basicCatagoryButton.style.borderBottom = "none";
                this._editorCatagoryButton.style.borderBottom = "none";
                this._cssCatagoryButton.style.borderBottom = "solid";
                this._cssCatagoryButton.style.borderBottomColor = "var(--link-accent)";
                this._editorCatagoryButton.style.color = "var(--secondary-text)";
                this._basicCatagoryButton.style.color = "var(--secondary-text)";
                this._cssCatagoryButton.style.color = "var(--primary-text)";
            };
            this._toggleAdvancedSettings = () => {
                if (this._advancedSettings.value == "basic") {
                    this.basicContainer.style.display = "";
                    this.editorContainer.style.display = "none";
                    this.exportContainer.style.display = "none";
                }
                else if (this._advancedSettings.value == "editor") {
                    this.basicContainer.style.display = "none";
                    this.editorContainer.style.display = "";
                    this.exportContainer.style.display = "none";
                }
                else if (this._advancedSettings.value == "css") {
                    this.basicContainer.style.display = "none";
                    this.editorContainer.style.display = "none";
                    this.exportContainer.style.display = "";
                }
            };
            this._close = () => {
                this._doc.prompt = null;
                this._doc.undo();
                if (doReload) {
                    setTimeout(() => { window.location.reload(); }, 50);
                }
            };
            this._removeCustomTheme1 = () => {
                window.localStorage.removeItem("customTheme");
                window.localStorage.removeItem("customThemeImageOpacity");
                this._pattern._svg.style.backgroundImage = "";
                document.body.style.backgroundImage = "";
                doReload = true;
            };
            this._removeCustomTheme2 = () => {
                window.localStorage.removeItem("customTheme2");
                const secondImage = document.getElementById("secondImage");
                if (secondImage != null) {
                    secondImage.style.backgroundImage = "";
                }
                doReload = true;
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._close);
                this._cancelButton.removeEventListener("click", this._close);
                this._resetButton.removeEventListener("click", this._reset);
                this._colorpicker.destroy();
            };
            this._reset = () => {
                window.localStorage.removeItem("colorTheme");
                window.localStorage.removeItem("customTheme");
                window.localStorage.removeItem("customTheme2");
                window.localStorage.removeItem("customColors");
                this._pattern._svg.style.backgroundImage = "";
                document.body.style.backgroundImage = "";
                this._pattern2.style.backgroundImage = "";
                this._pattern3.style.backgroundImage = "";
                const secondImage = document.getElementById("secondImage");
                if (secondImage != null) {
                    secondImage.style.backgroundImage = "";
                }
                doReload = true;
                this._close();
            };
            this._whenColorsChanged = () => {
                localStorage.setItem("customColors", this._colorInput.value);
                window.localStorage.setItem("colorTheme", "custom");
                this._doc.colorTheme = "custom";
                doReload = true;
            };
            this._whenFileSelected = () => {
                const file = this._fileInput.files[0];
                const opacityValue = "0.2";
                if (!file)
                    return;
                const reader = new FileReader();
                reader.addEventListener("load", (event) => {
                    let base64 = reader.result;
                    window.localStorage.setItem("customTheme", base64);
                    const value = `url("${window.localStorage.getItem('customTheme')}")`;
                    console.log('setting', value);
                    this._pattern._svg.style.backgroundImage = value;
                    console.log('done');
                });
                reader.readAsDataURL(file);
                localStorage.setItem("customThemeImageOpacity", opacityValue);
                doReload = true;
            };
            this._whenColorsPicked = (ev) => {
                ColorConfig.setThemeProperty(this._currentThemeProperty, ev.hex);
                this._colorInput.value = ColorConfig.getThemeProperties();
                this._colorInput.dispatchEvent(new Event("change"));
                this._hexColorInput.value = ev.hex;
            };
            this._whenHexColorsPicked = () => {
                ColorConfig.setThemeProperty(this._currentThemeProperty, this._hexColorInput.value);
                this._colorInput.value = ColorConfig.getThemeProperties();
                this._colorInput.dispatchEvent(new Event("change"));
            };
            this._whenMenuChanged = () => {
                this._currentThemeProperty = this._colorMenu.value;
            };
            this._whenFileSelected2 = () => {
                const file = this._fileInput2.files[0];
                if (!file)
                    return;
                const reader = new FileReader();
                reader.addEventListener("load", (event) => {
                    let base64 = reader.result;
                    window.localStorage.setItem("customTheme2", base64);
                    document.body.style.backgroundImage = `url(${base64})`;
                    const secondImage = document.getElementById("secondImage");
                    if (secondImage != null) {
                        secondImage.style.backgroundImage = `url(${base64})`;
                    }
                });
                reader.readAsDataURL(file);
            };
            this._okayButton.addEventListener("click", this._close);
            this._cancelButton.addEventListener("click", this._close);
            setTimeout(() => {
                this._colorpicker = new Tt(this._colorpickerInput, {
                    theme: 'dark',
                    format: 'hex',
                });
                this._colorpicker.on("change", this._whenColorsPicked);
            }, 0);
            this._fileInput.addEventListener("change", this._whenFileSelected);
            this._fileInput2.addEventListener("change", this._whenFileSelected2);
            this._colorInput.addEventListener("change", this._whenColorsChanged);
            this._resetButton.addEventListener("click", this._reset);
            this._hexColorInput.addEventListener("change", this._whenHexColorsPicked);
            this._colorMenu.addEventListener("change", this._whenMenuChanged);
            this._removeFirstImageButton.addEventListener("click", this._removeCustomTheme1);
            this._removeSecondImageButton.addEventListener("click", this._removeCustomTheme2);
            this._advancedSettings.addEventListener("click", this._toggleAdvancedSettings);
            this._exportButton.addEventListener("click", this._exportToCSS);
            this._importButton.addEventListener("change", this._importTheme);
            this._baseColorSelect.addEventListener("change", this._whenBaseColorsPicked);
            this._fontSelect.addEventListener("change", this._whenFontChange);
            this._backgroundSelect.addEventListener("change", this._whenBackgroundChange);
            this._iconSelect.addEventListener("change", this._whenIconsChange);
            this._borderSelect.addEventListener("change", this._whenBorderChange);
            this._cursorSelect.addEventListener("change", this._whenCursorChange);
            this._fullThemeSelect.addEventListener("change", this._whenFullThemeChange);
            this._basicButton.addEventListener("click", this._whenBasicButton);
            this._advancedButton.addEventListener("click", this._whenAdvancedButton);
            this._basicCatagoryButton.addEventListener("click", this._whenBasicCatagoryButton);
            this._editorCatagoryButton.addEventListener("click", this._whenEditorCatagoryButton);
            this._cssCatagoryButton.addEventListener("click", this._whenCssCatagoryButton);
        }
    }

    const textOnIcon = ColorConfig.getComputed("--text-enabled-icon") !== "" ? ColorConfig.getComputed("--text-enabled-icon") : "✓ ";
    const textOffIcon = ColorConfig.getComputed("--text-disabled-icon") !== "" ? ColorConfig.getComputed("--text-disabled-icon") : "　";
    const { button: button$8, div: div$8, h2: h2$7, option: option$4, select: select$4, p: p$3 } = HTML;
    var setPresets = new Array();
    var storedPresets = localStorage.getItem("setPresets");
    var totalPresets = new Array("Retro Presets", "Keyboard Presets", "Idiophone Presets", "Guitar Presets", "Picked Bass Presets", "Picked String Presets", "Distortion Presets", "Bellows Presets", "String Presets", "Vocal Presets", "Brass Presets", "Reed Presets", "Flute Presets", "Pad Presets", "Drum Presets", "Novelty Presets", "Modbox Presets", "Sandbox Presets", "Blackbox Presets", "Todbox Presets", "Midbox Misc Presets", "Midbox Dubstep Presets", "Midbox Noise Presets", "UltraBox Presets", "AbyssBox 0.8 to 1.2 Presets", "AbyssBox 1.3+ Presets");
    if (storedPresets != null && storedPresets != undefined) {
        setPresets = JSON.parse(storedPresets);
    }
    else {
        setPresets.push("Retro Presets", "Keyboard Presets", "Idiophone Presets", "Guitar Presets", "Picked Bass Presets", "Picked String Presets", "Distortion Presets", "Bellows Presets", "String Presets", "Vocal Presets", "Brass Presets", "Reed Presets", "Flute Presets", "Pad Presets", "Drum Presets", "Novelty Presets", "UltraBox Presets", "AbyssBox 0.8 to 1.2 Presets", "AbyssBox 1.3+ Presets");
    }
    class PresetPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._cancelButton = button$8({ class: "cancelButton" });
            this._okayButton = button$8({ class: "okayButton", style: "width:45%;" }, "Okay");
            this._beepboxMenu = select$4({ style: "width: 100%; margin: 0.5em; margin-left:0;" }, option$4({ selected: true, disabled: true, hidden: false }, "BeepBox Presets"), option$4({ value: "Retro Presets" }, (setPresets.includes("Retro Presets") ? textOnIcon : textOffIcon) + "Retro Presets"), option$4({ value: "Keyboard Presets" }, (setPresets.includes("Keyboard Presets") ? textOnIcon : textOffIcon) + "Keyboard Presets"), option$4({ value: "Idiophone Presets" }, (setPresets.includes("Idiophone Presets") ? textOnIcon : textOffIcon) + "Idiophone Presets"), option$4({ value: "Guitar Presets" }, (setPresets.includes("Guitar Presets") ? textOnIcon : textOffIcon) + "Guitar Presets"), option$4({ value: "Picked Bass Presets" }, (setPresets.includes("Picked Bass Presets") ? textOnIcon : textOffIcon) + "Picked Bass Presets"), option$4({ value: "Picked String Presets" }, (setPresets.includes("Picked String Presets") ? textOnIcon : textOffIcon) + "Picked String Presets"), option$4({ value: "Distortion Presets" }, (setPresets.includes("Distortion Presets") ? textOnIcon : textOffIcon) + "Distortion Presets"), option$4({ value: "Bellows Presets" }, (setPresets.includes("Bellows Presets") ? textOnIcon : textOffIcon) + "Bellows Presets"), option$4({ value: "String Presets" }, (setPresets.includes("String Presets") ? textOnIcon : textOffIcon) + "String Presets"), option$4({ value: "Vocal Presets" }, (setPresets.includes("Vocal Presets") ? textOnIcon : textOffIcon) + "Vocal Presets"), option$4({ value: "Brass Presets" }, (setPresets.includes("Brass Presets") ? textOnIcon : textOffIcon) + "Brass Presets"), option$4({ value: "Reed Presets" }, (setPresets.includes("Reed Presets") ? textOnIcon : textOffIcon) + "Reed Presets"), option$4({ value: "Flute Presets" }, (setPresets.includes("Flute Presets") ? textOnIcon : textOffIcon) + "Flute Presets"), option$4({ value: "Drum Presets" }, (setPresets.includes("Drum Presets") ? textOnIcon : textOffIcon) + "Drum Presets"), option$4({ value: "Novelty Presets" }, (setPresets.includes("Novelty Presets") ? textOnIcon : textOffIcon) + "Novelty Presets"));
            this._otherMenu = select$4({ style: "width: 100%;" }, option$4({ selected: true, disabled: true, hidden: false }, "Other Mod Presets"), option$4({ value: "Modbox Presets" }, (setPresets.includes("Modbox Presets") ? textOnIcon : textOffIcon) + "Modbox Presets"), option$4({ value: "Sandbox Presets" }, (setPresets.includes("Sandbox Presets") ? textOnIcon : textOffIcon) + "Sandbox Presets"), option$4({ value: "Blackbox Presets" }, (setPresets.includes("Blackbox Presets") ? textOnIcon : textOffIcon) + "Blackbox Presets"), option$4({ value: "Todbox Presets" }, (setPresets.includes("Todbox Presets") ? textOnIcon : textOffIcon) + "Todbox Presets"), option$4({ value: "Midbox Misc Presets" }, (setPresets.includes("Midbox Misc Presets") ? textOnIcon : textOffIcon) + "Midbox Misc Presets"), option$4({ value: "Midbox Dubstep Presets" }, (setPresets.includes("Midbox Dubstep Presets") ? textOnIcon : textOffIcon) + "Midbox Dubstep Presets"), option$4({ value: "Midbox Noise Presets" }, (setPresets.includes("Midbox Noise Presets") ? textOnIcon : textOffIcon) + "Midbox Noise Presets"), option$4({ value: "UltraBox Presets" }, (setPresets.includes("UltraBox Presets") ? textOnIcon : textOffIcon) + "UltraBox Presets"), option$4({ value: "AbyssBox 0.8 to 1.2 Presets" }, (setPresets.includes("AbyssBox 0.8 to 1.2 Presets") ? textOnIcon : textOffIcon) + "AbyssBox 0.8 to 1.2 Presets"), option$4({ value: "AbyssBox 1.3+ Presets" }, (setPresets.includes("AbyssBox 1.3+ Presets") ? textOnIcon : textOffIcon) + "AbyssBox 1.3+ Presets"));
            this.container = div$8({ class: "prompt noSelection", id: "presetContainerPrompt", style: "width: 400px;" }, div$8({ class: "promptTitle" }, h2$7({ class: "presetExt", style: "text-align: inherit;" }, ""), h2$7({ class: "presetTitle", style: "margin-bottom: 0.5em;" }, "Select Presets")), p$3({ style: "margin-bottom: 1.5em; margin-top: 0; font-size: 16px; text-align: center;" }, 'Here you can select any preset category and make it visible or not. Which ones you would like are completely up to you.'), div$8({ style: "display: flex; flex-direction: column; align-items: center; height: 2em; justify-content: flex-end;" }, div$8({ class: "beepBox Presets", style: "width: 100%;" }, this._beepboxMenu), div$8({ class: "other Presets", style: "width: 100%;" }, this._otherMenu)), div$8({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._beepboxMenuHandler = (event) => {
                const setPresetValue = this._beepboxMenu.value;
                if (setPresets.includes(setPresetValue)) {
                    const index = setPresets.indexOf(setPresetValue);
                    if (index > -1) {
                        setPresets.splice(index, 1);
                    }
                }
                else {
                    setPresets.push(setPresetValue);
                }
                const setOption = this._beepboxMenu.querySelector('[value="' + setPresetValue + '"]');
                setOption.text = (setPresets.includes(setPresetValue) ? textOnIcon : textOffIcon) + setPresetValue;
                localStorage.setItem("setPresets", JSON.stringify(setPresets));
                this._beepboxMenu.selectedIndex = 0;
                this._doc.notifier.changed();
            };
            this._otherMenuHandler = (event) => {
                const setPresetValue = this._otherMenu.value;
                if (setPresets.includes(setPresetValue)) {
                    const index = setPresets.indexOf(setPresetValue);
                    if (index > -1) {
                        setPresets.splice(index, 1);
                    }
                }
                else {
                    setPresets.push(setPresetValue);
                }
                const setOption = this._otherMenu.querySelector('[value="' + setPresetValue + '"]');
                setOption.text = (setPresets.includes(setPresetValue) ? textOnIcon : textOffIcon) + setPresetValue;
                localStorage.setItem("setPresets", JSON.stringify(setPresets));
                this._otherMenu.selectedIndex = 0;
                this._doc.notifier.changed();
            };
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._close);
                this._cancelButton.removeEventListener("click", this._close);
            };
            this._cancelButton.addEventListener("click", this._close);
            this._okayButton.addEventListener("click", this._close);
            this._beepboxMenu.addEventListener("change", this._beepboxMenuHandler);
            this._otherMenu.addEventListener("change", this._otherMenuHandler);
        }
    }

    const { button: button$7, div: div$7, p: p$2, h2: h2$6, h3 } = HTML;
    class TipPrompt {
        constructor(_doc, type) {
            this._doc = _doc;
            this._closeButton = button$7({ class: "cancelButton" });
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._closeButton.removeEventListener("click", this._close);
            };
            let message;
            switch (type) {
                case "scale":
                    {
                        message = div$7(h2$6("Scale"), p$2("This setting limits the available pitches for adding notes. You may think that there's no point in limiting your choices, but the set of pitches you use has a strong influence on the mood and feel of your song, and these scales serve as guides to help you choose appropriate pitches. Don't worry, you can change the scale at any time, so you're not locked into it. Try making little melodies using all the available pitches of a scale to get a sense for how it sounds."), p$2("The most common scales are major and minor. Assuming your song uses all pitches in the scale and especially \"tonic\" pitches (the purple rows in the pattern editor) then major scales tend to sound more playful or optimistic, whereas minor scales sound more serious or sad."));
                    }
                    break;
                case "key":
                    {
                        message = div$7(h2$6("Song Key"), p$2("This setting can shift the frequency of every note in your entire song up or down, keeping the \"tonic\" pitches (the brown rows in the pattern editor) aligned with the selected \"key\" pitch."), p$2("If you've already placed some notes but they don't emphasize \"tonic\" pitches then the selected key isn't very meaningful. You can select the \"Detect Key\" option in the key menu to automatically align the most emphasized notes with \"tonic\" pitches."));
                    }
                    break;
                case "key_octave":
                    {
                        message = div$7(h2$6("Octave"), p$2("This setting can shift the \"key\" by an octave, allowing you to use a B- or C+ key."), p$2(`This goes from ${Config.octaveMin} to ${Config.octaveMax}.`));
                    }
                    break;
                case "tempo":
                    {
                        message = div$7(h2$6("Song Tempo"), p$2("This setting controls the speed of your song, measured in beats-per-minute. A \"beat\" is the duration of the little gray rectangles in the pattern editor. (In conventional music notation, a \"quarter note\" is usually equivalent to \"beat\".)"));
                    }
                    break;
                case "reverb":
                    {
                        message = div$7(h2$6("Reverb"), p$2("Reverb is like a continuous echo effect. A little bit helps instruments sound more natural. Adding a lot of reverb can add sense of depth or mystery, but too much reverb can kinda \"smear\" sounds so that it's harder to distinguish notes or instruments, especially for lower \"bass\" notes."));
                    }
                    break;
                case "rhythm":
                    {
                        message = div$7(h2$6("Rhythm"), p$2("This setting determines how beats are divided. The pattern editor helps you align notes to fractions of a beat based on this setting."), p$2("If you've already placed some notes but they don't align with the selected rhythm, you can select the \"Snap Notes To Rhythm\" option in the rhythm menu to force the notes in the currently selected pattern(s) to align with the selected rhythm."));
                    }
                    break;
                case "instrumentIndex":
                    {
                        message = div$7(h2$6("Instrument Number"), p$2("In the \"Channel Settings\" option from UltraBox's \"Edit\" menu, there are a few ways to enable multiple instruments per channel."), p$2("First, you could enable multiple simultaneous instruments per channel. All of the channel's instruments will play all of the notes in the channel at the same time, and you can click an instrument number to view and edit its settings."), p$2("Second, you could enable different instruments per pattern. Only one of the instruments will play at any given time, but you can click the instrument number to change which instrument is used for the currently selected pattern(s)."), p$2("Finally, you can enable them both, in which case you can click an instrument number once to view it, and again to toggle whether the instrument is used for the currently selected pattern(s)."), p$2("Either way, you can click the + button to add more instruments to a channel, and you can press shift and a number key on your keyboard to select an instrument as if you had clicked the corresponding button here."));
                    }
                    break;
                case "instrumentVolume":
                    {
                        message = div$7(h2$6("Instrument Volume"), p$2("This setting controls the volume of the selected instrument without affecting the volume of the other instruments. This allows you to balance the loudness of each instrument relative to each other."), p$2("Please be careful when using volume settings above 0. This indicates amplification and too much of that can trip the audio limiter built into this tool. This can lead to your song sounding muffled if overused. But when used carefully, amplification can be a powerful tool!"));
                    }
                    break;
                case "pan":
                    {
                        message = div$7(h2$6("Instrument Panning"), p$2("If you're listening through headphones or some other stereo sound system, this controls the position of the instrument and where the sound is coming from, ranging from left to right."), p$2("As a suggestion, composers often put lead melodies, drums, and basses in the center, and spread other instruments toward either side. If too many instruments seem like they're coming from the same place, it can feel crowded and harder to distinguish individual sounds, especially if they cover a similar pitch range."));
                    }
                    break;
                case "panDelay":
                    {
                        message = div$7(h2$6("Stereo Delay"), p$2("When panning, a slight delay is often added between the left and right ear to help make a sound feel more 'directional'. For example, in the real world your left ear will hear a sound coming from the left just slightly before the right ear."), p$2("This setting controls how much delay is added. When this is set to minimum, panning only affects the volume of the left/right ear without changing the delay. This can help to get a more 'uniform' feeling sound, which can be desirable for making 8-bit music."));
                    }
                    break;
                case "arpeggioSpeed":
                    {
                        message = div$7(h2$6("Arpeggio Speed"), p$2("This setting affects how fast your chord will 'arpeggiate', or cycle between notes. With a fast arpeggio speed it will sound rapid-fire, with a slow speed you can hear each note one after another."));
                    }
                    break;
                case "twoNoteArpeggio":
                    {
                        message = div$7(h2$6("Faster Two-Note Arpeggio"), p$2("This setting makes arpeggios with only two notes in them happen twice as fast. Arpeggios with more notes in them are unaffected."));
                    }
                    break;
                case "detune":
                    {
                        message = div$7(h2$6("Detune"), p$2("This setting can be used to finely control the pitch of your instrument. It is in units of 'cents', 100 of which equal a pitch shift of one semitone."), p$2("Careful - you can quickly get very dissonant sounding songs by using this setting."));
                    }
                    break;
                case "instrumentType":
                    {
                        message = div$7(h2$6("Instrument Type"), p$2("UltraBox comes with many instrument presets, try them out! You can also create your own custom instruments!"), p$2("There are also options for copying and pasting instrument settings and for generating random instruments at the top of the instrument type menu."));
                    }
                    break;
                case "eqFilter":
                    {
                        message = div$7(h2$6("EQ Filter"), p$2("Filters are a way of emphasizing or diminishing different parts of a sound. Musical notes have a fundamental (base) frequency, but the sound of a musical note also has parts at higher frequencies and filters can adjust the volume of each of these parts based on their frequency."), p$2("Click in the filter editor to insert, delete, or drag a filter control point. The horizontal position of the point determines which frequencies it affects, and the vertical position determines how the volume is affected at that frequency."), p$2("Insert a new point on the left side of the filter editor to add a \"high-pass\" filter point, which additionally reduces the volume of lower frequencies, or insert a new point on the right side to add a \"low-pass\" filter point which reduces the volume of higher frequencies."), p$2("You can also enable a \"Note Filter\" as an effect. EQ and note filters are mostly the same, but have different purposes. EQ filters are for overall adjustments, whereas note filters are for dynamic control and can be moved with envelopes. Note filters also change how the distortion effect sounds."));
                    }
                    break;
                case "noteFilter":
                    {
                        message = div$7(h2$6("Note Filter"), p$2("Note filters are mostly the same as EQ filters, but have a different purpose. EQ filters are for overall adjustments, whereas note filters are for dynamic control and can be moved with envelopes. Note filters also change how the distortion effect sounds."), p$2("Filters are a way of emphasizing or diminishing different parts of a sound. Musical notes have a fundamental (base) frequency, but the sound of a musical note also has parts at higher frequencies and filters can adjust the volume of each of these parts based on their frequency."), p$2("Click in the filter editor to insert, delete, or drag a filter control point. The horizontal position of the point determines which frequencies it affects, and the vertical position determines how the volume is affected at that frequency."), p$2("Insert a new point on the left side of the filter editor to add a \"high-pass\" filter point, which additionally reduces the volume of lower frequencies, or insert a new point on the right side to add a \"low-pass\" filter point which reduces the volume of higher frequencies."));
                    }
                    break;
                case "fadeInOut":
                    {
                        message = div$7(h2$6("Fade In/Out"), p$2("This setting controls how long it takes for notes to reach full volume at the beginning or decay to silence at the end."), p$2("An instant fade-in sounds like instruments that are played by hitting or plucking, whereas slower fade-ins sound like instruments that are played by blowing air."), p$2("You can also make the fade-out start before the note ends to leave a gap before the next note starts, or after the note ends to allow the sound of the end of the note to overlap with the start of the next note."));
                    }
                    break;
                case "transition":
                    {
                        message = div$7(h2$6("Transition"), p$2("Usually, when one note ends at the same time another begins, the old note will fade out and the new note will fade in based on the fade in/out settings, but this setting can override that, connecting the end of one note to the beginning of the next."), p$2("The \"interrupt\" transition makes the wave suddenly change from the old note's frequency to the new note's frequency without any fading, but still restarts envelopes at the beginning of the new note. The \"continue\" transition is similar but it doesn't even restart envelopes, and can be used to make each of the notes in a chord start or stop at different times!"), p$2("The \"slide\" transition makes the pitch shift quickly but not instantaneously from the old note's frequency to the new note's frequency, and softly restarts envelopes. The \"slide in pattern\" transition is the same except it doesn't connect the last note in a pattern to the first note in the next pattern."));
                    }
                    break;
                case "chipWave":
                    {
                        message = div$7(h2$6("Chip Wave"), p$2("UltraBox comes with some sound waves based on classic electronic sound chips, as well as several unique waves. This is the basic source of the sound of the instrument, which is modified by the other instrument settings."));
                    }
                    break;
                case "chipNoise":
                    {
                        message = div$7(h2$6("Noise"), p$2("UltraBox comes with several basic noise sounds. These do not have any distinct musical pitch, and can be used like drums to create beats and emphasize your song's rhythm."));
                    }
                    break;
                case "supersawDynamism":
                    {
                        message = div$7(h2$6("Supersaw Dynamism"), p$2("A supersaw is a combination of many sawtooth waves, and this setting controls the contribution of extra sawtooth waves."), p$2("At the low end of the slider, only the first wave is contributing to the sound, which sounds like an ordinary static sawtooth wave. At the maximum setting, all of the waves are contributing equally and the resulting tone can randomly shift depending on how the waves line up with each other, similar to the \"unison\" and \"chorus\" settings."));
                    }
                    break;
                case "supersawSpread":
                    {
                        message = div$7(h2$6("Supersaw Spread"), p$2("A supersaw is a combination of many sawtooth waves, and this setting controls the distance between their frequencies. The dynamism setting must be used for the extra waves to have any effect."), p$2("At the low end of the spread slider, all of the voices have the same frequency but random phase, resulting in a different sound every time a note starts. In the middle, the waves all have slightly different frequencies that shift in and out of phase over time similar to the \"unison\" and \"chorus\" settings, creating a classic supersaw sound. At the extreme end, the frequencies are so far apart they sound dissonant."));
                    }
                    break;
                case "supersawShape":
                    {
                        message = div$7(h2$6("Supersaw Shape"), p$2("This supersaw instrument includes an option to change the shape of the waves from sawtooth waves to pulse waves. Use this setting to morph between the two shapes."), p$2("When a pulse wave shape is used, you can also control the pulse width with a separate setting."));
                    }
                    break;
                case "pulseWidth":
                    {
                        message = div$7(h2$6("Pulse Wave Width"), p$2("This setting controls the shape and sound of a pulse wave. At the minimum width, it sounds light and buzzy. At the maximum width, it is shaped like a classic square wave."));
                    }
                    break;
                case "unison":
                    {
                        message = div$7(h2$6("Unison"), p$2("This instrument can play two identical waves at different frequencies. When two waves play at slightly different frequencies, they move in and out of phase with each other over time as different parts of the waves line up. This creates a dynamic, shifting sound. Pianos are a common example of this kind of sound, because each piano key strikes multiple strings that are tuned to slightly different frequencies."), p$2("The distance between two frequencies is called an \"interval\", and this setting controls how large it is. If the interval is too wide, then the waves may sound out-of-tune and \"dissonant\". However, if the interval is even larger, then the two frequencies can even be distinct pitches."));
                    }
                    break;
                case "chords":
                    {
                        message = div$7(h2$6("Chords"), p$2("When multiple different notes occur at the same time, this is called a chord. Chords can be created in UltraBox's pattern editor by adding notes above or below another note."), p$2("This setting determines how chords are played. The standard option is \"simultaneous\" which starts playing all of the pitches in a chord at the same instant. The \"strum\" option is similar, but plays the notes starting at slightly different times. The \"arpeggio\" option is used in \"chiptune\" style music and plays a single tone that rapidly alternates between all of the pitches in the chord."), p$2("Some UltraBox instruments have an option called \"custom interval\" which uses the chord notes to control the interval between the waves of a single tone. This can create strange sound effects when combined with FM modulators."));
                    }
                    break;
                case "vibrato":
                    {
                        message = div$7(h2$6("Vibrato"), p$2("This setting causes the frequency of a note to wobble slightly. Singers and violinists often use vibrato."));
                    }
                    break;
                case "vibratoDepth":
                    {
                        message = div$7(h2$6("Vibrato Depth"), p$2("This setting affects the depth of your instrument's vibrato, making the wobbling effect sound stronger or weaker."));
                    }
                    break;
                case "vibratoDelay":
                    {
                        message = div$7(h2$6("Vibrato Delay"), p$2("This setting changes when vibrato starts to kick in after a note is played. Vibrato is most common for long held notes and less common in short notes, so this can help you achieve that effect."));
                    }
                    break;
                case "vibratoSpeed":
                    {
                        message = div$7(h2$6("Vibrato Speed"), p$2("This setting determines how fast the vibrato's up-and-down wobble effect will happen for your instrument."));
                    }
                    break;
                case "vibratoType":
                    {
                        message = div$7(h2$6("Vibrato Type"), p$2("This determines the way vibrato causes your instrument's pitch to wobble. The normal type is smooth up and down, the shaky type is chaotic."));
                    }
                    break;
                case "algorithm":
                    {
                        message = div$7(h2$6("FM Algorithm"), p$2('FM Synthesis is a mysterious but powerful technique for crafting sounds, popularized by Yamaha keyboards and the Sega Genesis/Mega Drive. It may seem confusing, but try playing around with the options until you get a feel for it, or check out some of the preset examples!'), p$2('This FM synthesizer uses up to four waves, numbered 1, 2, 3, and 4. Each wave may have its own frequency and volume.'), p$2('There are two kinds of waves: "carrier" waves play a tone out loud, but "modulator" waves distort other waves instead. Wave 1 is always a carrier and plays a tone, but other waves may distort it. The "Algorithm" setting determines which waves are modulators, and which other waves those modulators distort. For example, "1←2" means that wave 2 modulates wave 1, and wave 1 plays out loud.'));
                    }
                    break;
                case "feedbackType":
                    {
                        message = div$7(h2$6("Feedback Type"), p$2('Modulators distort in one direction (like 1←2), but you can also use the feedback setting to make any wave distort in the opposite direction (1→2), or even itself (1⟲).'));
                    }
                    break;
                case "feedbackVolume":
                    {
                        message = div$7(h2$6("Feedback Distortion"), p$2("This setting controls the amount of feedback distortion based on the feedback type setting."));
                    }
                    break;
                case "operatorFrequency":
                    {
                        message = div$7(h2$6("Operator Frequency"), p$2('This setting controls the frequency of an individual FM wave, relative to the fundamental frequency of the note. The multiplier 1× is the same as the fundamental frequency, whereas 2x would be an octave (12 semitones) above it. The frequencies with a "~" are slightly detuned and shift in and out of phase over time compared to the other frequencies.'), p$2('Try different combinations of a "carrier" wave and a "modulator" wave with different frequencies to get a feel for how they sound together.'));
                    }
                    break;
                case "operatorVolume":
                    {
                        message = div$7(h2$6("Operator Volume"), p$2("This setting controls the volume of \"carrier\" waves, or the amount of distortion that \"modulator\" waves apply to other waves."));
                    }
                    break;
                case "spectrum":
                    {
                        message = div$7(h2$6("Spectrum"), p$2("This setting allows you to draw your own noise spectrum! This is good for making drum sounds."), p$2("If you only use certain frequencies and a soft fade in/out, it's also possible to make howling wind sounds or even musical wind instruments."), p$2("The left side of the spectrum editor controls the noise energy at lower frequencies, and the right side controls higher frequencies."));
                    }
                    break;
                case "harmonics":
                    {
                        message = div$7(h2$6("Harmonics"), p$2("This setting allows you to design your own sound wave! Most musical waves are actually a combination of sine waves at certain frequencies, and this lets you control the volume of each sine wave individually."), p$2("The left side of the harmonics editor controls the sine wave volumes at lower frequencies, and the right side controls higher frequencies."));
                    }
                    break;
                case "effects":
                    {
                        message = div$7(h2$6("Effects"), p$2("UltraBox has many different kinds of special effects you can add to instruments. You can turn on multiple effects at once, and they can be configured individually. Try them all out!"));
                    }
                    break;
                case "drumsetEnvelope":
                    {
                        message = div$7(h2$6("Drumset Envelope"), p$2("This drumset comes with a low-pass filter, and this setting can dynamically change the low-pass filter frequency over time. Each row in the pattern editor can have a different envelope shape."));
                    }
                    break;
                case "drumsetSpectrum":
                    {
                        message = div$7(h2$6("Drumset Spectrum"), p$2("This setting allows you to draw your own noise spectrum! This is good for making drumsets. Each row in the pattern editor gets its own spectrum."), p$2("The left side of the spectrum editor controls the noise energy at lower frequencies, and the right side controls higher frequencies."));
                    }
                    break;
                case "chorus":
                    {
                        message = div$7(h2$6("Chorus"), p$2("The chorus effect combines multiple copies of the instrument's sound and adds a bit of vibrato to simulate an ensemble of instruments or voices. Drag the slider to control how much chorus is added."));
                    }
                    break;
                case "echoSustain":
                    {
                        message = div$7(h2$6("Echo Volume"), p$2("The echo effect repeats the instrument's sound after a delay. Each echo is a little bit quieter than the last, and this setting controls how much quieter."));
                    }
                    break;
                case "echoDelay":
                    {
                        message = div$7(h2$6("Echo Delay"), p$2("The echo effect repeats the instrument's sound after a delay, and this setting controls how long the delay is."));
                    }
                    break;
                case "pitchShift":
                    {
                        message = div$7(h2$6("Pitch Shift"), p$2("This setting makes instruments play higher or lower pitches than the ones displayed in the pattern editor. Be careful that you don't confuse yourself!"), p$2("You can combine this with envelopes to bend pitch over time, or play multiple simultaneous instruments with different pitch shifts for interesting layered sounds."), p$2("The intervals created by this setting are in \"just intonation\" which means they stay in phase with the original pitch instead of shifting in and out of phase over time. If you want the shifting, add the detune effect!"));
                    }
                    break;
                case "detune":
                    {
                        message = div$7(h2$6("Detune"), p$2("This setting slightly adjusts the frequency of notes played by the instrument. You can use a little bit to add a pleasing shifting sound similar to the \"unison\" feature when combined with other instruments. If you use too much, then the instrument may sound unpleasantly out-of-tune."));
                    }
                    break;
                case "distortion":
                    {
                        message = div$7(h2$6("Distortion"), p$2("This is the famous electric guitar effect! However, there are some things to be aware of."), p$2("First, most chords don't sound right when combined with heavy distortion. The only chords commonly used with distorted electric guitars are \"power chords\" which consist of a root note, a \"fifth\" note above that, and/or any octaves of those two notes."), p$2("Second, the distortion sound depends a lot on filtering. In particular, I recommend enabling the note filter effect, and adding both high-pass and low-pass points to the note filter. (Note filters are applied first, then distortion which transforms the sound based on that filtering, then the EQ filter is applied last.)"), p$2("Finally, I recommend adjusting the fade-out setting to allow the end of each note to overlap a little bit with the beginning of the next, but not too much!"));
                    }
                    break;
                case "bitcrusherQuantization":
                    {
                        message = div$7(h2$6("Bitcrusher Quantization"), p$2("This effect makes stuff sounds harsher, artificial, and \"low quality\", which is great if that's what you're going for!"));
                    }
                    break;
                case "bitcrusherFreq":
                    {
                        message = div$7(h2$6("Frequency Quantization"), p$2("The bitcrusher effect comes with an additional frequency quantization effect! This is a fun one to play with, especially when combined with the note filter effect."), p$2("Every other notch on this slider is aligned with the currently selected key of the song, and the in-between notches are aligned with the tritones of the key."));
                    }
                    break;
                case "envelopes":
                    {
                        message = div$7(h2$6("Envelopes"), p$2("Envelopes are a way to dynamically adjust various other settings over time, usually based on how long the note lasts. Press the + button to add an envelope, then use the menus below to select which setting to control and the curve of the envelope. Try different combinations to see how they sound!"), p$2("Most envelope curves restart from the beginning every time a new note plays. The \"note size\" option is based on the note width as drawn in the pattern editor."), p$2("Envelope curves move in the range from 0 to 1 (or vice versa), where 0 means as quiet as possible and 1 is the same as the corresponding position selected in the instrument settings above. If multiple envelopes are targetting the same setting, they are multiplied before applying to the setting."));
                    }
                    break;
                case "discreteEnvelope":
                    {
                        message = div$7(h2$6("Use Discrete Envelopes?"), p$2("Envelopes are usually interpolated, meaning they change continuously and smoothly. This setting, when ticked, makes envelopes not interpolate. It's a small difference, but can be helpful for some chip noises, and it's most noticeable with the 'blip' transitions."));
                    }
                    break;
                case "envelopeSpeed":
                    {
                        message = div$7(h2$6("Envelope Speed"), p$2("This setting controls the speed of ALL envelopes for the instrument. Each envelope 'plays' at a certain speed, and this slider can scale it to play faster or slower. Use this to fine-tune your tremolo or how fast something decays to get just the right effect."), p$2("Note that, while this setting is limited in the sense that it controls all envelopes at once, you can still achieve a variety of outcomes by trying combinations of modes of each envelope type, which typically differ only in speed."));
                    }
                    break;
                case "usedInstrument":
                    {
                        message = div$7(h3("'Is this instrument used somewhere else?'"), p$2("This indicator will light up when the instrument you're currently looking at is used in another place in your song (outside the selection)."), p$2("This can be useful when you're not sure if you've used the instrument before and making edits carelessly could change other parts of the song."));
                    }
                    break;
                case "usedPattern":
                    {
                        message = div$7(h3("'Is this pattern used somewhere else?'"), p$2("This indicator will light up when the pattern you're currently looking at is used in another place in your song (outside the selection)."), p$2("This can be useful when you're not sure if you've used the pattern before and making edits carelessly could change other parts of the song."));
                    }
                    break;
                case "modChannel":
                    {
                        message = div$7(h2$6("Modulator Channel"), p$2("Modulators can be used to change settings in your song automatically over time. This technique is also known as automation."), p$2("This setting controls which channel the modulators will take effect for. If you choose 'Song', you can change song-wide settings too!"));
                    }
                    break;
                case "modInstrument":
                    {
                        message = div$7(h2$6("Modulator Instrument"), p$2("Modulators can be used to change settings in your song automatically over time. This technique is also known as automation."), p$2("This setting controls which instrument your modulator will apply to within the given channel you've chosen."), p$2("If you choose 'all', every instrument in the channel will be affected. If you choose 'active', just the current ones used in this pattern will be instead."), p$2("Note that with 'all' or 'active', effects will only be applied to instruments that the effect is applicable on. For example if an instrument does not have panning effects, modulating panning will not affect it."));
                    }
                    break;
                case "modSet":
                    {
                        message = div$7(h2$6("Modulator Setting"), p$2("This is the parameter that you want to change with this modulator. For example, if you set this to 'Tempo', you can speed up or slow down your song by laying notes in the pattern editor."), p$2("Note that you'll see different options if your channel is set to 'Song' versus a channel number. With 'Song', you'll see song-wide settings such as tempo. With a channel, you'll see specific instrument settings. Adding more effects to the instrument causes modulators for them to be available, so be sure to experiment!"), p$2("Most modulators behave as you'd expect and work just as if you were moving their associated slider. Click the '?' when you have a setting selected to get more info about it!"));
                    }
                    break;
                case "modFilter":
                    {
                        message = div$7(h2$6("Filter Target"), p$2("This setting specifies which parameter of your targeted filter you would like to change."), p$2("With the 'morph' setting, the note value for your modulator represents the number of a subfilter to 'morph' into over time. For example, dragging a note from 0 to 7 will morph from your main filter to the 7th subfilter. To change how your subfilters are set up, click the '+' button on the target filter."), p$2("With a Dot setting, you can fine-tune the exact location of every dot on your filter graph. Note that this is extremely intensive if you want to modulate all dots - a morph is better in that case - but this can come in handy for small adjustments."));
                    }
                    break;
                case "transitionBar":
                    {
                        message = div$7(h2$6("Tie Notes Over Bars"), p$2("With this option ticked, notes won't transition across bars if you put notes with the same pitches at the start of the next bar. Instead they will 'tie over' and sound like one long note."));
                    }
                    break;
                case "clicklessTransition":
                    {
                        message = div$7(h2$6("Clickless Transition"), p$2("Sometimes, seamless and other transition types can make audible 'clicks' when changing between notes. Ticking this option will cause those clicks to be silenced as much as possible."));
                    }
                    break;
                case "aliases":
                    {
                        message = div$7(h2$6("Aliasing"), p$2("UltraBox applies a technique called 'anti-aliasing' to instruments normally to help them sound cleaner even at high frequencies and low sample rates."), p$2("When this setting is ticked that technique is disabled, so you may hear strange audio artifacts especially at high pitches and when bending notes. However, this can lend a grungy sound to an instrument that could be desirable."));
                    }
                    break;
                case "operatorWaveform":
                    {
                        message = div$7(h2$6("Operator Waveform"), p$2('This setting controls the what kind of sound wave an individual FM wave uses.'), p$2('By defualt the FM synth uses sinewaves.'));
                    }
                    break;
                case "filterType":
                    {
                        message = div$7(h2$6("Filter Type"), p$2('Toggling these buttons lets you choose between a simple filter interface with two sliders, or the more advanced filter graph.'), p$2('The two-slider version controls a single low-pass filter and was used in legacy versions. It is not as powerful, but if you feel overwhelmed you can start with this.'), p$2('Note that switching from the simple interface to the advanced interface will convert your current settings, so you can also use it as a basis for later tweaking.'));
                    }
                    break;
                case "filterCutoff":
                    {
                        message = div$7(h2$6("Low-Pass Filter Cutoff Frequency"), p$2("The lowest setting feels \"muffled\" or \"dark\", and the highest setting feels \"harsh\" or \"bright\"."), p$2("Most sounds include a range of frequencies from low to high. UltraBox instruments have a filter that allows the lowest frequencies to pass through at full volume, but can reduce the volume of the higher frequencies that are above a cutoff frequency. This setting controls the cutoff frequency and thus the range of higher frequencies that are reduced."), p$2("This cutoff setting also determines which frequency resonates when the resonance peak setting is used."));
                    }
                    break;
                case "filterResonance":
                    {
                        message = div$7(h2$6("Low-Pass Filter Resonance Peak"), p$2("Increasing this setting emphasizes a narrow range of frequencies, based on the position of the filter cutoff setting. This can be used to imitate the resonant bodies of acoustic instruments and other interesting effects."), p$2("The filter preserves the volume of frequencies that are below the cutoff frequency, and reduces the volume of frequencies that are above the cutoff. If this setting is used, the filter also increases the volume of frequencies that are near the cutoff."));
                    }
                    break;
                case "loopControls":
                    {
                        message = div$7(h2$6("Loop Controls"), p$2("This enables the use of parameters that control how a chip wave should repeat."));
                    }
                    break;
                case "loopMode":
                    {
                        message = div$7(h2$6("Loop Mode"), p$2("This sets the way the chip wave loops when its ends are reached."), p$2("The \"Loop\" mode is the default: when the end of the loop is reached, it will jump back to the starting point of the loop."), p$2("The \"Ping-Pong\" mode starts playing the chip wave backwards when the end of the loop is reached. Once it reaches the start of the loop, it will start playing forwards again, endlessly going back and forth."), p$2("The \"Play Once\" mode stops the chip wave once the end is reached (or the start of the loop, if it's playing backwards)."), p$2("The \"Play Loop Once\" mode stops the chip wave once the end of the loop is reached (or the start of the loop, if it's playing backwards)."));
                    }
                    break;
                case "loopStart":
                    {
                        message = div$7(h2$6("Loop Start Point"), p$2("This specifies where the loop region of the chip wave starts. It's measured in \"samples\", or rather, it refers to a point on a waveform."), p$2("Be careful with tiny loop sizes (especially combined with high pitches), they may re-introduce aliasing even if the \"Aliasing\" checkbox is unchecked."));
                    }
                    break;
                case "loopEnd":
                    {
                        message = div$7(h2$6("Loop End Point"), p$2("This specifies where the loop region of the chip wave ends. It's measured in \"samples\", or rather, it refers to a point on a waveform."), p$2("The button next to the input box sets this to end of the chip wave."), p$2("Be careful with tiny loop sizes (especially combined with high pitches), they may re-introduce aliasing even if the \"Aliasing\" checkbox is unchecked."));
                    }
                    break;
                case "offset":
                    {
                        message = div$7(h2$6("Offset"), p$2("This specifies where the chip wave should start playing from. You can use this to chop up a large sample, to say, turn a drum loop into a drum kit! It's measured in \"samples\", or rather, it refers to a point on a waveform."));
                    }
                    break;
                case "backwards":
                    {
                        message = div$7(h2$6("Backwards"), p$2("When set, the chip wave will start playing backwards. After checking this, you may want to adjust the offset to start from a different point that makes sense for this mode."));
                    }
                    break;
                case "decimalOffset":
                    {
                        message = div$7(h2$6("Decimal Offset"), p$2("The decimal offset is subtracted from the pulse width value, enabling the use of numbers such as 12.5 or 6.25. This could be useful if you're trying to recreate the sound of old soundchips."));
                    }
                    break;
                case "unisonVoices":
                    {
                        message = div$7(h2$6("Unison Voices"), p$2("This setting controls how many voices there are in a unison. Unisons such as \"none\" or \"detune\" use 1 voice, while most other unisons use 2 voices."));
                    }
                    break;
                case "unisonSpread":
                    {
                        message = div$7(h2$6("Unison Spread"), p$2("This setting controls the distance between the two voices, in semitones. A small amount of spread causes the voice's waves to shift in and out from each other, causing a shimmering effect. Larger spread will cause the voices to act like separate notes."), p$2("This setting will only work correctly with two voices."));
                    }
                    break;
                case "unisonOffset":
                    {
                        message = div$7(h2$6("Unison Offset"), p$2("This setting controls the detune applied to BOTH voices, in semitones."));
                    }
                    break;
                case "unisonExpression":
                    {
                        message = div$7(h2$6("Unison Expression"), p$2("This setting controls the unison volume. Use this if the unison makes your instrument too loud in comparison to other instruments."));
                    }
                    break;
                case "unisonSign":
                    {
                        message = div$7(h2$6("Unison Sign"), p$2("This setting is a volume multiplier applied to the second voice. This setting will only work correctly with two voices."));
                    }
                    break;
                case "ringMod":
                    {
                        message = div$7(h2$6("Ring Modulation"), p$2(`This setting multiplies a sine wave's frequency with an instrument frequency, this is useful for "bell-like" instruments.`));
                    }
                    break;
                case "RingModHz":
                    {
                        message = div$7(h2$6("Ring Modulation (Hertz)"), p$2(`This setting changes the Hertz of the 2nd multiplied frequency with the first frequency.`));
                    }
                    break;
                case "phaserMix":
                    {
                        message = div$7(h2$6("Phaser Mix"), p$2(`This setting adds holes (aka notches) or peaks in the frequency spectrum to the waveform its given. The placement of these peaks and notches in the waveform can be changed by using envelopes and/or modulators.`));
                    }
                    break;
                case "phaserFreq":
                    {
                        message = div$7(h2$6("Phaser Frequency"), p$2(`This setting controls the frequency of the the peaks and notches of the phaser.`));
                    }
                    break;
                case "phaserFeedback":
                    {
                        message = div$7(h2$6("Phaser Feedback"), p$2(`This setting effects how pronounced the Feedback of the Phaser is, this is done by adding the Feedback of the Phaser back into itself.`));
                    }
                    break;
                case "phaserStages":
                    {
                        message = div$7(h2$6("Phaser Stages"), p$2(`This slider changes how many all-passes there are in the phaser. An all-pass is created by splitting an audio signal into paths, every path after the first one that is created is called an all-pass.`), p$2(`The minimum value of this slider is 1, the reason being that 1 all-pass is the exact same as having no phaser at all, if there were 0 all-passes then the audio would cease to exist.`));
                    }
                    break;
                default:
                    if (type.indexOf("modSetInfo") >= 0) {
                        let modNum = +type[type.length - 1];
                        let modulator = _doc.song.channels[_doc.channel].instruments[_doc.getCurrentInstrument()].modulators[modNum];
                        let pList = [];
                        for (let s = 0; s < Config.modulators[modulator].promptDesc.length; s++) {
                            pList.push(p$2(Config.modulators[modulator].promptDesc[s]
                                .replace("$LO", "" + Config.modulators[modulator].convertRealFactor)
                                .replace("$MID", "" + (Config.modulators[modulator].convertRealFactor + Config.modulators[modulator].maxRawVol / 2))
                                .replace("$HI", "" + (Config.modulators[modulator].convertRealFactor + Config.modulators[modulator].maxRawVol))));
                        }
                        pList[pList.length - 1].style.setProperty("color", "var(--secondary-text)");
                        message = div$7(h2$6(Config.modulators[modulator].promptName), pList);
                        break;
                    }
                    else {
                        throw new Error("Unhandled TipPrompt type: " + type);
                    }
            }
            this.container = div$7({ class: "prompt", style: "width: 300px;" }, message, this._closeButton);
            setTimeout(() => this._closeButton.focus());
            this._closeButton.addEventListener("click", this._close);
        }
    }

    class TrackEditor {
        constructor(_doc, _songEditor) {
            this._doc = _doc;
            this._songEditor = _songEditor;
            this._barDropDown = HTML.select({ style: "width: 32px; height: " + Config.barEditorHeight + "px; top: 0px; position: absolute; opacity: 0" }, HTML.option({ value: "barBefore" }, "Insert Bar Before"), HTML.option({ value: "barAfter" }, "Insert Bar After"), HTML.option({ value: "deleteBar" }, "Delete This Bar"));
            this._channelRowContainer = HTML.div({ style: `display: flex; flex-direction: column; padding-top: ${Config.barEditorHeight}px` });
            this._barNumberContainer = SVG.g();
            this._playhead = SVG.rect({ fill: ColorConfig.playhead, x: 0, y: 0, width: 4, height: 128 });
            this._boxHighlight = SVG.rect({ fill: "none", stroke: ColorConfig.hoverPreview, "stroke-width": 2, "pointer-events": "none", x: 1, y: 1, width: 30, height: 30 });
            this._upHighlight = SVG.path({ fill: ColorConfig.invertedText, stroke: ColorConfig.invertedText, "stroke-width": 1, "pointer-events": "none" });
            this._downHighlight = SVG.path({ fill: ColorConfig.invertedText, stroke: ColorConfig.invertedText, "stroke-width": 1, "pointer-events": "none" });
            this._barEditorPath = SVG.path({ fill: ColorConfig.uiWidgetBackground, stroke: ColorConfig.uiWidgetBackground, "stroke-width": 1, "pointer-events": "none" });
            this._selectionRect = SVG.rect({ class: "dashed-line dash-move", fill: ColorConfig.boxSelectionFill, stroke: ColorConfig.hoverPreview, "stroke-width": 2, "stroke-dasharray": "5, 3", "fill-opacity": "0.4", "pointer-events": "none", visibility: "hidden", x: 1, y: 1, width: 62, height: 62 });
            this._svg = SVG.svg({ style: `position: absolute; top: 0;` }, this._barEditorPath, this._selectionRect, this._barNumberContainer, this._boxHighlight, this._upHighlight, this._downHighlight, this._playhead);
            this._select = HTML.select({ class: "trackSelectBox", style: "background: none; border: none; appearance: none; border-radius: initial; box-shadow: none; color: transparent; position: absolute; touch-action: none;" });
            this.container = HTML.div({ class: "noSelection", style: `background-color: ${ColorConfig.editorBackground}; position: relative; overflow: hidden;` }, this._channelRowContainer, this._svg, this._select, this._barDropDown);
            this._channels = [];
            this._barNumbers = [];
            this._mouseX = 0;
            this._mouseY = 0;
            this._mouseStartBar = 0;
            this._mouseStartChannel = 0;
            this._mouseBar = 0;
            this._mouseChannel = 0;
            this._mouseOver = false;
            this._mousePressed = false;
            this._mouseDragging = false;
            this._barWidth = 32;
            this._renderedBarCount = -1;
            this._renderedEditorWidth = -1;
            this._renderedEditorHeight = -1;
            this._renderedPatternCount = 0;
            this._renderedPlayhead = -1;
            this._touchMode = isMobile;
            this._barDropDownBar = 0;
            this._lastScrollTime = 0;
            this._barDropDownGetOpenedPosition = (event) => {
                this._barDropDownBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));
            };
            this._barDropDownHandler = (event) => {
                var moveBarOffset = (this._barDropDown.value == "barBefore") ? 0 : 1;
                if (this._barDropDown.value == "barBefore" || this._barDropDown.value == "barAfter") {
                    this._doc.bar = this._barDropDownBar - 1 + moveBarOffset;
                    this._doc.selection.resetBoxSelection();
                    this._doc.selection.insertBars();
                    if (this._doc.synth.playhead >= this._barDropDownBar + moveBarOffset) {
                        this._doc.synth.playhead++;
                        this._songEditor._barScrollBar.animatePlayhead();
                    }
                }
                else if (this._barDropDown.value == "deleteBar") {
                    this._doc.bar = this._barDropDownBar;
                    this._doc.selection.resetBoxSelection();
                    this._doc.selection.deleteBars();
                    if (this._doc.synth.playhead > this._barDropDownBar) {
                        this._doc.synth.playhead--;
                        this._songEditor._barScrollBar.animatePlayhead();
                    }
                }
                this._barDropDown.selectedIndex = -1;
            };
            this._whenSelectChanged = () => {
                this._doc.selection.setPattern(this._select.selectedIndex);
            };
            this._animatePlayhead = (timestamp) => {
                const playhead = (this._barWidth * this._doc.synth.playhead - 2);
                if (this._renderedPlayhead != playhead) {
                    this._renderedPlayhead = playhead;
                    this._playhead.setAttribute("x", "" + playhead);
                }
                window.requestAnimationFrame(this._animatePlayhead);
            };
            this._whenSelectPressed = (event) => {
                this._mousePressed = true;
                this._mouseDragging = true;
                this._updateSelectPos(event);
                this._mouseStartBar = this._mouseBar;
                this._mouseStartChannel = this._mouseChannel;
            };
            this._whenSelectMoved = (event) => {
                this._updateSelectPos(event);
                if (this._mouseStartBar != this._mouseBar || this._mouseStartChannel != this._mouseChannel) {
                    event.preventDefault();
                }
                if (this._mousePressed)
                    this._dragBoxSelection();
                this._updatePreview();
            };
            this._whenSelectReleased = (event) => {
                this._mousePressed = false;
                this._mouseDragging = false;
                this._updatePreview();
            };
            this._whenMouseOver = (event) => {
                if (this._mouseOver)
                    return;
                this._mouseOver = true;
            };
            this._whenMouseOut = (event) => {
                if (!this._mouseOver)
                    return;
                this._mouseOver = false;
            };
            this._whenMousePressed = (event) => {
                event.preventDefault();
                this._mousePressed = true;
                this._updateMousePos(event);
                this._mouseStartBar = this._mouseBar;
                this._mouseStartChannel = this._mouseChannel;
                if (this._mouseY >= Config.barEditorHeight) {
                    if (event.shiftKey) {
                        this._mouseDragging = true;
                        this._doc.selection.setTrackSelection(this._doc.selection.boxSelectionX0, this._mouseBar, this._doc.selection.boxSelectionY0, this._mouseChannel);
                        this._doc.selection.selectionUpdated();
                    }
                    else {
                        this._mouseDragging = false;
                        if (this._doc.channel != this._mouseChannel || this._doc.bar != this._mouseBar) {
                            this._doc.selection.setChannelBar(this._mouseChannel, this._mouseBar);
                            this._mouseDragging = true;
                        }
                        this._doc.selection.resetBoxSelection();
                    }
                }
            };
            this._whenMouseMoved = (event) => {
                this._updateMousePos(event);
                if (this._mousePressed) {
                    if (this._mouseStartBar != this._mouseBar || this._mouseStartChannel != this._mouseChannel) {
                        this._mouseDragging = true;
                    }
                    this._dragBoxSelection();
                }
                this._updatePreview();
            };
            this._whenMouseReleased = (event) => {
                if (this._mousePressed && !this._mouseDragging) {
                    if (this._doc.channel == this._mouseChannel && this._doc.bar == this._mouseBar) {
                        const up = ((this._mouseY - Config.barEditorHeight) % ChannelRow.patternHeight) < ChannelRow.patternHeight / 2;
                        const patternCount = this._doc.song.patternsPerChannel;
                        this._doc.selection.setPattern((this._doc.song.channels[this._mouseChannel].bars[this._mouseBar] + (up ? 1 : patternCount)) % (patternCount + 1));
                    }
                }
                this._mousePressed = false;
                this._mouseDragging = false;
                this._updatePreview();
            };
            window.requestAnimationFrame(this._animatePlayhead);
            this._svg.addEventListener("mousedown", this._whenMousePressed);
            document.addEventListener("mousemove", this._whenMouseMoved);
            document.addEventListener("mouseup", this._whenMouseReleased);
            this._svg.addEventListener("mouseover", this._whenMouseOver);
            this._svg.addEventListener("mouseout", this._whenMouseOut);
            this._select.addEventListener("change", this._whenSelectChanged);
            this._select.addEventListener("touchstart", this._whenSelectPressed);
            this._select.addEventListener("touchmove", this._whenSelectMoved);
            this._select.addEventListener("touchend", this._whenSelectReleased);
            this._select.addEventListener("touchcancel", this._whenSelectReleased);
            let determinedCursorType = false;
            document.addEventListener("mousedown", () => {
                if (!determinedCursorType) {
                    this._touchMode = false;
                    this._updatePreview();
                }
                determinedCursorType = true;
            }, true);
            document.addEventListener("touchstart", () => {
                if (!determinedCursorType) {
                    this._touchMode = true;
                    this._updatePreview();
                }
                determinedCursorType = true;
            }, true);
            this._barDropDown.selectedIndex = -1;
            this._barDropDown.addEventListener("change", this._barDropDownHandler);
            this._barDropDown.addEventListener("mousedown", this._barDropDownGetOpenedPosition);
        }
        movePlayheadToMouse() {
            if (this._mouseOver) {
                this._doc.synth.playhead = this._mouseBar + (this._mouseX % this._barWidth) / this._barWidth;
                return true;
            }
            return false;
        }
        _dragBoxSelection() {
            this._doc.selection.setTrackSelection(this._doc.selection.boxSelectionX0, this._mouseBar, this._doc.selection.boxSelectionY0, this._mouseChannel);
            this._doc.selection.selectionUpdated();
        }
        _updateSelectPos(event) {
            const boundingRect = this._svg.getBoundingClientRect();
            this._mouseX = event.touches[0].clientX - boundingRect.left;
            this._mouseY = event.touches[0].clientY - boundingRect.top;
            if (isNaN(this._mouseX))
                this._mouseX = 0;
            if (isNaN(this._mouseY))
                this._mouseY = 0;
            this._mouseBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));
            this._mouseChannel = Math.floor(Math.min(this._doc.song.getChannelCount() - 1, Math.max(0, (this._mouseY - Config.barEditorHeight) / ChannelRow.patternHeight)));
        }
        _updateMousePos(event) {
            const boundingRect = this._svg.getBoundingClientRect();
            this._mouseX = (event.clientX || event.pageX) - boundingRect.left;
            this._mouseY = (event.clientY || event.pageY) - boundingRect.top;
            this._mouseBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));
            this._mouseChannel = Math.floor(Math.min(this._doc.song.getChannelCount() - 1, Math.max(0, (this._mouseY - Config.barEditorHeight) / ChannelRow.patternHeight)));
        }
        _updatePreview() {
            let channel = this._mouseChannel;
            let bar = this._mouseBar;
            if (this._touchMode) {
                bar = this._doc.bar;
                channel = this._doc.channel;
            }
            const selected = (bar == this._doc.bar && channel == this._doc.channel);
            const overTrackEditor = (this._mouseY >= Config.barEditorHeight);
            if (this._mouseDragging && this._mouseStartBar != this._mouseBar) {
                var timestamp = Date.now();
                if (timestamp - this._lastScrollTime >= 50) {
                    if (bar > this._doc.barScrollPos + this._doc.trackVisibleBars - 1 && this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {
                        this._songEditor.changeBarScrollPos(1);
                    }
                    if (bar < this._doc.barScrollPos && this._doc.barScrollPos > 0) {
                        this._songEditor.changeBarScrollPos(-1);
                    }
                    this._lastScrollTime = timestamp;
                }
            }
            if (this._mouseOver && !this._mousePressed && !selected && overTrackEditor) {
                this._boxHighlight.setAttribute("x", "" + (1 + this._barWidth * bar));
                this._boxHighlight.setAttribute("y", "" + (1 + Config.barEditorHeight + ChannelRow.patternHeight * channel));
                this._boxHighlight.setAttribute("height", "" + (ChannelRow.patternHeight - 2));
                this._boxHighlight.setAttribute("width", "" + (this._barWidth - 2));
                this._boxHighlight.style.visibility = "visible";
            }
            else if ((this._mouseOver || ((this._mouseX >= bar * this._barWidth) && (this._mouseX < bar * this._barWidth + this._barWidth) && (this._mouseY > 0))) && (!overTrackEditor)) {
                this._boxHighlight.setAttribute("x", "" + (1 + this._barWidth * bar));
                this._boxHighlight.setAttribute("y", "1");
                this._boxHighlight.setAttribute("height", "" + (Config.barEditorHeight - 3));
                this._boxHighlight.style.visibility = "visible";
            }
            else {
                this._boxHighlight.style.visibility = "hidden";
            }
            if ((this._mouseOver || this._touchMode) && selected && overTrackEditor) {
                const up = ((this._mouseY - Config.barEditorHeight) % ChannelRow.patternHeight) < ChannelRow.patternHeight / 2;
                const center = this._barWidth * (bar + 0.8);
                const middle = Config.barEditorHeight + ChannelRow.patternHeight * (channel + 0.5);
                const base = ChannelRow.patternHeight * 0.1;
                const tip = ChannelRow.patternHeight * 0.4;
                const width = ChannelRow.patternHeight * 0.175;
                this._upHighlight.setAttribute("fill", up && !this._touchMode ? ColorConfig.hoverPreview : ColorConfig.invertedText);
                this._downHighlight.setAttribute("fill", !up && !this._touchMode ? ColorConfig.hoverPreview : ColorConfig.invertedText);
                this._upHighlight.setAttribute("d", `M ${center} ${middle - tip} L ${center + width} ${middle - base} L ${center - width} ${middle - base} z`);
                this._downHighlight.setAttribute("d", `M ${center} ${middle + tip} L ${center + width} ${middle + base} L ${center - width} ${middle + base} z`);
                this._upHighlight.style.visibility = "visible";
                this._downHighlight.style.visibility = "visible";
            }
            else {
                this._upHighlight.style.visibility = "hidden";
                this._downHighlight.style.visibility = "hidden";
            }
            this._selectionRect.style.left = (this._barWidth * this._doc.bar) + "px";
            this._selectionRect.style.top = (Config.barEditorHeight + (ChannelRow.patternHeight * this._doc.channel)) + "px";
            this._select.style.left = (this._barWidth * this._doc.bar) + "px";
            this._select.style.width = this._barWidth + "px";
            this._select.style.top = (Config.barEditorHeight + ChannelRow.patternHeight * this._doc.channel) + "px";
            this._select.style.height = ChannelRow.patternHeight + "px";
            this._barDropDown.style.left = (this._barWidth * bar) + "px";
            const patternCount = this._doc.song.patternsPerChannel + 1;
            for (let i = this._renderedPatternCount; i < patternCount; i++) {
                this._select.appendChild(HTML.option({ value: i }, i));
            }
            for (let i = patternCount; i < this._renderedPatternCount; i++) {
                this._select.removeChild(this._select.lastChild);
            }
            this._renderedPatternCount = patternCount;
            const selectedPattern = this._doc.song.channels[this._doc.channel].bars[this._doc.bar];
            if (this._select.selectedIndex != selectedPattern)
                this._select.selectedIndex = selectedPattern;
        }
        render() {
            this._barWidth = this._doc.getBarWidth();
            if (this._channels.length != this._doc.song.getChannelCount()) {
                for (let y = this._channels.length; y < this._doc.song.getChannelCount(); y++) {
                    const channelRow = new ChannelRow(this._doc, y);
                    this._channels[y] = channelRow;
                    this._channelRowContainer.appendChild(channelRow.container);
                }
                for (let y = this._doc.song.getChannelCount(); y < this._channels.length; y++) {
                    this._channelRowContainer.removeChild(this._channels[y].container);
                }
                this._channels.length = this._doc.song.getChannelCount();
                this._mousePressed = false;
            }
            for (let j = 0; j < this._doc.song.getChannelCount(); j++) {
                this._channels[j].render();
            }
            const editorWidth = this._barWidth * this._doc.song.barCount;
            if (this._renderedEditorWidth != editorWidth) {
                this._renderedEditorWidth = editorWidth;
                this._channelRowContainer.style.width = editorWidth + "px";
                this.container.style.width = editorWidth + "px";
                this._svg.setAttribute("width", editorWidth + "");
                this._mousePressed = false;
                var pathString = "";
                for (let x = 0; x < this._doc.song.barCount; x++) {
                    var pathLeft = x * this._barWidth + 2;
                    var pathTop = 1;
                    var pathRight = x * this._barWidth + this._barWidth - 2;
                    var pathBottom = Config.barEditorHeight - 3;
                    pathString += `M ${pathLeft} ${pathTop} H ${pathRight} V ${pathBottom} H ${pathLeft} V ${pathTop} Z `;
                }
                this._barEditorPath.setAttribute("d", pathString);
                if (this._renderedBarCount < this._doc.song.barCount) {
                    this._barNumbers.length = this._doc.song.barCount;
                    for (var pos = this._renderedBarCount; pos < this._barNumbers.length; pos++) {
                        this._barNumbers[pos] = SVG.text({ "font-family": "sans-serif", "font-size": "8px", "text-anchor": "middle", "font-weight": "bold", "x": (pos * this._barWidth + this._barWidth / 2) + "px", "y": "7px", fill: ColorConfig.secondaryText }, "" + (pos + 1));
                        if (pos % 4 == 0) {
                            this._barNumbers[pos].setAttribute("fill", ColorConfig.primaryText);
                        }
                        this._barNumberContainer.appendChild(this._barNumbers[pos]);
                    }
                    this._renderedBarCount = this._doc.song.barCount;
                }
                else if (this._renderedBarCount > this._doc.song.barCount) {
                    for (var pos = this._renderedBarCount - 1; pos >= this._doc.song.barCount; pos--) {
                        this._barNumberContainer.removeChild(this._barNumbers[pos]);
                    }
                    this._barNumbers.length = this._doc.song.barCount;
                    this._renderedBarCount = this._doc.song.barCount;
                }
                for (var pos = 0; pos < this._barNumbers.length; pos++) {
                    this._barNumbers[pos].setAttribute("x", (pos * this._barWidth + this._barWidth / 2) + "px");
                }
                this._renderedEditorWidth = editorWidth;
                this._channelRowContainer.style.width = editorWidth + "px";
                this.container.style.width = editorWidth + "px";
                this._svg.setAttribute("width", editorWidth + "");
                this._mousePressed = false;
            }
            const editorHeight = this._doc.song.getChannelCount() * ChannelRow.patternHeight;
            if (this._renderedEditorHeight != editorHeight) {
                this._renderedEditorHeight = editorHeight;
                this._svg.setAttribute("height", "" + editorHeight + Config.barEditorHeight);
                this._playhead.setAttribute("height", "" + editorHeight + Config.barEditorHeight);
                this.container.style.height = (editorHeight + Config.barEditorHeight) + "px";
            }
            this._select.style.display = this._touchMode ? "" : "none";
            if (this._doc.selection.boxSelectionActive) {
                this._selectionRect.setAttribute("x", String(this._barWidth * this._doc.selection.boxSelectionBar + 1));
                this._selectionRect.setAttribute("y", String(Config.barEditorHeight + ChannelRow.patternHeight * this._doc.selection.boxSelectionChannel + 1));
                this._selectionRect.setAttribute("width", String(this._barWidth * this._doc.selection.boxSelectionWidth - 2));
                this._selectionRect.setAttribute("height", String(ChannelRow.patternHeight * this._doc.selection.boxSelectionHeight - 2));
                this._selectionRect.setAttribute("visibility", "visible");
            }
            else {
                this._selectionRect.setAttribute("visibility", "hidden");
            }
            this._updatePreview();
        }
    }

    class oscilascopeCanvas {
        constructor(canvas, scale = 1) {
            this.canvas = canvas;
            this.scale = scale;
            this._EventUpdateCanvas = function (directlinkL, directlinkR) {
                if (directlinkR) {
                    var ctx = canvas.getContext("2d");
                    ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    ctx.fillStyle = ColorConfig.getComputed("--oscilloscope-line-L") !== "" ? ColorConfig.getComputed("--oscilloscope-line-L") : ColorConfig.getComputed("--primary-text");
                    for (let i = directlinkL.length - 1; i >= directlinkL.length - 1 - (canvas.width / scale); i--) {
                        let x = i - (directlinkL.length - 1) + (canvas.width / scale);
                        let yl = (directlinkL[i] * (canvas.height / scale / 2) + (canvas.height / scale / 2));
                        ctx.fillRect((x - 1) * scale, (yl - 1) * scale, 1 * scale, 1.5 * scale);
                        if (x == 0)
                            break;
                    }
                    ctx.fillStyle = ColorConfig.getComputed("--oscilloscope-line-R") !== "" ? ColorConfig.getComputed("--oscilloscope-line-R") : ColorConfig.getComputed("--text-selection");
                    for (let i = directlinkR.length - 1; i >= directlinkR.length - 1 - (canvas.width / scale); i--) {
                        let x = i - (directlinkR.length - 1) + (canvas.width / scale);
                        let yr = (directlinkR[i] * (canvas.height / scale / 2) + (canvas.height / scale / 2));
                        ctx.fillRect((x - 1) * scale, (yr - 1) * scale, 1 * scale, 1.5 * scale);
                        if (x == 0)
                            break;
                    }
                }
            };
            events.listen("oscillascopeUpdate", this._EventUpdateCanvas);
        }
    }

    const { div: div$6, input: input$3, button: button$6, h2: h2$5, select: select$3, option: option$3, canvas: canvas$1 } = HTML;
    const defaultShapeFunction = (cnv, ctx, x, y, w, h) => {
        ctx.fillRect(x, y, w, h);
    };
    class VisualLoopControlsHandle {
        constructor(value, canvasWidth, canvasHeight, viewportX0, viewportX1, validator, whenValueChanges, whenMouseUpHappens, shapeFunction) {
            this._handleWidth = 40;
            this._mouseDown = false;
            this._handleDragOffset = null;
            this.canvas = null;
            this._context = null;
            this.update = (newValue) => {
                this._value = this._validator(newValue);
            };
            this.render = () => {
                const cnv = this.canvas;
                const ctx = this._context;
                const w = cnv.width;
                const h = cnv.height;
                const vx0 = this._viewportX0;
                const vx1 = this._viewportX1;
                const v = this._value;
                ctx.clearRect(0, 0, w, h);
                ctx.fillStyle = ColorConfig.getComputed("--loop-accent");
                const bw = this._handleWidth;
                const bh = h;
                const bx = Math.floor((v - vx0) * w / (vx1 - vx0)) - bw / 2;
                const by = 0;
                this._shapeFunction(cnv, ctx, bx, by, bw, bh);
            };
            this.updateViewport = (x0, x1) => {
                this._viewportX0 = x0;
                this._viewportX1 = x1;
            };
            this._whenMouseMoves = (event) => {
                if (!this._mouseDown)
                    return;
                const w = this._canvasWidth;
                const vx0 = this._viewportX0;
                const vx1 = this._viewportX1;
                const bounds = this.canvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = ((event.clientX || event.pageX) - bounds.left) * canvasXScale;
                const wmx = vx0 + mx * (vx1 - vx0) / w;
                this._value = this._validator(wmx - (this._handleDragOffset != null ? this._handleDragOffset : 0));
                this.render();
                if (this._whenValueChanges)
                    this._whenValueChanges(this._value);
            };
            this._whenMouseIsDown = (event) => {
                this._mouseDown = true;
                const w = this._canvasWidth;
                const vx0 = this._viewportX0;
                const vx1 = this._viewportX1;
                const bounds = this.canvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = ((event.clientX || event.pageX) - bounds.left) * canvasXScale;
                const bw = this._handleWidth;
                const bx0 = ((this._value - vx0) * w / (vx1 - vx0)) - bw / 2;
                const bx1 = bx0 + bw;
                if (mx >= bx0 && mx <= bx1) {
                    this._handleDragOffset = (mx - (bx0 + bw / 2)) * (vx1 - vx0) / w;
                }
                const wmx = vx0 + mx * (vx1 - vx0) / w;
                this._value = this._validator(wmx - (this._handleDragOffset != null ? this._handleDragOffset : 0));
                this.render();
                if (this._whenValueChanges)
                    this._whenValueChanges(this._value);
            };
            this._whenMouseIsUp = (event) => {
                if (!this._mouseDown)
                    return;
                this._mouseDown = false;
                this._handleDragOffset = null;
                this._whenMouseUpHappens();
            };
            this._whenTouchMoves = (event) => {
                if (!this._mouseDown)
                    return;
                event.preventDefault();
                const w = this._canvasWidth;
                const vx0 = this._viewportX0;
                const vx1 = this._viewportX1;
                const bounds = this.canvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = (event.touches[0].clientX - bounds.left) * canvasXScale;
                const wmx = vx0 + mx * (vx1 - vx0) / w;
                this._value = this._validator(wmx - (this._handleDragOffset != null ? this._handleDragOffset : 0));
                this.render();
                if (this._whenValueChanges)
                    this._whenValueChanges(this._value);
            };
            this._whenTouchIsDown = (event) => {
                event.preventDefault();
                this._mouseDown = true;
                const w = this._canvasWidth;
                const vx0 = this._viewportX0;
                const vx1 = this._viewportX1;
                const bounds = this.canvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = (event.touches[0].clientX - bounds.left) * canvasXScale;
                const bw = this._handleWidth;
                const bx0 = ((this._value - vx0) * w / (vx1 - vx0)) - bw / 2;
                const bx1 = bx0 + bw;
                if (mx >= bx0 && mx <= bx1) {
                    this._handleDragOffset = (mx - (bx0 + bw / 2)) * (vx1 - vx0) / w;
                }
                const wmx = vx0 + mx * (vx1 - vx0) / w;
                this._value = this._validator(wmx - (this._handleDragOffset != null ? this._handleDragOffset : 0));
                this.render();
                if (this._whenValueChanges)
                    this._whenValueChanges(this._value);
            };
            this._whenTouchIsUp = (event) => {
                event.preventDefault();
                this._mouseDown = false;
                this._handleDragOffset = null;
                this._whenMouseUpHappens();
            };
            this.cleanUp = () => {
                window.removeEventListener("mousemove", this._whenMouseMoves);
                this.canvas.removeEventListener("mousedown", this._whenMouseIsDown);
                window.removeEventListener("mouseup", this._whenMouseIsUp);
                this.canvas.removeEventListener("touchstart", this._whenTouchIsDown);
                this.canvas.removeEventListener("touchmove", this._whenTouchMoves);
                this.canvas.removeEventListener("touchend", this._whenTouchIsUp);
                this.canvas.removeEventListener("touchcancel", this._whenTouchIsUp);
            };
            this._value = value;
            this._validator = validator;
            this._whenValueChanges = whenValueChanges;
            this._whenMouseUpHappens = whenMouseUpHappens;
            this._shapeFunction = shapeFunction == null ? defaultShapeFunction : shapeFunction;
            this._viewportX0 = viewportX0;
            this._viewportX1 = viewportX1;
            this._canvasWidth = canvasWidth;
            this._canvasHeight = canvasHeight;
            this.canvas = canvas$1({ width: this._canvasWidth, height: this._canvasHeight, style: "cursor: default; position: static; margin-bottom: 0.5em; margin-left: auto; margin-right: auto; outline: 1px solid var(--ui-widget-background); box-sizing: border-box; width: 100%;" });
            this._context = this.canvas.getContext("2d");
            window.addEventListener("mousemove", this._whenMouseMoves);
            this.canvas.addEventListener("mousedown", this._whenMouseIsDown);
            window.addEventListener("mouseup", this._whenMouseIsUp);
            this.canvas.addEventListener("touchstart", this._whenTouchIsDown);
            this.canvas.addEventListener("touchmove", this._whenTouchMoves);
            this.canvas.addEventListener("touchend", this._whenTouchIsUp);
            this.canvas.addEventListener("touchcancel", this._whenTouchIsUp);
        }
    }
    class VisualLoopControlsPrompt {
        constructor(_doc, _songEditor) {
            this._waveformCanvasWidth = 500;
            this._waveformCanvasHeight = 200;
            this._handleCanvasHeight = 20;
            this._instrument = null;
            this._waveformData = null;
            this._waveformDataLength = null;
            this._initialChipWaveLoopMode = null;
            this._initialChipWaveStartOffset = null;
            this._initialChipWaveLoopStart = null;
            this._initialChipWaveLoopEnd = null;
            this._initialChipWavePlayBackwards = null;
            this._chipWaveLoopMode = 0;
            this._chipWaveStartOffset = 0;
            this._chipWaveLoopStart = 0;
            this._chipWaveLoopEnd = 0;
            this._chipWavePlayBackwards = false;
            this._waveformViewportX0 = 0;
            this._waveformViewportX1 = 1;
            this._waveformViewportY0 = -1.01;
            this._waveformViewportY1 = 1.01;
            this._waveformViewportWidth = 1;
            this._waveformViewportOffset = 0;
            this._waveformViewportMaxOffset = 0;
            this._overlayIsMouseDown = false;
            this._overlaySelectionX0 = null;
            this._overlaySelectionX1 = null;
            this._startOffsetValidator = (v) => {
                return Math.max(0, Math.min(this._waveformDataLength, Math.floor(v)));
            };
            this._loopStartValidator = (v) => {
                return Math.max(0, Math.min(this._waveformDataLength, Math.min(this._chipWaveLoopEnd - 2, Math.floor(v))));
            };
            this._loopEndValidator = (v) => {
                return Math.max(0, Math.min(this._waveformDataLength, Math.max(this._chipWaveLoopStart + 2, Math.floor(v))));
            };
            this._startOffsetHandle = new VisualLoopControlsHandle(this._chipWaveStartOffset, this._waveformCanvasWidth, this._handleCanvasHeight, this._waveformViewportX0, this._waveformViewportX1, this._startOffsetValidator, (v) => {
                this._chipWaveStartOffset = v;
                this._instrument.chipWaveStartOffset = this._chipWaveStartOffset;
                this._renderOverlay();
                this._reconfigureLoopControls();
            }, () => {
                this.gotMouseUp = true;
                setTimeout(() => { this.gotMouseUp = false; }, 10);
            }, (cnv, ctx, x, y, w, h) => {
                const th = h / 4;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + w, y);
                ctx.lineTo(x + w, y + h - th);
                ctx.lineTo(x + w / 2, y + h);
                ctx.lineTo(x, y + h - th);
                ctx.fill();
            });
            this._loopStartHandle = new VisualLoopControlsHandle(this._chipWaveLoopStart, this._waveformCanvasWidth, this._handleCanvasHeight, this._waveformViewportX0, this._waveformViewportX1, this._loopStartValidator, (v) => {
                this._chipWaveLoopStart = v;
                this._instrument.chipWaveLoopStart = this._chipWaveLoopStart;
                this._renderOverlay();
                this._reconfigureLoopControls();
            }, () => {
                this.gotMouseUp = true;
                setTimeout(() => { this.gotMouseUp = false; }, 10);
            }, (cnv, ctx, x, y, w, h) => {
                const tw = w / 4;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + w - tw, y);
                ctx.lineTo(x + w, y + h / 2);
                ctx.lineTo(x + w - tw, y + h);
                ctx.lineTo(x, y + h);
                ctx.fill();
            });
            this._loopEndHandle = new VisualLoopControlsHandle(this._chipWaveLoopEnd, this._waveformCanvasWidth, this._handleCanvasHeight, this._waveformViewportX0, this._waveformViewportX1, this._loopEndValidator, (v) => {
                this._chipWaveLoopEnd = v;
                this._instrument.chipWaveLoopEnd = this._chipWaveLoopEnd;
                this._renderOverlay();
                this._reconfigureLoopControls();
            }, () => {
                this.gotMouseUp = true;
                setTimeout(() => { this.gotMouseUp = false; }, 10);
            }, (cnv, ctx, x, y, w, h) => {
                const tw = w / 4;
                ctx.beginPath();
                ctx.moveTo(x + w, y);
                ctx.lineTo(x + w, y + h);
                ctx.lineTo(x + tw, y + h);
                ctx.lineTo(x, y + h / 2);
                ctx.lineTo(x + tw, y);
                ctx.fill();
            });
            this._chipWaveIsUnavailable = true;
            this._waveformCanvas = canvas$1({ width: this._waveformCanvasWidth, height: this._waveformCanvasHeight, style: "cursor: default; position: static; width: 100%;" });
            this._waveformContext = null;
            this._overlayCanvas = canvas$1({ width: this._waveformCanvasWidth, height: this._waveformCanvasHeight, style: "cursor: default; position: absolute; top: 0; left: 0; width: 100%;" });
            this._overlayContext = null;
            this._waveformContainer = div$6({ style: `position: relative; margin-bottom: 0.5em; margin-left: auto; margin-right: auto; width: 100%; outline: 1px solid ${ColorConfig.uiWidgetBackground};` }, this._waveformCanvas, this._overlayCanvas);
            this._viewportOffsetSlider = input$3({ style: "width: 100%; flex-grow: 1; margin: 0;", type: "range", min: "0", max: "1", value: "0", step: "0.00001" });
            this._zoomInButton = button$6({ type: "button", title: "Zoom In", style: "height: var(--button-size); margin-left: 0.5em;" }, SVG.svg({ width: "20", height: "20", viewBox: "-10 -10 20 20", "pointer-events": "none", style: "width: 100%; height: 100%;" }, SVG.circle({ cx: -1, cy: -1, r: 6, "stroke-width": 2, stroke: ColorConfig.primaryText, fill: "none" }), SVG.path({ stroke: ColorConfig.primaryText, "stroke-width": 2, d: "M 3 3 L 7 7 M -1 -4 L -1 2 M -4 -1 L 2 -1", fill: "none" })));
            this._zoomOutButton = button$6({ type: "button", title: "Zoom Out", style: "height: var(--button-size); margin-left: 0.5em;" }, SVG.svg({ width: "20", height: "20", viewBox: "-10 -10 20 20", "pointer-events": "none", style: "width: 100%; height: 100%;" }, SVG.circle({ cx: -1, cy: -1, r: 6, "stroke-width": 2, stroke: ColorConfig.primaryText, fill: "none" }), SVG.path({ stroke: ColorConfig.primaryText, "stroke-width": 2, d: "M 3 3 L 7 7 M -4 -1 L 2 -1", fill: "none" })));
            this._zoom100Button = button$6({ type: "button", title: "Zoom 100%", style: "height: var(--button-size); margin-left: 0.5em;" }, "100%");
            this._loopModeSelect = select$3({ style: "width: 100%; flex-grow: 1; margin-left: 0.5em;" }, option$3({ value: 0 }, "Loop"), option$3({ value: 1 }, "Ping-Pong"), option$3({ value: 2 }, "Play Once"), option$3({ value: 3 }, "Play Loop Once"));
            this._startOffsetStepper = input$3({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: this._chipWaveStartOffset, min: "0", step: "1" });
            this._loopStartStepper = input$3({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: this._chipWaveLoopStart, min: "0", step: "1" });
            this._loopEndStepper = input$3({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: this._chipWaveLoopEnd, min: "0", step: "1" });
            this._playBackwardsBox = input$3({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: auto; margin-right: auto;" });
            this._playSongButton = button$6({ style: "width: 55%;", type: "button" });
            this._cancelButton = button$6({ class: "cancelButton" });
            this._okayButton = button$6({ class: "okayButton", style: "width: 25%;" }, "Okay");
            this._sampleIsLoadingMessage = div$6({ style: "margin-bottom: 0.5em; display: none;" }, "Sample is loading");
            this._loopControlsContainer = div$6(div$6({ style: "display: flex; flex-direction: column; align-items: center; justify-content: center; margin-bottom: 0.5em;" }, div$6({ style: `width: 100%; margin-bottom: 0.5em; text-align: center; color: ${ColorConfig.secondaryText};` }, "You can also zoom by dragging horizontally on the waveform.")), this._startOffsetHandle.canvas, this._waveformContainer, this._loopStartHandle.canvas, this._loopEndHandle.canvas, div$6({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center; margin-bottom: 0.5em;" }, this._viewportOffsetSlider, this._zoomInButton, this._zoomOutButton, this._zoom100Button), div$6({ style: "display: flex; flex-direction: column; align-items: center; justify-content: center; margin-bottom: 0.5em;" }, div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em;" }, div$6({ style: `flex-shrink: 0; text-align: right: color: ${ColorConfig.primaryText}; align-self: center;` }, "Loop Mode"), this._loopModeSelect), div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em;" }, div$6({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText}; align-self: center;` }, "Offset"), this._startOffsetStepper), div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em;" }, div$6({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText}; align-self: center;` }, "Loop Start"), this._loopStartStepper), div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em;" }, div$6({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText}; align-self: center;` }, "Loop End"), this._loopEndStepper), div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em;" }, div$6({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText}; align-self: center;` }, "Backwards"), this._playBackwardsBox), div$6({ style: "width: 100%; display: flex; flex-direction: row; margin-bottom: 0.5em; justify-content: center;" }, this._playSongButton)));
            this.container = div$6({ class: "prompt noSelection", style: "width: 500px;" }, div$6(div$6({ class: "promptTitle" }, h2$5({ class: "loop-controlsExt", style: "text-align: inherit;" }, ""), h2$5({ class: "loop-controlsTitle" }, "Loop Controls")), this._sampleIsLoadingMessage, this._loopControlsContainer, div$6({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton)), this._cancelButton);
            this.gotMouseUp = false;
            this._waveformSampleLookup = (x) => {
                const n = this._waveformDataLength;
                if (x >= 0 && x < n) {
                    return this._waveformData[Math.floor(x)];
                }
                else {
                    return 0;
                }
            };
            this._waveformSamplesLookup = (x0, x1) => {
                const n = this._waveformDataLength;
                const a = Math.max(0, Math.min(n, Math.ceil(x0)));
                const b = Math.max(0, Math.min(n, Math.ceil(x1)));
                if (a >= b)
                    return [0, 0];
                let y0 = this._waveformData[a];
                let y1 = y0;
                for (let i = a + 1; i < b; i++) {
                    const v = this._waveformData[i];
                    y0 = Math.min(y0, v);
                    y1 = Math.max(y1, v);
                }
                return [y0, y1];
            };
            this.cleanUp = () => {
                this._startOffsetHandle.cleanUp();
                this._loopStartHandle.cleanUp();
                this._loopEndHandle.cleanUp();
                this.container.removeEventListener("keydown", this._whenKeyPressed);
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._viewportOffsetSlider.removeEventListener("input", this._whenViewportOffsetSliderChanges);
                this._zoomInButton.removeEventListener("click", this._whenZoomInClicked);
                this._zoomOutButton.removeEventListener("click", this._whenZoomOutClicked);
                this._zoom100Button.removeEventListener("click", this._whenZoom100Clicked);
                this._loopModeSelect.removeEventListener("change", this._whenLoopModeSelectChanges);
                this._startOffsetStepper.removeEventListener("change", this._whenStartOffsetStepperChanges);
                this._loopStartStepper.removeEventListener("change", this._whenLoopStartStepperChanges);
                this._loopEndStepper.removeEventListener("change", this._whenLoopEndStepperChanges);
                this._playBackwardsBox.removeEventListener("input", this._whenPlayBackwardsBoxChanges);
                this._playSongButton.removeEventListener("click", this._togglePlaySong);
                this._overlayCanvas.removeEventListener("mousemove", this._whenOverlayMouseMoves);
                this._overlayCanvas.removeEventListener("mousedown", this._whenOverlayMouseIsDown);
                this._overlayCanvas.removeEventListener("mouseup", this._whenOverlayMouseIsUp);
                this._overlayCanvas.removeEventListener("touchstart", this._whenOverlayTouchIsDown);
                this._overlayCanvas.removeEventListener("touchmove", this._whenOverlayTouchMoves);
                this._overlayCanvas.removeEventListener("touchend", this._whenOverlayTouchIsUp);
                this._overlayCanvas.removeEventListener("touchcancel", this._whenOverlayTouchIsUp);
            };
            this._close = () => {
                this._doc.prompt = null;
                this._doc.undo();
            };
            this._saveChanges = () => {
                if (!this._chipWaveIsUnavailable) {
                    this._doc.prompt = null;
                    this._instrument.chipWaveLoopMode = this._initialChipWaveLoopMode;
                    this._instrument.chipWaveStartOffset = this._initialChipWaveStartOffset;
                    this._instrument.chipWaveLoopStart = this._initialChipWaveLoopStart;
                    this._instrument.chipWaveLoopEnd = this._initialChipWaveLoopEnd;
                    this._instrument.chipWavePlayBackwards = this._initialChipWavePlayBackwards;
                    const group = new ChangeGroup();
                    group.append(new ChangeChipWaveLoopMode(this._doc, this._chipWaveLoopMode));
                    group.append(new ChangeChipWaveStartOffset(this._doc, this._chipWaveStartOffset));
                    group.append(new ChangeChipWaveLoopStart(this._doc, this._chipWaveLoopStart));
                    group.append(new ChangeChipWaveLoopEnd(this._doc, this._chipWaveLoopEnd));
                    group.append(new ChangeChipWavePlayBackwards(this._doc, this._chipWavePlayBackwards));
                    this._doc.record(group, true);
                }
                else {
                    this._doc.prompt = null;
                    this._doc.undo();
                }
            };
            this._togglePlaySong = () => {
                this._songEditor.togglePlay();
                this._updatePlaySongButton();
            };
            this._renderWaveform = () => {
                if (this._chipWaveIsUnavailable)
                    return;
                const cnv = this._waveformCanvas;
                const ctx = this._waveformContext;
                const w = cnv.width;
                const h = cnv.height;
                const vx0 = this._waveformViewportX0;
                const vx1 = this._waveformViewportX1;
                const vy0 = this._waveformViewportY0;
                const vy1 = this._waveformViewportY1;
                const sampleWidth = (vx1 - vx0) / w;
                ctx.clearRect(0, 0, w, h);
                ctx.fillStyle = ColorConfig.getComputed("--ui-widget-background");
                ctx.fillRect(0, h / 2, w, 1);
                const waveformColor = ColorConfig.getComputed("--primary-text");
                if (sampleWidth < 1) {
                    ctx.strokeStyle = waveformColor;
                    ctx.lineWidth = 1;
                    let firstMove = true;
                    ctx.beginPath();
                    for (let cx = 0; cx < w; cx++) {
                        const wx = vx0 + cx * sampleWidth;
                        const wy = this._waveformSampleLookup(wx);
                        const cy = h - (wy - vy0) * h / (vy1 - vy0);
                        if (firstMove) {
                            ctx.moveTo(cx, cy);
                            firstMove = false;
                        }
                        else {
                            ctx.lineTo(cx, cy);
                        }
                    }
                    ctx.stroke();
                }
                else {
                    ctx.fillStyle = waveformColor;
                    let pcy0 = null;
                    let pcy1 = null;
                    for (let cx = 0; cx < w; cx++) {
                        const wx = vx0 + cx * sampleWidth;
                        const [wy0, wy1] = this._waveformSamplesLookup(wx - sampleWidth / 2, wx + sampleWidth / 2);
                        const cy0 = Math.max(-1, Math.min(h, h - (wy1 - vy0) * h / (vy1 - vy0)));
                        const cy1 = Math.max(-1, Math.min(h, h - (wy0 - vy0) * h / (vy1 - vy0)));
                        const cy0i = Math.floor(cy0);
                        const cy1i = Math.max(Math.ceil(cy1), cy0i + 1);
                        const ocy0 = pcy1 == null ? cy0i : Math.min(cy0i, pcy1);
                        const ocy1 = pcy0 == null ? cy1i : Math.max(cy1i, pcy0);
                        const bh = Math.max(1, ocy1 - ocy0);
                        ctx.fillRect(cx, ocy0, 1, bh);
                        pcy0 = ocy0;
                        pcy1 = ocy1;
                    }
                }
            };
            this._renderOverlay = () => {
                const cnv = this._overlayCanvas;
                const ctx = this._overlayContext;
                const w = cnv.width;
                const h = cnv.height;
                const vx0 = this._waveformViewportX0;
                const vx1 = this._waveformViewportX1;
                const so = this._chipWaveStartOffset;
                const ls = this._chipWaveLoopStart;
                const le = this._chipWaveLoopEnd;
                ctx.clearRect(0, 0, w, h);
                ctx.fillStyle = ColorConfig.getComputed("--loop-accent");
                const obx = Math.floor((so - vx0) * w / (vx1 - vx0));
                const oby = 0;
                const obw = 1;
                const obh = h;
                ctx.fillRect(obx, oby, obw, obh);
                ctx.fillStyle = ColorConfig.getComputed("--loop-accent");
                ctx.globalAlpha = 0.5;
                const lbx0 = Math.floor((ls - vx0) * w / (vx1 - vx0));
                const lbx1 = Math.floor((le - vx0) * w / (vx1 - vx0));
                const lbx = lbx0;
                const lby = 0;
                const lbw = lbx1 - lbx0;
                const lbh = h;
                ctx.fillRect(lbx, lby, lbw, lbh);
                ctx.globalAlpha = 1;
                if (this._overlaySelectionX0 != null && this._overlaySelectionX1 != null) {
                    ctx.fillStyle = ColorConfig.getComputed("--box-selection-fill");
                    ctx.globalAlpha = 0.5;
                    ctx.fillRect(this._overlaySelectionX0, 0, this._overlaySelectionX1 - this._overlaySelectionX0, h);
                    ctx.globalAlpha = 1;
                }
            };
            this._reconfigureLoopControls = () => {
                this._loopModeSelect.value = "" + this._chipWaveLoopMode;
                this._startOffsetStepper.value = "" + this._chipWaveStartOffset;
                this._loopStartStepper.value = "" + this._chipWaveLoopStart;
                this._loopEndStepper.value = "" + this._chipWaveLoopEnd;
                this._playBackwardsBox.checked = this._chipWavePlayBackwards;
            };
            this._whenViewportOffsetSliderChanges = (event) => {
                const rawOffset = Math.max(0, Math.min(1, +event.target.value));
                const newViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, rawOffset * this._waveformViewportMaxOffset));
                this._waveformViewportOffset = Math.min(this._waveformViewportMaxOffset, newViewportOffset);
                this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                this._propagateViewportUpdate();
                this._render();
            };
            this._whenZoomInClicked = (event) => {
                const newViewportWidth = Math.max(1, Math.min(this._waveformDataLength, this._waveformViewportWidth / 2));
                this._waveformViewportWidth = newViewportWidth;
                this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                const centerX = this._waveformViewportX0 + (this._waveformCanvasWidth / 2) * (this._waveformViewportX1 - this._waveformViewportX0) / this._waveformCanvasWidth;
                this._waveformViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, centerX - (this._waveformCanvasWidth / 2) * this._waveformViewportWidth / this._waveformCanvasWidth));
                this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                this._propagateViewportUpdate();
                this._render();
            };
            this._whenZoomOutClicked = (event) => {
                const newViewportWidth = Math.max(1, Math.min(this._waveformDataLength, this._waveformViewportWidth * 2));
                this._waveformViewportWidth = newViewportWidth;
                this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                const centerX = this._waveformViewportX0 + (this._waveformCanvasWidth / 2) * (this._waveformViewportX1 - this._waveformViewportX0) / this._waveformCanvasWidth;
                this._waveformViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, centerX - (this._waveformCanvas.width / 2) * this._waveformViewportWidth / this._waveformCanvasWidth));
                this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                if (this._waveformViewportWidth === this._waveformDataLength) {
                    this._viewportOffsetSlider.value = "0";
                }
                else {
                    this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                }
                this._propagateViewportUpdate();
                this._render();
            };
            this._whenZoom100Clicked = (event) => {
                const newViewportWidth = this._waveformDataLength;
                this._waveformViewportWidth = newViewportWidth;
                this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                this._waveformViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, 0));
                this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                if (this._waveformViewportWidth === this._waveformDataLength) {
                    this._viewportOffsetSlider.value = "0";
                }
                else {
                    this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                }
                this._propagateViewportUpdate();
                this._render();
            };
            this._whenLoopModeSelectChanges = (event) => {
                const element = event.target;
                const newValue = +element.value;
                this._chipWaveLoopMode = newValue;
                this._instrument.chipWaveLoopMode = this._chipWaveLoopMode;
            };
            this._whenStartOffsetStepperChanges = (event) => {
                const element = event.target;
                const newValue = this._startOffsetValidator(+element.value);
                this._chipWaveStartOffset = newValue;
                this._instrument.chipWaveStartOffset = this._chipWaveStartOffset;
                element.value = "" + newValue;
                this._startOffsetHandle.update(newValue);
                this._startOffsetHandle.render();
                this._renderOverlay();
            };
            this._whenLoopStartStepperChanges = (event) => {
                const element = event.target;
                const newValue = this._loopStartValidator(+element.value);
                this._chipWaveLoopStart = newValue;
                this._instrument.chipWaveLoopStart = this._chipWaveLoopStart;
                element.value = "" + newValue;
                this._loopStartHandle.update(newValue);
                this._loopStartHandle.render();
                this._renderOverlay();
            };
            this._whenLoopEndStepperChanges = (event) => {
                const element = event.target;
                const newValue = this._loopEndValidator(+element.value);
                this._chipWaveLoopEnd = newValue;
                this._instrument.chipWaveLoopEnd = this._chipWaveLoopEnd;
                element.value = "" + newValue;
                this._loopEndHandle.update(newValue);
                this._loopEndHandle.render();
                this._renderOverlay();
            };
            this._whenPlayBackwardsBoxChanges = (event) => {
                const element = event.target;
                const newValue = element.checked;
                this._chipWavePlayBackwards = newValue;
                this._instrument.chipWavePlayBackwards = this._chipWavePlayBackwards;
            };
            this._whenOverlayMouseMoves = (event) => {
                if (!this._overlayIsMouseDown)
                    return;
                const w = this._overlayCanvas.width;
                const bounds = this._overlayCanvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = ((event.clientX || event.pageX) - bounds.left) * canvasXScale;
                this._overlaySelectionX1 = mx;
                this._renderOverlay();
            };
            this._whenOverlayMouseIsDown = (event) => {
                this._overlayIsMouseDown = true;
                const w = this._overlayCanvas.width;
                const bounds = this._overlayCanvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = ((event.clientX || event.pageX) - bounds.left) * canvasXScale;
                this._overlaySelectionX0 = mx;
                this._overlaySelectionX1 = mx;
                this._renderOverlay();
            };
            this._whenOverlayMouseIsUp = (event) => {
                if (!this._overlayIsMouseDown)
                    return;
                this.gotMouseUp = true;
                setTimeout(() => { this.gotMouseUp = false; }, 10);
                this._overlayIsMouseDown = false;
                const w = this._overlayCanvas.width;
                const vx0 = this._waveformViewportX0;
                const vx1 = this._waveformViewportX1;
                const bounds = this._overlayCanvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = ((event.clientX || event.pageX) - bounds.left) * canvasXScale;
                this._overlaySelectionX1 = mx;
                this._overlaySelectionX0 = Math.max(0, Math.min(w, this._overlaySelectionX0));
                this._overlaySelectionX1 = Math.max(0, Math.min(w, this._overlaySelectionX1));
                if (this._overlaySelectionX0 > this._overlaySelectionX1) {
                    const t = this._overlaySelectionX0;
                    this._overlaySelectionX0 = this._overlaySelectionX1;
                    this._overlaySelectionX1 = t;
                }
                let zoomAreaIsTooSmall = false;
                if (this._overlaySelectionX1 - this._overlaySelectionX0 > 2) {
                    const wosx0 = vx0 + this._overlaySelectionX0 * (vx1 - vx0) / w;
                    const wosx1 = vx0 + this._overlaySelectionX1 * (vx1 - vx0) / w;
                    const newViewportWidth = Math.max(1, Math.min(this._waveformDataLength, wosx1 - wosx0));
                    this._waveformViewportWidth = newViewportWidth;
                    this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                    const centerX = vx0 + (this._overlaySelectionX0) * (this._waveformViewportX1 - this._waveformViewportX0) / this._waveformCanvasWidth;
                    this._waveformViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, centerX));
                    this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                    this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                    if (this._waveformViewportWidth === this._waveformDataLength) {
                        this._viewportOffsetSlider.value = "0";
                    }
                    else {
                        this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                    }
                }
                else {
                    zoomAreaIsTooSmall = true;
                }
                this._overlaySelectionX0 = null;
                this._overlaySelectionX1 = null;
                if (!zoomAreaIsTooSmall) {
                    this._propagateViewportUpdate();
                    this._render();
                }
                this._renderOverlay();
            };
            this._whenOverlayTouchIsDown = (event) => {
                event.preventDefault();
                this._overlayIsMouseDown = true;
                const w = this._overlayCanvas.width;
                const bounds = this._overlayCanvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = (event.touches[0].clientX - bounds.left) * canvasXScale;
                this._overlaySelectionX0 = mx;
                this._overlaySelectionX1 = mx;
                this._renderOverlay();
            };
            this._whenOverlayTouchMoves = (event) => {
                if (!this._overlayIsMouseDown)
                    return;
                event.preventDefault();
                const w = this._overlayCanvas.width;
                const bounds = this._overlayCanvas.getBoundingClientRect();
                const canvasXScale = w / bounds.width;
                const mx = (event.touches[0].clientX - bounds.left) * canvasXScale;
                this._overlaySelectionX1 = mx;
                this._renderOverlay();
            };
            this._whenOverlayTouchIsUp = (event) => {
                event.preventDefault();
                if (!this._overlayIsMouseDown)
                    return;
                this.gotMouseUp = true;
                setTimeout(() => { this.gotMouseUp = false; }, 10);
                this._overlayIsMouseDown = false;
                const w = this._overlayCanvas.width;
                const vx0 = this._waveformViewportX0;
                const vx1 = this._waveformViewportX1;
                this._overlaySelectionX0 = Math.max(0, Math.min(w, this._overlaySelectionX0));
                this._overlaySelectionX1 = Math.max(0, Math.min(w, this._overlaySelectionX1));
                if (this._overlaySelectionX0 > this._overlaySelectionX1) {
                    const t = this._overlaySelectionX0;
                    this._overlaySelectionX0 = this._overlaySelectionX1;
                    this._overlaySelectionX1 = t;
                }
                let zoomAreaIsTooSmall = false;
                if (this._overlaySelectionX1 - this._overlaySelectionX0 > 2) {
                    const wosx0 = vx0 + this._overlaySelectionX0 * (vx1 - vx0) / w;
                    const wosx1 = vx0 + this._overlaySelectionX1 * (vx1 - vx0) / w;
                    const newViewportWidth = Math.max(1, Math.min(this._waveformDataLength, wosx1 - wosx0));
                    this._waveformViewportWidth = newViewportWidth;
                    this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                    const centerX = vx0 + (this._overlaySelectionX0) * (this._waveformViewportX1 - this._waveformViewportX0) / this._waveformCanvasWidth;
                    this._waveformViewportOffset = Math.max(0, Math.min(this._waveformViewportMaxOffset, centerX));
                    this._waveformViewportX0 = 0 + this._waveformViewportOffset;
                    this._waveformViewportX1 = this._waveformViewportWidth + this._waveformViewportOffset;
                    if (this._waveformViewportWidth === this._waveformDataLength) {
                        this._viewportOffsetSlider.value = "0";
                    }
                    else {
                        this._viewportOffsetSlider.value = "" + (this._waveformViewportOffset / this._waveformViewportMaxOffset);
                    }
                }
                else {
                    zoomAreaIsTooSmall = true;
                }
                this._overlaySelectionX0 = null;
                this._overlaySelectionX1 = null;
                if (!zoomAreaIsTooSmall) {
                    this._propagateViewportUpdate();
                    this._render();
                }
                this._renderOverlay();
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
                if (event.keyCode == 32) {
                    this._togglePlaySong();
                    event.preventDefault();
                }
            };
            this._updatePlaySongButton = () => {
                if (this._doc.synth.playing) {
                    this._playSongButton.classList.remove("playButton");
                    this._playSongButton.classList.add("pauseButton");
                    this._playSongButton.title = "Pause (Space)";
                    this._playSongButton.innerText = "Pause";
                }
                else {
                    this._playSongButton.classList.remove("pauseButton");
                    this._playSongButton.classList.add("playButton");
                    this._playSongButton.title = "Play (Space)";
                    this._playSongButton.innerText = "Play";
                }
            };
            this._propagateViewportUpdate = () => {
                this._startOffsetHandle.updateViewport(this._waveformViewportX0, this._waveformViewportX1);
                this._loopStartHandle.updateViewport(this._waveformViewportX0, this._waveformViewportX1);
                this._loopEndHandle.updateViewport(this._waveformViewportX0, this._waveformViewportX1);
            };
            this._render = () => {
                if (this._chipWaveIsUnavailable)
                    return;
                this._renderWaveform();
                this._startOffsetHandle.render();
                this._loopStartHandle.render();
                this._loopEndHandle.render();
                this._renderOverlay();
            };
            this._doc = _doc;
            this._songEditor = _songEditor;
            this._waveformContext = this._waveformCanvas.getContext("2d");
            this._overlayContext = this._overlayCanvas.getContext("2d");
            this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
            const rawChipWave = Config.rawRawChipWaves[this._instrument.chipWave];
            const customSampleIsLoading = (rawChipWave.isCustomSampled === true || rawChipWave.isSampled == true) && sampleLoadingState.statusTable[this._instrument.chipWave] !== 1;
            if (customSampleIsLoading) {
                this._sampleIsLoadingMessage.style.display = "";
                this._loopControlsContainer.style.display = "none";
                this._chipWaveIsUnavailable = true;
            }
            else {
                this._sampleIsLoadingMessage.style.display = "none";
                this._loopControlsContainer.style.display = "";
                this._chipWaveIsUnavailable = false;
                this._waveformData = rawChipWave.samples;
                this._waveformDataLength = this._waveformData.length - 1;
                this._initialChipWaveLoopMode = this._instrument.chipWaveLoopMode;
                this._initialChipWaveStartOffset = this._instrument.chipWaveStartOffset;
                this._initialChipWaveLoopStart = this._instrument.chipWaveLoopStart;
                this._initialChipWaveLoopEnd = this._instrument.chipWaveLoopEnd;
                this._initialChipWavePlayBackwards = this._instrument.chipWavePlayBackwards;
                this._chipWaveLoopMode = this._initialChipWaveLoopMode;
                this._chipWaveStartOffset = this._initialChipWaveStartOffset;
                this._chipWaveLoopStart = this._initialChipWaveLoopStart;
                this._chipWaveLoopEnd = this._initialChipWaveLoopEnd;
                this._chipWavePlayBackwards = this._initialChipWavePlayBackwards;
                const verticalBounds = this._waveformSamplesLookup(0, this._waveformDataLength);
                const maxVerticalBound = Math.max(Math.abs(verticalBounds[0]), Math.abs(verticalBounds[1])) + 0.01;
                verticalBounds[0] = -maxVerticalBound;
                verticalBounds[1] = maxVerticalBound;
                this._waveformViewportX0 = 0;
                this._waveformViewportX1 = this._waveformDataLength;
                this._waveformViewportY0 = verticalBounds[0];
                this._waveformViewportY1 = verticalBounds[1];
                this._waveformViewportWidth = this._waveformViewportX1 - this._waveformViewportX0;
                this._waveformViewportOffset = 0;
                this._waveformViewportMaxOffset = this._waveformDataLength - this._waveformViewportWidth;
                this._startOffsetHandle.update(this._chipWaveStartOffset);
                this._loopStartHandle.update(this._chipWaveLoopStart);
                this._loopEndHandle.update(this._chipWaveLoopEnd);
                this._propagateViewportUpdate();
            }
            this._updatePlaySongButton();
            this._render();
            this._reconfigureLoopControls();
            this.container.addEventListener("keydown", this._whenKeyPressed);
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._viewportOffsetSlider.addEventListener("input", this._whenViewportOffsetSliderChanges);
            this._zoomInButton.addEventListener("click", this._whenZoomInClicked);
            this._zoomOutButton.addEventListener("click", this._whenZoomOutClicked);
            this._zoom100Button.addEventListener("click", this._whenZoom100Clicked);
            this._loopModeSelect.addEventListener("change", this._whenLoopModeSelectChanges);
            this._startOffsetStepper.addEventListener("change", this._whenStartOffsetStepperChanges);
            this._loopStartStepper.addEventListener("change", this._whenLoopStartStepperChanges);
            this._loopEndStepper.addEventListener("change", this._whenLoopEndStepperChanges);
            this._playBackwardsBox.addEventListener("input", this._whenPlayBackwardsBoxChanges);
            this._playSongButton.addEventListener("click", this._togglePlaySong);
            window.addEventListener("mousemove", this._whenOverlayMouseMoves);
            this._overlayCanvas.addEventListener("mousedown", this._whenOverlayMouseIsDown);
            window.addEventListener("mouseup", this._whenOverlayMouseIsUp);
            this._overlayCanvas.addEventListener("touchstart", this._whenOverlayTouchIsDown);
            this._overlayCanvas.addEventListener("touchmove", this._whenOverlayTouchMoves);
            this._overlayCanvas.addEventListener("touchend", this._whenOverlayTouchIsUp);
            this._overlayCanvas.addEventListener("touchcancel", this._whenOverlayTouchIsUp);
        }
    }

    const { div: div$5, h2: h2$4, span: span$2, input: input$2, button: button$5 } = HTML;
    class SampleLoadingStatusPrompt {
        constructor(_doc) {
            this._intervalDuration = 2000;
            this._interval = null;
            this._renderedWhenAllHaveStoppedChanging = false;
            this._cancelButton = button$5({ class: "cancelButton" });
            this._statusesContainer = div$5();
            this._noSamplesMessage = div$5({ style: "margin-top: 0.5em; display: none;" }, "There's no custom samples in this song.");
            this.container = div$5({ class: "prompt noSelection", style: "width: 350px;" }, div$5(h2$4("Sample Loading Status"), div$5({ style: "display: flex; flex-direction: column; align-items: center; margin-bottom: 0.5em;" }, this._noSamplesMessage, div$5({ style: "width: 100%; max-height: 350px; overflow-y: scroll;" }, this._statusesContainer))), this._cancelButton);
            this._close = () => {
                this._doc.prompt = null;
                this._doc.undo();
            };
            this.cleanUp = () => {
                while (this._statusesContainer.firstChild !== null) {
                    this._statusesContainer.removeChild(this._statusesContainer.firstChild);
                }
                this._cancelButton.removeEventListener("click", this._close);
                clearInterval(this._interval);
            };
            this._render = () => {
                const hasNoCustomSamples = EditorConfig.customSamples == null;
                if (hasNoCustomSamples) {
                    this._noSamplesMessage.style.display = "";
                }
                if (hasNoCustomSamples || this._renderedWhenAllHaveStoppedChanging) {
                    clearInterval(this._interval);
                    return;
                }
                let allHaveStoppedChanging = true;
                for (let chipWaveIndex = 0; chipWaveIndex < Config.chipWaves.length; chipWaveIndex++) {
                    const chipWave = Config.chipWaves[chipWaveIndex];
                    if (chipWave.isCustomSampled !== true && chipWave.isSampled !== true)
                        continue;
                    const loadingStatus = sampleLoadingState.statusTable[chipWaveIndex];
                    if (loadingStatus === 0) {
                        allHaveStoppedChanging = false;
                        break;
                    }
                }
                while (this._statusesContainer.firstChild !== null) {
                    this._statusesContainer.removeChild(this._statusesContainer.firstChild);
                }
                for (let chipWaveIndex = 0; chipWaveIndex < Config.chipWaves.length; chipWaveIndex++) {
                    const chipWave = Config.chipWaves[chipWaveIndex];
                    if (chipWave.isCustomSampled !== true && chipWave.isSampled !== true)
                        continue;
                    const sampleName = chipWave.name;
                    const url = sampleLoadingState.urlTable[chipWaveIndex];
                    const loadingStatus = getSampleLoadingStatusName(sampleLoadingState.statusTable[chipWaveIndex]);
                    const urlDisplay = input$2({ style: `margin-left: 0.5em; color: ${ColorConfig.primaryText}; background-color: ${ColorConfig.editorBackground}; width: 100%; border: 1px solid ${ColorConfig.uiWidgetBackground}; -webkit-user-select: none; -webkit-touch-callout: none; -moz-user-select: none; -ms-user-select: none; user-select: none;`, value: url, title: url, disabled: true });
                    const loadingStatusColor = loadingStatus === "loaded" ? ColorConfig.indicatorPrimary : ColorConfig.secondaryText;
                    const loadingStatusDisplay = span$2({ style: `margin-left: 0.5em; color: ${loadingStatusColor}` }, loadingStatus);
                    const chipWaveElement = div$5({ style: `padding: 0.6em; margin: 0.4em; border: 1px solid ${ColorConfig.uiWidgetBackground}; border-radius: 4px;` }, div$5({
                        class: "add-sample-prompt-sample-name",
                        style: `margin-bottom: 0.5em; color: ${ColorConfig.secondaryText}; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;`,
                        title: sampleName,
                    }, sampleName), div$5({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center; margin-bottom: 0.5em;" }, div$5({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "URL"), urlDisplay), div$5({ style: "display: flex; flex-direction: row; align-items: center; justify-content: center; margin-bottom: 0.5em;" }, div$5({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "Status"), loadingStatusDisplay));
                    this._statusesContainer.appendChild(chipWaveElement);
                }
                if (allHaveStoppedChanging) {
                    this._renderedWhenAllHaveStoppedChanging = true;
                }
            };
            this._doc = _doc;
            this._interval = setInterval(() => this._render(), this._intervalDuration);
            this._render();
            this._cancelButton.addEventListener("click", this._close);
        }
    }

    const { div: div$4, input: input$1, button: button$4, a: a$1, code, textarea, details, summary, span: span$1, ul, li, select: select$2, option: option$2, h2: h2$3 } = HTML;
    class AddSamplesPrompt {
        constructor(_doc) {
            this._maxSamples = 64;
            this._entries = [];
            this._doReload = false;
            this._entryOptionsDisplayStates = {};
            this._cancelButton = button$4({ class: "cancelButton" });
            this._okayButton = button$4({ class: "okayButton", style: "width: 45%;" }, "Okay");
            this._addSampleButton = button$4({ style: "height: auto; min-height: var(--button-size);" }, "Add sample");
            this._entryContainer = div$4();
            this._addMultipleSamplesButton = button$4({ style: "height: auto; min-height: var(--button-size); margin-left: 0.5em;" }, "Add multiple samples");
            this._addSamplesAreaBottom = div$4({ style: "margin-top: 0.5em;" }, this._addSampleButton, this._addMultipleSamplesButton);
            this._instructionsLink = a$1({ href: "#" }, "Wanna add your own samples? Click here!");
            this._description = div$4(div$4({ style: "margin-bottom: 0.5em; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text; cursor: text;" }, "Before you ask: "), div$4({ style: "margin-bottom: 0.5em; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text; cursor: text;" }, "legacySamples", " = Pandoras Box's Samples "), div$4({ style: "margin-bottom: 0.5em; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text; cursor: text;" }, "nintariboxSamples", " = nintaribox's Samples "), div$4({ style: "margin-bottom: 0.5em; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text; cursor: text;" }, "marioPaintboxSamples", " = MarioPaintBox's Samples."), div$4({ style: "margin-bottom: 0.5em;" }, "The order of these samples is important - if you change it you'll break your song!", "Since they're sorted by which ones you added first, changing the position of the sample in the list will", "change your instruments' sample to a different sample!"), div$4({ style: "margin-bottom: 0.5em;" }, this._instructionsLink));
            this._closeInstructionsButton = button$4({ style: "height: auto; min-height: var(--button-size); width: 100%;" }, "Close instructions");
            this._instructionsArea = div$4({ style: "display: none; margin-top: 0; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; user-select: text; cursor: text; overflow-y: auto;" }, div$4({ class: "promptTitle" }, h2$3({ class: "samplesExt", style: "text-align: inherit;" }, ""), h2$3({ class: "samplesTitle", style: "margin-bottom: 0.5em;" }, "Add Samples")), div$4({ style: "margin-top: 0.5em; margin-bottom: 0.5em;" }, "In UB and in turn AB, custom samples are loaded from arbitrary URLs."), div$4({ style: `margin-top: 0.5em; margin-bottom: 0.5em; color: ${ColorConfig.secondaryText};` }, "(Technically, the web server behind the URL needs to support ", a$1({ href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS", target: "_blank", }, "CORS"), ", but you don't need to know about that: ", " the sample just won't load if that's not the case)"), div$4({ style: "margin-top: 0.5em; margin-bottom: 0.5em;" }, details(summary("Why arbitrary URLs?"), a$1({ href: "https://pandoras-box-archive.neptendo.repl.co/" }, "A certain BeepBox mod"), " did this with one central server, but it went down, taking down", " the samples with it, though thankfully it got archived.", " This is always an issue with servers: it may run out of space,", " stop working, and so on. With arbitrary URLs, you can always ", " change them to different ones if they stop working.")), div$4({ style: "margin-top: 0.5em; margin-bottom: 0.5em;" }, "As for where to upload your samples, here are some suggestions:", ul({ style: "text-align: left;" }, li(a$1({ href: "https://filegarden.com" }, "File Garden")), li(a$1({ href: "https://github.com/" }, "Github")), li(a$1({ href: "https://www.dropbox.com" }, "Dropbox"), " (domain needs to be ", code("https://dl.dropboxusercontent.com"), ")"))), div$4({ style: "margin-top: 0.5em; margin-bottom: 0.5em;" }, "Static website hosting services may also work (such as ", a$1({ href: "https://pages.github.com" }, "GitHub Pages"), ")", " but those require a bit more setup."), div$4({ style: "margin-top: 0.5em; margin-bottom: 1em;" }, "Finally, if have a soundfont you'd like to get samples from, consider using this ", a$1({ href: "./sample_extractor.html", target: "_blank" }, "sample extractor"), "!"), div$4({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between; margin-top: 0.5em;" }, this._closeInstructionsButton));
            this._addSamplesArea = div$4({ style: "overflow-y: auto;" }, div$4({ class: "promptTitle" }, h2$3({ class: "samplesExt", style: "text-align: inherit;" }, ""), h2$3({ class: "samplesTitle", style: "margin-bottom: 0.5em;" }, "Add Samples")), div$4({ style: "display: flex; flex-direction: column; align-items: center; margin-bottom: 0.5em;" }, this._description, div$4({ style: "width: 100%; max-height: 450px; overflow-y: scroll;" }, this._entryContainer), this._addSamplesAreaBottom), div$4({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton));
            this._bulkAddTextarea = textarea({
                style: "width: 100%; height: 100%; resize: none; box-sizing: border-box;",
            });
            this._bulkAddConfirmButton = button$4({ style: "height: auto; min-height: var(--button-size); width: 100%;" }, "Add");
            this._bulkAddArea = div$4({ style: "display: none; overflow-y: auto;" }, h2$3({ style: "margin-bottom: 0.5em;" }, "Add Multiple Samples"), div$4({ style: "display: flex; flex-direction: column; align-items: center;" }, div$4(`Add one URL per line. Remember that you can only have ${this._maxSamples} samples!`), div$4({ style: `color: ${ColorConfig.secondaryText}` }, "(This supports the syntax used to store samples in the song URLs as well)"), div$4({ style: "width: 100%; height: 250px; margin-top: 0.5em; margin-bottom: 0.5em;" }, this._bulkAddTextarea)), div$4({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._bulkAddConfirmButton));
            this.container = div$4({ class: "prompt noSelection", style: "width: 450px; max-height: calc(100% - 100px);" }, this._addSamplesArea, this._bulkAddArea, this._instructionsArea, this._cancelButton);
            this.cleanUp = () => {
                while (this._entryContainer.firstChild !== null) {
                    this._entryContainer.removeChild(this._entryContainer.firstChild);
                }
                this._addSampleButton.removeEventListener("click", this._whenAddSampleClicked);
                this._addMultipleSamplesButton.removeEventListener("click", this._whenAddMultipleSamplesClicked);
                this._bulkAddConfirmButton.removeEventListener("click", this._whenBulkAddConfirmClicked);
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this._instructionsLink.removeEventListener("click", this._whenInstructionsLinkClicked);
                this._closeInstructionsButton.removeEventListener("click", this._whenCloseInstructionsButtonClicked);
            };
            this._close = () => {
                this._doc.prompt = null;
                this._doc.undo();
                if (this._doReload == true) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                const urlData = this._generateURLData();
                EditorConfig.customSamples = urlData.split("|").filter(x => x !== "");
                Config.willReloadForCustomSamples = true;
                window.location.hash = this._doc.song.toBase64String();
                setTimeout(() => { location.reload(); }, 50);
            };
            this._whenAddSampleClicked = (event) => {
                const entryIndex = this._entries.length;
                this._entries.push({
                    url: "",
                    sampleRate: 44100,
                    rootKey: 60,
                    percussion: false,
                    chipWaveLoopStart: null,
                    chipWaveLoopEnd: null,
                    chipWaveStartOffset: null,
                    chipWaveLoopMode: null,
                    chipWavePlayBackwards: false,
                });
                this._entryOptionsDisplayStates[entryIndex] = false;
                this._reconfigureAddSampleButton();
                this._render(true);
                this._doReload = true;
            };
            this._whenAddMultipleSamplesClicked = (event) => {
                this._addSamplesArea.style.display = "none";
                this._bulkAddArea.style.display = "";
                this._bulkAddTextarea.value = "";
            };
            this._whenInstructionsLinkClicked = (event) => {
                event.preventDefault();
                this._addSamplesArea.style.display = "none";
                this._instructionsArea.style.display = "";
            };
            this._whenCloseInstructionsButtonClicked = (event) => {
                this._addSamplesArea.style.display = "";
                this._instructionsArea.style.display = "none";
            };
            this._whenBulkAddConfirmClicked = (event) => {
                this._addSamplesArea.style.display = "";
                this._bulkAddArea.style.display = "none";
                const parsed = this._parseURLs(this._bulkAddTextarea.value
                    .replace(/\n/g, "|")
                    .split("|")
                    .map((x) => decodeURIComponent(x.trim()))
                    .filter((x) => x !== ""), false);
                const seen = new Map();
                for (const entry of this._entries) {
                    seen.set(entry.url, true);
                }
                for (const entry of parsed.entries) {
                    if (this._entries.length >= this._maxSamples)
                        break;
                    if (seen.has(entry.url))
                        continue;
                    seen.set(entry.url, true);
                    const entryIndex = this._entries.length;
                    this._entries.push(entry);
                    this._entryOptionsDisplayStates[entryIndex] = false;
                }
                this._reconfigureAddSampleButton();
                this._render(false);
                this._doReload = true;
            };
            this._whenOptionsAreToggled = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                if (element.open) {
                    this._entryOptionsDisplayStates[entryIndex] = true;
                }
                else {
                    this._entryOptionsDisplayStates[entryIndex] = false;
                }
            };
            this._whenURLChanges = (event) => {
                var _a, _b;
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                this._entries[entryIndex].url = element.value;
                const sampleNameElement = (_b = (_a = element.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.querySelector(".add-sample-prompt-sample-name");
                if (sampleNameElement != null) {
                    const sampleName = this._getSampleName(this._entries[entryIndex]);
                    sampleNameElement.innerText = sampleName;
                    sampleNameElement.title = sampleName;
                }
                this._doReload = true;
            };
            this._whenSampleRateChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const value = clamp(8000, 96000 + 1, parseFloatWithDefault(element.value, 44100));
                this._entries[entryIndex].sampleRate = value;
            };
            this._whenRootKeyChanges = (event) => {
                var _a, _b;
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const value = parseFloatWithDefault(element.value, 60);
                this._entries[entryIndex].rootKey = value;
                const rootKeyDisplay = (_b = (_a = element.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.querySelector(".add-sample-prompt-root-key-display");
                if (rootKeyDisplay != null) {
                    const noteName = this._noteNameFromPitchNumber(this._entries[entryIndex].rootKey);
                    if (noteName !== "") {
                        rootKeyDisplay.innerText = `(${noteName})`;
                    }
                }
            };
            this._whenPercussionChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                this._entries[entryIndex].percussion = element.checked ? true : false;
            };
            this._whenChipWaveLoopStartChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const value = parseIntWithDefault(element.value, null);
                this._entries[entryIndex].chipWaveLoopStart = value;
            };
            this._whenChipWaveLoopEndChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const value = parseIntWithDefault(element.value, null);
                this._entries[entryIndex].chipWaveLoopEnd = value;
            };
            this._whenChipWaveStartOffsetChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const value = parseIntWithDefault(element.value, null);
                this._entries[entryIndex].chipWaveStartOffset = value;
            };
            this._whenChipWaveLoopModeChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const newValue = +element.value;
                if (newValue === -1) {
                    this._entries[entryIndex].chipWaveLoopMode = null;
                }
                else {
                    this._entries[entryIndex].chipWaveLoopMode = newValue;
                }
            };
            this._whenChipWavePlayBackwardsChanges = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const newValue = element.checked;
                this._entries[entryIndex].chipWavePlayBackwards = newValue;
            };
            this._whenCopyLinkPresetClicked = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                this._copyTextToClipboard(this._generateURLDataForEntry(this._entries[entryIndex]));
            };
            this._whenRemoveSampleClicked = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                this._entryOptionsDisplayStates[entryIndex] = false;
                this._entries.splice(entryIndex, 1);
                this._reconfigureAddSampleButton();
                this._render(false);
            };
            this._whenMoveSampleUpClicked = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const upEntryIndex = entryIndex - 1;
                if (this._entries.length >= 2 && upEntryIndex >= 0) {
                    const upEntry = this._entries[upEntryIndex];
                    const entry = this._entries[entryIndex];
                    const upEntryOptionsVisibility = this._entryOptionsDisplayStates[upEntryIndex];
                    const entryOptionsVisibility = this._entryOptionsDisplayStates[entryIndex];
                    this._entries[upEntryIndex] = entry;
                    this._entries[entryIndex] = upEntry;
                    this._entryOptionsDisplayStates[upEntryIndex] = entryOptionsVisibility;
                    this._entryOptionsDisplayStates[entryIndex] = upEntryOptionsVisibility;
                    this._render(false);
                }
            };
            this._whenMoveSampleDownClicked = (event) => {
                const element = event.target;
                const entryIndex = +(element.dataset.index);
                const downEntryIndex = entryIndex + 1;
                if (this._entries.length >= 2 && downEntryIndex < this._entries.length) {
                    const downEntry = this._entries[downEntryIndex];
                    const entry = this._entries[entryIndex];
                    const downEntryOptionsVisibility = this._entryOptionsDisplayStates[downEntryIndex];
                    const entryOptionsVisibility = this._entryOptionsDisplayStates[entryIndex];
                    this._entries[downEntryIndex] = entry;
                    this._entries[entryIndex] = downEntry;
                    this._entryOptionsDisplayStates[downEntryIndex] = entryOptionsVisibility;
                    this._entryOptionsDisplayStates[entryIndex] = downEntryOptionsVisibility;
                    this._render(false);
                }
            };
            this._reconfigureAddSampleButton = () => {
                if (this._entries.length >= this._maxSamples) {
                    this._addSampleButton.style.display = "none";
                }
                else {
                    this._addSampleButton.style.display = "";
                }
            };
            this._parseURLs = (urls, parseOldSyntax) => {
                function sliceForSampleRate(url) {
                    const newUrl = url.slice(0, url.indexOf(","));
                    const sampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(",") + 1), 44100));
                    return [newUrl, sampleRate];
                }
                function sliceForRootKey(url) {
                    const newUrl = url.slice(0, url.indexOf("!"));
                    const rootKey = parseFloatWithDefault(url.slice(url.indexOf("!") + 1), 60);
                    return [newUrl, rootKey];
                }
                let useLegacySamples = false;
                let useNintariboxSamples = false;
                let useMarioPaintboxSamples = false;
                const parsedEntries = [];
                for (const url of urls) {
                    if (url === "")
                        continue;
                    if (url.toLowerCase() === "legacysamples") {
                        if (!useLegacySamples) {
                            parsedEntries.push({
                                url: "legacySamples",
                                sampleRate: 44100,
                                rootKey: 60,
                                percussion: false,
                                chipWaveLoopStart: null,
                                chipWaveLoopEnd: null,
                                chipWaveStartOffset: null,
                                chipWaveLoopMode: null,
                                chipWavePlayBackwards: false,
                            });
                        }
                        useLegacySamples = true;
                    }
                    else if (url.toLowerCase() === "nintariboxsamples") {
                        if (!useNintariboxSamples) {
                            parsedEntries.push({
                                url: "nintariboxSamples",
                                sampleRate: 44100,
                                rootKey: 60,
                                percussion: false,
                                chipWaveLoopStart: null,
                                chipWaveLoopEnd: null,
                                chipWaveStartOffset: null,
                                chipWaveLoopMode: null,
                                chipWavePlayBackwards: false,
                            });
                        }
                        useNintariboxSamples = true;
                    }
                    else if (url.toLowerCase() === "mariopaintboxsamples") {
                        if (!useMarioPaintboxSamples) {
                            parsedEntries.push({
                                url: "marioPaintboxSamples",
                                sampleRate: 44100,
                                rootKey: 60,
                                percussion: false,
                                chipWaveLoopStart: null,
                                chipWaveLoopEnd: null,
                                chipWaveStartOffset: null,
                                chipWaveLoopMode: null,
                                chipWavePlayBackwards: false,
                            });
                        }
                        useMarioPaintboxSamples = true;
                    }
                    else {
                        let urlSliced = url;
                        let sampleRate = 44100;
                        let rootKey = 60;
                        let percussion = false;
                        let chipWaveLoopStart = null;
                        let chipWaveLoopEnd = null;
                        let chipWaveStartOffset = null;
                        let chipWaveLoopMode = null;
                        let chipWavePlayBackwards = false;
                        let optionsStartIndex = url.indexOf("!");
                        let optionsEndIndex = -1;
                        let parsedSampleOptions = false;
                        if (optionsStartIndex === 0) {
                            optionsEndIndex = url.indexOf("!", optionsStartIndex + 1);
                            if (optionsEndIndex !== -1) {
                                const rawOptions = url.slice(optionsStartIndex + 1, optionsEndIndex).split(",");
                                for (const rawOption of rawOptions) {
                                    const optionCode = rawOption.charAt(0);
                                    const optionData = rawOption.slice(1, rawOption.length);
                                    if (optionCode === "s") {
                                        sampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));
                                    }
                                    else if (optionCode === "r") {
                                        rootKey = parseFloatWithDefault(optionData, 60);
                                    }
                                    else if (optionCode === "p") {
                                        percussion = true;
                                    }
                                    else if (optionCode === "a") {
                                        chipWaveLoopStart = parseIntWithDefault(optionData, null);
                                    }
                                    else if (optionCode === "b") {
                                        chipWaveLoopEnd = parseIntWithDefault(optionData, null);
                                    }
                                    else if (optionCode === "c") {
                                        chipWaveStartOffset = parseIntWithDefault(optionData, null);
                                    }
                                    else if (optionCode === "d") {
                                        chipWaveLoopMode = parseIntWithDefault(optionData, null);
                                        if (chipWaveLoopMode != null) {
                                            chipWaveLoopMode = clamp(0, 3 + 1, chipWaveLoopMode);
                                        }
                                    }
                                    else if (optionCode === "e") {
                                        chipWavePlayBackwards = true;
                                    }
                                }
                                urlSliced = url.slice(optionsEndIndex + 1, url.length);
                                parsedSampleOptions = true;
                            }
                        }
                        if (parseOldSyntax) {
                            if (!parsedSampleOptions) {
                                if (url.indexOf("@") != -1) {
                                    urlSliced = url.replaceAll("@", "");
                                    percussion = true;
                                }
                                if (url.indexOf(",") != -1 && url.indexOf("!") != -1) {
                                    if (url.indexOf(",") < url.indexOf("!")) {
                                        [urlSliced, rootKey] = sliceForRootKey(urlSliced);
                                        [urlSliced, sampleRate] = sliceForSampleRate(urlSliced);
                                    }
                                    else {
                                        [urlSliced, sampleRate] = sliceForSampleRate(urlSliced);
                                        [urlSliced, rootKey] = sliceForRootKey(urlSliced);
                                    }
                                }
                                else {
                                    if (url.indexOf(",") != -1) {
                                        [urlSliced, sampleRate] = sliceForSampleRate(urlSliced);
                                    }
                                    if (url.indexOf("!") != -1) {
                                        [urlSliced, rootKey] = sliceForRootKey(urlSliced);
                                    }
                                }
                            }
                        }
                        parsedEntries.push({
                            url: urlSliced,
                            sampleRate: sampleRate,
                            rootKey: rootKey,
                            percussion: percussion,
                            chipWaveLoopStart: chipWaveLoopStart,
                            chipWaveLoopEnd: chipWaveLoopEnd,
                            chipWaveStartOffset: chipWaveStartOffset,
                            chipWaveLoopMode: chipWaveLoopMode,
                            chipWavePlayBackwards: chipWavePlayBackwards,
                        });
                    }
                }
                return { entries: parsedEntries };
            };
            this._generateURLDataForEntry = (entry) => {
                const url = entry.url.trim();
                const sampleRate = entry.sampleRate;
                const rootKey = entry.rootKey;
                const percussion = entry.percussion;
                const chipWaveLoopStart = entry.chipWaveLoopStart;
                const chipWaveLoopEnd = entry.chipWaveLoopEnd;
                const chipWaveStartOffset = entry.chipWaveStartOffset;
                const chipWaveLoopMode = entry.chipWaveLoopMode;
                const chipWavePlayBackwards = entry.chipWavePlayBackwards;
                const urlInLowerCase = url.toLowerCase();
                const isBundledSamplePack = (urlInLowerCase === "legacysamples"
                    || urlInLowerCase === "nintariboxsamples"
                    || urlInLowerCase === "mariopaintboxsamples");
                const options = [];
                if (sampleRate !== 44100)
                    options.push("s" + sampleRate);
                if (rootKey !== 60)
                    options.push("r" + rootKey);
                if (percussion)
                    options.push("p");
                if (chipWaveLoopStart != null)
                    options.push("a" + chipWaveLoopStart);
                if (chipWaveLoopEnd != null)
                    options.push("b" + chipWaveLoopEnd);
                if (chipWaveStartOffset != null)
                    options.push("c" + chipWaveStartOffset);
                if (chipWaveLoopMode != null)
                    options.push("d" + chipWaveLoopMode);
                if (chipWavePlayBackwards)
                    options.push("e");
                if (isBundledSamplePack || options.length <= 0) {
                    return url;
                }
                else {
                    return "!" + options.join(",") + "!" + url;
                }
            };
            this._generateURLData = () => {
                let output = "";
                for (const entry of this._entries) {
                    const url = entry.url.trim();
                    if (url === "")
                        continue;
                    output += "|" + this._generateURLDataForEntry(entry);
                }
                return output;
            };
            this._getSampleName = (entry) => {
                try {
                    const parsedUrl = new URL(entry.url);
                    return decodeURIComponent(parsedUrl.pathname.replace(/^([^\/]*\/)+/, ""));
                }
                catch (error) {
                    return entry.url;
                }
            };
            this._noteNameFromPitchNumber = (n) => {
                function wrap(x, b) {
                    return (x % b + b) % b;
                }
                n = Math.floor(n) - 12;
                const pitchNameIndex = wrap(n + Config.keys[this._doc.song.key].basePitch, Config.pitchesPerOctave);
                let pitch = "";
                if (Config.keys[pitchNameIndex].isWhiteKey) {
                    pitch = Config.keys[pitchNameIndex].name;
                }
                else {
                    const shiftDir = Config.blackKeyNameParents[wrap(n, Config.pitchesPerOctave)];
                    pitch = Config.keys[wrap(pitchNameIndex + Config.pitchesPerOctave + shiftDir, Config.pitchesPerOctave)].name;
                    if (shiftDir == 1) {
                        pitch += "♭";
                    }
                    else if (shiftDir == -1) {
                        pitch += "♯";
                    }
                }
                pitch += Math.floor(n / Config.pitchesPerOctave);
                return pitch;
            };
            this._render = (scrollToBottom) => {
                while (this._entryContainer.firstChild !== null) {
                    this._entryContainer.removeChild(this._entryContainer.firstChild);
                }
                for (let entryIndex = 0; entryIndex < this._entries.length; entryIndex++) {
                    const canMoveUp = this._entries.length >= 2 && entryIndex > 0;
                    const canMoveDown = this._entries.length >= 2 && entryIndex < this._entries.length - 1;
                    const entry = this._entries[entryIndex];
                    const optionsVisible = Boolean(this._entryOptionsDisplayStates[entryIndex]);
                    const urlInput = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", value: entry.url });
                    const sampleRateStepper = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: "" + entry.sampleRate, min: "8000", max: "96000", step: "1" });
                    const rootKeyStepper = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: "" + entry.rootKey, min: "0", max: Config.maxPitch + Config.pitchesPerOctave, step: "1" });
                    const rootKeyDisplay = span$1({ class: "add-sample-prompt-root-key-display", style: "margin-left: 0.4em; width: 3em; text-align: left; text-overflow: ellipsis; overflow: hidden; flex-shrink: 0;" }, `(${this._noteNameFromPitchNumber(entry.rootKey)})`);
                    const percussionBox = input$1({ style: "width: 1em; margin-left: 1em;", type: "checkbox" });
                    const chipWaveLoopStartStepper = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: "" + (entry.chipWaveLoopStart != null ? entry.chipWaveLoopStart : ""), min: "0", step: "1" });
                    const chipWaveLoopEndStepper = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: "" + (entry.chipWaveLoopEnd != null ? entry.chipWaveLoopEnd : ""), min: "0", step: "1" });
                    const chipWaveStartOffsetStepper = input$1({ style: "flex-grow: 1; margin-left: 1em; width: 100%;", type: "number", value: "" + (entry.chipWaveStartOffset != null ? entry.chipWaveStartOffset : ""), min: "0", step: "1" });
                    const chipWaveLoopModeSelect = select$2({ style: "width: 100%; flex-grow: 1; margin-left: 0.5em;" }, option$2({ value: -1 }, ""), option$2({ value: 0 }, "Loop"), option$2({ value: 1 }, "Ping-Pong"), option$2({ value: 2 }, "Play Once"), option$2({ value: 3 }, "Play Loop Once"));
                    if (entry.chipWaveLoopMode != null) {
                        chipWaveLoopModeSelect.value = "" + entry.chipWaveLoopMode;
                    }
                    const chipWavePlayBackwardsBox = input$1({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: auto; margin-right: auto;" });
                    chipWavePlayBackwardsBox.checked = entry.chipWavePlayBackwards;
                    const sampleName = this._getSampleName(entry);
                    percussionBox.checked = entry.percussion;
                    const copyLinkPresetButton = button$4({ style: "height: auto; min-height: var(--button-size);", title: "For use with \"Add multiple samples\"" }, "Copy link preset");
                    const removeButton = button$4({ style: "height: auto; min-height: var(--button-size); margin-left: 0.5em;" }, "Remove");
                    const moveUpButton = button$4({ style: "height: auto; min-height: var(--button-size); margin-left: 0.5em;" }, SVG.svg({ width: "16", height: "16", viewBox: "-13 -14 26 26", "pointer-events": "none", style: "width: 100%; height: 100%;" }, SVG.path({ d: "M -6 6 L 0 -6 L 6 6 z", fill: ColorConfig.primaryText })));
                    const moveDownButton = button$4({ style: "height: auto; min-height: var(--button-size); margin-left: 0.5em;" }, SVG.svg({ width: "16", height: "16", viewBox: "-13 -14 26 26", "pointer-events": "none", style: "width: 100%; height: 100%;" }, SVG.path({ d: "M -6 -6 L 6 -6 L 0 6 z", fill: ColorConfig.primaryText })));
                    const optionsContainer = details({ open: optionsVisible, style: "margin-bottom: 2em; margin-top: 1em;" }, summary({ style: "margin-bottom: 1em;" }, "Options"), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; :text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "What rate to resample to" }, "Sample rate")), sampleRateStepper), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `text-align: right; color: ${ColorConfig.primaryText}; flex-shrink: 0;` }, span$1({ title: "Pitch where the sample is played as-is" }, "Root key")), rootKeyDisplay, rootKeyStepper), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: space-between; margin-bottom: 0.5em;" }, div$4({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "Percussion (pitch doesn't change with key)"), percussionBox), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "Applies to the \"Loop Start\" loop control option of the preset created for this sample" }, "Loop Start")), chipWaveLoopStartStepper), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "Applies to the \"Loop End\" loop control option of the preset created for this sample" }, "Loop End")), chipWaveLoopEndStepper), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "Applies to the \"Offset\" loop control option of the preset created for this sample" }, "Sample Start Offset")), chipWaveStartOffsetStepper), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "Applies to the \"Loop Mode\" loop control option of the preset created for this sample" }, "Loop Mode")), chipWaveLoopModeSelect), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `flex-shrink: 0; text-align: right; color: ${ColorConfig.primaryText};` }, span$1({ title: "Applies to the \"Backwards\" loop control option of the preset created for this sample" }, "Backwards")), chipWavePlayBackwardsBox));
                    urlInput.dataset.index = "" + entryIndex;
                    sampleRateStepper.dataset.index = "" + entryIndex;
                    rootKeyStepper.dataset.index = "" + entryIndex;
                    percussionBox.dataset.index = "" + entryIndex;
                    chipWaveLoopStartStepper.dataset.index = "" + entryIndex;
                    chipWaveLoopEndStepper.dataset.index = "" + entryIndex;
                    chipWaveStartOffsetStepper.dataset.index = "" + entryIndex;
                    chipWaveLoopModeSelect.dataset.index = "" + entryIndex;
                    chipWavePlayBackwardsBox.dataset.index = "" + entryIndex;
                    copyLinkPresetButton.dataset.index = "" + entryIndex;
                    removeButton.dataset.index = "" + entryIndex;
                    moveUpButton.dataset.index = "" + entryIndex;
                    moveDownButton.dataset.index = "" + entryIndex;
                    optionsContainer.dataset.index = "" + entryIndex;
                    const bottomButtons = div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end;" }, copyLinkPresetButton, removeButton);
                    if (canMoveUp) {
                        bottomButtons.appendChild(moveUpButton);
                    }
                    if (canMoveDown) {
                        bottomButtons.appendChild(moveDownButton);
                    }
                    const entryElement = div$4({ style: `padding: 0.6em; margin: 0.4em; border: 1px solid ${ColorConfig.uiWidgetBackground}; border-radius: 4px;` }, div$4({
                        class: "add-sample-prompt-sample-name",
                        style: `margin-bottom: 0.5em; color: ${ColorConfig.secondaryText}; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;`,
                        title: sampleName,
                    }, sampleName), div$4({ style: "display: flex; flex-direction: row; align-items: center; justify-content: flex-end; margin-bottom: 0.5em;" }, div$4({ style: `text-align: right; color: ${ColorConfig.primaryText};` }, "URL"), urlInput), optionsContainer, bottomButtons);
                    optionsContainer.addEventListener("toggle", this._whenOptionsAreToggled);
                    urlInput.addEventListener("change", this._whenURLChanges);
                    sampleRateStepper.addEventListener("change", this._whenSampleRateChanges);
                    rootKeyStepper.addEventListener("change", this._whenRootKeyChanges);
                    percussionBox.addEventListener("change", this._whenPercussionChanges);
                    chipWaveLoopStartStepper.addEventListener("change", this._whenChipWaveLoopStartChanges);
                    chipWaveLoopEndStepper.addEventListener("change", this._whenChipWaveLoopEndChanges);
                    chipWaveStartOffsetStepper.addEventListener("change", this._whenChipWaveStartOffsetChanges);
                    chipWaveLoopModeSelect.addEventListener("change", this._whenChipWaveLoopModeChanges);
                    chipWavePlayBackwardsBox.addEventListener("change", this._whenChipWavePlayBackwardsChanges);
                    copyLinkPresetButton.addEventListener("click", this._whenCopyLinkPresetClicked);
                    removeButton.addEventListener("click", this._whenRemoveSampleClicked);
                    if (canMoveUp) {
                        moveUpButton.addEventListener("click", this._whenMoveSampleUpClicked);
                    }
                    if (canMoveDown) {
                        moveDownButton.addEventListener("click", this._whenMoveSampleDownClicked);
                    }
                    this._entryContainer.appendChild(entryElement);
                    const thisIsTheLastElement = entryIndex === this._entries.length - 1;
                    if (scrollToBottom && thisIsTheLastElement) {
                        entryElement.scrollIntoView({ "block": "nearest", "inline": "nearest" });
                    }
                }
            };
            this._doc = _doc;
            if (EditorConfig.customSamples != null) {
                const parsed = this._parseURLs(EditorConfig.customSamples, false);
                this._entries = parsed.entries;
            }
            this._addSampleButton.addEventListener("click", this._whenAddSampleClicked);
            this._addMultipleSamplesButton.addEventListener("click", this._whenAddMultipleSamplesClicked);
            this._bulkAddConfirmButton.addEventListener("click", this._whenBulkAddConfirmClicked);
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this._instructionsLink.addEventListener("click", this._whenInstructionsLinkClicked);
            this._closeInstructionsButton.addEventListener("click", this._whenCloseInstructionsButtonClicked);
            this._reconfigureAddSampleButton();
            this._render(false);
        }
        _copyTextToClipboard(text) {
            let nav;
            nav = navigator;
            if (nav.clipboard && nav.clipboard.writeText) {
                nav.clipboard.writeText(text).catch(() => {
                    window.prompt("Copy to clipboard:", text);
                });
                return;
            }
            const textField = document.createElement("textarea");
            textField.textContent = text;
            document.body.appendChild(textField);
            textField.select();
            const succeeded = document.execCommand("copy");
            textField.remove();
            this.container.focus({ preventScroll: true });
            if (!succeeded)
                window.prompt("Copy this:", text);
        }
    }

    const { button: button$3, div: div$3, h2: h2$2, select: select$1, option: option$1 } = HTML;
    class ShortenerConfigPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._shortenerStrategySelect = select$1({ style: "width: 100%;" }, option$1({ value: "tinyurl" }, "tinyurl.com"), option$1({ value: "isgd" }, "is.gd"));
            this._cancelButton = button$3({ class: "cancelButton" });
            this._okayButton = button$3({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.container = div$3({ class: "prompt noSelection", style: "width: 250px;" }, div$3({ class: "promptTitle" }, h2$2({ class: "configShortenerExt", style: "text-align: inherit;" }, ""), h2$2({ class: "configShortenerTitle" }, "Configure Shortener")), div$3({ style: "display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;" }, div$3({ class: "selectContainer", style: "width: 100%;" }, this._shortenerStrategySelect)), div$3({ style: "display: flex; flex-direction: row-reverse; justify-content: space-between;" }, this._okayButton), this._cancelButton);
            this._close = () => {
                this._doc.undo();
            };
            this.cleanUp = () => {
                this._okayButton.removeEventListener("click", this._saveChanges);
                this._cancelButton.removeEventListener("click", this._close);
                this.container.removeEventListener("keydown", this._whenKeyPressed);
            };
            this._whenKeyPressed = (event) => {
                if (event.target.tagName != "BUTTON" && event.keyCode == 13) {
                    this._saveChanges();
                }
            };
            this._saveChanges = () => {
                window.localStorage.setItem("shortenerStrategySelect", this._shortenerStrategySelect.value);
                this._doc.prompt = null;
                this._doc.undo();
            };
            const lastStrategy = window.localStorage.getItem("shortenerStrategySelect");
            if (lastStrategy != null) {
                this._shortenerStrategySelect.value = lastStrategy;
            }
            this._okayButton.addEventListener("click", this._saveChanges);
            this._cancelButton.addEventListener("click", this._close);
            this.container.addEventListener("keydown", this._whenKeyPressed);
        }
    }

    const { button: button$2, div: div$2, h2: h2$1, p: p$1, } = HTML;
    class TutorialPrompt {
        constructor(_doc) {
            this._doc = _doc;
            this._cancelButton = button$2({ class: "cancelButton", style: "display:none;" });
            this.okayButton = button$2({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.yesButton1 = button$2({ class: "yesButton", style: "width:15%;" }, "Yes");
            this.noButton1 = button$2({ class: "noButton", style: "width:15%;" }, "No");
            this.yesButton2 = button$2({ class: "yesButton", style: "width:15%;" }, "Yes");
            this.noButton2 = button$2({ class: "noButton", style: "width:15%;" }, "No");
            this.yesButton3 = button$2({ class: "yesButton", style: "" }, "I am Certain");
            this.noButton3 = button$2({ class: "noButton", style: "" }, "Wait, I'll do it");
            this.learnBeepBox1 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "This is my first time using Anything related to BeepBox.");
            this.learnJummBox1 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "I have used BeepBox, but have never used any of its mods.");
            this.learnUltraBox1 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "I have used BeepBox, and it's Mods, but I've never used UltraBox (The mod AbyssBox is built off of).");
            this.learnAbyssBox1 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "I am familiar with BeepBox and its mods, but I'm new to AbyssBox.");
            this.learnBeepBox2 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "Tell me more about BeepBox");
            this.learnJummBox2 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "Tell me more about JummBox");
            this.learnUltraBox2 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "Tell me more about UltraBox");
            this.learnAbyssBox2 = button$2({ class: "tutorialButton", style: "margin:0.5em;" }, "Tell me more about AbyssBox");
            this.learningBeepBoxButton1 = button$2({ class: "yesButton", style: "width:25%;" }, "Continue");
            this.learningBeepBoxPatternEditor = button$2({ class: "yesButton", style: "width:15%;" }, "Pattern Editor");
            this.learningBeepBoxTrackEditor = button$2({ class: "yesButton", style: "width:15%;" }, "Track Editor");
            this.learningBeepBoxSettingsEditor = button$2({ class: "yesButton", style: "width:15%;" }, "Settings Editor");
            this.startingContainer = div$2({ id: "tutorialPrompt" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "Is this your first time using AbyssBox?"), div$2({ style: "display:flex; flex-direction: row; justify-content: space-evenly;" }, this.yesButton1, this.noButton1));
            this.afterNo1Container = div$2({ id: "tutorialPrompt", style: "display:none;" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "Would you like to take the tutorial anyways?"), div$2({ style: "display:flex; flex-direction: row; justify-content: space-evenly; font-size: 15px;" }, this.yesButton2, this.noButton2));
            this.afterNo2Container = div$2({ id: "tutorialPrompt", style: "display:none;" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "Even if this is not your first time using AbyssBox, there might still be something worth learning from this. Are you certain you want to skip?"), div$2({ style: "display:flex; flex-direction: row; justify-content: space-evenly;" }, this.noButton3, this.yesButton3));
            this.afterYes1Container = div$2({ id: "tutorialPrompt", style: "display:none;" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "Since this is your first time using AbyssBox, we would like to ask how much do you know about BeepBox, its mods, or AbyssBox?"), div$2({ style: "display:flex; flex-direction: column; font-size: 15px;" }, this.learnBeepBox1, this.learnJummBox1, this.learnUltraBox1, this.learnAbyssBox1));
            this.afterYes3Container = div$2({ id: "tutorialPrompt", style: "display:none;" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "Even though this isn't your first time using AbyssBox, What would you like to learn about?"), div$2({ style: "display:flex; flex-direction: column; font-size: 15px;" }, this.learnBeepBox2, this.learnJummBox2, this.learnUltraBox2, this.learnAbyssBox2));
            this.learningBeepBox1 = div$2({ id: "tutorialPrompt" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "BeepBox is an online tool used to create songs, using simple shapes and sounds you can make many unique creations all within the editor. "), div$2({ style: "display:flex; flex-direction: row; justify-content: space-evenly;" }, this.learningBeepBoxButton1));
            this.learningBeepBox2 = div$2({ id: "tutorialPrompt" }, div$2({ class: "promptTitle" }, h2$1({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2$1({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox Tutorial")), p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "In BeepBox there are three major sections you will interact with throughout the entirety of your music making journey, these sections are:", p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }), "The Pattern Editor, The Track Editor, and the Settings Editor.", p$1({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }), "Each of these areas are very important, which of these would you like to learn about first?"), div$2({ style: "display:flex; flex-direction: row; justify-content: space-evenly;" }, this.learningBeepBoxPatternEditor, this.learningBeepBoxTrackEditor, this.learningBeepBoxSettingsEditor));
            this.container = div$2({ class: "prompt noSelection", id: "tutorialContainerPrompt", style: "width: 350px;" }, this.startingContainer, this.afterNo1Container, this.afterNo2Container, this.afterYes1Container, this.afterYes3Container, this._cancelButton);
            this._close = () => {
                window.localStorage.setItem("tutorialComplete", "true");
                this._doc.prompt = null;
                this._doc.undo();
            };
            this._yes1 = () => {
                this.startingContainer.remove();
                this.afterNo1Container.remove();
                this.afterNo2Container.remove();
                this.afterYes3Container.remove();
                this.afterYes1Container.style.display = "unset";
                this._cancelButton.style.display = "unset";
            };
            this._yes2 = () => {
                this.startingContainer.remove();
                this.afterNo1Container.remove();
                this.afterNo2Container.remove();
                this.afterYes1Container.remove();
                this.afterYes3Container.style.display = "unset";
                this._cancelButton.style.display = "unset";
            };
            this._no1 = () => {
                this.startingContainer.remove();
                this.afterNo1Container.style.display = "unset";
            };
            this._no2 = () => {
                this.afterNo1Container.remove();
                this.afterNo2Container.style.display = "unset";
            };
            this.cleanUp = () => {
                this.okayButton.removeEventListener("click", this._close);
            };
            this._cancelButton.addEventListener("click", this._close);
            this.okayButton.addEventListener("click", this._close);
            this.yesButton1.addEventListener("click", this._yes1);
            this.yesButton2.addEventListener("click", this._yes2);
            this.noButton3.addEventListener("click", this._yes2);
            this.noButton1.addEventListener("click", this._no1);
            this.noButton2.addEventListener("click", this._no2);
            this.yesButton3.addEventListener("click", this._close);
        }
    }

    const { button: button$1, div: div$1, h2, p, a } = HTML;
    class UpdatePrompt {
        constructor(_doc) {
            this._doc = _doc;
            this.okayButton = button$1({ class: "okayButton", style: "width:45%;" }, "Okay");
            this.linkThing = a({ href: "./patch-notes", target: "_blank", }, " Checking out the Patch Notes!");
            this.startingContainer = div$1({ id: "tutorialPrompt" }, div$1({ class: "promptTitle" }, h2({ class: "tutorialExt", style: "text-align: inherit;" }, ""), h2({ class: "tutorialTitle", style: "margin-bottom: 0.5em;" }, "AbyssBox 1.5.1 is OUT NOW!")), p({ style: "margin-bottom: 0.5em; text-align: center; font-size: 15px;" }, "AbyssBox 1.5.1 is here! A rather small but meaningful update this time around!"), p({ style: "margin-bottom: 0.5em; text-align: left; font-size: 15px;" }, "- Updated the Frutiger Aero theme to be a little less laggy."), p({ style: "margin-bottom: 0.5em; text-align: left; font-size: 15px;" }, "- Added tips to the new effects, as they were missing before."));
            this.container = div$1({ class: "prompt noSelection", id: "updateContainerPrompt", style: "width: 350px;" }, this.startingContainer, div$1({ style: "display:flex; flex-direction:row-reverse;" }, this.okayButton));
            this._close = () => {
                window.localStorage.setItem("updateSeen", "true");
                window.localStorage.setItem("curVer", "1.5.1");
                this._doc.prompt = null;
                this._doc.undo();
            };
            this.cleanUp = () => {
                this.okayButton.removeEventListener("click", this._close);
            };
            this.okayButton.addEventListener("click", this._close);
        }
    }

    const { button, div, input, select, span, optgroup, option, canvas } = HTML;
    const beepboxEditorContainer$1 = document.getElementById("beepboxEditorContainer");
    function buildOptions(menu, items) {
        for (let index = 0; index < items.length; index++) {
            menu.appendChild(option({ value: index }, items[index]));
        }
        return menu;
    }
    function buildHeaderedOptions(header, menu, items) {
        menu.appendChild(option({ selected: true, disabled: true, value: header }, header));
        for (const item of items) {
            menu.appendChild(option({ value: item }, item));
        }
        return menu;
    }
    function buildPresetOptions(isNoise, idSet) {
        const menu = select({ id: idSet });
        if (isNoise) {
            menu.appendChild(option({ value: 2 }, EditorConfig.valueToPreset(2).name));
            menu.appendChild(option({ value: 3 }, EditorConfig.valueToPreset(3).name));
            menu.appendChild(option({ value: 4 }, EditorConfig.valueToPreset(4).name));
        }
        else {
            menu.appendChild(option({ value: 0 }, EditorConfig.valueToPreset(0).name));
            menu.appendChild(option({ value: 9 }, EditorConfig.valueToPreset(9).name));
            menu.appendChild(option({ value: 6 }, EditorConfig.valueToPreset(6).name));
            menu.appendChild(option({ value: 1 }, EditorConfig.valueToPreset(1).name));
            menu.appendChild(option({ value: 11 }, EditorConfig.instrumentToPreset(11).name));
            menu.appendChild(option({ value: 8 }, EditorConfig.valueToPreset(8).name));
            menu.appendChild(option({ value: 5 }, EditorConfig.valueToPreset(5).name));
            menu.appendChild(option({ value: 7 }, EditorConfig.valueToPreset(7).name));
            menu.appendChild(option({ value: 3 }, EditorConfig.valueToPreset(3).name));
            menu.appendChild(option({ value: 2 }, EditorConfig.valueToPreset(2).name));
        }
        const randomGroup = optgroup({ label: "Randomize ▾" });
        randomGroup.appendChild(option({ value: "randomPreset" }, "Random Preset"));
        randomGroup.appendChild(option({ value: "randomGenerated" }, "Random Generated"));
        menu.appendChild(randomGroup);
        let firstCategoryGroup = null;
        let customSampleCategoryGroup = null;
        for (let categoryIndex = 1; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
            const category = EditorConfig.presetCategories[categoryIndex];
            const group = optgroup({ label: category.name + " ▾" });
            let foundAny = false;
            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                const preset = category.presets[presetIndex];
                if ((preset.isNoise == true) == isNoise) {
                    group.appendChild(option({ value: (categoryIndex << 6) + presetIndex }, preset.name));
                    foundAny = true;
                }
            }
            if (categoryIndex === 1 && foundAny) {
                firstCategoryGroup = group;
            }
            else if (category.name === "Custom Sample Presets" && foundAny) {
                customSampleCategoryGroup = group;
            }
            if (category.name == "String Presets" && foundAny) {
                let moveViolin2 = group.removeChild(group.children[11]);
                group.insertBefore(moveViolin2, group.children[1]);
            }
            if (category.name == "Flute Presets" && foundAny) {
                let moveFlute2 = group.removeChild(group.children[11]);
                group.insertBefore(moveFlute2, group.children[1]);
            }
            if (category.name == "Keyboard Presets" && foundAny) {
                let moveGrandPiano2 = group.removeChild(group.children[9]);
                let moveGrandPiano3 = group.removeChild(group.children[9]);
                group.insertBefore(moveGrandPiano3, group.children[1]);
                group.insertBefore(moveGrandPiano2, group.children[1]);
            }
            if (foundAny)
                menu.appendChild(group);
        }
        if (firstCategoryGroup != null && customSampleCategoryGroup != null) {
            const parent = customSampleCategoryGroup.parentNode;
            parent.removeChild(customSampleCategoryGroup);
            parent.insertBefore(customSampleCategoryGroup, firstCategoryGroup);
        }
        return menu;
    }
    function setSelectedValue(menu, value, isSelect2 = false) {
        const stringValue = value.toString();
        if (menu.value != stringValue) {
            menu.value = stringValue;
            if (isSelect2) {
                $(menu).val(value).trigger('change.select2');
            }
        }
    }
    class CustomChipCanvas {
        constructor(canvas, _doc, _getChange) {
            this.canvas = canvas;
            this._doc = _doc;
            this._getChange = _getChange;
            this._change = null;
            this._onMouseMove = (event) => {
                if (this.mouseDown) {
                    var x = (event.clientX || event.pageX) - this.canvas.getBoundingClientRect().left;
                    var y = Math.floor((event.clientY || event.pageY) - this.canvas.getBoundingClientRect().top);
                    if (y < 2)
                        y = 2;
                    if (y > 50)
                        y = 50;
                    var ctx = this.canvas.getContext("2d");
                    if (this.continuousEdit == true && Math.abs(this.lastX - x) < 40) {
                        var lowerBound = (x < this.lastX) ? x : this.lastX;
                        var upperBound = (x < this.lastX) ? this.lastX : x;
                        for (let i = lowerBound; i <= upperBound; i += 2) {
                            var progress = (Math.abs(x - this.lastX) > 2.0) ? ((x > this.lastX) ?
                                1.0 - ((i - lowerBound) / (upperBound - lowerBound))
                                : ((i - lowerBound) / (upperBound - lowerBound))) : 0.0;
                            var j = Math.round(y + (this.lastY - y) * progress);
                            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                            ctx.fillRect(Math.floor(i / 2) * 2, 0, 2, 53);
                            ctx.fillStyle = ColorConfig.getComputed("--ui-widget-background");
                            ctx.fillRect(Math.floor(i / 2) * 2, 25, 2, 2);
                            ctx.fillStyle = ColorConfig.getComputed("--track-editor-bg-pitch-dim");
                            ctx.fillRect(Math.floor(i / 2) * 2, 13, 2, 1);
                            ctx.fillRect(Math.floor(i / 2) * 2, 39, 2, 1);
                            ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
                            ctx.fillRect(Math.floor(i / 2) * 2, j - 2, 2, 4);
                            this.newArray[Math.floor(i / 2)] = (j - 26);
                        }
                    }
                    else {
                        ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                        ctx.fillRect(Math.floor(x / 2) * 2, 0, 2, 52);
                        ctx.fillStyle = ColorConfig.getComputed("--ui-widget-background");
                        ctx.fillRect(Math.floor(x / 2) * 2, 25, 2, 2);
                        ctx.fillStyle = ColorConfig.getComputed("--track-editor-bg-pitch-dim");
                        ctx.fillRect(Math.floor(x / 2) * 2, 13, 2, 1);
                        ctx.fillRect(Math.floor(x / 2) * 2, 39, 2, 1);
                        ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
                        ctx.fillRect(Math.floor(x / 2) * 2, y - 2, 2, 4);
                        this.newArray[Math.floor(x / 2)] = (y - 26);
                    }
                    this.continuousEdit = true;
                    this.lastX = x;
                    this.lastY = y;
                    let instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                    let sum = 0.0;
                    for (let i = 0; i < this.newArray.length; i++) {
                        sum += this.newArray[i];
                    }
                    const average = sum / this.newArray.length;
                    let cumulative = 0;
                    let wavePrev = 0;
                    for (let i = 0; i < this.newArray.length; i++) {
                        cumulative += wavePrev;
                        wavePrev = this.newArray[i] - average;
                        instrument.customChipWaveIntegral[i] = cumulative;
                    }
                    instrument.customChipWaveIntegral[64] = 0.0;
                }
            };
            this._onMouseDown = (event) => {
                this.mouseDown = true;
                this._onMouseMove(event);
            };
            this._onMouseUp = () => {
                this.mouseDown = false;
                this.continuousEdit = false;
                this._whenChange();
            };
            this._whenChange = () => {
                this._change = this._getChange(this.newArray);
                this._doc.record(this._change);
                this._change = null;
            };
            canvas.addEventListener("mousemove", this._onMouseMove);
            canvas.addEventListener("mousedown", this._onMouseDown);
            canvas.addEventListener("mouseup", this._onMouseUp);
            canvas.addEventListener("mouseleave", this._onMouseUp);
            this.mouseDown = false;
            this.continuousEdit = false;
            this.lastX = 0;
            this.lastY = 0;
            this.newArray = new Float32Array(64);
            this.renderedArray = new Float32Array(64);
            this.renderedColor = "";
            this.redrawCanvas();
        }
        redrawCanvas() {
            const chipData = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customChipWave;
            const renderColor = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
            let needsRedraw = false;
            if (renderColor != this.renderedColor) {
                needsRedraw = true;
            }
            else
                for (let i = 0; i < 64; i++) {
                    if (chipData[i] != this.renderedArray[i]) {
                        needsRedraw = true;
                        i = 64;
                    }
                }
            if (!needsRedraw) {
                return;
            }
            this.renderedArray.set(chipData);
            var ctx = this.canvas.getContext("2d");
            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
            ctx.fillRect(0, 0, 128, 52);
            ctx.fillStyle = ColorConfig.getComputed("--ui-widget-background");
            ctx.fillRect(0, 25, 128, 2);
            ctx.fillStyle = ColorConfig.getComputed("--track-editor-bg-pitch-dim");
            ctx.fillRect(0, 13, 128, 1);
            ctx.fillRect(0, 39, 128, 1);
            ctx.fillStyle = renderColor;
            for (let x = 0; x < 64; x++) {
                var y = chipData[x] + 26;
                ctx.fillRect(x * 2, y - 2, 2, 4);
                this.newArray[x] = y - 26;
            }
        }
    }
    class CustomAlgorythmCanvas {
        constructor(canvas, _doc, _getChange) {
            this.canvas = canvas;
            this._doc = _doc;
            this._getChange = _getChange;
            this._change = null;
            this._onMouseMove = (event) => {
                var _a, _b, _c, _d;
                if (this.mouseDown) {
                    var x = (event.clientX || event.pageX) - this.canvas.getBoundingClientRect().left;
                    var y = Math.floor((event.clientY || event.pageY) - this.canvas.getBoundingClientRect().top);
                    var ctx = this.canvas.getContext("2d");
                    ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
                    var yindex = Math.ceil(y / 12);
                    var xindex = Math.ceil(x / 12);
                    yindex = (yindex / 2) - Math.floor(yindex / 2) >= 0.5 ? Math.floor(yindex / 2) : -1;
                    xindex = (xindex / 2) + 0.5 - Math.floor(xindex / 2) <= 0.5 ? Math.floor(xindex / 2) - 1 : -1;
                    yindex = yindex >= 0 && yindex <= 5 ? yindex : -1;
                    xindex = xindex >= 0 && xindex <= 5 ? xindex : -1;
                    ctx.fillRect(xindex * 24 + 12, yindex * 24, 2, 2);
                    if (this.selected == -1) {
                        if (((_b = (_a = this.drawArray) === null || _a === void 0 ? void 0 : _a[yindex]) === null || _b === void 0 ? void 0 : _b[xindex]) != undefined) {
                            this.selected = this.drawArray[yindex][xindex];
                            ctx.fillRect(xindex * 24 + 12, yindex * 24, 12, 12);
                            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                            ctx.fillText(this.drawArray[yindex][xindex] + "", xindex * 24 + 14, yindex * 24 + 10);
                            this.mouseDown = false;
                        }
                    }
                    else {
                        if (((_d = (_c = this.drawArray) === null || _c === void 0 ? void 0 : _c[yindex]) === null || _d === void 0 ? void 0 : _d[xindex]) != undefined) {
                            if (this.mode == "feedback") {
                                const newmod = this.drawArray[yindex][xindex];
                                let check = this.feedback[newmod - 1].indexOf(this.selected);
                                if (check != -1) {
                                    this.feedback[newmod - 1].splice(check, 1);
                                }
                                else {
                                    this.feedback[newmod - 1].push(this.selected);
                                }
                            }
                            else {
                                if (this.drawArray[yindex][xindex] == this.selected) {
                                    if (this.selected == this.carriers) {
                                        if (this.selected > 1) {
                                            this.carriers--;
                                        }
                                    }
                                    else if (this.selected - 1 == this.carriers) {
                                        this.carriers++;
                                    }
                                }
                                else {
                                    const newmod = this.drawArray[yindex][xindex];
                                    if (this.selected > newmod) {
                                        let check = this.newMods[newmod - 1].indexOf(this.selected);
                                        if (check != -1) {
                                            this.newMods[newmod - 1].splice(check, 1);
                                        }
                                        else {
                                            this.newMods[newmod - 1].push(this.selected);
                                        }
                                    }
                                    else {
                                        let check = this.newMods[this.selected - 1].indexOf(newmod);
                                        if (check != -1) {
                                            this.newMods[this.selected - 1].splice(check, 1);
                                        }
                                        else {
                                            this.newMods[this.selected - 1].push(newmod);
                                        }
                                    }
                                }
                            }
                            this.selected = -1;
                            this.redrawCanvas(true);
                            this.mouseDown = false;
                        }
                        else {
                            this.selected = -1;
                            this.redrawCanvas(true);
                            this.mouseDown = false;
                        }
                    }
                }
            };
            this._onMouseDown = (event) => {
                this.mouseDown = true;
                this._onMouseMove(event);
            };
            this._onMouseUp = () => {
                this.mouseDown = false;
                this._whenChange();
            };
            this._whenChange = () => {
                this._change = this._getChange(this.mode == "algorithm" ? this.newMods : this.feedback, this.carriers, this.mode);
                this._doc.record(this._change);
                this._change = null;
            };
            canvas.addEventListener("mousemove", this._onMouseMove);
            canvas.addEventListener("mousedown", this._onMouseDown);
            canvas.addEventListener("mouseup", this._onMouseUp);
            canvas.addEventListener("mouseleave", this._onMouseUp);
            this.mouseDown = false;
            this.drawArray = [[], [], [], [], [], []];
            this.lookUpArray = [[], [], [], [], [], []];
            this.carriers = 1;
            this.selected = -1;
            this.newMods = [[], [], [], [], [], []];
            this.inverseModulation = [[], [], [], [], [], []];
            this.feedback = [[], [], [], [], [], []];
            this.inverseFeedback = [[], [], [], [], [], []];
            this.mode = "algorithm";
            this.redrawCanvas();
        }
        reset() {
            this.redrawCanvas(false);
            this.selected = -1;
        }
        fillDrawArray(noReset = false) {
            if (noReset) {
                this.drawArray = [];
                this.drawArray = [[], [], [], [], [], []];
                this.inverseModulation = [[], [], [], [], [], []];
                this.lookUpArray = [[], [], [], [], [], []];
                for (let i = 0; i < this.newMods.length; i++) {
                    for (let o = 0; o < this.newMods[i].length; o++) {
                        this.inverseModulation[this.newMods[i][o] - 1].push(i + 1);
                    }
                }
                if (this.mode == "feedback") {
                    this.inverseFeedback = [[], [], [], [], [], []];
                    for (let i = 0; i < this.feedback.length; i++) {
                        for (let o = 0; o < this.feedback[i].length; o++) {
                            this.inverseFeedback[this.feedback[i][o] - 1].push(i + 1);
                        }
                    }
                }
            }
            else {
                this.drawArray = [];
                this.drawArray = [[], [], [], [], [], []];
                this.carriers = 1;
                this.newMods = [[], [], [], [], [], []];
                this.inverseModulation = [[], [], [], [], [], []];
                this.lookUpArray = [[], [], [], [], [], []];
                var oldMods = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customAlgorithm;
                this.carriers = oldMods.carrierCount;
                for (let i = 0; i < oldMods.modulatedBy.length; i++) {
                    for (let o = 0; o < oldMods.modulatedBy[i].length; o++) {
                        this.inverseModulation[oldMods.modulatedBy[i][o] - 1].push(i + 1);
                        this.newMods[i][o] = oldMods.modulatedBy[i][o];
                    }
                }
                if (this.mode == "feedback") {
                    this.feedback = [[], [], [], [], [], []];
                    this.inverseFeedback = [[], [], [], [], [], []];
                    var oldfeed = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customFeedbackType.indices;
                    for (let i = 0; i < oldfeed.length; i++) {
                        for (let o = 0; o < oldfeed[i].length; o++) {
                            this.inverseFeedback[oldfeed[i][o] - 1].push(i + 1);
                            this.feedback[i][o] = oldfeed[i][o];
                        }
                    }
                }
            }
            for (let i = 0; i < this.inverseModulation.length; i++) {
                if (i < this.carriers) {
                    this.drawArray[this.drawArray.length - 1][i] = i + 1;
                    this.lookUpArray[i] = [0, i];
                }
                else {
                    if (this.inverseModulation[i][0] != undefined) {
                        let testPos = [this.drawArray.length - (this.lookUpArray[this.inverseModulation[i][this.inverseModulation[i].length - 1] - 1][0] + 2), this.lookUpArray[this.inverseModulation[i][this.inverseModulation[i].length - 1] - 1][1]];
                        if (this.drawArray[testPos[0]][testPos[1]] != undefined) {
                            while (this.drawArray[testPos[0]][testPos[1]] != undefined && testPos[1] < 6) {
                                testPos[1]++;
                                if (this.drawArray[testPos[0]][testPos[1]] == undefined) {
                                    this.drawArray[testPos[0]][testPos[1]] = i + 1;
                                    this.lookUpArray[i] = [this.drawArray.length - (testPos[0] + 1), testPos[1]];
                                    break;
                                }
                                console.log(testPos[1]);
                            }
                        }
                        else {
                            this.drawArray[testPos[0]][testPos[1]] = i + 1;
                            this.lookUpArray[i] = [this.drawArray.length - (testPos[0] + 1), testPos[1]];
                        }
                    }
                    else {
                        let testPos = [5, 0];
                        while (this.drawArray[testPos[0]][testPos[1]] != undefined && testPos[1] < 6) {
                            testPos[1]++;
                            if (this.drawArray[testPos[0]][testPos[1]] == undefined) {
                                this.drawArray[testPos[0]][testPos[1]] = i + 1;
                                this.lookUpArray[i] = [this.drawArray.length - (testPos[0] + 1), testPos[1]];
                                break;
                            }
                        }
                    }
                }
            }
        }
        drawLines(ctx) {
            if (this.mode == "feedback") {
                for (let off = 0; off < 6; off++) {
                    ctx.strokeStyle = ColorConfig.getArbitaryChannelColor("pitch", off).primaryChannel;
                    const set = off * 2 + 0.5;
                    for (let i = 0; i < this.inverseFeedback[off].length; i++) {
                        let tar = this.inverseFeedback[off][i] - 1;
                        let srtpos = this.lookUpArray[off];
                        let tarpos = this.lookUpArray[tar];
                        ctx.beginPath();
                        ctx.moveTo(srtpos[1] * 24 + 12 + set, (6 - srtpos[0] - 1) * 24 + 12);
                        ctx.lineTo(srtpos[1] * 24 + 12 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                        if (tarpos[1] != srtpos[1]) {
                            let side = 0;
                            if (tarpos[0] >= srtpos[0]) {
                                side = 24;
                            }
                            ctx.lineTo(srtpos[1] * 24 + side + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                            if ((tarpos[1] == (srtpos[1] - 1)) && (tarpos[0] <= (srtpos[0] - 1))) ;
                            else {
                                if (tarpos[0] >= srtpos[0]) {
                                    ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                                    ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - tarpos[0] - 1) * 24 + 12 + set);
                                }
                                else {
                                    ctx.lineTo(srtpos[1] * 24 + set, (6 - tarpos[0] - 1) * 24 + 12 + set);
                                    ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - tarpos[0] - 1) * 24 + 12 + set);
                                }
                            }
                            ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                            ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                            ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                        }
                        else {
                            if (srtpos[0] - tarpos[0] == 1) {
                                ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                            }
                            else {
                                if (tarpos[0] >= srtpos[0]) {
                                    ctx.lineTo(srtpos[1] * 24 + 24 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                                    ctx.lineTo(srtpos[1] * 24 + 24 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                                    ctx.lineTo(tarpos[1] * 24 + set + 12, (6 - tarpos[0] - 1) * 24 + set - 12);
                                    ctx.lineTo(tarpos[1] * 24 + set + 12, (6 - tarpos[0] - 1) * 24);
                                }
                                else {
                                    ctx.lineTo(srtpos[1] * 24 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                                    ctx.lineTo(srtpos[1] * 24 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                                    ctx.lineTo(tarpos[1] * 24 + 12 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                                    ctx.lineTo(tarpos[1] * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                                }
                            }
                        }
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                }
                return;
            }
            for (let off = 0; off < 6; off++) {
                ctx.strokeStyle = ColorConfig.getArbitaryChannelColor("pitch", off).primaryChannel;
                const set = off * 2 - 1 + 0.5;
                for (let i = 0; i < this.inverseModulation[off].length; i++) {
                    let tar = this.inverseModulation[off][i] - 1;
                    let srtpos = this.lookUpArray[off];
                    let tarpos = this.lookUpArray[tar];
                    ctx.beginPath();
                    ctx.moveTo(srtpos[1] * 24 + 12 + set, (6 - srtpos[0] - 1) * 24 + 12);
                    ctx.lineTo(srtpos[1] * 24 + 12 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                    if ((tarpos[1]) != srtpos[1]) {
                        ctx.lineTo(srtpos[1] * 24 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                        if ((tarpos[1] == (srtpos[1] - 1)) && (tarpos[0] <= (srtpos[0] - 1))) ;
                        else {
                            ctx.lineTo(srtpos[1] * 24 + set, (6 - tarpos[0] - 1) * 24 + 12 + set);
                            ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - tarpos[0] - 1) * 24 + 12 + set);
                        }
                        ctx.lineTo((tarpos[1] + 1) * 24 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                        ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                        ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                    }
                    else {
                        if (Math.abs(tarpos[0] - srtpos[0]) == 1) {
                            ctx.lineTo((tarpos[1]) * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                        }
                        else {
                            ctx.lineTo(srtpos[1] * 24 + set, (6 - srtpos[0] - 1) * 24 + 12 + set);
                            ctx.lineTo(srtpos[1] * 24 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                            ctx.lineTo(srtpos[1] * 24 + 12 + set, (6 - tarpos[0] - 1) * 24 + set - 12);
                            ctx.lineTo(srtpos[1] * 24 + 12 + set, (6 - tarpos[0] - 1) * 24);
                        }
                    }
                    ctx.lineWidth = 1;
                    ctx.stroke();
                }
            }
        }
        redrawCanvas(noReset = false) {
            this.fillDrawArray(noReset);
            var ctx = this.canvas.getContext("2d");
            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
            ctx.fillRect(0, 0, 144, 144);
            for (let x = 0; x < 6; x++) {
                for (let y = 0; y < 6; y++) {
                    ctx.fillStyle = ColorConfig.getComputed("--track-editor-bg-pitch-dim");
                    ctx.fillRect(x * 24 + 12, ((y) * 24), 12, 12);
                    ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                    ctx.fillRect(x * 24 + 13, ((y) * 24) + 1, 10, 10);
                    if (this.drawArray[y][x] != undefined) {
                        if (this.drawArray[y][x] <= this.carriers) {
                            ctx.fillStyle = ColorConfig.getComputed("--primary-text");
                            ctx.fillRect(x * 24 + 12, ((y) * 24), 12, 12);
                            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                            ctx.fillRect(x * 24 + 13, ((y) * 24) + 1, 10, 10);
                            ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
                            ctx.fillText(this.drawArray[y][x] + "", x * 24 + 14, y * 24 + 10);
                        }
                        else {
                            ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;
                            ctx.fillRect(x * 24 + 12, (y * 24), 12, 12);
                            ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                            ctx.fillRect(x * 24 + 13, ((y) * 24) + 1, 10, 10);
                            ctx.fillStyle = ColorConfig.getComputed("--primary-text");
                            ctx.fillText(this.drawArray[y][x] + "", x * 24 + 14, y * 24 + 10);
                        }
                    }
                }
            }
            this.drawLines(ctx);
        }
    }
    class SongEditor {
        constructor(_doc) {
            this._doc = _doc;
            this.prompt = null;
            this._menuMode = 1;
            this._instSettingMode = 1;
            this._mobilePatternButton = button({ class: "mobilePatternButton", type: "button", style: "display:none; width: 33vw; height: 75%; left: 0; position: absolute; bottom: 0px;" });
            this._mobileTrackButton = button({ class: "mobileTrackButton", type: "button", style: "display:none; width: 34vw; height: 60%; right: 33vw; position: absolute; bottom: 0px;" });
            this._mobileSettingsButton = button({ class: "mobileSettingsButton", type: "button", style: "display:none; width: 33vw; height: 60%; right: 0; position: absolute; bottom: 0px;" });
            this._mobileMenu = div({ class: "mobileMenu", style: "position: fixed; bottom: 0px; height: 20vh; width: 100vw; display:none; background: var(--editor-background); z-index: 5;" });
            this._mobileEditMenuIcon = div({ class: "mobileEditMenuIcon" });
            this._mobileTrackMenuIcon = div({ class: "mobileTrackMenuIcon" });
            this._mobileSettingsMenuIcon = div({ class: "mobileSettingsMenuIcon" });
            this._keyboardLayout = new KeyboardLayout(this._doc);
            this._patternEditorPrev = new PatternEditor(this._doc, false, -1);
            this._patternEditor = new PatternEditor(this._doc, true, 0);
            this._patternEditorNext = new PatternEditor(this._doc, false, 1);
            this._trackEditor = new TrackEditor(this._doc, this);
            this._muteEditor = new MuteEditor(this._doc, this);
            this._loopEditor = new LoopEditor(this._doc, this._trackEditor);
            this._piano = new Piano(this._doc);
            this._octaveScrollBar = new OctaveScrollBar(this._doc, this._piano);
            this._playButton = button({ class: "playButton", type: "button", title: "Play (Space)" }, span("Play"));
            this._pauseButton = button({ class: "pauseButton", style: "display: none;", type: "button", title: "Pause (Space)" }, "Pause");
            this._recordButton = button({ class: "recordButton", style: "display: none;", type: "button", title: "Record (Ctrl+Space)" }, span("Record"));
            this._stopButton = button({ class: "stopButton", style: "display: none;", type: "button", title: "Stop Recording (Space)" }, "Stop Recording");
            this._prevBarButton = button({ class: "prevBarButton", type: "button", title: "Previous Bar (left bracket)" });
            this._nextBarButton = button({ class: "nextBarButton", type: "button", title: "Next Bar (right bracket)" });
            this._mobilePlayButton = button({ class: "mobilePlayButton", style: "width: 33%;", type: "button", title: "Play" });
            this._mobilePauseButton = button({ class: "mobilePauseButton", style: "display: none; width: 33%;", type: "button", title: "Pause", });
            this._mobilePrevBarButton = button({ class: "mobilePrevBarButton", type: "button", title: "Previous Bar", style: "width:34%" });
            this._mobileNextBarButton = button({ class: "mobileNextBarButton", type: "button", title: "Next Bar", style: "width:33%" });
            this._volumeSlider = new Slider(input({ title: "main volume", style: "width: 5em; flex-grow: 1; margin: 0;", type: "range", min: "0", max: "75", value: "50", step: "1" }), this._doc, null, false);
            this._outVolumeBarBg = SVG.rect({ "pointer-events": "none", width: "90%", height: "50%", x: "5%", y: "25%", fill: ColorConfig.uiWidgetBackground });
            this._outVolumeBar = SVG.rect({ "pointer-events": "none", height: "50%", width: "0%", x: "5%", y: "25%", fill: "url('#volumeGrad2')" });
            this._outVolumeCap = SVG.rect({ "pointer-events": "none", width: "2px", height: "50%", x: "5%", y: "25%", fill: ColorConfig.uiWidgetFocus });
            this._stop1 = SVG.stop({ "stop-color": "lime", offset: "60%" });
            this._stop2 = SVG.stop({ "stop-color": "orange", offset: "90%" });
            this._stop3 = SVG.stop({ "stop-color": "red", offset: "100%" });
            this._gradient = SVG.linearGradient({ id: "volumeGrad2", gradientUnits: "userSpaceOnUse" }, this._stop1, this._stop2, this._stop3);
            this._defs = SVG.defs({}, this._gradient);
            this._volumeBarContainer = SVG.svg({ style: `touch-action: none; overflow: visible; margin: auto; max-width: 20vw;`, width: "160px", height: "100%", preserveAspectRatio: "none", viewBox: "0 0 160 12" }, this._defs, this._outVolumeBarBg, this._outVolumeBar, this._outVolumeCap);
            this._volumeBarBox = div({ class: "playback-volume-bar", style: "height: 12px; align-self: center;" }, this._volumeBarContainer);
            this._fileMenu = select({ style: "width: 100%;" }, option({ selected: true, disabled: true, hidden: false }, "File"), option({ value: "new" }, "+ New Blank Song"), option({ value: "import" }, "↑ > Import/Export Song (" + EditorConfig.ctrlSymbol + "S)"), option({ value: "copyUrl" }, "⎘ Copy Song URL"), option({ value: "shareUrl" }, "⤳ Share Song URL"), option({ value: "shortenUrl" }, "… Shorten Song URL"), option({ value: "configureShortener" }, "🛠 > Customize Url Shortener"), option({ value: "viewPlayer" }, "▶ View in Song Player"), option({ value: "copyEmbed" }, "⎘ Copy HTML Embed Code"), option({ value: "songRecovery" }, "⚠ > Recover Recent Song"));
            this._editMenu = select({ style: "width: 100%;" }, option({ selected: true, disabled: true, hidden: false }, "Edit"), option({ value: "undo" }, "Undo (Z)"), option({ value: "redo" }, "Redo (Y)"), option({ value: "copy" }, "Copy Pattern (C)"), option({ value: "pasteNotes" }, "Paste Pattern Notes (V)"), option({ value: "pasteNumbers" }, "Paste Pattern Numbers (" + EditorConfig.ctrlSymbol + "⇧V)"), option({ value: "insertBars" }, "Insert Bar (⏎)"), option({ value: "deleteBars" }, "Delete Selected Bars (⌫)"), option({ value: "insertChannel" }, "Insert Channel (" + EditorConfig.ctrlSymbol + "⏎)"), option({ value: "deleteChannel" }, "Delete Selected Channels (" + EditorConfig.ctrlSymbol + "⌫)"), option({ value: "selectChannel" }, "Select Channel (⇧A)"), option({ value: "selectAll" }, "Select All (A)"), option({ value: "duplicatePatterns" }, "Duplicate Reused Patterns (D)"), option({ value: "transposeUp" }, "Move Notes Up (+ or ⇧+)"), option({ value: "transposeDown" }, "Move Notes Down (- or ⇧-)"), option({ value: "moveNotesSideways" }, "> Move All Notes Sideways (W)"), option({ value: "generateEuclideanRhythm" }, "> Generate Euclidean Rhythm (E)"), option({ value: "beatsPerBar" }, "> Change Beats Per Bar (B)"), option({ value: "barCount" }, "> Change Song Length (L)"), option({ value: "channelSettings" }, "> Channel Settings (Q)"), option({ value: "limiterSettings" }, "> Limiter Settings (⇧L)"), option({ value: "addExternal" }, "> Add Custom Samples (⇧Q)"), option({ value: "songTheme" }, "> Set Theme For Song"), option({ value: "presetsPrompt" }, "> Select Presets"));
            this._optionsMenu = select({ style: "width: 100%;" }, option({ selected: true, disabled: true, hidden: false }, "Preferences"), optgroup({ label: "Technical" }, option({ value: "autoPlay" }, "Auto Play on Load"), option({ value: "autoFollow" }, "Auto Follow Playhead"), option({ value: "enableNotePreview" }, "Hear Added Notes"), option({ value: "notesOutsideScale" }, "Place Notes Out of Scale"), option({ value: "setDefaultScale" }, "Set Current Scale as Default"), option({ value: "alwaysFineNoteVol" }, "Always Fine Note Volume"), option({ value: "enableChannelMuting" }, "Enable Channel Muting"), option({ value: "instrumentCopyPaste" }, "Enable Copy/Paste Buttons"), option({ value: "instrumentImportExport" }, "Enable Import/Export Buttons"), option({ value: "displayBrowserUrl" }, "Enable Song Data in URL"), option({ value: "closePromptByClickoff" }, "Close prompts on click off"), option({ value: "oldMobileLayout" }, "Use the Old mobile layout (Reload)"), option({ value: "instrumentSettingsSimplifier" }, "Use Mobile Instrument Settings"), option({ value: "recordingSetup" }, "Note Recording...")), optgroup({ label: "Appearance" }, option({ value: "showThird" }, 'Highlight "Third" Note (SandBox)'), option({ value: "showFifth" }, 'Highlight "Fifth" Note'), option({ value: "advancedColorScheme" }, "Advanced Color Scheme (ModBox)"), option({ value: "notesFlashWhenPlayed" }, "Notes Flash When Played (DB2)"), option({ value: "showChannels" }, "Show All Channels"), option({ value: "showScrollBar" }, "Show Octave Scroll Bar"), option({ value: "showLetters" }, "Show Piano Keys"), option({ value: "displayVolumeBar" }, "Show Playback Volume"), option({ value: "showOscilloscope" }, "Show Oscilloscope"), option({ value: "showSampleLoadingStatus" }, "Show Sample Loading Status"), option({ value: "showDescription" }, "Show Description"), option({ value: "frostedGlassBackground" }, "Use Frosted Glass Prompt Backdrops"), option({ value: "displayShortcutButtons" }, "Display Mobile Shortcut Buttons"), option({ value: "oldModNotes" }, 'Use Old Mod Notes'), option({ value: "selectionCounter" }, 'Selection Counter'), option({ value: "layout" }, "> Set Layout"), option({ value: "colorTheme" }, "> Set Theme"), option({ value: "customTheme" }, "> Custom Theme")));
            this._scaleSelect = buildOptions(select(), Config.scales.map(scale => scale.name));
            this._keySelect = buildOptions(select(), Config.keys.map(key => key.name).reverse());
            this._octaveStepper = input({ style: "width: 59.5%;", type: "number", min: Config.octaveMin, max: Config.octaveMax, value: "0" });
            this._tempoSlider = new Slider(input({ style: "margin: 0; vertical-align: middle;", type: "range", min: "1", max: "500", value: "160", step: "1" }), this._doc, (oldValue, newValue) => new ChangeTempo(this._doc, oldValue, newValue), false);
            this._tempoStepper = input({ style: "width: 4em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", type: "number", step: "1" });
            this._chorusSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.chorusRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeChorus(this._doc, oldValue, newValue), false);
            this._chorusRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("chorus") }, "Chorus:"), this._chorusSlider.container);
            this._ringModWaveSelect = buildOptions(select({}), Config.operatorWaves.map(wave => wave.name));
            this._ringModSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.ringModRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeRingMod(this._doc, oldValue, newValue), false);
            this._ringModRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("ringMod") }, "Ring Mod:"), this._ringModSlider.container);
            this._ringModHzSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.ringModHzRange - 1, value: (Config.ringModHzRange - (Config.ringModHzRange / 2)), step: "1" }), this._doc, (oldValue, newValue) => new ChangeRingModHz(this._doc, oldValue, newValue), true);
            this._ringModHzNum = div({ style: "font-size: 80%; ", id: "ringModHzNum" });
            this._ringModHzSliderRow = div({ class: "selectRow", style: "width:100%;" }, div({ style: "display:flex; flex-direction:column; align-items:center;" }, span({ class: "tip", style: "font-size: smaller;", onclick: () => this._openPrompt("RingModHz") }, "Hertz: "), div({ style: `color: ${ColorConfig.secondaryText}; ` }, this._ringModHzNum)), this._ringModHzSlider.container);
            this._ringModPulsewidthSlider = new Slider(input({ style: "margin-left: 10px; width: 85%;", type: "range", min: "0", max: Config.pwmOperatorWaves.length - 1, value: "0", step: "1", title: "Pulse Width" }), this._doc, (oldValue, newValue) => new ChangeRingModPulseWidth(this._doc, oldValue, newValue), true);
            this._ringModWaveText = span({ class: "tip", onclick: () => this._openPrompt("chipWave") }, "Wave: ");
            this._ringModWaveSelectRow = div({ class: "selectRow", style: "width: 100%;" }, this._ringModWaveText, this._ringModPulsewidthSlider.container, div({ class: "selectContainer", style: "width:40%;" }, this._ringModWaveSelect));
            this._ringModContainerRow = div({ class: "selectRow", style: "display:flex; flex-direction:column; height: 96px;" }, this._ringModRow, this._ringModHzSliderRow, this._ringModWaveSelectRow);
            this._reverbSlider = new Slider(input({ style: "margin: 0; position: sticky,", type: "range", min: "0", max: Config.reverbRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeReverb(this._doc, oldValue, newValue), false);
            this._reverbRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("reverb") }, "Reverb:"), this._reverbSlider.container);
            this._echoSustainSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.echoSustainRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeEchoSustain(this._doc, oldValue, newValue), false);
            this._echoSustainRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("echoSustain") }, "Echo:"), this._echoSustainSlider.container);
            this._echoDelaySlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.echoDelayRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeEchoDelay(this._doc, oldValue, newValue), false);
            this._echoDelayRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("echoDelay") }, "Echo Delay:"), this._echoDelaySlider.container);
            this._rhythmSelect = buildOptions(select(), Config.rhythms.map(rhythm => rhythm.name));
            this._phaserMixSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.phaserMixRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePhaserMix(this._doc, oldValue, newValue), false);
            this._phaserMixRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("phaserMix") }, span("Phaser:")), this._phaserMixSlider.container);
            this._phaserFreqSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.phaserFreqRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePhaserFreq(this._doc, oldValue, newValue), false);
            this._phaserFreqRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("phaserFreq") }, span(" Freq:")), this._phaserFreqSlider.container);
            this._phaserFeedbackSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.phaserFeedbackRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePhaserFeedback(this._doc, oldValue, newValue), false);
            this._phaserFeedbackRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("phaserFeedback") }, span(" Feedback:")), this._phaserFeedbackSlider.container);
            this._phaserStagesSlider = new Slider(input({ style: "margin: 0;", type: "range", min: Config.phaserMinStages, max: Config.phaserMaxStages, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePhaserStages(this._doc, oldValue, newValue), false);
            this._phaserStagesRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("phaserStages") }, span(" Stages:")), this._phaserStagesSlider.container);
            this._pitchedPresetSelect = buildPresetOptions(false, "pitchPresetSelect");
            this._drumPresetSelect = buildPresetOptions(true, "drumPresetSelect");
            this._algorithmSelect = buildOptions(select(), Config.algorithms.map(algorithm => algorithm.name));
            this._algorithmSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("algorithm") }, "Algorithm: "), div({ class: "selectContainer" }, this._algorithmSelect));
            this._instrumentButtons = [];
            this._instrumentAddButton = button({ type: "button", class: "add-instrument last-button" });
            this._instrumentRemoveButton = button({ type: "button", class: "remove-instrument" });
            this._instrumentsButtonBar = div({ class: "instrument-bar" }, this._instrumentRemoveButton, this._instrumentAddButton);
            this._instrumentsButtonRow = div({ class: "selectRow", style: "display: none;" }, span({ class: "tip", onclick: () => this._openPrompt("instrumentIndex") }, "Instrument:"), this._instrumentsButtonBar);
            this._instrumentVolumeSlider = new Slider(input({ style: "margin: 0; position: sticky;", type: "range", min: Math.floor(-Config.volumeRange / 2), max: Math.floor(Config.volumeRange / 2), value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeVolume(this._doc, oldValue, newValue), true);
            this._instrumentVolumeSliderInputBox = input({ style: "width: 4em; font-size: 80%", id: "volumeSliderInputBox", type: "number", step: "1", min: Math.floor(-Config.volumeRange / 2), max: Math.floor(Config.volumeRange / 2), value: "0" });
            this._instrumentVolumeSliderTip = div({ class: "selectRow", style: "height: 1em" }, span({ class: "tip", style: "font-size: smaller;", onclick: () => this._openPrompt("instrumentVolume") }, "Volume: "));
            this._instrumentVolumeSliderRow = div({ class: "selectRow" }, div({}, div({ style: `color: ${ColorConfig.secondaryText};` }, span({ class: "tip" }, this._instrumentVolumeSliderTip)), div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._instrumentVolumeSliderInputBox)), this._instrumentVolumeSlider.container);
            this._panSlider = new Slider(input({ style: "margin: 0; position: sticky;", type: "range", min: "0", max: Config.panMax, value: Config.panCenter, step: "1" }), this._doc, (oldValue, newValue) => new ChangePan(this._doc, oldValue, newValue), true);
            this._panDropdown = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(1) }, "▼");
            this._panSliderInputBox = input({ style: "width: 4em; font-size: 80%; ", id: "panSliderInputBox", type: "number", step: "1", min: "0", max: "100", value: "0" });
            this._panSliderRow = div({ class: "selectRow" }, div({}, span({ class: "tip", tabindex: "0", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("pan") }, "Pan: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._panSliderInputBox)), this._panDropdown, this._panSlider.container);
            this._panDelaySlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.modulators.dictionary["pan delay"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePanDelay(this._doc, oldValue, newValue), false);
            this._panDelayRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("panDelay") }, "‣ Delay:"), this._panDelaySlider.container);
            this._panDropdownGroup = div({ class: "editor-controls", style: "display: none;" }, this._panDelayRow);
            this._chipWaveSelect = buildOptions(select(), Config.chipWaves.map(wave => wave.name));
            this._chipNoiseSelect = buildOptions(select(), Config.chipNoises.map(wave => wave.name));
            this._useChipWaveAdvancedLoopControlsBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: 0.4em; margin-right: 4em;" });
            this._chipWaveLoopModeSelect = buildOptions(select(), ["Loop", "Ping-Pong", "Play Once", "Play Loop Once"]);
            this._chipWaveLoopStartStepper = input({ type: "number", min: "0", step: "1", value: "0", style: "width: 100%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;" });
            this._chipWaveLoopEndStepper = input({ type: "number", min: "0", step: "1", value: "0", style: "width: 100%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;" });
            this._setChipWaveLoopEndToEndButton = button({ type: "button", style: "width: 1.5em; height: 1.5em; padding: 0; margin-left: 0.5em;" }, SVG.svg({ width: "16", height: "16", viewBox: "-13 -14 26 26", "pointer-events": "none", style: "width: 100%; height: 100%;" }, SVG.rect({ x: "4", y: "-6", width: "2", height: "12", fill: ColorConfig.primaryText }), SVG.path({ d: "M -6 -6 L -6 6 L 3 0 z", fill: ColorConfig.primaryText })));
            this._chipWaveStartOffsetStepper = input({ type: "number", min: "0", step: "1", value: "0", style: "width: 100%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;" });
            this._chipWavePlayBackwardsBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-left: 0.4em; margin-right: 4em;" });
            this._chipWaveSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("chipWave") }, "Wave: "), div({ class: "selectContainer" }, this._chipWaveSelect));
            this._chipNoiseSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("chipNoise") }, "Noise: "), div({ class: "selectContainer" }, this._chipNoiseSelect));
            this._visualLoopControlsButton = button({ style: "margin-left: 0em; padding-left: 0.2em; height: 1.5em; max-width: 12px;", onclick: () => this._openPrompt("visualLoopControls") }, "+");
            this._useChipWaveAdvancedLoopControlsRow = div({ class: "selectRow" }, span({ class: "tip", style: "flex-shrink: 0;", onclick: () => this._openPrompt("loopControls") }, "Loop Controls: "), this._useChipWaveAdvancedLoopControlsBox);
            this._chipWaveLoopModeSelectRow = div({ class: "selectRow" }, span({ class: "tip", style: "font-size: x-small;", onclick: () => this._openPrompt("loopMode") }, "Loop Mode: "), div({ class: "selectContainer" }, this._chipWaveLoopModeSelect));
            this._chipWaveLoopStartRow = div({ class: "selectRow" }, span({ class: "tip", style: "font-size: x-small;", onclick: () => this._openPrompt("loopStart") }, "Loop Start: "), this._visualLoopControlsButton, span({ style: "display: flex;" }, this._chipWaveLoopStartStepper));
            this._chipWaveLoopEndRow = div({ class: "selectRow" }, span({ class: "tip", style: "font-size: x-small;", onclick: () => this._openPrompt("loopEnd") }, "Loop End: "), span({ style: "display: flex;" }, this._chipWaveLoopEndStepper, this._setChipWaveLoopEndToEndButton));
            this._chipWaveStartOffsetRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("offset") }, "Offset: "), span({ style: "display: flex;" }, this._chipWaveStartOffsetStepper));
            this._chipWavePlayBackwardsRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("backwards") }, "Backwards: "), this._chipWavePlayBackwardsBox);
            this._fadeInOutEditor = new FadeInOutEditor(this._doc);
            this._fadeInOutRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("fadeInOut") }, "Fade:"), this._fadeInOutEditor.container);
            this._transitionSelect = buildOptions(select(), Config.transitions.map(transition => transition.name));
            this._transitionDropdown = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(3) }, "▼");
            this._transitionRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("transition") }, "Transition:"), this._transitionDropdown, div({ class: "selectContainer", style: "width: 52.5%;" }, this._transitionSelect));
            this._clicklessTransitionBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-right: 4em;" });
            this._clicklessTransitionRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("clicklessTransition") }, "‣ Clickless:"), this._clicklessTransitionBox);
            this._transitionDropdownGroup = div({ class: "editor-controls", style: "display: none;" }, this._clicklessTransitionRow);
            this._effectsSelect = select(option({ selected: true, disabled: true, hidden: false }));
            this._eqFilterSimpleButton = button({ style: "font-size: x-small; width: 50%; height: 40%", class: "no-underline", onclick: () => this._switchEQFilterType(true) }, "simple");
            this._eqFilterAdvancedButton = button({ style: "font-size: x-small; width: 50%; height: 40%", class: "last-button no-underline", onclick: () => this._switchEQFilterType(false) }, "advanced");
            this._eqFilterTypeRow = div({ class: "selectRow", style: "padding-top: 4px; margin-bottom: 0px;" }, span({ style: "font-size: x-small;", class: "tip", onclick: () => this._openPrompt("filterType") }, "EQ Filt.Type:"), div({ class: "instrument-bar" }, this._eqFilterSimpleButton, this._eqFilterAdvancedButton));
            this._eqFilterEditor = new FilterEditor(this._doc);
            this._eqFilterZoom = button({ style: "margin-left:0em; padding-left:0.2em; height:1.5em; max-width: 12px;", onclick: () => this._openPrompt("customEQFilterSettings") }, "+");
            this._eqFilterRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("eqFilter") }, "EQ Filt:"), this._eqFilterZoom, this._eqFilterEditor.container);
            this._eqFilterSimpleCutSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.filterSimpleCutRange - 1, value: "6", step: "1" }), this._doc, (oldValue, newValue) => new ChangeEQFilterSimpleCut(this._doc, oldValue, newValue), false);
            this._eqFilterSimpleCutRow = div({ class: "selectRow", title: "Low-pass Filter Cutoff Frequency" }, span({ class: "tip", onclick: () => this._openPrompt("filterCutoff") }, "Filter Cut:"), this._eqFilterSimpleCutSlider.container);
            this._eqFilterSimplePeakSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.filterSimplePeakRange - 1, value: "6", step: "1" }), this._doc, (oldValue, newValue) => new ChangeEQFilterSimplePeak(this._doc, oldValue, newValue), false);
            this._eqFilterSimplePeakRow = div({ class: "selectRow", title: "Low-pass Filter Peak Resonance" }, span({ class: "tip", onclick: () => this._openPrompt("filterResonance") }, "Filter Peak:"), this._eqFilterSimplePeakSlider.container);
            this._noteFilterSimpleButton = button({ style: "font-size: x-small; width: 50%; height: 40%", class: "no-underline", onclick: () => this._switchNoteFilterType(true) }, "simple");
            this._noteFilterAdvancedButton = button({ style: "font-size: x-small; width: 50%; height: 40%", class: "last-button no-underline", onclick: () => this._switchNoteFilterType(false) }, "advanced");
            this._noteFilterTypeRow = div({ class: "selectRow", style: "padding-top: 4px; margin-bottom: 0px;" }, span({ style: "font-size: x-small;", class: "tip", onclick: () => this._openPrompt("filterType") }, "Note Filt.Type:"), div({ class: "instrument-bar" }, this._noteFilterSimpleButton, this._noteFilterAdvancedButton));
            this._noteFilterEditor = new FilterEditor(this._doc, true);
            this._noteFilterZoom = button({ style: "margin-left:0em; padding-left:0.2em; height:1.5em; max-width: 12px;", onclick: () => this._openPrompt("customNoteFilterSettings") }, "+");
            this._noteFilterRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("noteFilter") }, "Note Filt:"), this._noteFilterZoom, this._noteFilterEditor.container);
            this._noteFilterSimpleCutSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.filterSimpleCutRange - 1, value: "6", step: "1" }), this._doc, (oldValue, newValue) => new ChangeNoteFilterSimpleCut(this._doc, oldValue, newValue), false);
            this._noteFilterSimpleCutRow = div({ class: "selectRow", title: "Low-pass Filter Cutoff Frequency" }, span({ class: "tip", onclick: () => this._openPrompt("filterCutoff") }, "Filter Cut:"), this._noteFilterSimpleCutSlider.container);
            this._noteFilterSimplePeakSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.filterSimplePeakRange - 1, value: "6", step: "1" }), this._doc, (oldValue, newValue) => new ChangeNoteFilterSimplePeak(this._doc, oldValue, newValue), false);
            this._noteFilterSimplePeakRow = div({ class: "selectRow", title: "Low-pass Filter Peak Resonance" }, span({ class: "tip", onclick: () => this._openPrompt("filterResonance") }, "Filter Peak:"), this._noteFilterSimplePeakSlider.container);
            this._supersawDynamismSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.supersawDynamismMax, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeSupersawDynamism(this._doc, oldValue, newValue), false);
            this._supersawDynamismRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("supersawDynamism") }, "Dynamism:"), this._supersawDynamismSlider.container);
            this._supersawSpreadSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.supersawSpreadMax, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeSupersawSpread(this._doc, oldValue, newValue), false);
            this._supersawSpreadRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("supersawSpread") }, "Spread:"), this._supersawSpreadSlider.container);
            this._supersawShapeSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.supersawShapeMax, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeSupersawShape(this._doc, oldValue, newValue), false);
            this._supersawShapeRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("supersawShape"), style: "overflow: clip;" }, "Saw↔Pulse:"), this._supersawShapeSlider.container);
            this._pulseWidthSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "1", max: Config.pulseWidthRange, value: "1", step: "1" }), this._doc, (oldValue, newValue) => new ChangePulseWidth(this._doc, oldValue, newValue), false);
            this._pulseWidthDropdown = button({ style: "margin-left:53px; position: absolute; margin-top: 15px; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(5) }, "▼");
            this._pwmSliderInputBox = input({ style: "width: 4em; font-size: 80%;", id: "pwmSliderInputBox", type: "number", step: "1", min: "1", max: Config.pulseWidthRange, value: "1" });
            this._pulseWidthRow = div({ class: "selectRow" }, div({}, span({ class: "tip", tabindex: "0", style: "height:1em; font-size: smaller; white-space: nowrap;", onclick: () => this._openPrompt("pulseWidth") }, "Pulse", div, "Width:"), div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._pwmSliderInputBox)), this._pulseWidthDropdown, this._pulseWidthSlider.container);
            this._decimalOffsetSlider = new Slider(input({ style: "margin: 0; transform: scaleX(-1);", type: "range", min: "0", max: "99", value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeDecimalOffset(this._doc, oldValue, 99 - newValue), false);
            this._decimalOffsetRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:10px;", onclick: () => this._openPrompt("decimalOffset") }, "‣ Offset:"), this._decimalOffsetSlider.container);
            this._pulseWidthDropdownGroup = div({ class: "editor-controls", style: "display: none;" }, this._decimalOffsetRow);
            this._pitchShiftSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.pitchShiftRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangePitchShift(this._doc, oldValue, newValue), true);
            this._pitchShiftTonicMarkers = [div({ class: "pitchShiftMarker", style: { color: ColorConfig.tonic } }), div({ class: "pitchShiftMarker", style: { color: ColorConfig.tonic, left: "50%" } }), div({ class: "pitchShiftMarker", style: { color: ColorConfig.tonic, left: "100%" } })];
            this._pitchShiftFifthMarkers = [div({ class: "pitchShiftMarker", style: { color: ColorConfig.fifthNote, left: (100 * 7 / 24) + "%" } }), div({ class: "pitchShiftMarker", style: { color: ColorConfig.fifthNote, left: (100 * 19 / 24) + "%" } })];
            this._pitchShiftMarkerContainer = div({ style: "display: flex; position: relative;" }, this._pitchShiftSlider.container, div({ class: "pitchShiftMarkerContainer" }, this._pitchShiftTonicMarkers, this._pitchShiftFifthMarkers));
            this._pitchShiftRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("pitchShift") }, "Pitch Shift:"), this._pitchShiftMarkerContainer);
            this._detuneSlider = new Slider(input({ style: "margin: 0;", type: "range", min: Config.detuneMin - Config.detuneCenter, max: Config.detuneMax - Config.detuneCenter, value: 0, step: "4" }), this._doc, (oldValue, newValue) => new ChangeDetune(this._doc, oldValue, newValue), true);
            this._detuneSliderInputBox = input({ style: "width: 4em; font-size: 80%; ", id: "detuneSliderInputBox", type: "number", step: "1", min: Config.detuneMin - Config.detuneCenter, max: Config.detuneMax - Config.detuneCenter, value: 0 });
            this._detuneSliderRow = div({ class: "selectRow" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("detune") }, "Detune: "), div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._detuneSliderInputBox)), this._detuneSlider.container);
            this._distortionSlider = new Slider(input({ style: "margin: 0; position: sticky;", type: "range", min: "0", max: Config.distortionRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeDistortion(this._doc, oldValue, newValue), false);
            this._distortionRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("distortion") }, "Distortion:"), this._distortionSlider.container);
            this._aliasingBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-right: 4em;" });
            this._aliasingRow = div({ class: "selectRow" }, span({ class: "tip", style: "margin-left:10px;", onclick: () => this._openPrompt("aliases") }, "Aliasing:"), this._aliasingBox);
            this._bitcrusherQuantizationSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.bitcrusherQuantizationRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeBitcrusherQuantization(this._doc, oldValue, newValue), false);
            this._bitcrusherQuantizationRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("bitcrusherQuantization") }, "Bit Crush:"), this._bitcrusherQuantizationSlider.container);
            this._bitcrusherFreqSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.bitcrusherFreqRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeBitcrusherFreq(this._doc, oldValue, newValue), false);
            this._bitcrusherFreqRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("bitcrusherFreq") }, "Freq Crush:"), this._bitcrusherFreqSlider.container);
            this._stringSustainSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.stringSustainRange - 1, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeStringSustain(this._doc, oldValue, newValue), false);
            this._stringSustainLabel = span({ class: "tip", onclick: () => this._openPrompt("stringSustain") }, "Sustain:");
            this._stringSustainRow = div({ class: "selectRow" }, this._stringSustainLabel, this._stringSustainSlider.container);
            this._unisonDropdown = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(6) }, "▼");
            this._unisonSelect = buildOptions(select(), Config.unisons.map(unison => unison.name));
            this._unisonSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("unison") }, "Unison:"), this._unisonDropdown, div({ class: "selectContainer", style: "width: 61.5%;" }, this._unisonSelect));
            this._unisonVoicesInputBox = input({ style: "width: 150%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", id: "unisonVoicesInputBox", type: "number", step: "1", min: Config.unisonVoicesMin, max: Config.unisonVoicesMax, value: 1 });
            this._unisonVoicesRow = div({ class: "selectRow dropFader" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("unisonVoices") }, "‣ Voices: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._unisonVoicesInputBox)));
            this._unisonSpreadInputBox = input({ style: "width: 150%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", id: "unisonSpreadInputBox", type: "number", step: "0.001", min: Config.unisonSpreadMin, max: Config.unisonSpreadMax, value: 0.0 });
            this._unisonSpreadRow = div({ class: "selectRow dropFader" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("unisonSpread") }, "‣ Spread: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._unisonSpreadInputBox)));
            this._unisonOffsetInputBox = input({ style: "width: 150%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", id: "unisonOffsetInputBox", type: "number", step: "0.001", min: Config.unisonOffsetMin, max: Config.unisonOffsetMax, value: 0.0 });
            this._unisonOffsetRow = div({ class: "selectRow dropFader" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("unisonOffset") }, "‣ Offset: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._unisonOffsetInputBox)));
            this._unisonExpressionInputBox = input({ style: "width: 150%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", id: "unisonExpressionInputBox", type: "number", step: "0.001", min: Config.unisonExpressionMin, max: Config.unisonExpressionMax, value: 1.4 });
            this._unisonExpressionRow = div({ class: "selectRow dropFader" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("unisonExpression") }, "‣ Volume: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._unisonExpressionInputBox)));
            this._unisonSignInputBox = input({ style: "width: 150%; height: 1.5em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;", id: "unisonSignInputBox", type: "number", step: "0.001", min: Config.unisonSignMin, max: Config.unisonSignMax, value: 1.0 });
            this._unisonSignRow = div({ class: "selectRow dropFader" }, div({}, span({ class: "tip", style: "height:1em; font-size: smaller;", onclick: () => this._openPrompt("unisonSign") }, "‣ Sign: "), div({ style: "color: " + ColorConfig.secondaryText + "; margin-top: -3px;" }, this._unisonSignInputBox)));
            this._unisonDropdownGroup = div({ class: "editor-controls", style: "display: none; gap: 3px; margin-bottom: 0.5em;" }, this._unisonVoicesRow, this._unisonSpreadRow, this._unisonOffsetRow, this._unisonExpressionRow, this._unisonSignRow);
            this._chordSelect = buildOptions(select(), Config.chords.map(chord => chord.name));
            this._chordDropdown = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(2) }, "▼");
            this._chordSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("chords") }, "Chords:"), this._chordDropdown, div({ class: "selectContainer" }, this._chordSelect));
            this._arpeggioSpeedDisplay = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, "x1");
            this._arpeggioSpeedSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.modulators.dictionary["arp speed"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeArpeggioSpeed(this._doc, oldValue, newValue), false);
            this._arpeggioSpeedRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("arpeggioSpeed") }, "‣ Spd:"), this._arpeggioSpeedDisplay, this._arpeggioSpeedSlider.container);
            this._twoNoteArpBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-right: 4em;" });
            this._twoNoteArpRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("twoNoteArpeggio") }, "‣ Fast Two-Note:"), this._twoNoteArpBox);
            this._chordDropdownGroup = div({ class: "editor-controls", style: "display: none;" }, this._arpeggioSpeedRow, this._twoNoteArpRow);
            this._vibratoSelect = buildOptions(select(), Config.vibratos.map(vibrato => vibrato.name));
            this._vibratoDropdown = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(0) }, "▼");
            this._vibratoSelectRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("vibrato") }, "Vibrato:"), this._vibratoDropdown, div({ class: "selectContainer", style: "width: 61.5%;" }, this._vibratoSelect));
            this._vibratoDepthSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.modulators.dictionary["vibrato depth"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeVibratoDepth(this._doc, oldValue, newValue), false);
            this._vibratoDepthRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("vibratoDepth") }, "‣ Depth:"), this._vibratoDepthSlider.container);
            this._vibratoSpeedDisplay = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, "x1");
            this._vibratoSpeedSlider = new Slider(input({ style: "margin: 0; text-overflow: clip;", type: "range", min: "0", max: Config.modulators.dictionary["vibrato speed"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeVibratoSpeed(this._doc, oldValue, newValue), false);
            this._vibratoSpeedRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("vibratoSpeed") }, "‣ Spd:"), this._vibratoSpeedDisplay, this._vibratoSpeedSlider.container);
            this._vibratoDelaySlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.modulators.dictionary["vibrato delay"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeVibratoDelay(this._doc, oldValue, newValue), false);
            this._vibratoDelayRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("vibratoDelay") }, "‣ Delay:"), this._vibratoDelaySlider.container);
            this._vibratoTypeSelect = buildOptions(select(), Config.vibratoTypes.map(vibrato => vibrato.name));
            this._vibratoTypeSelectRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("vibratoType") }, "‣ Type:"), div({ class: "selectContainer", style: "width: 61.5%;" }, this._vibratoTypeSelect));
            this._vibratoDropdownGroup = div({ class: "editor-controls", style: `display: none;` }, this._vibratoDepthRow, this._vibratoSpeedRow, this._vibratoDelayRow, this._vibratoTypeSelectRow);
            this._phaseModGroup = div({ class: "editor-controls" });
            this._feedbackTypeSelect = buildOptions(select(), Config.feedbacks.map(feedback => feedback.name));
            this._feedbackRow1 = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("feedbackType") }, "Feedback:"), div({ class: "selectContainer" }, this._feedbackTypeSelect));
            this._spectrumEditor = new SpectrumEditor(this._doc, null);
            this._spectrumRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("spectrum") }, "Spectrum:"), this._spectrumEditor.container);
            this._harmonicsEditor = new HarmonicsEditor(this._doc);
            this._harmonicsRow = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("harmonics") }, "Harmonics:"), this._harmonicsEditor.container);
            this._envelopeEditor = new EnvelopeEditor(this._doc);
            this._discreteEnvelopeBox = input({ type: "checkbox", style: "width: 1em; padding: 0; margin-right: 4em;" });
            this._discreteEnvelopeRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("discreteEnvelope") }, "‣ Discrete:"), this._discreteEnvelopeBox);
            this._envelopeSpeedDisplay = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, "x1");
            this._envelopeSpeedSlider = new Slider(input({ style: "margin: 0;", type: "range", min: "0", max: Config.modulators.dictionary["envelope speed"].maxRawVol, value: "0", step: "1" }), this._doc, (oldValue, newValue) => new ChangeEnvelopeSpeed(this._doc, oldValue, newValue), false);
            this._envelopeSpeedRow = div({ class: "selectRow dropFader" }, span({ class: "tip", style: "margin-left:4px;", onclick: () => this._openPrompt("envelopeSpeed") }, "‣ Spd:"), this._envelopeSpeedDisplay, this._envelopeSpeedSlider.container);
            this._envelopeDropdownGroup = div({ class: "editor-controls", style: "display: none;" }, this._discreteEnvelopeRow, this._envelopeSpeedRow);
            this._envelopeDropdown = button({ class: "envelopeDropdown", style: "margin-left:0em; margin-right: 1em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(7) }, "▼");
            this._drumsetGroup = div({ class: "editor-controls" });
            this._modulatorGroup = div({ class: "editor-controls" });
            this._feedback6OpTypeSelect = buildOptions(select(), Config.feedbacks6Op.map(feedback => feedback.name));
            this._feedback6OpRow1 = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("feedbackType") }, "Feedback:"), div({ class: "selectContainer" }, this._feedback6OpTypeSelect));
            this._algorithmCanvasSwitch = button({ style: "margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;", onclick: (e) => this._toggleAlgorithmCanvas(e) }, "F");
            this._customAlgorithmCanvas = new CustomAlgorythmCanvas(canvas({ width: 144, height: 144, style: "border:2px solid " + ColorConfig.uiWidgetBackground, id: "customAlgorithmCanvas" }), this._doc, (newArray, carry, mode) => new ChangeCustomAlgorythmorFeedback(this._doc, newArray, carry, mode));
            this._algorithm6OpSelect = buildOptions(select(), Config.algorithms6Op.map(algorithm => algorithm.name));
            this._algorithm6OpSelectRow = div(div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("algorithm") }, "Algorithm: "), div({ class: "selectContainer" }, this._algorithm6OpSelect)), div({ style: "height:144px; display:flex; flex-direction: row; align-items:center; justify-content:center;" }, div({ style: "display:block; width:10px; margin-right: 0.2em" }, this._algorithmCanvasSwitch), div({ style: "width:144px; height:144px;" }, this._customAlgorithmCanvas.canvas)));
            this._instrumentCopyButton = button({ style: "max-width:86px; width: 86px;", class: "copyButton", title: "Copy Instrument (⇧C)" }, [
                "Copy",
            ]);
            this._instrumentPasteButton = button({ style: "max-width:86px;", class: "pasteButton", title: "Paste Instrument (⇧V)" }, [
                "Paste",
            ]);
            this._instrumentExportButton = button({ style: "max-width:86px; width: 86px;", class: "exportInstrumentButton" }, [
                "Export",
            ]);
            this._instrumentImportButton = button({ style: "max-width:86px;", class: "importInstrumentButton" }, [
                "Import",
            ]);
            this._globalOscscope = new oscilascopeCanvas(canvas({ width: 144, height: 32, style: `border: 2px solid ${ColorConfig.uiWidgetBackground}; position: static;`, id: "oscilascopeAll" }), 1);
            this._globalOscscopeContainer = div({ style: "height: 38px; margin-left: auto; margin-right: auto;" }, this._globalOscscope.canvas);
            this._customWaveDrawCanvas = new CustomChipCanvas(canvas({ width: 128, height: 52, style: "border:2px solid " + ColorConfig.uiWidgetBackground, id: "customWaveDrawCanvas" }), this._doc, (newArray) => new ChangeCustomWave(this._doc, newArray));
            this._customWavePresetDrop = buildHeaderedOptions("Load Preset", select({ style: "width: 50%; height:1.5em; text-align: center; text-align-last: center;" }), Config.chipWaves.map(wave => wave.name));
            this._customWaveZoom = button({ style: "margin-left:0.5em; height:1.5em; max-width: 20px;", onclick: () => this._openPrompt("customChipSettings") }, "+");
            this._customWaveDraw = div({ style: "height:80px; margin-top:10px; margin-bottom:5px" }, [
                div({ style: "height:54px; display:flex; justify-content:center;" }, [this._customWaveDrawCanvas.canvas]),
                div({ style: "margin-top:5px; display:flex; justify-content:center;" }, [this._customWavePresetDrop, this._customWaveZoom]),
            ]);
            this._songTitleInputBox = new InputBox(input({ style: "font-weight:bold; border:none; width: 98%; background-color:${ColorConfig.editorBackground}; color:${ColorConfig.primaryText}; text-align:center",
                maxlength: "30", type: "text", value: EditorConfig.versionDisplayName }), this._doc, (oldValue, newValue) => new ChangeSongTitle(this._doc, oldValue, newValue));
            this._feedbackAmplitudeSlider = new Slider(input({ type: "range", min: "0", max: Config.operatorAmplitudeMax, value: "0", step: "1", title: "Feedback Amplitude" }), this._doc, (oldValue, newValue) => new ChangeFeedbackAmplitude(this._doc, oldValue, newValue), false);
            this._feedbackRow2 = div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("feedbackVolume") }, "Fdback Vol:"), this._feedbackAmplitudeSlider.container);
            this._addEnvelopeButton = button({ type: "button", class: "add-envelope" });
            this._customInstrumentSettingsGroup = div({ class: "editor-controls" }, div({ id: "InstrumentDiv" }, this._panSliderRow, this._panDropdownGroup, this._chipWaveSelectRow, this._chipNoiseSelectRow, this._useChipWaveAdvancedLoopControlsRow, this._chipWaveLoopModeSelectRow, this._chipWaveLoopStartRow, this._chipWaveLoopEndRow, this._chipWaveStartOffsetRow, this._chipWavePlayBackwardsRow, this._customWaveDraw, this._eqFilterTypeRow, this._eqFilterRow, this._eqFilterSimpleCutRow, this._eqFilterSimplePeakRow, this._fadeInOutRow, this._algorithmSelectRow, this._algorithm6OpSelectRow, this._phaseModGroup, this._feedbackRow1, this._feedback6OpRow1, this._feedbackRow2, this._spectrumRow, this._harmonicsRow, this._drumsetGroup, this._supersawDynamismRow, this._supersawSpreadRow, this._supersawShapeRow, this._pulseWidthRow, this._pulseWidthDropdownGroup, this._stringSustainRow, div({ style: "" }, this._unisonSelectRow), this._unisonDropdownGroup), div({ id: "effectsDiv" }, div({ class: "effectsNameDiv", style: `padding: 2px 0; margin-left: 2em; display: flex; align-items: center;` }, span({ style: `flex-grow: 1; text-align: center;` }, span({ class: "tip", onclick: () => this._openPrompt("effects") }, "Effects")), div({ class: "effects-menu" }, this._effectsSelect)), div({ class: "effectsOpDiv" }, this._transitionRow, this._transitionDropdownGroup, this._chordSelectRow, this._chordDropdownGroup, this._pitchShiftRow, this._detuneSliderRow, this._vibratoSelectRow, this._vibratoDropdownGroup, this._noteFilterTypeRow, this._noteFilterRow, this._noteFilterSimpleCutRow, this._noteFilterSimplePeakRow, this._distortionRow, this._aliasingRow, this._bitcrusherQuantizationRow, this._bitcrusherFreqRow, this._chorusRow, this._echoSustainRow, this._echoDelayRow, this._reverbRow, this._ringModContainerRow, this._phaserMixRow, this._phaserFreqRow, this._phaserFeedbackRow, this._phaserStagesRow)), div({ id: "envelopesDiv" }, div({ class: "envelopesNameDiv", style: `padding: 2px 0; margin-left: 2em; display: flex; align-items: center;` }, span({ style: `flex-grow: 1; text-align: center;` }, span({ class: "tip", onclick: () => this._openPrompt("envelopes") }, "Envelopes")), this._envelopeDropdown, this._addEnvelopeButton), div({ class: "envelopesOpDiv" }, this._envelopeDropdownGroup, this._envelopeEditor.container)));
            this._instrumentCopyGroup = div({ class: "editor-controls" }, div({ class: "selectRow" }, this._instrumentCopyButton, this._instrumentPasteButton));
            this._instrumentExportGroup = div({ class: "editor-controls" }, div({ class: "selectRow" }, this._instrumentExportButton, this._instrumentImportButton));
            this._instrumentSettingsTextRow = div({ id: "instrumentSettingsText", style: `padding: 3px 0; max-width: 15em; text-align: center; color: ${ColorConfig.secondaryText};` }, "Instrument Settings");
            this._instrumentTypeSelectRow = div({ class: "selectRow", id: "typeSelectRow" }, span({ class: "tip", onclick: () => this._openPrompt("instrumentType") }, "Type:"), div(div({ class: "pitchSelect" }, this._pitchedPresetSelect), div({ class: "drumSelect" }, this._drumPresetSelect)));
            this.selectedPatternCounter = div({ style: "margin:5px; pointer-events: none;" }, this._doc.selection.boxSelectionWidth * this._doc.selection.boxSelectionHeight);
            this.selectedPatternDiv = div({ style: "background: var(--ui-widget-background); font-weight: bold; border-radius: 5px; height: 32px; position: absolute; font-size: 20px; text-align: center; align-content: center;", title: "The total number of patterns you have selected in the track editor." }, this.selectedPatternCounter);
            this._mobileInstSettingsButton = button({ class: "mobileInstButton", type: "button", style: "width:33%;", onclick: () => this._setSettingToInstrument() }, "Settings");
            this._mobileEffectsButton = button({ class: "mobileEffectsButton", type: "button", style: "width:30%; background: #fff0; color: var(--text-color-dim);", onclick: () => this._setSettingToEffect() }, "Effects");
            this._mobileEnvelopesButton = button({ class: "mobileEnvelopesButton", type: "button", style: "width:37%; background: #fff0; color: var(--text-color-dim);", onclick: () => this._setSettingToEnvelope() }, "Envelope");
            this._instOptionsDiv = div({ class: "instMobileOptions", style: "display:none; padding-bottom: 4px;" }, this._mobileInstSettingsButton, this._mobileEffectsButton, this._mobileEnvelopesButton);
            this._setSettingToInstrument = () => {
                const colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);
                this._instOptionsDiv.style.setProperty("--text-color-lit", colors.primaryNote);
                this._instOptionsDiv.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._instOptionsDiv.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._instOptionsDiv.style.setProperty("--background-color-dim", colors.secondaryChannel);
                const instStuffs = document.getElementById('InstrumentDiv');
                const effectStuffs = document.getElementById('effectsDiv');
                const envelopeStuffs = document.getElementById('envelopesDiv');
                this._instSettingMode = 1;
                instStuffs.style.display = "";
                effectStuffs.style.display = "none";
                envelopeStuffs.style.display = "none";
                this._mobileInstSettingsButton.style.color = "var(--text-color-lit)";
                this._mobileEffectsButton.style.color = "var(--text-color-dim)";
                this._mobileEnvelopesButton.style.color = "var(--text-color-dim)";
                this._mobileInstSettingsButton.style.background = "";
                this._mobileEffectsButton.style.background = "#fff0";
                this._mobileEnvelopesButton.style.background = "#fff0";
                this._mobileInstSettingsButton.classList.remove("deactivated");
                this._mobileEffectsButton.classList.add("deactivated");
                this._mobileEnvelopesButton.classList.add("deactivated");
            };
            this._setSettingToEffect = () => {
                const colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);
                this._instOptionsDiv.style.setProperty("--text-color-lit", colors.primaryNote);
                this._instOptionsDiv.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._instOptionsDiv.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._instOptionsDiv.style.setProperty("--background-color-dim", colors.secondaryChannel);
                const instStuffs = document.getElementById('InstrumentDiv');
                const effectStuffs = document.getElementById('effectsDiv');
                const envelopeStuffs = document.getElementById('envelopesDiv');
                this._instSettingMode = 2;
                instStuffs.style.display = "none";
                effectStuffs.style.display = "";
                envelopeStuffs.style.display = "none";
                this._mobileInstSettingsButton.style.color = "var(--text-color-dim)";
                this._mobileEffectsButton.style.color = "var(--text-color-lit)";
                this._mobileEnvelopesButton.style.color = "var(--text-color-dim)";
                this._mobileInstSettingsButton.style.background = "#fff0";
                this._mobileEffectsButton.style.background = "";
                this._mobileEnvelopesButton.style.background = "#fff0";
                this._mobileInstSettingsButton.classList.add("deactivated");
                this._mobileEffectsButton.classList.remove("deactivated");
                this._mobileEnvelopesButton.classList.add("deactivated");
            };
            this._setSettingToEnvelope = () => {
                const colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);
                this._instOptionsDiv.style.setProperty("--text-color-lit", colors.primaryNote);
                this._instOptionsDiv.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._instOptionsDiv.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._instOptionsDiv.style.setProperty("--background-color-dim", colors.secondaryChannel);
                const instStuffs = document.getElementById('InstrumentDiv');
                const effectStuffs = document.getElementById('effectsDiv');
                const envelopeStuffs = document.getElementById('envelopesDiv');
                this._instSettingMode = 3;
                instStuffs.style.display = "none";
                effectStuffs.style.display = "none";
                envelopeStuffs.style.display = "";
                this._mobileInstSettingsButton.style.color = "var(--text-color-dim)";
                this._mobileEffectsButton.style.color = "var(--text-color-dim)";
                this._mobileEnvelopesButton.style.color = "var(--text-color-lit)";
                this._mobileInstSettingsButton.style.background = "#fff0";
                this._mobileEffectsButton.style.background = "#fff0";
                this._mobileEnvelopesButton.style.background = "";
                this._mobileInstSettingsButton.classList.add("deactivated");
                this._mobileEffectsButton.classList.add("deactivated");
                this._mobileEnvelopesButton.classList.remove("deactivated");
            };
            this._instrumentSettingsGroup = div({ class: "editor-controls" }, this._instrumentSettingsTextRow, this._instOptionsDiv, this._instrumentsButtonRow, this._instrumentTypeSelectRow, this._instrumentVolumeSliderRow, this._customInstrumentSettingsGroup);
            this._usedPatternIndicator = SVG.path({ d: "M -6 -6 H 6 V 6 H -6 V -6 M -2 -3 L -2 -3 L -1 -4 H 1 V 4 H -1 V -1.2 L -1.2 -1 H -2 V -3 z", fill: ColorConfig.indicatorSecondary, "fill-rule": "evenodd" });
            this._usedInstrumentIndicator = SVG.path({ d: "M -6 -0.8 H -3.8 V -6 H 0.8 V 4.4 H 2.2 V -0.8 H 6 V 0.8 H 3.8 V 6 H -0.8 V -4.4 H -2.2 V 0.8 H -6 z", fill: ColorConfig.indicatorSecondary });
            this._jumpToModIndicator = SVG.svg({ style: "width: 92%; height: 1.3em; flex-shrink: 0; position: absolute;", viewBox: "0 0 200 200" }, [
                SVG.path({ d: "M90 155 l0 -45 -45 0 c-25 0 -45 -4 -45 -10 0 -5 20 -10 45 -10 l45 0 0 -45 c0 -25 5 -45 10 -45 6 0 10 20 10 45 l0 45 45 0 c25 0 45 5 45 10 0 6 -20 10 -45 10 l -45 0 0 45 c0 25 -4 45 -10 45 -5 0 -10 -20 -10 -45z" }),
                SVG.path({ d: "M42 158 c-15 -15 -16 -38 -2 -38 6 0 10 7 10 15 0 8 7 15 15 15 8 0 15 5 15 10 0 14 -23 13 -38 -2z" }),
                SVG.path({ d: "M120 160 c0 -5 7 -10 15 -10 8 0 15 -7 15 -15 0 -8 5 -15 10 -15 14 0 13 23 -2 38 -15 15 -38 16 -38 2z" }),
                SVG.path({ d: "M32 58 c3 -23 48 -40 48 -19 0 6 -7 11 -15 11 -8 0 -15 7 -15 15 0 8 -5 15 -11 15 -6 0 -9 -10 -7 -22z" }),
                SVG.path({ d: "M150 65 c0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -10 0 -14 23 -13 38 2 15 15 16 38 2 38 -5 0 -10 -7 -10 -15z" })
            ]);
            this._promptContainer = div({ class: "promptContainer", style: "display: none;" });
            this._promptContainerBG = div({ class: "promptContainerBG", style: "display: none; height: 100%; width: 100%; position: fixed; z-index: 99; overflow-x: hidden; pointer-events: none;" });
            this._zoomInButton = button({ class: "zoomInButton", type: "button", title: "Zoom In" });
            this._zoomOutButton = button({ class: "zoomOutButton", type: "button", title: "Zoom Out" });
            this._undoButton = button({ class: "undoButton", type: "button", title: "Undo Changes" });
            this._redoButton = button({ class: "redoButton", type: "button", title: "Redo Changes" });
            this._copyPatternButton = button({ class: "copyPatternButton", type: "button", title: "Copy Selected Notes" });
            this._pastePatternButton = button({ class: "pastePatternButton", type: "button", title: "Paste Selected Notes" });
            this._insertChannelButton = button({ class: "insertChannelButton", type: "button", title: "Insert Channel Below" });
            this._deleteChannelButton = button({ class: "deleteChannelButton", type: "button", title: "Delete Selected Channel" });
            this._selectAllButton = button({ class: "selectAllButton", type: "button", title: "Select All" });
            this._duplicateButton = button({ class: "duplicateButton", type: "button", title: "Duplicate Selected Pattern" });
            this._notesUpButton = button({ class: "notesUpButton", type: "button", title: "Move Notes Up" });
            this._notesDownButton = button({ class: "notesDownButton", type: "button", title: "Move Notes Down" });
            this._loopBarButton = button({ class: "loopBarButton", type: "button", title: "Loop only on the Currently Selected Bar" });
            this._fullscreenButton = button({ class: "fullscreenButton", type: "button", title: "Make the screen fit fully in your browser (Mobile Only)" });
            this._patternEditorRow = div({ style: "flex: 1; height: 100%; display: flex; overflow: hidden; justify-content: center;" }, this._patternEditorPrev.container, this._patternEditor.container, this._patternEditorNext.container);
            this._patternArea = div({ class: "pattern-area", id: "pattern-area" }, this._piano.container, this._patternEditorRow, this._octaveScrollBar.container, this._zoomInButton, this._zoomOutButton, this._undoButton, this._redoButton, this._copyPatternButton, this._pastePatternButton, this._insertChannelButton, this._deleteChannelButton, this._selectAllButton, this._duplicateButton, this._notesUpButton, this._notesDownButton, this._loopBarButton, this._fullscreenButton, this.selectedPatternDiv);
            this._trackContainer = div({ class: "trackContainer" }, this._trackEditor.container, this._loopEditor.container);
            this._trackVisibleArea = div({ style: "position: absolute; width: 100%; height: 100%; pointer-events: none;" });
            this._trackAndMuteContainer = div({ class: "trackAndMuteContainer" }, this._muteEditor.container, this._trackContainer, this._trackVisibleArea);
            this._barScrollBar = new BarScrollBar(this._doc);
            this._trackArea = div({ class: "track-area" }, this._trackAndMuteContainer, this._barScrollBar.container);
            this._menuArea = div({ class: "menu-area" }, div({ class: "selectContainer menu file" }, this._fileMenu), div({ class: "selectContainer menu edit" }, this._editMenu), div({ class: "selectContainer menu preferences" }, this._optionsMenu));
            this._sampleLoadingBar = div({ style: `width: 0%; height: 100%; background-color: ${ColorConfig.indicatorPrimary};` });
            this._sampleLoadingBarContainer = div({ class: `sampleLoadingContainer`, style: `width: 80%; height: 4px; overflow: hidden; margin-left: auto; margin-right: auto; margin-top: 0.5em; cursor: pointer; background-color: var(--empty-sample-bar, ${ColorConfig.indicatorSecondary});` }, this._sampleLoadingBar);
            this._sampleLoadingStatusContainer = div({ style: "cursor: pointer;" }, div({ style: `margin-top: 0.5em; text-align: center; color: ${ColorConfig.secondaryText};` }, "Sample Loading Status"), div({ class: "selectRow", style: "height: 6px; margin-bottom: 0.5em;" }, this._sampleLoadingBarContainer));
            this._songSettingsArea = div({ class: "song-settings-area" }, div({ class: "editor-controls" }, div({ class: "editor-song-settings" }, div({ style: "margin: 3px 0; position: relative; text-align: center; color: ${ColorConfig.secondaryText};" }, div({ class: "tip", style: "flex-shrink: 0; position:absolute; left: 0; top: 0; width: 12px; height: 12px", onclick: () => this._openPrompt("usedPattern") }, SVG.svg({ style: "flex-shrink: 0; position: absolute; left: 0; top: 0; pointer-events: none;", width: "12px", height: "12px", "margin-right": "0.5em", viewBox: "-6 -6 12 12" }, this._usedPatternIndicator)), div({ class: "tip", style: "flex-shrink: 0; position: absolute; left: 14px; top: 0; width: 12px; height: 12px", onclick: () => this._openPrompt("usedInstrument") }, SVG.svg({ style: "flex-shrink: 0; position: absolute; left: 0; top: 0; pointer-events: none;", width: "12px", height: "12px", "margin-right": "1em", viewBox: "-6 -6 12 12" }, this._usedInstrumentIndicator)), "Song Settings", div({ style: "width: 100%; left: 0; top: -1px; position:absolute; overflow-x:clip;" }, this._jumpToModIndicator))), div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("scale") }, "Scale: "), div({ class: "selectContainer" }, this._scaleSelect)), div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("key") }, "Key: "), div({ class: "selectContainer" }, this._keySelect)), div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("key_octave") }, "Octave: "), this._octaveStepper), div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("tempo") }, "Tempo: "), span({ style: "display: flex;" }, this._tempoSlider.container, this._tempoStepper)), div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("rhythm") }, "Rhythm: "), div({ class: "selectContainer" }, this._rhythmSelect)), this._sampleLoadingStatusContainer));
            this._instrumentSettingsArea = div({ class: "instrument-settings-area" }, this._instrumentSettingsGroup, this._modulatorGroup);
            this._playbackMobileDiv = div({ class: "playback-bar-controls2", id: 'playback-bar-controls2', style: 'width: 100%; display: flex; background: var(--editor-background); z-index: 6;' }, this._mobilePlayButton, this._mobilePauseButton, this._mobilePrevBarButton, this._mobileNextBarButton);
            this._playPauseAreaMobile = div({ class: "play-pause-area2", id: "play-pause-area2", style: 'flex-direction:row; position: absolute; width: 100%; display: flex; bottom: 16vh;' }, this._playbackMobileDiv);
            this._settingsArea = div({ class: "settings-area noSelection" }, div({ class: "version-area" }, div({ style: `text-align: center; margin: 3px 0; color: ${ColorConfig.secondaryText};` }, this._songTitleInputBox.input)), div({ class: "play-pause-area", id: "play-pause-area" }, this._volumeBarBox, div({ class: "playback-bar-controls" }, this._playButton, this._pauseButton, this._recordButton, this._stopButton, this._prevBarButton, this._nextBarButton), div({ class: "playback-volume-controls" }, span({ class: "volume-speaker" }), this._volumeSlider.container), this._globalOscscopeContainer), this._menuArea, this._songSettingsArea, this._instrumentSettingsArea);
            this.mainLayer = div({ class: "beepboxEditor", tabIndex: "0" }, this._patternArea, this._trackArea, this._settingsArea, this._promptContainer);
            this._wasPlaying = false;
            this._currentPromptName = null;
            this._highlightedInstrumentIndex = -1;
            this._renderedInstrumentCount = 0;
            this._renderedIsPlaying = false;
            this._renderedIsRecording = false;
            this._renderedShowRecordButton = false;
            this._renderedCtrlHeld = false;
            this._ctrlHeld = false;
            this._shiftHeld = false;
            this._deactivatedInstruments = false;
            this._operatorRows = [];
            this._operatorAmplitudeSliders = [];
            this._operatorFrequencySelects = [];
            this._operatorDropdowns = [];
            this._operatorWaveformSelects = [];
            this._operatorWaveformHints = [];
            this._operatorWaveformPulsewidthSliders = [];
            this._operatorDropdownRows = [];
            this._operatorDropdownGroups = [];
            this._drumsetSpectrumEditors = [];
            this._drumsetEnvelopeSelects = [];
            this._showModSliders = [];
            this._newShowModSliders = [];
            this._modSliderValues = [];
            this._hasActiveModSliders = false;
            this._openPanDropdown = false;
            this._openVibratoDropdown = false;
            this._openEnvelopeDropdown = false;
            this._openChordDropdown = false;
            this._openTransitionDropdown = false;
            this._openOperatorDropdowns = [];
            this._openPulseWidthDropdown = false;
            this._openUnisonDropdown = false;
            this.outVolumeHistoricTimer = 0;
            this.outVolumeHistoricCap = 0;
            this.lastOutVolumeCap = 0;
            this.patternUsed = false;
            this._modRecTimeout = -1;
            this._whenSampleLoadingStatusClicked = () => {
                this._openPrompt("sampleLoadingStatus");
            };
            this._loopTypeEvent = () => {
                if (_loopType == 3) {
                    this._doc.synth.loopRepeatCount = 0;
                    this._loopEditor.container.style.display = "none";
                    SongEditor._styleElement.textContent = SongEditor._setLoopIcon[3];
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                    this._loopBarButton.style.display = "none";
                    this._trackAndMuteContainer.style.marginBottom = "0.3em";
                }
                else if (_loopType == 2) {
                    this._doc.synth.loopRepeatCount = -1;
                    this._loopEditor.container.style.display = "none";
                    SongEditor._styleElement.textContent = SongEditor._setLoopIcon[2];
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                    this._loopBarButton.style.display = "none";
                    this._trackAndMuteContainer.style.marginBottom = "0.3em";
                }
                else if (_loopType == 1) {
                    this._doc.synth.loopRepeatCount = -1;
                    this._loopEditor.container.style.display = "";
                    SongEditor._styleElement.textContent = SongEditor._setLoopIcon[1];
                    this._loopBarButton.style.display = this._doc.prefs.displayShortcutButtons ? "" : "none";
                    this._trackAndMuteContainer.style.marginBottom = "";
                }
            };
            this.refocusStage = () => {
                this.mainLayer.focus({ preventScroll: true });
            };
            this._onFocusIn = (event) => {
                if (this._doc.synth.recording && event.target != this.mainLayer && event.target != this._stopButton && event.target != this._volumeSlider.input) {
                    this.refocusStage();
                }
            };
            this._refocusStageNotEditing = () => {
                if (!this._patternEditor.editingModLabel)
                    this.mainLayer.focus({ preventScroll: true });
            };
            this.whenUpdated = () => {
                const prefs = this._doc.prefs;
                this._muteEditor.container.style.display = prefs.enableChannelMuting ? "" : "none";
                const trackBounds = this._trackVisibleArea.getBoundingClientRect();
                this._doc.trackVisibleBars = Math.floor((trackBounds.right - trackBounds.left - (prefs.enableChannelMuting ? 32 : 0)) / this._doc.getBarWidth());
                this._doc.trackVisibleChannels = Math.floor((trackBounds.bottom - trackBounds.top - 30) / ChannelRow.patternHeight);
                for (let i = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i < this._doc.song.channels.length; i++) {
                    const channel = this._doc.song.channels[i];
                    for (let j = 0; j < channel.instruments.length; j++) {
                        this._doc.synth.determineInvalidModulators(channel.instruments[j]);
                    }
                }
                this._barScrollBar.render();
                this._trackEditor.render();
                this._muteEditor.render();
                this._trackAndMuteContainer.scrollLeft = this._doc.barScrollPos * this._doc.getBarWidth();
                this._trackAndMuteContainer.scrollTop = this._doc.channelScrollPos * ChannelRow.patternHeight;
                if (document.activeElement != this._patternEditor.modDragValueLabel && this._patternEditor.editingModLabel) {
                    this._patternEditor.stopEditingModLabel(false);
                }
                this._piano.container.style.display = prefs.showLetters ? "" : "none";
                this._octaveScrollBar.container.style.display = prefs.showScrollBar ? "" : "none";
                this._barScrollBar.container.style.display = this._doc.song.barCount > this._doc.trackVisibleBars ? "" : "none";
                this._volumeBarBox.style.display = this._doc.prefs.displayVolumeBar ? "" : "none";
                this._globalOscscopeContainer.style.display = this._doc.prefs.showOscilloscope ? "" : "none";
                this._doc.synth.oscEnabled = this._doc.prefs.showOscilloscope;
                this._sampleLoadingStatusContainer.style.display = this._doc.prefs.showSampleLoadingStatus ? "" : "none";
                this._instrumentCopyGroup.style.display = this._doc.prefs.instrumentCopyPaste ? "" : "none";
                this._instrumentExportGroup.style.display = this._doc.prefs.instrumentImportExport ? "" : "none";
                if (document.getElementById('text-content'))
                    document.getElementById('text-content').style.display = this._doc.prefs.showDescription ? "" : "none";
                if (!isMobile) {
                    this._playPauseAreaMobile.style.display = "none";
                    if (this._doc.getFullScreen()) {
                        const semitoneHeight = this._patternEditorRow.clientHeight / this._doc.getVisiblePitchCount();
                        const targetBeatWidth = semitoneHeight * 5;
                        const minBeatWidth = this._patternEditorRow.clientWidth / (this._doc.song.beatsPerBar * 3);
                        const maxBeatWidth = this._patternEditorRow.clientWidth / (this._doc.song.beatsPerBar + 2);
                        const beatWidth = Math.max(minBeatWidth, Math.min(maxBeatWidth, targetBeatWidth));
                        const patternEditorWidth = beatWidth * this._doc.song.beatsPerBar;
                        if (this._doc.selection.boxSelectionWidth * this._doc.selection.boxSelectionHeight > 1) {
                            this.selectedPatternCounter.innerHTML = String(this._doc.selection.boxSelectionWidth * this._doc.selection.boxSelectionHeight);
                            this.selectedPatternDiv.style.display = this._doc.prefs.selectionCounter ? "" : "none";
                            this.selectedPatternDiv.style.left = prefs.showLetters ? "40px" : "10px";
                            this.selectedPatternDiv.style.top = prefs.displayShortcutButtons ? "200px" : "10px";
                            this.selectedPatternDiv.style.right = "";
                        }
                        else {
                            this.selectedPatternDiv.style.display = "none";
                        }
                        if (this._doc.prefs.showDescription == false) {
                            beepboxEditorContainer$1.style.paddingBottom = "0";
                            beepboxEditorContainer$1.style.borderStyle = "none";
                        }
                        else {
                            beepboxEditorContainer$1.style.paddingBottom = "";
                            beepboxEditorContainer$1.style.borderStyle = "";
                        }
                        this._patternEditorPrev.container.style.width = patternEditorWidth + "px";
                        this._patternEditor.container.style.width = patternEditorWidth + "px";
                        this._patternEditorNext.container.style.width = patternEditorWidth + "px";
                        this._patternEditorPrev.container.style.flexShrink = "0";
                        this._patternEditor.container.style.flexShrink = "0";
                        this._patternEditorNext.container.style.flexShrink = "0";
                        this._patternEditorPrev.container.style.display = "";
                        this._patternEditorNext.container.style.display = "";
                        this._patternEditorPrev.render();
                        this._patternEditorNext.render();
                        this._zoomInButton.style.display = (this._doc.channel < this._doc.song.pitchChannelCount) ? "" : "none";
                        this._zoomOutButton.style.display = (this._doc.channel < this._doc.song.pitchChannelCount) ? "" : "none";
                        this._zoomInButton.style.right = prefs.showScrollBar ? "24px" : "4px";
                        this._zoomOutButton.style.right = prefs.showScrollBar ? "24px" : "4px";
                        this._undoButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._redoButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._copyPatternButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._pastePatternButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._insertChannelButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._deleteChannelButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._selectAllButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._duplicateButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        if (_loopType != 1) {
                            this._loopBarButton.style.display = prefs.displayShortcutButtons ? "none" : "none";
                        }
                        else if (_loopType == 1) {
                            this._loopBarButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        }
                        this._notesDownButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._notesUpButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._undoButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._redoButton.style.left = prefs.showLetters ? "70px" : "40px";
                        this._copyPatternButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._pastePatternButton.style.left = prefs.showLetters ? "70px" : "40px";
                        this._insertChannelButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._deleteChannelButton.style.left = prefs.showLetters ? "70px" : "40px";
                        this._selectAllButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._duplicateButton.style.left = prefs.showLetters ? "70px" : "40px";
                        this._notesUpButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._notesDownButton.style.left = prefs.showLetters ? "70px" : "40px";
                        this._loopBarButton.style.left = prefs.showLetters ? "40px" : "10px";
                        this._fullscreenButton.style.display = "none";
                        const secondImage = document.getElementById("secondImage");
                        if (secondImage != null) {
                            secondImage.style.minHeight = "100vh";
                        }
                    }
                    else {
                        this._patternEditor.container.style.width = "";
                        this._patternEditor.container.style.flexShrink = "";
                        this._patternEditorPrev.container.style.display = "none";
                        this._patternEditorNext.container.style.display = "none";
                        this._zoomInButton.style.display = "none";
                        this._zoomOutButton.style.display = "none";
                        if (this._doc.selection.boxSelectionWidth * this._doc.selection.boxSelectionHeight > 1) {
                            this.selectedPatternCounter.innerHTML = String(this._doc.selection.boxSelectionWidth * this._doc.selection.boxSelectionHeight);
                            this.selectedPatternDiv.style.display = this._doc.prefs.selectionCounter ? "" : "none";
                            this.selectedPatternDiv.style.right = "104.5%";
                            this.selectedPatternDiv.style.left = "";
                            this.selectedPatternDiv.style.top = prefs.displayShortcutButtons ? "200px" : "10px";
                        }
                        else {
                            this.selectedPatternDiv.style.display = "none";
                        }
                        this._undoButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._redoButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._copyPatternButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._pastePatternButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._insertChannelButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._deleteChannelButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._selectAllButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._duplicateButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        if (_loopType != 1) {
                            this._loopBarButton.style.display = prefs.displayShortcutButtons ? "none" : "none";
                        }
                        else if (_loopType == 1) {
                            this._loopBarButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        }
                        this._notesDownButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._notesUpButton.style.display = prefs.displayShortcutButtons ? "" : "none";
                        this._undoButton.style.left = "-80px";
                        this._redoButton.style.left = "-50px";
                        this._copyPatternButton.style.left = "-80px";
                        this._pastePatternButton.style.left = "-50px";
                        this._insertChannelButton.style.left = "-80px";
                        this._deleteChannelButton.style.left = "-50px";
                        this._selectAllButton.style.left = "-80px";
                        this._duplicateButton.style.left = "-50px";
                        this._notesUpButton.style.left = "-80px";
                        this._notesDownButton.style.left = "-50px";
                        this._loopBarButton.style.left = "-50px";
                        this._fullscreenButton.style.display = "none";
                        beepboxEditorContainer$1.style.paddingBottom = "";
                        beepboxEditorContainer$1.style.borderStyle = "";
                        const secondImage = document.getElementById("secondImage");
                        if (secondImage != null) {
                            secondImage.style.minHeight = "100vh";
                        }
                    }
                }
                else {
                    this.selectedPatternDiv.style.display = "none";
                    if (this._doc.prefs.oldMobileLayout != true) {
                        this._promptContainer.style.left = "50vw";
                        const effectStuffs = document.getElementById('effectsDiv');
                        const envelopeStuffs = document.getElementById('envelopesDiv');
                        const instStuffs = document.getElementById('InstrumentDiv');
                        if (this._instSettingMode == 1) {
                            instStuffs.style.display = "";
                            effectStuffs.style.display = "none";
                            envelopeStuffs.style.display = "none";
                            console.log("Instrument Settings");
                        }
                        else if (this._instSettingMode == 2) {
                            instStuffs.style.display = "none";
                            effectStuffs.style.display = "";
                            envelopeStuffs.style.display = "none";
                            console.log("Effects Settings");
                        }
                        else if (this._instSettingMode == 3) {
                            instStuffs.style.display = "none";
                            effectStuffs.style.display = "none";
                            envelopeStuffs.style.display = "";
                            console.log("Envelopes Settings");
                        }
                        console.log("Current Setting: " + this._instSettingMode);
                        beepboxEditorContainer$1.style.borderImageSource = "";
                        this._settingsArea.style.display = "none";
                        this._trackArea.style.display = "none";
                        this._patternArea.style.display = "";
                        this.mainLayer.style.display = "unset";
                        if (window.innerWidth > window.innerHeight) {
                            this._mobileMenu.style.right = "0px";
                            this._mobileMenu.style.left = "";
                            this._mobileMenu.style.height = "100vh";
                            this._mobileMenu.style.width = "15vw";
                            this._patternArea.style.width = "75vw";
                            this._patternArea.style.height = "100vh";
                            this._patternArea.style.maxHeight = "100vh";
                            beepboxEditorContainer$1.style.maxWidth = "100vw";
                            this._playPauseAreaMobile.style.height = "100vh";
                            this._playPauseAreaMobile.style.width = "4vw";
                            this._playPauseAreaMobile.style.right = "16vw";
                            this._playPauseAreaMobile.style.bottom = "0";
                            this._playPauseAreaMobile.style.left = "";
                            this._playbackMobileDiv.style.flexDirection = "column";
                            this._mobilePlayButton.style.width = "100%";
                            this._mobilePauseButton.style.width = "100%";
                            this._mobileNextBarButton.style.width = "100%";
                            this._mobilePrevBarButton.style.width = "100%";
                            this._mobilePlayButton.style.height = "33vh";
                            this._mobilePauseButton.style.height = "33vh";
                            this._mobileNextBarButton.style.height = "34vh";
                            this._mobilePrevBarButton.style.height = "33vh";
                            this._settingsArea.style.gridTemplateColumns = "33% 34% 33%";
                            this._settingsArea.style.gridTemplateRows = "min-content min-content min-content min-content 1fr";
                            this._mobilePatternButton.style.right = "0";
                            this._mobilePatternButton.style.bottom = "";
                            this._mobileTrackButton.style.right = "0";
                            this._mobileTrackButton.style.bottom = "";
                            this._mobileSettingsButton.style.right = "0";
                            this._mobileSettingsButton.style.bottom = "";
                            this._settingsArea.style.gridTemplateAreas = '"version-area version-area version-area" "play-pause-area menu-area instrument-settings-area" "play-pause-area menu-area instrument-settings-area" "song-settings-area song-settings-area instrument-settings-area" "song-settings-area song-settings-area instrument-settings-area"';
                            this._settingsArea.style.width = "78vw";
                            this._trackArea.style.width = "78vw";
                            if (this._menuMode == 1) {
                                this._patternArea.style.display = "";
                                this._trackArea.style.display = "none";
                                this._settingsArea.style.display = "none";
                                this._mobilePatternButton.style.width = "100%";
                                this._mobileTrackButton.style.width = "80%";
                                this._mobileSettingsButton.style.width = "80%";
                                this._mobilePatternButton.style.height = "33vh";
                                this._mobileTrackButton.style.height = "34vh";
                                this._mobileSettingsButton.style.height = "33vh";
                                this._mobilePatternButton.style.left = "";
                                this._mobileTrackButton.style.left = "";
                                this._mobilePatternButton.style.top = "0";
                                this._mobileTrackButton.style.top = "33vh";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileMenu.style.width = "15vw";
                                this._mobileMenu.style.height = "100vh";
                                this._mobileMenu.style.right = "0";
                                this._playPauseAreaMobile.style.display = "flex";
                            }
                            if (this._menuMode == 2) {
                                this._patternArea.style.display = "none";
                                this._trackArea.style.display = "";
                                this._settingsArea.style.display = "none";
                                this._mobilePatternButton.style.width = "80%";
                                this._mobileTrackButton.style.width = "100%";
                                this._mobileSettingsButton.style.width = "80%";
                                this._mobilePatternButton.style.height = "33vh";
                                this._mobileTrackButton.style.height = "34vh";
                                this._mobileSettingsButton.style.height = "33vh";
                                this._mobilePatternButton.style.top = "0";
                                this._mobileTrackButton.style.top = "33vh";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileTrackButton.style.left = "";
                                this._mobilePatternButton.style.left = "";
                                this._mobileMenu.style.width = "15vw";
                                this._mobileMenu.style.height = "100vh";
                                this._mobileMenu.style.right = "0";
                                this._playPauseAreaMobile.style.display = "none";
                            }
                            if (this._menuMode == 3) {
                                this._patternArea.style.display = "none";
                                this._trackArea.style.display = "none";
                                this._settingsArea.style.display = "";
                                this._mobilePatternButton.style.width = "80%";
                                this._mobileTrackButton.style.width = "80%";
                                this._mobileSettingsButton.style.width = "100%";
                                this._mobilePatternButton.style.height = "33vh";
                                this._mobileTrackButton.style.height = "34vh";
                                this._mobileSettingsButton.style.height = "33vh";
                                this._mobilePatternButton.style.top = "0";
                                this._mobileTrackButton.style.top = "33vh";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileTrackButton.style.left = "";
                                this._mobilePatternButton.style.left = "";
                                this._mobileMenu.style.width = "15vw";
                                this._mobileMenu.style.height = "100vh";
                                this._mobileMenu.style.right = "0";
                                this._playPauseAreaMobile.style.display = "none";
                            }
                        }
                        else if (window.innerWidth < window.innerHeight) {
                            this._playPauseAreaMobile.style.height = "";
                            this._playPauseAreaMobile.style.width = "100vw";
                            this._playPauseAreaMobile.style.bottom = "16vh";
                            this._playPauseAreaMobile.style.left = "0";
                            this._playbackMobileDiv.style.flexDirection = "row";
                            this._mobilePlayButton.style.height = "";
                            this._mobilePauseButton.style.height = "";
                            this._mobileNextBarButton.style.height = "";
                            this._mobilePrevBarButton.style.height = "";
                            this._mobilePlayButton.style.width = "33vh";
                            this._mobilePauseButton.style.width = "33vh";
                            this._mobileNextBarButton.style.width = "34vh";
                            this._mobilePrevBarButton.style.width = "33vh";
                            beepboxEditorContainer$1.style.maxWidth = "710px";
                            this._settingsArea.style.gridTemplateRows = "min-content min-content min-content min-content 1fr";
                            this._settingsArea.style.gridTemplateAreas = '"version-area version-area" "play-pause-area instrument-settings-area" "play-pause-area instrument-settings-area" "menu-area instrument-settings-area" "song-settings-area instrument-settings-area"';
                            this._mobileMenu.style.bottom = "0px";
                            this._mobileMenu.style.width = "100vw";
                            this._mobileMenu.style.height = "20vh";
                            this._settingsArea.style.width = "98vw";
                            this._patternArea.style.width = "91vw";
                            this._trackArea.style.width = "98vw";
                            this._mobileMenu.style.right = "";
                            this._mobileMenu.style.left = "";
                            this._mobileMenu.style.height = "100vh";
                            this._mobileMenu.style.width = "15vw";
                            beepboxEditorContainer$1.style.maxWidth = "100vw";
                            this._settingsArea.style.gridTemplateColumns = "50% 50%";
                            this._mobilePatternButton.style.bottom = "0";
                            this._mobileTrackButton.style.bottom = "0";
                            this._mobileSettingsButton.style.bottom = "0";
                            if (this._menuMode == 1) {
                                this._patternArea.style.width = "91vw";
                                this._patternArea.style.display = "";
                                this._trackArea.style.display = "none";
                                this._settingsArea.style.display = "none";
                                this._mobilePatternButton.style.height = "100%";
                                this._mobileTrackButton.style.height = "80%";
                                this._mobileSettingsButton.style.height = "80%";
                                this._mobilePatternButton.style.width = "33vw";
                                this._mobileTrackButton.style.width = "34vw";
                                this._mobileSettingsButton.style.width = "33vw";
                                this._mobilePatternButton.style.top = "";
                                this._mobilePatternButton.style.left = "0";
                                this._mobileTrackButton.style.left = "33vw";
                                this._mobileSettingsButton.style.right = "0";
                                this._mobilePatternButton.style.bottom = "0";
                                this._mobileTrackButton.style.bottom = "0";
                                this._mobileTrackButton.style.top = "";
                                this._mobileTrackButton.style.right = "";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileMenu.style.height = "15vh";
                                this._mobileMenu.style.width = "100vw";
                                this._mobileMenu.style.right = "";
                                this._playPauseAreaMobile.style.display = "flex";
                            }
                            else if (this._menuMode == 2) {
                                this._trackArea.style.width = "100vw";
                                this._patternArea.style.display = "none";
                                this._trackArea.style.display = "";
                                this._settingsArea.style.display = "none";
                                this._mobilePatternButton.style.height = "80%";
                                this._mobileTrackButton.style.height = "100%";
                                this._mobileSettingsButton.style.height = "80%";
                                this._mobilePatternButton.style.width = "33vw";
                                this._mobileTrackButton.style.width = "34vw";
                                this._mobileSettingsButton.style.width = "33vw";
                                this._mobilePatternButton.style.top = "";
                                this._mobilePatternButton.style.left = "0";
                                this._mobileTrackButton.style.left = "33vw";
                                this._mobileSettingsButton.style.right = "0";
                                this._mobilePatternButton.style.bottom = "0";
                                this._mobileTrackButton.style.bottom = "0";
                                this._mobileTrackButton.style.top = "";
                                this._mobileTrackButton.style.right = "";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileMenu.style.height = "15vh";
                                this._mobileMenu.style.width = "100vw";
                                this._playPauseAreaMobile.style.display = "none";
                            }
                            else if (this._menuMode == 3) {
                                this._settingsArea.style.width = "96vw";
                                this._patternArea.style.display = "none";
                                this._trackArea.style.display = "none";
                                this._settingsArea.style.display = "";
                                this._mobilePatternButton.style.height = "80%";
                                this._mobileTrackButton.style.height = "80%";
                                this._mobileSettingsButton.style.height = "100%";
                                this._mobilePatternButton.style.width = "33vw";
                                this._mobileTrackButton.style.width = "34vw";
                                this._mobileSettingsButton.style.width = "33vw";
                                this._mobilePatternButton.style.top = "";
                                this._mobilePatternButton.style.left = "0";
                                this._mobileTrackButton.style.left = "33vw";
                                this._mobileSettingsButton.style.right = "0";
                                this._mobilePatternButton.style.bottom = "0";
                                this._mobileTrackButton.style.bottom = "0";
                                this._mobileTrackButton.style.top = "";
                                this._mobileTrackButton.style.right = "";
                                this._mobileSettingsButton.style.bottom = "0";
                                this._mobileMenu.style.height = "15vh";
                                this._mobileMenu.style.width = "100vw";
                                this._playPauseAreaMobile.style.display = "none";
                            }
                            this._patternArea.style.maxHeight = "75vh";
                            this._patternArea.style.height = "70vh";
                        }
                        this.mainLayer.style.minHeight = "80vh";
                        beepboxEditorContainer$1.style.maxHeight = "80vh";
                        this._mobilePatternButton.style.display = "";
                        this._mobileTrackButton.style.display = "";
                        this._mobileSettingsButton.style.display = "";
                        this._mobileMenu.style.display = "";
                        this._instOptionsDiv.style.display = "";
                        beepboxEditorContainer$1.appendChild(this._playPauseAreaMobile);
                        const playPauseArea = document.getElementById('play-pause-area');
                        const textContentMobile = document.getElementById('text-content');
                        textContentMobile.style.display = "none";
                        this._trackAndMuteContainer.style.maxHeight = "85vh";
                        playPauseArea.style.display = "flex";
                        playPauseArea.style.flexDirection = "column";
                    }
                    document.body.appendChild(this._mobileMenu);
                    this._mobileMenu.appendChild(this._mobilePatternButton);
                    this._mobileMenu.appendChild(this._mobileTrackButton);
                    this._mobileMenu.appendChild(this._mobileSettingsButton);
                    this._mobilePatternButton.appendChild(this._mobileEditMenuIcon);
                    this._mobileTrackButton.appendChild(this._mobileTrackMenuIcon);
                    this._mobileSettingsButton.appendChild(this._mobileSettingsMenuIcon);
                    this._patternEditor.container.style.width = "";
                    this._patternEditor.container.style.flexShrink = "";
                    this._patternEditorPrev.container.style.display = "none";
                    this._patternEditorNext.container.style.display = "none";
                    this._undoButton.style.display = "";
                    this._redoButton.style.display = "";
                    this._copyPatternButton.style.display = "";
                    this._pastePatternButton.style.display = "";
                    this._insertChannelButton.style.display = "";
                    this._deleteChannelButton.style.display = "";
                    this._selectAllButton.style.display = "";
                    this._duplicateButton.style.display = "";
                    this._loopBarButton.style.display = "";
                    this._notesDownButton.style.display = "";
                    this._notesUpButton.style.display = "";
                    this._undoButton.style.top = prefs.showScrollBar ? "0px" : "0px";
                    this._undoButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._redoButton.style.top = prefs.showScrollBar ? "30px" : "30px";
                    this._redoButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._copyPatternButton.style.top = prefs.showScrollBar ? "60px" : "60px";
                    this._copyPatternButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._pastePatternButton.style.top = prefs.showScrollBar ? "90px" : "90px";
                    this._pastePatternButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._insertChannelButton.style.top = prefs.showScrollBar ? "120px" : "120px";
                    this._insertChannelButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._deleteChannelButton.style.top = prefs.showScrollBar ? "150px" : "150px";
                    this._deleteChannelButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._selectAllButton.style.top = prefs.showScrollBar ? "180px" : "180px";
                    this._selectAllButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._duplicateButton.style.top = prefs.showScrollBar ? "210px" : "210px";
                    this._duplicateButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._notesUpButton.style.top = prefs.showScrollBar ? "240px" : "240px";
                    this._notesUpButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._notesDownButton.style.top = prefs.showScrollBar ? "270px" : "270px";
                    this._notesDownButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._loopBarButton.style.top = prefs.showScrollBar ? "300px" : "300px";
                    this._loopBarButton.style.left = prefs.showScrollBar ? "2px" : "2px";
                    this._fullscreenButton.style.display = "none";
                    this._zoomInButton.style.display = "none";
                    this._zoomOutButton.style.display = "none";
                    this._patternArea.style.paddingLeft = prefs.showScrollBar ? "32px" : "32px";
                    beepboxEditorContainer$1.style.paddingTop = "0px";
                }
                this._patternEditor.render();
                const textOnIcon = ColorConfig.getComputed("--text-enabled-icon") !== "" ? ColorConfig.getComputed("--text-enabled-icon") : "✓ ";
                const textOffIcon = ColorConfig.getComputed("--text-disabled-icon") !== "" ? ColorConfig.getComputed("--text-disabled-icon") : "　";
                const optionCommands = [
                    "Technical",
                    (prefs.autoPlay ? textOnIcon : textOffIcon) + "Auto Play on Load",
                    (prefs.autoFollow ? textOnIcon : textOffIcon) + "Auto Follow Playhead",
                    (prefs.enableNotePreview ? textOnIcon : textOffIcon) + "Hear Added Notes",
                    (prefs.notesOutsideScale ? textOnIcon : textOffIcon) + "Place Notes Out of Scale",
                    (prefs.defaultScale == this._doc.song.scale ? textOnIcon : textOffIcon) + "Set Current Scale as Default",
                    (prefs.alwaysFineNoteVol ? textOnIcon : textOffIcon) + "Always Fine Note Volume",
                    (prefs.enableChannelMuting ? textOnIcon : textOffIcon) + "Enable Channel Muting",
                    (prefs.instrumentCopyPaste ? textOnIcon : textOffIcon) + "Enable Copy/Paste Buttons",
                    (prefs.instrumentImportExport ? textOnIcon : textOffIcon) + "Enable Import/Export Buttons",
                    (prefs.displayBrowserUrl ? textOnIcon : textOffIcon) + "Enable Song Data in URL",
                    (prefs.closePromptByClickoff ? textOnIcon : textOffIcon) + "Close Prompts on Click Off",
                    (prefs.oldMobileLayout ? textOnIcon : textOffIcon) + "Use the Old mobile layout (Reload)",
                    (prefs.instrumentSettingsSimplifier ? textOnIcon : textOffIcon) + "Use Mobile Instrument Settings",
                    "> Note Recording",
                    "Appearance",
                    (prefs.showThird ? textOnIcon : textOffIcon) + 'Highlight "Third" Note (SandBox)',
                    (prefs.showFifth ? textOnIcon : textOffIcon) + 'Highlight "Fifth" Note',
                    (prefs.advancedColorScheme ? textOnIcon : textOffIcon) + 'Advanced Color Scheme (ModBox)',
                    (prefs.notesFlashWhenPlayed ? textOnIcon : textOffIcon) + "Notes Flash When Played (DB2)",
                    (prefs.showChannels ? textOnIcon : textOffIcon) + "Show All Channels",
                    (prefs.showScrollBar ? textOnIcon : textOffIcon) + "Show Octave Scroll Bar",
                    (prefs.showLetters ? textOnIcon : textOffIcon) + "Show Piano Keys",
                    (prefs.displayVolumeBar ? textOnIcon : textOffIcon) + "Show Playback Volume",
                    (prefs.showOscilloscope ? textOnIcon : textOffIcon) + "Show Oscilloscope",
                    (prefs.showSampleLoadingStatus ? textOnIcon : textOffIcon) + "Show Sample Loading Status",
                    (prefs.showDescription ? textOnIcon : textOffIcon) + "Show Description",
                    (prefs.frostedGlassBackground ? textOnIcon : textOffIcon) + "Use Frosted Glass Prompt Backdrop",
                    (prefs.displayShortcutButtons ? textOnIcon : textOffIcon) + "Display Mobile Shortcut Buttons",
                    (prefs.oldModNotes ? textOnIcon : textOffIcon) + "Use Old Mod Notes",
                    (prefs.selectionCounter ? textOnIcon : textOffIcon) + "Selection Counter",
                    "> Set Layout",
                    "> Set Theme",
                    "> Custom Theme",
                ];
                const technicalOptionGroup = this._optionsMenu.children[1];
                for (let i = 0; i < technicalOptionGroup.children.length; i++) {
                    const option = technicalOptionGroup.children[i];
                    if (option.textContent != optionCommands[i + 1])
                        option.textContent = optionCommands[i + 1];
                }
                const appearanceOptionGroup = this._optionsMenu.children[2];
                for (let i = 0; i < appearanceOptionGroup.children.length; i++) {
                    const option = appearanceOptionGroup.children[i];
                    if (option.textContent != optionCommands[i + (technicalOptionGroup.children.length + 2)])
                        option.textContent = optionCommands[i + (technicalOptionGroup.children.length + 2)];
                }
                const channel = this._doc.song.channels[this._doc.channel];
                const instrumentIndex = this._doc.getCurrentInstrument();
                const instrument = channel.instruments[instrumentIndex];
                const wasActive = this.mainLayer.contains(document.activeElement);
                const activeElement = document.activeElement;
                const colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);
                for (let i = this._effectsSelect.childElementCount - 1; i < Config.effectOrder.length; i++) {
                    this._effectsSelect.appendChild(option({ value: i }));
                }
                this._effectsSelect.selectedIndex = -1;
                for (let i = 0; i < Config.effectOrder.length; i++) {
                    let effectFlag = Config.effectOrder[i];
                    const selected = ((instrument.effects & (1 << effectFlag)) != 0);
                    const label = (selected ? textOnIcon : textOffIcon) + Config.effectNames[effectFlag];
                    const option = this._effectsSelect.children[i + 1];
                    if (option.textContent != label)
                        option.textContent = label;
                }
                setSelectedValue(this._scaleSelect, this._doc.song.scale);
                this._scaleSelect.title = Config.scales[this._doc.song.scale].realName;
                setSelectedValue(this._keySelect, Config.keys.length - 1 - this._doc.song.key);
                this._octaveStepper.value = Math.round(this._doc.song.octave).toString();
                this._tempoSlider.updateValue(Math.max(0, Math.round(this._doc.song.tempo)));
                this._tempoStepper.value = Math.round(this._doc.song.tempo).toString();
                this._songTitleInputBox.updateValue(this._doc.song.title);
                this._eqFilterTypeRow.style.setProperty("--text-color-lit", colors.primaryNote);
                this._eqFilterTypeRow.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._eqFilterTypeRow.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._eqFilterTypeRow.style.setProperty("--background-color-dim", colors.secondaryChannel);
                if (instrument.eqFilterType) {
                    this._eqFilterSimpleButton.classList.remove("deactivated");
                    this._eqFilterAdvancedButton.classList.add("deactivated");
                    this._eqFilterRow.style.display = "none";
                    this._eqFilterSimpleCutRow.style.display = "";
                    this._eqFilterSimplePeakRow.style.display = "";
                }
                else {
                    this._eqFilterSimpleButton.classList.add("deactivated");
                    this._eqFilterAdvancedButton.classList.remove("deactivated");
                    this._eqFilterRow.style.display = "";
                    this._eqFilterSimpleCutRow.style.display = "none";
                    this._eqFilterSimplePeakRow.style.display = "none";
                }
                setSelectedValue(this._rhythmSelect, this._doc.song.rhythm);
                if (!this._doc.song.getChannelIsMod(this._doc.channel)) {
                    this._customInstrumentSettingsGroup.style.display = "";
                    this._panSliderRow.style.display = "";
                    this._panDropdownGroup.style.display = (this._openPanDropdown ? "" : "none");
                    this._detuneSliderRow.style.display = "";
                    this._instrumentVolumeSliderRow.style.display = "";
                    this._instrumentTypeSelectRow.style.setProperty("display", "");
                    this._instrumentSettingsGroup.insertBefore(this._instrumentExportGroup, this._instrumentSettingsGroup.firstChild);
                    this._instrumentSettingsGroup.insertBefore(this._instrumentCopyGroup, this._instrumentSettingsGroup.firstChild);
                    this._instrumentSettingsGroup.insertBefore(this._instrumentsButtonRow, this._instrumentSettingsGroup.firstChild);
                    this._instrumentSettingsGroup.insertBefore(this._instrumentSettingsTextRow, this._instrumentSettingsGroup.firstChild);
                    if (this._doc.song.channels[this._doc.channel].name == "") {
                        this._instrumentSettingsTextRow.textContent = "Instrument Settings";
                    }
                    else {
                        this._instrumentSettingsTextRow.textContent = this._doc.song.channels[this._doc.channel].name;
                    }
                    this._modulatorGroup.style.display = "none";
                    this._usageCheck(this._doc.channel, instrumentIndex);
                    if (this._doc.song.getChannelIsNoise(this._doc.channel)) {
                        this._pitchedPresetSelect.style.display = "none";
                        this._drumPresetSelect.style.display = "";
                        $("#pitchPresetSelect").parent().hide();
                        $("#drumPresetSelect").parent().show();
                        setSelectedValue(this._drumPresetSelect, instrument.preset, true);
                    }
                    else {
                        this._pitchedPresetSelect.style.display = "";
                        this._drumPresetSelect.style.display = "none";
                        $("#pitchPresetSelect").parent().show();
                        $("#drumPresetSelect").parent().hide();
                        setSelectedValue(this._pitchedPresetSelect, instrument.preset, true);
                    }
                    if (instrument.type == 2) {
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._chipNoiseSelectRow.style.display = "";
                        setSelectedValue(this._chipNoiseSelect, instrument.chipNoise, true);
                    }
                    else {
                        this._chipNoiseSelectRow.style.display = "none";
                    }
                    if (instrument.type == 3) {
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._spectrumRow.style.display = "";
                        this._spectrumEditor.render();
                    }
                    else {
                        this._spectrumRow.style.display = "none";
                    }
                    if (instrument.type == 5 || instrument.type == 7) {
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._harmonicsRow.style.display = "";
                        this._harmonicsEditor.render();
                    }
                    else {
                        this._harmonicsRow.style.display = "none";
                    }
                    if (instrument.type == 7) {
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._stringSustainRow.style.display = "";
                        this._stringSustainSlider.updateValue(instrument.stringSustain);
                        this._stringSustainLabel.textContent = Config.enableAcousticSustain ? "Sustain (" + Config.sustainTypeNames[instrument.stringSustainType].substring(0, 1).toUpperCase() + "):" : "Sustain:";
                    }
                    else {
                        this._stringSustainRow.style.display = "none";
                    }
                    if (instrument.type == 4) {
                        this._drumsetGroup.style.display = "";
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._fadeInOutRow.style.display = "none";
                        for (let i = 0; i < Config.drumCount; i++) {
                            setSelectedValue(this._drumsetEnvelopeSelects[i], instrument.drumsetEnvelopes[i]);
                            this._drumsetSpectrumEditors[i].render();
                        }
                    }
                    else {
                        this._drumsetGroup.style.display = "none";
                        this._fadeInOutRow.style.display = "";
                        this._fadeInOutEditor.render();
                    }
                    if (instrument.type == 0) {
                        this._chipWaveSelectRow.style.display = "";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "";
                        if (instrument.isUsingAdvancedLoopControls) {
                            this._chipWaveLoopModeSelectRow.style.display = "";
                            this._chipWaveLoopStartRow.style.display = "";
                            this._chipWaveLoopEndRow.style.display = "";
                            this._chipWaveStartOffsetRow.style.display = "";
                            this._chipWavePlayBackwardsRow.style.display = "";
                        }
                        else {
                            this._chipWaveLoopModeSelectRow.style.display = "none";
                            this._chipWaveLoopStartRow.style.display = "none";
                            this._chipWaveLoopEndRow.style.display = "none";
                            this._chipWaveStartOffsetRow.style.display = "none";
                            this._chipWavePlayBackwardsRow.style.display = "none";
                        }
                        setSelectedValue(this._chipWaveSelect, instrument.chipWave);
                        this._useChipWaveAdvancedLoopControlsBox.checked = instrument.isUsingAdvancedLoopControls ? true : false;
                        setSelectedValue(this._chipWaveLoopModeSelect, instrument.chipWaveLoopMode);
                        this._chipWaveLoopStartStepper.value = instrument.chipWaveLoopStart + "";
                        this._chipWaveLoopEndStepper.value = instrument.chipWaveLoopEnd + "";
                        this._chipWaveStartOffsetStepper.value = instrument.chipWaveStartOffset + "";
                        this._chipWavePlayBackwardsBox.checked = instrument.chipWavePlayBackwards ? true : false;
                    }
                    if (instrument.type == 9) {
                        this._customWaveDraw.style.display = "";
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                    }
                    else {
                        this._customWaveDraw.style.display = "none";
                    }
                    if (instrument.type == 8) {
                        this._supersawDynamismRow.style.display = "";
                        this._supersawSpreadRow.style.display = "";
                        this._supersawShapeRow.style.display = "";
                        this._supersawDynamismSlider.updateValue(instrument.supersawDynamism);
                        this._supersawSpreadSlider.updateValue(instrument.supersawSpread);
                        this._supersawShapeSlider.updateValue(instrument.supersawShape);
                    }
                    else {
                        this._supersawDynamismRow.style.display = "none";
                        this._supersawSpreadRow.style.display = "none";
                        this._supersawShapeRow.style.display = "none";
                    }
                    if (instrument.type == 6 || instrument.type == 8) {
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        this._pulseWidthRow.style.display = "";
                        this._pulseWidthSlider.input.title = prettyNumber(instrument.pulseWidth) + "%";
                        this._pulseWidthSlider.updateValue(instrument.pulseWidth);
                        this._decimalOffsetSlider.input.title = instrument.decimalOffset / 100 <= 0 ? "none" : "-" + prettyNumber(instrument.decimalOffset / 100) + "%";
                        this._decimalOffsetSlider.updateValue(99 - instrument.decimalOffset);
                        this._pulseWidthDropdownGroup.style.display = (this._openPulseWidthDropdown ? "" : "none");
                    }
                    else {
                        this._pulseWidthRow.style.display = "none";
                        this._pulseWidthDropdownGroup.style.display = "none";
                    }
                    if (instrument.type == 1 || instrument.type == 11) {
                        this._phaseModGroup.style.display = "";
                        this._feedbackRow2.style.display = "";
                        this._chipWaveSelectRow.style.display = "none";
                        this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                        this._chipWaveLoopModeSelectRow.style.display = "none";
                        this._chipWaveLoopStartRow.style.display = "none";
                        this._chipWaveLoopEndRow.style.display = "none";
                        this._chipWaveStartOffsetRow.style.display = "none";
                        this._chipWavePlayBackwardsRow.style.display = "none";
                        setSelectedValue(this._algorithmSelect, instrument.algorithm);
                        setSelectedValue(this._feedbackTypeSelect, instrument.feedbackType);
                        this._feedbackAmplitudeSlider.updateValue(instrument.feedbackAmplitude);
                        for (let i = 0; i < Config.operatorCount + (instrument.type == 11 ? 2 : 0); i++) {
                            const isCarrier = instrument.type == 1 ? (i < Config.algorithms[instrument.algorithm].carrierCount) : (i < instrument.customAlgorithm.carrierCount);
                            this._operatorRows[i].style.color = isCarrier ? ColorConfig.primaryText : "";
                            setSelectedValue(this._operatorFrequencySelects[i], instrument.operators[i].frequency);
                            this._operatorAmplitudeSliders[i].updateValue(instrument.operators[i].amplitude);
                            setSelectedValue(this._operatorWaveformSelects[i], instrument.operators[i].waveform);
                            this._operatorWaveformPulsewidthSliders[i].updateValue(instrument.operators[i].pulseWidth);
                            this._operatorWaveformPulsewidthSliders[i].input.title = "" + Config.pwmOperatorWaves[instrument.operators[i].pulseWidth].name;
                            this._operatorDropdownGroups[i].style.color = isCarrier ? ColorConfig.primaryText : "";
                            const operatorName = (isCarrier ? "Voice " : "Modulator ") + (i + 1);
                            this._operatorFrequencySelects[i].title = operatorName + " Frequency";
                            this._operatorAmplitudeSliders[i].input.title = operatorName + (isCarrier ? " Volume" : " Amplitude");
                            this._operatorDropdownGroups[i].style.display = (this._openOperatorDropdowns[i] ? "" : "none");
                            if (instrument.operators[i].waveform == 2) {
                                this._operatorWaveformPulsewidthSliders[i].container.style.display = "";
                                this._operatorWaveformHints[i].style.display = "none";
                            }
                            else {
                                this._operatorWaveformPulsewidthSliders[i].container.style.display = "none";
                                this._operatorWaveformHints[i].style.display = "";
                            }
                        }
                        if (instrument.type == 11) {
                            setSelectedValue(this._algorithm6OpSelect, instrument.algorithm6Op);
                            setSelectedValue(this._feedback6OpTypeSelect, instrument.feedbackType6Op);
                            this._customAlgorithmCanvas.redrawCanvas();
                            this._algorithm6OpSelectRow.style.display = "";
                            this._feedback6OpRow1.style.display = "";
                            this._operatorRows[4].style.display = "";
                            this._operatorRows[5].style.display = "";
                            this._operatorDropdownGroups[4].style.display = (this._openOperatorDropdowns[4] ? "" : "none");
                            this._operatorDropdownGroups[5].style.display = (this._openOperatorDropdowns[5] ? "" : "none");
                            this._algorithmSelectRow.style.display = "none";
                            this._feedbackRow1.style.display = "none";
                        }
                        else {
                            this._algorithm6OpSelectRow.style.display = "none";
                            this._feedback6OpRow1.style.display = "none";
                            this._operatorRows[4].style.display = "none";
                            this._operatorRows[5].style.display = "none";
                            this._operatorDropdownGroups[4].style.display = "none";
                            this._operatorDropdownGroups[5].style.display = "none";
                            this._feedbackRow1.style.display = "";
                            this._algorithmSelectRow.style.display = "";
                        }
                    }
                    else {
                        this._algorithm6OpSelectRow.style.display = "none";
                        this._feedback6OpRow1.style.display = "none";
                        this._algorithmSelectRow.style.display = "none";
                        this._phaseModGroup.style.display = "none";
                        this._feedbackRow1.style.display = "none";
                        this._feedbackRow2.style.display = "none";
                    }
                    this._pulseWidthSlider.input.title = prettyNumber(instrument.pulseWidth) + "%";
                    if (effectsIncludeTransition(instrument.effects)) {
                        this._transitionRow.style.display = "";
                        if (this._openTransitionDropdown)
                            this._transitionDropdownGroup.style.display = "";
                        setSelectedValue(this._transitionSelect, instrument.transition);
                    }
                    else {
                        this._transitionDropdownGroup.style.display = "none";
                        this._transitionRow.style.display = "none";
                    }
                    if (effectsIncludeChord(instrument.effects)) {
                        this._chordSelectRow.style.display = "";
                        this._chordDropdown.style.display = (instrument.chord == Config.chords.dictionary["arpeggio"].index) ? "" : "none";
                        this._chordDropdownGroup.style.display = (instrument.chord == Config.chords.dictionary["arpeggio"].index && this._openChordDropdown) ? "" : "none";
                        setSelectedValue(this._chordSelect, instrument.chord);
                    }
                    else {
                        this._chordSelectRow.style.display = "none";
                        this._chordDropdown.style.display = "none";
                        this._chordDropdownGroup.style.display = "none";
                    }
                    if (effectsIncludePitchShift(instrument.effects)) {
                        this._pitchShiftRow.style.display = "";
                        this._pitchShiftSlider.updateValue(instrument.pitchShift);
                        this._pitchShiftSlider.input.title = (instrument.pitchShift - Config.pitchShiftCenter) + " semitone(s)";
                        for (const marker of this._pitchShiftFifthMarkers) {
                            marker.style.display = prefs.showFifth ? "" : "none";
                        }
                    }
                    else {
                        this._pitchShiftRow.style.display = "none";
                    }
                    if (effectsIncludeDetune(instrument.effects)) {
                        this._detuneSliderRow.style.display = "";
                        this._detuneSlider.updateValue(instrument.detune - Config.detuneCenter);
                        this._detuneSlider.input.title = (Synth.detuneToCents(instrument.detune)) + " cent(s)";
                    }
                    else {
                        this._detuneSliderRow.style.display = "none";
                    }
                    if (effectsIncludeVibrato(instrument.effects)) {
                        this._vibratoSelectRow.style.display = "";
                        if (this._openVibratoDropdown)
                            this._vibratoDropdownGroup.style.display = "";
                        setSelectedValue(this._vibratoSelect, instrument.vibrato);
                    }
                    else {
                        this._vibratoDropdownGroup.style.display = "none";
                        this._vibratoSelectRow.style.display = "none";
                    }
                    if (effectsIncludeNoteFilter(instrument.effects)) {
                        this._noteFilterTypeRow.style.setProperty("--text-color-lit", colors.primaryNote);
                        this._noteFilterTypeRow.style.setProperty("--text-color-dim", colors.secondaryNote);
                        this._noteFilterTypeRow.style.setProperty("--background-color-lit", colors.primaryChannel);
                        this._noteFilterTypeRow.style.setProperty("--background-color-dim", colors.secondaryChannel);
                        this._noteFilterTypeRow.style.display = "";
                        if (this._doc.synth.isFilterModActive(true, this._doc.channel, this._doc.getCurrentInstrument())) {
                            this._noteFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);
                        }
                        else {
                            this._noteFilterEditor.render();
                        }
                        if (instrument.noteFilterType) {
                            this._noteFilterSimpleButton.classList.remove("deactivated");
                            this._noteFilterAdvancedButton.classList.add("deactivated");
                            this._noteFilterRow.style.display = "none";
                            this._noteFilterSimpleCutRow.style.display = "";
                            this._noteFilterSimplePeakRow.style.display = "";
                        }
                        else {
                            this._noteFilterSimpleButton.classList.add("deactivated");
                            this._noteFilterAdvancedButton.classList.remove("deactivated");
                            this._noteFilterRow.style.display = "";
                            this._noteFilterSimpleCutRow.style.display = "none";
                            this._noteFilterSimplePeakRow.style.display = "none";
                        }
                    }
                    else {
                        this._noteFilterRow.style.display = "none";
                        this._noteFilterSimpleCutRow.style.display = "none";
                        this._noteFilterSimplePeakRow.style.display = "none";
                        this._noteFilterTypeRow.style.display = "none";
                    }
                    if (this._doc.prefs.instrumentSettingsSimplifier == true) {
                        if (this._instSettingMode == 1) {
                            this._setSettingToInstrument();
                        }
                        if (this._instSettingMode == 2) {
                            this._setSettingToEffect();
                        }
                        if (this._instSettingMode == 3) {
                            this._setSettingToEnvelope();
                        }
                        this._instOptionsDiv.style.display = "";
                    }
                    else {
                        const effectStuffs = document.getElementById('effectsDiv');
                        const envelopeStuffs = document.getElementById('envelopesDiv');
                        const instStuffs = document.getElementById('InstrumentDiv');
                        instStuffs.style.display = "";
                        effectStuffs.style.display = "";
                        envelopeStuffs.style.display = "";
                        this._instOptionsDiv.style.display = "none";
                    }
                    if (effectsIncludeDistortion(instrument.effects)) {
                        this._distortionRow.style.display = "";
                        if (instrument.type == 0 || instrument.type == 9 || instrument.type == 6 || instrument.type == 8)
                            this._aliasingRow.style.display = "";
                        else
                            this._aliasingRow.style.display = "none";
                        this._distortionSlider.updateValue(instrument.distortion);
                    }
                    else {
                        this._distortionRow.style.display = "none";
                        this._aliasingRow.style.display = "none";
                    }
                    if (effectsIncludeBitcrusher(instrument.effects)) {
                        this._bitcrusherQuantizationRow.style.display = "";
                        this._bitcrusherFreqRow.style.display = "";
                        this._bitcrusherQuantizationSlider.updateValue(instrument.bitcrusherQuantization);
                        this._bitcrusherFreqSlider.updateValue(instrument.bitcrusherFreq);
                    }
                    else {
                        this._bitcrusherQuantizationRow.style.display = "none";
                        this._bitcrusherFreqRow.style.display = "none";
                    }
                    if (effectsIncludePanning(instrument.effects)) {
                        this._panSliderRow.style.display = "";
                        if (this._openPanDropdown)
                            this._panDropdownGroup.style.display = "";
                        this._panSlider.updateValue(instrument.pan);
                    }
                    else {
                        this._panSliderRow.style.display = "none";
                        this._panDropdownGroup.style.display = "none";
                    }
                    if (effectsIncludeChorus(instrument.effects)) {
                        this._chorusRow.style.display = "";
                        this._chorusSlider.updateValue(instrument.chorus);
                    }
                    else {
                        this._chorusRow.style.display = "none";
                    }
                    if (effectsIncludeEcho(instrument.effects)) {
                        this._echoSustainRow.style.display = "";
                        this._echoSustainSlider.updateValue(instrument.echoSustain);
                        this._echoDelayRow.style.display = "";
                        this._echoDelaySlider.updateValue(instrument.echoDelay);
                        this._echoDelaySlider.input.title = (Math.round((instrument.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat) * 1000) / 1000) + " beat(s)";
                    }
                    else {
                        this._echoSustainRow.style.display = "none";
                        this._echoDelayRow.style.display = "none";
                    }
                    if (effectsIncludeReverb(instrument.effects)) {
                        this._reverbRow.style.display = "";
                        this._reverbSlider.updateValue(instrument.reverb);
                    }
                    else {
                        this._reverbRow.style.display = "none";
                    }
                    if (effectsIncludeRM(instrument.effects)) {
                        this._ringModContainerRow.style.display = "";
                        this._ringModSlider.updateValue(instrument.ringModulation);
                        this._ringModHzSlider.updateValue(instrument.ringModulationHz);
                        setSelectedValue(this._ringModWaveSelect, instrument.rmWaveformIndex);
                        this._ringModPulsewidthSlider.updateValue(instrument.rmPulseWidth);
                    }
                    else {
                        this._ringModContainerRow.style.display = "none";
                    }
                    if (effectsIncludePhaser(instrument.effects)) {
                        this._phaserMixRow.style.display = "";
                        this._phaserMixSlider.updateValue(instrument.phaserMix);
                        this._phaserFreqRow.style.display = "";
                        this._phaserFreqSlider.updateValue(instrument.phaserFreq);
                        this._phaserFeedbackRow.style.display = "";
                        this._phaserFeedbackSlider.updateValue(instrument.phaserFeedback);
                        this._phaserStagesRow.style.display = "";
                        this._phaserStagesSlider.updateValue(instrument.phaserStages);
                    }
                    else {
                        this._phaserMixRow.style.display = "none";
                        this._phaserFreqRow.style.display = "none";
                        this._phaserFeedbackRow.style.display = "none";
                        this._phaserStagesRow.style.display = "none";
                    }
                    if (instrument.type == 0 || instrument.type == 9 || instrument.type == 5 || instrument.type == 7 || instrument.type == 3 || instrument.type == 6 || instrument.type == 2) {
                        this._unisonSelectRow.style.display = "";
                        setSelectedValue(this._unisonSelect, instrument.unison);
                        this._unisonVoicesInputBox.value = instrument.unisonVoices + "";
                        this._unisonSpreadInputBox.value = instrument.unisonSpread + "";
                        this._unisonOffsetInputBox.value = instrument.unisonOffset + "";
                        this._unisonExpressionInputBox.value = instrument.unisonExpression + "";
                        this._unisonSignInputBox.value = instrument.unisonSign + "";
                        this._unisonDropdownGroup.style.display = (this._openUnisonDropdown ? "" : "none");
                    }
                    else {
                        this._unisonSelectRow.style.display = "none";
                        this._unisonDropdownGroup.style.display = "none";
                    }
                    if (this._openEnvelopeDropdown)
                        this._envelopeDropdownGroup.style.display = "";
                    else
                        this._envelopeDropdownGroup.style.display = "none";
                    this._envelopeEditor.render();
                    for (let chordIndex = 0; chordIndex < Config.chords.length; chordIndex++) {
                        let hidden = (!Config.instrumentTypeHasSpecialInterval[instrument.type] && Config.chords[chordIndex].customInterval);
                        const option = this._chordSelect.children[chordIndex];
                        if (hidden) {
                            if (!option.hasAttribute("hidden")) {
                                option.setAttribute("hidden", "");
                            }
                        }
                        else {
                            option.removeAttribute("hidden");
                        }
                    }
                    this._instrumentSettingsGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;
                    setSelectedValue(this._transitionSelect, instrument.transition);
                    setSelectedValue(this._vibratoSelect, instrument.vibrato);
                    setSelectedValue(this._vibratoTypeSelect, instrument.vibratoType);
                    setSelectedValue(this._chordSelect, instrument.chord);
                    this._panSliderInputBox.value = instrument.pan + "";
                    this._pwmSliderInputBox.value = instrument.pulseWidth + "";
                    this._detuneSliderInputBox.value = (instrument.detune - Config.detuneCenter) + "";
                    this._ringModHzNum.innerHTML = (Math.floor(20 * Math.pow(4400 / 20, Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1))))) + "";
                    this._instrumentVolumeSlider.updateValue(instrument.volume);
                    this._instrumentVolumeSliderInputBox.value = "" + (instrument.volume);
                    this._vibratoDepthSlider.updateValue(Math.round(instrument.vibratoDepth * 25));
                    this._vibratoDelaySlider.updateValue(Math.round(instrument.vibratoDelay));
                    this._vibratoSpeedSlider.updateValue(instrument.vibratoSpeed);
                    setSelectedValue(this._vibratoTypeSelect, instrument.vibratoType);
                    this._arpeggioSpeedSlider.updateValue(instrument.arpeggioSpeed);
                    this._panDelaySlider.updateValue(instrument.panDelay);
                    this._vibratoDelaySlider.input.title = "" + Math.round(instrument.vibratoDelay);
                    this._vibratoDepthSlider.input.title = "" + instrument.vibratoDepth;
                    this._vibratoSpeedSlider.input.title = "x" + instrument.vibratoSpeed / 10;
                    this._vibratoSpeedDisplay.textContent = "x" + instrument.vibratoSpeed / 10;
                    this._panDelaySlider.input.title = "" + instrument.panDelay;
                    this._arpeggioSpeedSlider.input.title = "x" + prettyNumber(Config.arpSpeedScale[instrument.arpeggioSpeed]);
                    this._arpeggioSpeedDisplay.textContent = "x" + prettyNumber(Config.arpSpeedScale[instrument.arpeggioSpeed]);
                    this._eqFilterSimpleCutSlider.updateValue(instrument.eqFilterSimpleCut);
                    this._eqFilterSimplePeakSlider.updateValue(instrument.eqFilterSimplePeak);
                    this._noteFilterSimpleCutSlider.updateValue(instrument.noteFilterSimpleCut);
                    this._noteFilterSimplePeakSlider.updateValue(instrument.noteFilterSimplePeak);
                    this._envelopeSpeedSlider.updateValue(instrument.envelopeSpeed);
                    this._envelopeSpeedSlider.input.title = "x" + prettyNumber(Config.arpSpeedScale[instrument.envelopeSpeed]);
                    this._envelopeSpeedDisplay.textContent = "x" + prettyNumber(Config.arpSpeedScale[instrument.envelopeSpeed]);
                    if (instrument.type == 9) {
                        this._customWaveDrawCanvas.redrawCanvas();
                        if (this.prompt instanceof CustomChipPrompt) {
                            this.prompt.customChipCanvas.render();
                        }
                    }
                    this._renderInstrumentBar(channel, instrumentIndex, colors);
                }
                else {
                    this._usageCheck(this._doc.channel, instrumentIndex);
                    this._pitchedPresetSelect.style.display = "none";
                    this._drumPresetSelect.style.display = "none";
                    $("#pitchPresetSelect").parent().hide();
                    $("#drumPresetSelect").parent().hide();
                    this._modulatorGroup.insertBefore(this._instrumentExportGroup, this._modulatorGroup.firstChild);
                    this._modulatorGroup.insertBefore(this._instrumentCopyGroup, this._modulatorGroup.firstChild);
                    this._modulatorGroup.insertBefore(this._instrumentsButtonRow, this._modulatorGroup.firstChild);
                    this._modulatorGroup.insertBefore(this._instrumentSettingsTextRow, this._modulatorGroup.firstChild);
                    if (this._doc.song.channels[this._doc.channel].name == "") {
                        this._instrumentSettingsTextRow.textContent = "Modulator Settings";
                    }
                    else {
                        this._instrumentSettingsTextRow.textContent = this._doc.song.channels[this._doc.channel].name;
                    }
                    if (this._doc.prefs.instrumentSettingsSimplifier == true) {
                        this._instOptionsDiv.style.display = "none";
                    }
                    this._chipNoiseSelectRow.style.display = "none";
                    this._chipWaveSelectRow.style.display = "none";
                    this._useChipWaveAdvancedLoopControlsRow.style.display = "none";
                    this._chipWaveLoopModeSelectRow.style.display = "none";
                    this._chipWaveLoopStartRow.style.display = "none";
                    this._chipWaveLoopEndRow.style.display = "none";
                    this._chipWaveStartOffsetRow.style.display = "none";
                    this._chipWavePlayBackwardsRow.style.display = "none";
                    this._spectrumRow.style.display = "none";
                    this._harmonicsRow.style.display = "none";
                    this._transitionRow.style.display = "none";
                    this._chordSelectRow.style.display = "none";
                    this._chordDropdownGroup.style.display = "none";
                    this._drumsetGroup.style.display = "none";
                    this._customWaveDraw.style.display = "none";
                    this._supersawDynamismRow.style.display = "none";
                    this._supersawSpreadRow.style.display = "none";
                    this._supersawShapeRow.style.display = "none";
                    this._algorithmSelectRow.style.display = "none";
                    this._phaseModGroup.style.display = "none";
                    this._feedbackRow1.style.display = "none";
                    this._feedbackRow2.style.display = "none";
                    this._pulseWidthRow.style.display = "none";
                    this._vibratoSelectRow.style.display = "none";
                    this._vibratoDropdownGroup.style.display = "none";
                    this._envelopeDropdownGroup.style.display = "none";
                    this._detuneSliderRow.style.display = "none";
                    this._panSliderRow.style.display = "none";
                    this._panDropdownGroup.style.display = "none";
                    this._pulseWidthDropdownGroup.style.display = "none";
                    this._unisonDropdownGroup.style.display = "none";
                    this._modulatorGroup.style.display = "";
                    this._modulatorGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        let instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                        let modChannel = Math.max(0, instrument.modChannels[mod]);
                        let modInstrument = instrument.modInstruments[mod];
                        if (modInstrument >= this._doc.song.channels[modChannel].instruments.length + 2 || (modInstrument > 0 && this._doc.song.channels[modChannel].instruments.length <= 1)) {
                            modInstrument = 0;
                            instrument.modInstruments[mod] = 0;
                        }
                        if (modChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                            instrument.modInstruments[mod] = 0;
                            instrument.modulators[mod] = 0;
                        }
                        if (this._doc.recalcChannelNames || (this._modChannelBoxes[mod].children.length != 2 + this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {
                            while (this._modChannelBoxes[mod].firstChild)
                                this._modChannelBoxes[mod].remove(0);
                            const channelList = [];
                            channelList.push("none");
                            channelList.push("song");
                            for (let i = 0; i < this._doc.song.pitchChannelCount; i++) {
                                if (this._doc.song.channels[i].name == "") {
                                    channelList.push("pitch " + (i + 1));
                                }
                                else {
                                    channelList.push(this._doc.song.channels[i].name);
                                }
                            }
                            for (let i = 0; i < this._doc.song.noiseChannelCount; i++) {
                                if (this._doc.song.channels[i + this._doc.song.pitchChannelCount].name == "") {
                                    channelList.push("noise " + (i + 1));
                                }
                                else {
                                    channelList.push(this._doc.song.channels[i + this._doc.song.pitchChannelCount].name);
                                }
                            }
                            buildOptions(this._modChannelBoxes[mod], channelList);
                        }
                        this._modChannelBoxes[mod].selectedIndex = instrument.modChannels[mod] + 2;
                        let channel = this._doc.song.channels[modChannel];
                        if (this._modInstrumentBoxes[mod].children.length != channel.instruments.length + 2) {
                            while (this._modInstrumentBoxes[mod].firstChild)
                                this._modInstrumentBoxes[mod].remove(0);
                            const instrumentList = [];
                            for (let i = 0; i < channel.instruments.length; i++) {
                                instrumentList.push("" + i + 1);
                            }
                            instrumentList.push("all");
                            instrumentList.push("active");
                            buildOptions(this._modInstrumentBoxes[mod], instrumentList);
                        }
                        if (channel.bars[this._doc.bar] > 0) {
                            let usedInstruments = channel.patterns[channel.bars[this._doc.bar] - 1].instruments;
                            for (let i = 0; i < channel.instruments.length; i++) {
                                if (usedInstruments.includes(i)) {
                                    this._modInstrumentBoxes[mod].options[i].label = "🢒" + (i + 1);
                                }
                                else {
                                    this._modInstrumentBoxes[mod].options[i].label = "" + (i + 1);
                                }
                            }
                        }
                        else {
                            for (let i = 0; i < channel.instruments.length; i++) {
                                this._modInstrumentBoxes[mod].options[i].label = "" + (i + 1);
                            }
                        }
                        this._modInstrumentBoxes[mod].selectedIndex = instrument.modInstruments[mod];
                        if (instrument.modChannels[mod] != -2) {
                            while (this._modSetBoxes[mod].firstChild)
                                this._modSetBoxes[mod].remove(0);
                            const settingList = [];
                            const unusedSettingList = [];
                            settingList.push("none");
                            if (instrument.modChannels[mod] == -1) {
                                settingList.push("song volume");
                                settingList.push("tempo");
                                settingList.push("song reverb");
                                settingList.push("next bar");
                                settingList.push("song detune");
                                settingList.push("song bitcrush");
                                settingList.push("song freqcrush");
                                settingList.push("song panning");
                                settingList.push("song chorus");
                                settingList.push("song distortion");
                                settingList.push("song ring modulation");
                            }
                            else {
                                settingList.push("note volume");
                                settingList.push("mix volume");
                                let tgtInstrumentTypes = [];
                                let anyInstrumentAdvancedEQ = false, anyInstrumentSimpleEQ = false, anyInstrumentAdvancedNote = false, anyInstrumentSimpleNote = false, anyInstrumentArps = false, anyInstrumentPitchShifts = false, anyInstrumentDetunes = false, anyInstrumentVibratos = false, anyInstrumentNoteFilters = false, anyInstrumentDistorts = false, anyInstrumentBitcrushes = false, anyInstrumentPans = false, anyInstrumentChorus = false, anyInstrumentEchoes = false, anyInstrumentReverbs = false, anyInstrumentRMs = false, anyInstrumentPhasers = false, anyInstrumentHasEnvelopes = false;
                                let allInstrumentNoteFilters = true, allInstrumentDetunes = true, allInstrumentVibratos = true, allInstrumentDistorts = true, allInstrumentBitcrushes = true, allInstrumentPans = true, allInstrumentChorus = true, allInstrumentEchoes = true, allInstrumentReverbs = true;
                                let instrumentCandidates = [];
                                if (modInstrument >= channel.instruments.length) {
                                    for (let i = 0; i < channel.instruments.length; i++) {
                                        instrumentCandidates.push(i);
                                    }
                                }
                                else {
                                    instrumentCandidates.push(modInstrument);
                                }
                                for (let i = 0; i < instrumentCandidates.length; i++) {
                                    let instrumentIndex = instrumentCandidates[i];
                                    if (!tgtInstrumentTypes.includes(channel.instruments[instrumentIndex].type))
                                        tgtInstrumentTypes.push(channel.instruments[instrumentIndex].type);
                                    if (channel.instruments[instrumentIndex].eqFilterType)
                                        anyInstrumentSimpleEQ = true;
                                    else
                                        anyInstrumentAdvancedEQ = true;
                                    if (effectsIncludeChord(channel.instruments[instrumentIndex].effects) && channel.instruments[instrumentIndex].getChord().arpeggiates) {
                                        anyInstrumentArps = true;
                                    }
                                    if (effectsIncludePitchShift(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentPitchShifts = true;
                                    }
                                    if (effectsIncludeDetune(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentDetunes = true;
                                    }
                                    else {
                                        allInstrumentDetunes = false;
                                    }
                                    if (effectsIncludeVibrato(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentVibratos = true;
                                    }
                                    else {
                                        allInstrumentVibratos = false;
                                    }
                                    if (effectsIncludeNoteFilter(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentNoteFilters = true;
                                        if (channel.instruments[instrumentIndex].noteFilterType)
                                            anyInstrumentSimpleNote = true;
                                        else
                                            anyInstrumentAdvancedNote = true;
                                    }
                                    else {
                                        allInstrumentNoteFilters = false;
                                    }
                                    if (effectsIncludeDistortion(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentDistorts = true;
                                    }
                                    else {
                                        allInstrumentDistorts = false;
                                    }
                                    if (effectsIncludeBitcrusher(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentBitcrushes = true;
                                    }
                                    else {
                                        allInstrumentBitcrushes = false;
                                    }
                                    if (effectsIncludePanning(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentPans = true;
                                    }
                                    else {
                                        allInstrumentPans = false;
                                    }
                                    if (effectsIncludeChorus(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentChorus = true;
                                    }
                                    else {
                                        allInstrumentChorus = false;
                                    }
                                    if (effectsIncludeEcho(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentEchoes = true;
                                    }
                                    else {
                                        allInstrumentEchoes = false;
                                    }
                                    if (effectsIncludeReverb(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentReverbs = true;
                                    }
                                    else {
                                        allInstrumentReverbs = false;
                                    }
                                    if (effectsIncludeRM(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentRMs = true;
                                    }
                                    else {
                                        anyInstrumentRMs = false;
                                    }
                                    if (effectsIncludePhaser(channel.instruments[instrumentIndex].effects)) {
                                        anyInstrumentPhasers = true;
                                    }
                                    else {
                                        anyInstrumentPhasers = false;
                                    }
                                    if (channel.instruments[instrumentIndex].envelopes.length > 0) {
                                        anyInstrumentHasEnvelopes = true;
                                    }
                                }
                                if (anyInstrumentAdvancedEQ) {
                                    settingList.push("eq filter");
                                }
                                if (anyInstrumentSimpleEQ) {
                                    settingList.push("eq filt cut");
                                    settingList.push("eq filt peak");
                                }
                                if (tgtInstrumentTypes.includes(1)) {
                                    settingList.push("fm slider 1");
                                    settingList.push("fm slider 2");
                                    settingList.push("fm slider 3");
                                    settingList.push("fm slider 4");
                                    settingList.push("fm feedback");
                                }
                                if (tgtInstrumentTypes.includes(11)) {
                                    settingList.push("fm slider 1");
                                    settingList.push("fm slider 2");
                                    settingList.push("fm slider 3");
                                    settingList.push("fm slider 4");
                                    settingList.push("fm slider 5");
                                    settingList.push("fm slider 6");
                                    settingList.push("fm feedback");
                                }
                                if (tgtInstrumentTypes.includes(6) || tgtInstrumentTypes.includes(8)) {
                                    settingList.push("pulse width");
                                    settingList.push("decimal offset");
                                }
                                if (tgtInstrumentTypes.includes(8)) {
                                    settingList.push("dynamism");
                                    settingList.push("spread");
                                    settingList.push("saw shape");
                                }
                                if (tgtInstrumentTypes.includes(7)) {
                                    settingList.push("sustain");
                                }
                                if (anyInstrumentArps) {
                                    settingList.push("arp speed");
                                    settingList.push("reset arp");
                                }
                                if (anyInstrumentPitchShifts) {
                                    settingList.push("pitch shift");
                                }
                                if (anyInstrumentDetunes) {
                                    settingList.push("detune");
                                }
                                if (!allInstrumentDetunes) {
                                    unusedSettingList.push("+ detune");
                                }
                                if (anyInstrumentVibratos) {
                                    settingList.push("vibrato depth");
                                    settingList.push("vibrato speed");
                                    settingList.push("vibrato delay");
                                }
                                if (!allInstrumentVibratos) {
                                    unusedSettingList.push("+ vibrato depth");
                                    unusedSettingList.push("+ vibrato speed");
                                    unusedSettingList.push("+ vibrato delay");
                                }
                                if (anyInstrumentNoteFilters) {
                                    if (anyInstrumentAdvancedNote) {
                                        settingList.push("note filter");
                                    }
                                    if (anyInstrumentSimpleNote) {
                                        settingList.push("note filt cut");
                                        settingList.push("note filt peak");
                                    }
                                }
                                if (!allInstrumentNoteFilters) {
                                    unusedSettingList.push("+ note filter");
                                }
                                if (anyInstrumentDistorts) {
                                    settingList.push("distortion");
                                }
                                if (!allInstrumentDistorts) {
                                    unusedSettingList.push("+ distortion");
                                }
                                if (anyInstrumentBitcrushes) {
                                    settingList.push("bit crush");
                                    settingList.push("freq crush");
                                }
                                if (!allInstrumentBitcrushes) {
                                    unusedSettingList.push("+ bit crush");
                                    unusedSettingList.push("+ freq crush");
                                }
                                if (anyInstrumentPans) {
                                    settingList.push("pan");
                                    settingList.push("pan delay");
                                }
                                if (!allInstrumentPans) {
                                    unusedSettingList.push("+ pan");
                                    unusedSettingList.push("+ pan delay");
                                }
                                if (anyInstrumentChorus) {
                                    settingList.push("chorus");
                                }
                                if (!allInstrumentChorus) {
                                    unusedSettingList.push("+ chorus");
                                }
                                if (anyInstrumentEchoes) {
                                    settingList.push("echo");
                                }
                                if (!allInstrumentEchoes) {
                                    unusedSettingList.push("+ echo");
                                }
                                if (anyInstrumentReverbs) {
                                    settingList.push("reverb");
                                }
                                if (!allInstrumentReverbs) {
                                    unusedSettingList.push("+ reverb");
                                }
                                if (anyInstrumentHasEnvelopes) {
                                    settingList.push("envelope speed");
                                }
                                if (anyInstrumentRMs) {
                                    settingList.push("ring modulation");
                                    settingList.push("ring mod hertz");
                                }
                                if (anyInstrumentPhasers) {
                                    settingList.push("phaser");
                                    settingList.push("phaser frequency");
                                    settingList.push("phaser feedback");
                                    settingList.push("phaser stages");
                                }
                            }
                            buildOptions(this._modSetBoxes[mod], settingList);
                            if (unusedSettingList.length > 0) {
                                this._modSetBoxes[mod].appendChild(option({ selected: false, disabled: true, value: "Add Effect" }, "Add Effect"));
                                buildOptions(this._modSetBoxes[mod], unusedSettingList);
                            }
                            let setIndex = settingList.indexOf(Config.modulators[instrument.modulators[mod]].name);
                            if (setIndex == -1) {
                                this._modSetBoxes[mod].insertBefore(option({ value: Config.modulators[instrument.modulators[mod]].name, style: "color: red;" }, Config.modulators[instrument.modulators[mod]].name), this._modSetBoxes[mod].children[0]);
                                this._modSetBoxes[mod].selectedIndex = 0;
                                this._whenSetModSetting(mod, true);
                            }
                            else {
                                this._modSetBoxes[mod].selectedIndex = setIndex;
                                this._modSetBoxes[mod].classList.remove("invalidSetting");
                                instrument.invalidModulators[mod] = false;
                            }
                        }
                        else if (this._modSetBoxes[mod].selectedIndex > 0) {
                            this._modSetBoxes[mod].selectedIndex = 0;
                            this._whenSetModSetting(mod);
                        }
                        if (instrument.modChannels[mod] < 0) {
                            (this._modInstrumentBoxes[mod].parentElement).style.display = "none";
                            $("#modInstrumentText" + mod).get(0).style.display = "none";
                            $("#modChannelText" + mod).get(0).innerText = "Channel:";
                            if (instrument.modChannels[mod] == -2) {
                                $("#modSettingText" + mod).get(0).style.display = "none";
                                (this._modSetBoxes[mod].parentElement).style.display = "none";
                            }
                            else {
                                $("#modSettingText" + mod).get(0).style.display = "";
                                (this._modSetBoxes[mod].parentElement).style.display = "";
                            }
                            this._modTargetIndicators[mod].style.setProperty("fill", ColorConfig.uiWidgetFocus);
                            this._modTargetIndicators[mod].classList.remove("modTarget");
                        }
                        else {
                            (this._modInstrumentBoxes[mod].parentElement).style.display = (channel.instruments.length > 1) ? "" : "none";
                            $("#modInstrumentText" + mod).get(0).style.display = (channel.instruments.length > 1) ? "" : "none";
                            $("#modChannelText" + mod).get(0).innerText = (channel.instruments.length > 1) ? "Ch:" : "Channel:";
                            $("#modSettingText" + mod).get(0).style.display = "";
                            (this._modSetBoxes[mod].parentElement).style.display = "";
                            this._modTargetIndicators[mod].style.setProperty("fill", ColorConfig.indicatorPrimary);
                            this._modTargetIndicators[mod].classList.add("modTarget");
                        }
                        let filterType = Config.modulators[instrument.modulators[mod]].name;
                        if (filterType == "eq filter" || filterType == "note filter") {
                            $("#modFilterText" + mod).get(0).style.display = "";
                            $("#modSettingText" + mod).get(0).style.setProperty("margin-bottom", "2px");
                            let useInstrument = instrument.modInstruments[mod];
                            let modChannel = this._doc.song.channels[Math.max(0, instrument.modChannels[mod])];
                            let tmpCount = -1;
                            if (useInstrument >= modChannel.instruments.length) {
                                for (let i = 0; i < modChannel.instruments.length; i++) {
                                    if (filterType == "eq filter") {
                                        if (modChannel.instruments[i].eqFilter.controlPointCount > tmpCount) {
                                            tmpCount = modChannel.instruments[i].eqFilter.controlPointCount;
                                            useInstrument = i;
                                        }
                                    }
                                    else {
                                        if (modChannel.instruments[i].noteFilter.controlPointCount > tmpCount) {
                                            tmpCount = modChannel.instruments[i].noteFilter.controlPointCount;
                                            useInstrument = i;
                                        }
                                    }
                                }
                            }
                            let dotCount = (filterType == "eq filter")
                                ? channel.instruments[useInstrument].getLargestControlPointCount(false)
                                : channel.instruments[useInstrument].getLargestControlPointCount(true);
                            const isSimple = (filterType == "eq filter" ? channel.instruments[useInstrument].eqFilterType : channel.instruments[useInstrument].noteFilterType);
                            if (isSimple)
                                dotCount = 0;
                            if (isSimple || this._modFilterBoxes[mod].children.length != 1 + dotCount * 2) {
                                while (this._modFilterBoxes[mod].firstChild)
                                    this._modFilterBoxes[mod].remove(0);
                                const dotList = [];
                                if (!isSimple)
                                    dotList.push("morph");
                                for (let i = 0; i < dotCount; i++) {
                                    dotList.push("dot " + (i + 1) + " x");
                                    dotList.push("dot " + (i + 1) + " y");
                                }
                                buildOptions(this._modFilterBoxes[mod], dotList);
                            }
                            if (isSimple || instrument.modFilterTypes[mod] >= this._modFilterBoxes[mod].length) {
                                this._modFilterBoxes[mod].classList.add("invalidSetting");
                                instrument.invalidModulators[mod] = true;
                                let useName = ((instrument.modFilterTypes[mod] - 1) % 2 == 1) ?
                                    "dot " + (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) + 1) + " y"
                                    : "dot " + (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) + 1) + " x";
                                if (instrument.modFilterTypes[mod] == 0)
                                    useName = "morph";
                                this._modFilterBoxes[mod].insertBefore(option({ value: useName, style: "color: red;" }, useName), this._modFilterBoxes[mod].children[0]);
                                this._modFilterBoxes[mod].selectedIndex = 0;
                            }
                            else {
                                this._modFilterBoxes[mod].classList.remove("invalidSetting");
                                instrument.invalidModulators[mod] = false;
                                this._modFilterBoxes[mod].selectedIndex = instrument.modFilterTypes[mod];
                            }
                        }
                        else {
                            $("#modFilterText" + mod).get(0).style.display = "none";
                            $("#modSettingText" + mod).get(0).style.setProperty("margin-bottom", "0.9em");
                        }
                    }
                    this._doc.recalcChannelNames = false;
                    for (let chordIndex = 0; chordIndex < Config.chords.length; chordIndex++) {
                        const option = this._chordSelect.children[chordIndex];
                        if (!option.hasAttribute("hidden")) {
                            option.setAttribute("hidden", "");
                        }
                    }
                    this._customInstrumentSettingsGroup.style.display = "none";
                    this._panSliderRow.style.display = "none";
                    this._panDropdownGroup.style.display = "none";
                    this._instrumentVolumeSliderRow.style.display = "none";
                    this._instrumentTypeSelectRow.style.setProperty("display", "none");
                    this._instrumentSettingsGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;
                    if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                        this._piano.forceRender();
                    }
                    this._renderInstrumentBar(channel, instrumentIndex, colors);
                }
                this._instrumentSettingsGroup.style.color = colors.primaryNote;
                if (this._doc.synth.isFilterModActive(false, this._doc.channel, this._doc.getCurrentInstrument())) {
                    this._eqFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);
                }
                else {
                    this._eqFilterEditor.render();
                }
                this._instrumentVolumeSlider.updateValue(instrument.volume);
                this._detuneSlider.updateValue(instrument.detune - Config.detuneCenter);
                this._twoNoteArpBox.checked = instrument.fastTwoNoteArp ? true : false;
                this._clicklessTransitionBox.checked = instrument.clicklessTransition ? true : false;
                this._aliasingBox.checked = instrument.aliases ? true : false;
                this._addEnvelopeButton.disabled = (instrument.envelopeCount >= Config.maxEnvelopeCount);
                this._discreteEnvelopeBox.checked = instrument.discreteEnvelope ? true : false;
                this._volumeSlider.updateValue(prefs.volume);
                if (wasActive && activeElement != null && activeElement.clientWidth == 0) {
                    this.refocusStage();
                }
                this._setPrompt(this._doc.prompt);
                if (prefs.autoFollow && !this._doc.synth.playing) {
                    this._doc.synth.goToBar(this._doc.bar);
                }
                if (this._doc.addedEffect) {
                    const envButtonRect = this._addEnvelopeButton.getBoundingClientRect();
                    const instSettingsRect = this._instrumentSettingsArea.getBoundingClientRect();
                    const settingsRect = this._settingsArea.getBoundingClientRect();
                    this._instrumentSettingsArea.scrollTop += Math.max(0, envButtonRect.top - (instSettingsRect.top + instSettingsRect.height));
                    this._settingsArea.scrollTop += Math.max(0, envButtonRect.top - (settingsRect.top + settingsRect.height));
                    this._doc.addedEffect = false;
                }
                if (this._doc.addedEnvelope) {
                    this._instrumentSettingsArea.scrollTop = this._instrumentSettingsArea.scrollHeight;
                    this._settingsArea.scrollTop = this._settingsArea.scrollHeight;
                    this._doc.addedEnvelope = false;
                }
                this.handleModRecording();
                if (this._ringModWaveSelect.selectedIndex == 2) {
                    this._ringModPulsewidthSlider.container.style.display = "";
                    this._ringModWaveText.style.display = "none";
                }
                else {
                    this._ringModPulsewidthSlider.container.style.display = "none";
                    this._ringModWaveText.style.display = "";
                }
            };
            this.updatePlayButton = () => {
                if (this._renderedIsPlaying != this._doc.synth.playing || this._renderedIsRecording != this._doc.synth.recording || this._renderedShowRecordButton != this._doc.prefs.showRecordButton || this._renderedCtrlHeld != this._ctrlHeld) {
                    this._renderedIsPlaying = this._doc.synth.playing;
                    this._renderedIsRecording = this._doc.synth.recording;
                    this._renderedShowRecordButton = this._doc.prefs.showRecordButton;
                    this._renderedCtrlHeld = this._ctrlHeld;
                    if (document.activeElement == this._playButton || document.activeElement == this._pauseButton || document.activeElement == this._recordButton || document.activeElement == this._stopButton) {
                        this.refocusStage();
                    }
                    this._playButton.style.display = "none";
                    this._mobilePlayButton.style.display = "none";
                    this._pauseButton.style.display = "none";
                    this._mobilePauseButton.style.display = "none";
                    this._recordButton.style.display = "none";
                    this._stopButton.style.display = "none";
                    this._prevBarButton.style.display = "";
                    this._nextBarButton.style.display = "";
                    this._playButton.classList.remove("shrunk");
                    this._mobilePlayButton.classList.remove("shrunk");
                    this._recordButton.classList.remove("shrunk");
                    this._patternEditorRow.style.pointerEvents = "";
                    this._octaveScrollBar.container.style.pointerEvents = "";
                    this._octaveScrollBar.container.style.opacity = "";
                    this._trackContainer.style.pointerEvents = "";
                    this._loopEditor.container.style.opacity = "";
                    this._instrumentSettingsArea.style.pointerEvents = "";
                    this._instrumentSettingsArea.style.opacity = "";
                    this._menuArea.style.pointerEvents = "";
                    this._menuArea.style.opacity = "";
                    this._songSettingsArea.style.pointerEvents = "";
                    this._songSettingsArea.style.opacity = "";
                    if (this._doc.synth.recording) {
                        this._stopButton.style.display = "";
                        this._prevBarButton.style.display = "none";
                        this._nextBarButton.style.display = "none";
                        this._patternEditorRow.style.pointerEvents = "none";
                        this._octaveScrollBar.container.style.pointerEvents = "none";
                        this._octaveScrollBar.container.style.opacity = "0.5";
                        this._trackContainer.style.pointerEvents = "none";
                        this._loopEditor.container.style.opacity = "0.5";
                        this._instrumentSettingsArea.style.pointerEvents = "none";
                        this._instrumentSettingsArea.style.opacity = "0.5";
                        this._menuArea.style.pointerEvents = "none";
                        this._menuArea.style.opacity = "0.5";
                        this._songSettingsArea.style.pointerEvents = "none";
                        this._songSettingsArea.style.opacity = "0.5";
                    }
                    else if (this._doc.synth.playing) {
                        this._pauseButton.style.display = "";
                        this._mobilePauseButton.style.display = "";
                    }
                    else if (this._doc.prefs.showRecordButton) {
                        this._playButton.style.display = "";
                        this._recordButton.style.display = "";
                        this._playButton.classList.add("shrunk");
                        this._mobilePlayButton.classList.add("shrunk");
                        this._recordButton.classList.add("shrunk");
                    }
                    else if (this._ctrlHeld) {
                        this._recordButton.style.display = "";
                    }
                    else {
                        this._playButton.style.display = "";
                        this._mobilePlayButton.style.display = "";
                    }
                }
                window.requestAnimationFrame(this.updatePlayButton);
            };
            this._onTrackAreaScroll = (event) => {
                this._doc.barScrollPos = (this._trackAndMuteContainer.scrollLeft / this._doc.getBarWidth());
                this._doc.channelScrollPos = (this._trackAndMuteContainer.scrollTop / ChannelRow.patternHeight);
            };
            this._disableCtrlContextMenu = (event) => {
                if (event.ctrlKey) {
                    event.preventDefault();
                    return false;
                }
                return true;
            };
            this._tempoStepperCaptureNumberKeys = (event) => {
                switch (event.keyCode) {
                    case 8:
                    case 13:
                    case 38:
                    case 40:
                    case 37:
                    case 39:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        event.stopPropagation();
                        break;
                }
            };
            this._whenKeyPressed = (event) => {
                this._ctrlHeld = event.ctrlKey;
                this._shiftHeld = event.shiftKey;
                if (this.prompt) {
                    if (this.prompt instanceof CustomChipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomScalePrompt || this.prompt instanceof CustomFilterPrompt) {
                        this.prompt.whenKeyPressed(event);
                    }
                    if (event.keyCode == 27) {
                        this._doc.undo();
                    }
                    return;
                }
                if (document.activeElement == this._songTitleInputBox.input || this._patternEditor.editingModLabel || document.activeElement == this._muteEditor._channelNameInput.input) {
                    if (event.keyCode == 13 || event.keyCode == 27) {
                        this.mainLayer.focus();
                        this._patternEditor.stopEditingModLabel(event.keyCode == 27);
                    }
                    return;
                }
                if (document.activeElement == this._panSliderInputBox
                    || document.activeElement == this._pwmSliderInputBox
                    || document.activeElement == this._detuneSliderInputBox
                    || document.activeElement == this._instrumentVolumeSliderInputBox
                    || document.activeElement == this._chipWaveLoopStartStepper
                    || document.activeElement == this._chipWaveLoopEndStepper
                    || document.activeElement == this._chipWaveStartOffsetStepper
                    || document.activeElement == this._octaveStepper
                    || document.activeElement == this._unisonVoicesInputBox
                    || document.activeElement == this._unisonSpreadInputBox
                    || document.activeElement == this._unisonOffsetInputBox
                    || document.activeElement == this._unisonExpressionInputBox
                    || document.activeElement == this._unisonSignInputBox) {
                    if (event.keyCode == 13 || event.keyCode == 27) {
                        this.mainLayer.focus();
                    }
                    return;
                }
                if (this._doc.synth.recording) {
                    if (!event.ctrlKey && !event.metaKey) {
                        this._keyboardLayout.handleKeyEvent(event, true);
                    }
                    if (event.keyCode == 32) {
                        this._toggleRecord();
                        event.preventDefault();
                        this.refocusStage();
                    }
                    else if (event.keyCode == 80 && (event.ctrlKey || event.metaKey)) {
                        this._toggleRecord();
                        event.preventDefault();
                        this.refocusStage();
                    }
                    return;
                }
                const needControlForShortcuts = (this._doc.prefs.pressControlForShortcuts != event.getModifierState("CapsLock"));
                const canPlayNotes = (!event.ctrlKey && !event.metaKey && needControlForShortcuts);
                if (canPlayNotes)
                    this._keyboardLayout.handleKeyEvent(event, true);
                switch (event.keyCode) {
                    case 27:
                        if (!event.ctrlKey && !event.metaKey) {
                            new ChangePatternSelection(this._doc, 0, 0);
                            this._doc.selection.resetBoxSelection();
                        }
                        break;
                    case 16:
                        this._patternEditor.shiftMode = true;
                        break;
                    case 17:
                        this._patternEditor.controlMode = true;
                        break;
                    case 32:
                        if (event.ctrlKey) {
                            this._toggleRecord();
                        }
                        else if (event.shiftKey) {
                            if (this._trackEditor.movePlayheadToMouse() || this._patternEditor.movePlayheadToMouse()) {
                                if (!this._doc.synth.playing)
                                    this._doc.performance.play();
                            }
                            if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            }
                        }
                        else {
                            this.togglePlay();
                        }
                        event.preventDefault();
                        this.refocusStage();
                        break;
                    case 80:
                        if (canPlayNotes)
                            break;
                        if (event.ctrlKey || event.metaKey) {
                            this._toggleRecord();
                            this._doc.synth.loopBarStart = -1;
                            this._doc.synth.loopBarEnd = -1;
                            this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            event.preventDefault();
                            this.refocusStage();
                        }
                        else if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey) && event.shiftKey) {
                            location.href = "player/#song=" + this._doc.song.toBase64String();
                            event.preventDefault();
                        }
                        break;
                    case 192:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            this._doc.goBackToStart();
                            this._doc.song.restoreLimiterDefaults();
                            for (const channel of this._doc.song.channels) {
                                channel.muted = false;
                                channel.name = "";
                            }
                            this._doc.record(new ChangeSong(this._doc, ""), false, true);
                        }
                        else {
                            if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                                this._openPrompt("songRecovery");
                            }
                        }
                        event.preventDefault();
                        break;
                    case 90:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            this._doc.redo();
                        }
                        else {
                            this._doc.undo();
                        }
                        event.preventDefault();
                        break;
                    case 88:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.cutNotes();
                        event.preventDefault();
                        break;
                    case 89:
                        if (canPlayNotes)
                            break;
                        this._doc.redo();
                        event.preventDefault();
                        break;
                    case 66:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            if (event.shiftKey) {
                                if (_loopType == 1) {
                                    const leftSel = Math.min(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
                                    const rightSel = Math.max(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
                                    if ((leftSel < this._doc.synth.loopBarStart || this._doc.synth.loopBarStart == -1)
                                        || (rightSel > this._doc.synth.loopBarEnd || this._doc.synth.loopBarEnd == -1)) {
                                        this._doc.synth.loopBarStart = leftSel;
                                        this._doc.synth.loopBarEnd = rightSel;
                                        if (!this._doc.synth.playing) {
                                            this._doc.synth.snapToBar();
                                            this._doc.performance.play();
                                        }
                                    }
                                    else {
                                        this._doc.synth.loopBarStart = -1;
                                        this._doc.synth.loopBarEnd = -1;
                                    }
                                    if (this._doc.bar != Math.floor(this._doc.synth.playhead) && this._doc.synth.loopBarStart != -1) {
                                        this._doc.synth.goToBar(this._doc.bar);
                                        this._doc.synth.snapToBar();
                                        this._doc.synth.initModFilters(this._doc.song);
                                        this._doc.synth.computeLatestModValues();
                                        if (this._doc.prefs.autoFollow) {
                                            this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                                        }
                                    }
                                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                                }
                            }
                            else {
                                this._openPrompt("beatsPerBar");
                            }
                        }
                        event.preventDefault();
                        break;
                    case 67:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            this._copyInstrument();
                        }
                        else {
                            this._doc.selection.copy();
                            this._doc.selection.resetBoxSelection();
                            this._doc.selection.selectionUpdated();
                        }
                        event.preventDefault();
                        break;
                    case 13:
                        this._doc.synth.loopBarStart = -1;
                        this._doc.synth.loopBarEnd = -1;
                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                        if (event.shiftKey && !event.ctrlKey) {
                            const minusWidth = this._doc.selection.boxSelectionWidth;
                            this._doc.bar -= minusWidth;
                            this._doc.selection.boxSelectionX0 -= minusWidth;
                            this._doc.selection.boxSelectionX1 -= minusWidth;
                            this._doc.selection.insertBars();
                        }
                        else if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {
                            this._doc.selection.insertChannel();
                        }
                        else {
                            this._doc.selection.insertBars();
                        }
                        event.preventDefault();
                        break;
                    case 8:
                        this._doc.synth.loopBarStart = -1;
                        this._doc.synth.loopBarEnd = -1;
                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                        if (event.ctrlKey || event.metaKey) {
                            this._doc.selection.deleteChannel();
                        }
                        else {
                            this._doc.selection.deleteBars();
                        }
                        this._barScrollBar.animatePlayhead();
                        event.preventDefault();
                        break;
                    case 65:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            this._doc.selection.selectChannel();
                        }
                        else {
                            this._doc.selection.selectAll();
                        }
                        event.preventDefault();
                        break;
                    case 68:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.selection.duplicatePatterns();
                            event.preventDefault();
                        }
                        break;
                    case 69:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                            if (!instrument.eqFilterType && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)
                                this._openPrompt("customEQFilterSettings");
                        }
                        else if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._openPrompt("generateEuclideanRhythm");
                            break;
                        }
                        break;
                    case 70:
                        if (canPlayNotes)
                            break;
                        if (_loopType == 1) {
                            if (event.shiftKey) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                                this._doc.synth.goToBar(this._doc.song.loopStart);
                                this._doc.synth.snapToBar();
                                this._doc.synth.initModFilters(this._doc.song);
                                this._doc.synth.computeLatestModValues();
                                if (this._doc.prefs.autoFollow) {
                                    this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                                }
                                event.preventDefault();
                            }
                            else if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                                this._doc.synth.snapToStart();
                                this._doc.synth.initModFilters(this._doc.song);
                                this._doc.synth.computeLatestModValues();
                                if (this._doc.prefs.autoFollow) {
                                    this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                                }
                                event.preventDefault();
                            }
                        }
                        else if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.synth.loopBarStart = -1;
                            this._doc.synth.loopBarEnd = -1;
                            this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            this._doc.synth.snapToStart();
                            this._doc.synth.initModFilters(this._doc.song);
                            this._doc.synth.computeLatestModValues();
                            if (this._doc.prefs.autoFollow) {
                                this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                            }
                            event.preventDefault();
                        }
                        break;
                    case 72:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.synth.goToBar(this._doc.bar);
                            this._doc.synth.snapToBar();
                            this._doc.synth.initModFilters(this._doc.song);
                            this._doc.synth.computeLatestModValues();
                            if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            }
                            if (this._doc.prefs.autoFollow) {
                                this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                            }
                            event.preventDefault();
                        }
                        break;
                    case 74:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey && event.ctrlKey && event.altKey) {
                            this._doc.prefs.autoPlay = false;
                            this._doc.prefs.autoFollow = false;
                            this._doc.prefs.enableNotePreview = true;
                            this._doc.prefs.showFifth = true;
                            this._doc.prefs.notesOutsideScale = false;
                            this._doc.prefs.defaultScale = 0;
                            this._doc.prefs.showLetters = true;
                            this._doc.prefs.showChannels = true;
                            this._doc.prefs.showScrollBar = true;
                            this._doc.prefs.alwaysFineNoteVol = false;
                            this._doc.prefs.enableChannelMuting = true;
                            this._doc.prefs.displayBrowserUrl = true;
                            this._doc.prefs.displayVolumeBar = true;
                            this._doc.prefs.layout = "wide";
                            this._doc.prefs.visibleOctaves = 5;
                            this._doc.prefs.save();
                            event.preventDefault();
                            location.reload();
                        }
                        break;
                    case 76:
                        if (canPlayNotes)
                            break;
                        if (event.shiftKey) {
                            this._openPrompt("limiterSettings");
                        }
                        else {
                            this._openPrompt("barCount");
                        }
                        break;
                    case 77:
                        if (canPlayNotes)
                            break;
                        if (event.altKey) {
                            if (this._doc.prefs.enableChannelMuting) {
                                this._doc.selection.invertMuteChannels();
                                event.preventDefault();
                            }
                        }
                        else {
                            if ((needControlForShortcuts == (event.ctrlKey || event.metaKey))) {
                                if (this._doc.prefs.enableChannelMuting) {
                                    this._doc.selection.muteChannels(event.shiftKey);
                                    event.preventDefault();
                                }
                            }
                        }
                        break;
                    case 78:
                        if (canPlayNotes)
                            break;
                        const group = new ChangeGroup();
                        if (event.shiftKey) {
                            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                            if (effectsIncludeNoteFilter(instrument.effects) && !instrument.noteFilterType && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)
                                this._openPrompt("customNoteFilterSettings");
                            break;
                        }
                        else if (event.ctrlKey) {
                            let nextEmpty = 0;
                            while (nextEmpty < this._doc.song.patternsPerChannel && this._doc.song.channels[this._doc.channel].patterns[nextEmpty].notes.length > 0)
                                nextEmpty++;
                            nextEmpty++;
                            if (nextEmpty <= Config.barCountMax) {
                                if (nextEmpty > this._doc.song.patternsPerChannel) {
                                    group.append(new ChangePatternsPerChannel(this._doc, nextEmpty));
                                }
                                group.append(new ChangePatternNumbers(this._doc, nextEmpty, this._doc.bar, this._doc.channel, 1, 1));
                                if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                                    this._doc.viewedInstrument[this._doc.channel] = this._doc.recentPatternInstruments[this._doc.channel][0];
                                }
                                group.append(new ChangeSetPatternInstruments(this._doc, this._doc.channel, this._doc.recentPatternInstruments[this._doc.channel], this._doc.song.channels[this._doc.channel].patterns[nextEmpty - 1]));
                            }
                        }
                        else {
                            let nextUnused = 1;
                            while (this._doc.song.channels[this._doc.channel].bars.indexOf(nextUnused) != -1
                                && nextUnused <= this._doc.song.patternsPerChannel)
                                nextUnused++;
                            if (nextUnused <= Config.barCountMax) {
                                if (nextUnused > this._doc.song.patternsPerChannel) {
                                    group.append(new ChangePatternsPerChannel(this._doc, nextUnused));
                                }
                                group.append(new ChangePatternNumbers(this._doc, nextUnused, this._doc.bar, this._doc.channel, 1, 1));
                                if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                                    this._doc.viewedInstrument[this._doc.channel] = this._doc.recentPatternInstruments[this._doc.channel][0];
                                }
                                group.append(new ChangeSetPatternInstruments(this._doc, this._doc.channel, this._doc.recentPatternInstruments[this._doc.channel], this._doc.song.channels[this._doc.channel].patterns[nextUnused - 1]));
                            }
                        }
                        this._doc.record(group);
                        event.preventDefault();
                        break;
                    case 80:
                        if (canPlayNotes)
                            break;
                        if (event.ctrlKey || event.metaKey) {
                            this._toggleRecord();
                            this._doc.synth.loopBarStart = -1;
                            this._doc.synth.loopBarEnd = -1;
                            this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            event.preventDefault();
                            this.refocusStage();
                        }
                        else if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey) && event.shiftKey) {
                            location.href = "player/#song=" + this._doc.song.toBase64String();
                            event.preventDefault();
                        }
                        break;
                    case 81:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            if (event.shiftKey) {
                                this._openPrompt("addExternal");
                                event.preventDefault();
                                break;
                            }
                            else {
                                this._openPrompt("channelSettings");
                                event.preventDefault();
                                break;
                            }
                        }
                        break;
                    case 83:
                        if (canPlayNotes)
                            break;
                        if (event.ctrlKey || event.metaKey) {
                            this._openPrompt("export");
                            event.preventDefault();
                        }
                        else {
                            if (this._doc.prefs.enableChannelMuting) {
                                if (event.shiftKey) {
                                    this._doc.selection.muteChannels(false);
                                }
                                else {
                                    this._doc.selection.soloChannels(false);
                                }
                                event.preventDefault();
                            }
                        }
                        break;
                    case 79:
                        if (canPlayNotes)
                            break;
                        if (event.ctrlKey || event.metaKey) {
                            this._openPrompt("import");
                            event.preventDefault();
                        }
                        break;
                    case 86:
                        if (canPlayNotes)
                            break;
                        if ((event.ctrlKey || event.metaKey) && event.shiftKey && !needControlForShortcuts) {
                            this._doc.selection.pasteNumbers();
                        }
                        else if (event.shiftKey) {
                            this._pasteInstrument();
                        }
                        else {
                            this._doc.selection.pasteNotes();
                        }
                        event.preventDefault();
                        break;
                    case 87:
                        if (canPlayNotes)
                            break;
                        this._openPrompt("moveNotesSideways");
                        break;
                    case 73:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey) && event.shiftKey) {
                            const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                            const instrumentObject = instrument.toJsonObject();
                            delete instrumentObject["preset"];
                            delete instrumentObject["volume"];
                            delete instrumentObject["pan"];
                            const panningEffectIndex = instrumentObject["effects"].indexOf(Config.effectNames[2]);
                            if (panningEffectIndex != -1)
                                instrumentObject["effects"].splice(panningEffectIndex, 1);
                            for (let i = 0; i < instrumentObject["envelopes"].length; i++) {
                                const envelope = instrumentObject["envelopes"][i];
                                if (envelope["target"] == "panning" || envelope["target"] == "none" || envelope["envelope"] == "none") {
                                    instrumentObject["envelopes"].splice(i, 1);
                                    i--;
                                }
                            }
                            this._copyTextToClipboard(JSON.stringify(instrumentObject));
                            event.preventDefault();
                        }
                        break;
                    case 82:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            if (event.shiftKey) {
                                this._randomGenerated();
                            }
                            else {
                                this._randomPreset();
                            }
                            event.preventDefault();
                        }
                        break;
                    case 219:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.synth.goToPrevBar();
                            this._doc.synth.initModFilters(this._doc.song);
                            this._doc.synth.computeLatestModValues();
                            if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            }
                            if (this._doc.prefs.autoFollow) {
                                this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                            }
                            event.preventDefault();
                        }
                        break;
                    case 221:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.synth.goToNextBar();
                            this._doc.synth.initModFilters(this._doc.song);
                            this._doc.synth.computeLatestModValues();
                            if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                                this._doc.synth.loopBarStart = -1;
                                this._doc.synth.loopBarEnd = -1;
                                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                            }
                            if (this._doc.prefs.autoFollow) {
                                this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                            }
                            event.preventDefault();
                        }
                        break;
                    case 189:
                    case 173:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.selection.transpose(false, event.shiftKey);
                            event.preventDefault();
                        }
                        break;
                    case 187:
                    case 61:
                    case 171:
                        if (canPlayNotes)
                            break;
                        if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {
                            this._doc.selection.transpose(true, event.shiftKey);
                            event.preventDefault();
                        }
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) {
                            this._doc.selection.swapChannels(-1);
                        }
                        else if (event.shiftKey) {
                            this._doc.selection.boxSelectionY1 = Math.max(0, this._doc.selection.boxSelectionY1 - 1);
                            this._doc.selection.scrollToEndOfSelection();
                            this._doc.selection.selectionUpdated();
                        }
                        else {
                            this._doc.selection.setChannelBar((this._doc.channel - 1 + this._doc.song.getChannelCount()) % this._doc.song.getChannelCount(), this._doc.bar);
                            this._doc.selection.resetBoxSelection();
                        }
                        event.preventDefault();
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) {
                            this._doc.selection.swapChannels(1);
                        }
                        else if (event.shiftKey) {
                            this._doc.selection.boxSelectionY1 = Math.min(this._doc.song.getChannelCount() - 1, this._doc.selection.boxSelectionY1 + 1);
                            this._doc.selection.scrollToEndOfSelection();
                            this._doc.selection.selectionUpdated();
                        }
                        else {
                            this._doc.selection.setChannelBar((this._doc.channel + 1) % this._doc.song.getChannelCount(), this._doc.bar);
                            this._doc.selection.resetBoxSelection();
                        }
                        event.preventDefault();
                        break;
                    case 37:
                        if (event.shiftKey) {
                            this._doc.selection.boxSelectionX1 = Math.max(0, this._doc.selection.boxSelectionX1 - 1);
                            this._doc.selection.scrollToEndOfSelection();
                            this._doc.selection.selectionUpdated();
                        }
                        else {
                            this._doc.selection.setChannelBar(this._doc.channel, (this._doc.bar + this._doc.song.barCount - 1) % this._doc.song.barCount);
                            this._doc.selection.resetBoxSelection();
                        }
                        event.preventDefault();
                        break;
                    case 39:
                        if (event.shiftKey) {
                            this._doc.selection.boxSelectionX1 = Math.min(this._doc.song.barCount - 1, this._doc.selection.boxSelectionX1 + 1);
                            this._doc.selection.scrollToEndOfSelection();
                            this._doc.selection.selectionUpdated();
                        }
                        else {
                            this._doc.selection.setChannelBar(this._doc.channel, (this._doc.bar + 1) % this._doc.song.barCount);
                            this._doc.selection.resetBoxSelection();
                        }
                        event.preventDefault();
                        break;
                    case 46:
                        this._doc.selection.digits = "";
                        this._doc.selection.nextDigit("0", false, false);
                        break;
                    case 48:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("0", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 49:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("1", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 50:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("2", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 51:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("3", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 52:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("4", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 53:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("5", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 54:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("6", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 55:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("7", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 56:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("8", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    case 57:
                        if (canPlayNotes)
                            break;
                        this._doc.selection.nextDigit("9", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);
                        this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                        event.preventDefault();
                        break;
                    default:
                        this._doc.selection.digits = "";
                        this._doc.selection.instrumentDigits = "";
                        break;
                }
                if (canPlayNotes) {
                    this._doc.selection.digits = "";
                    this._doc.selection.instrumentDigits = "";
                }
            };
            this._whenKeyReleased = (event) => {
                this._muteEditor.onKeyUp(event);
                if (!event.ctrlKey) {
                    this._patternEditor.controlMode = false;
                }
                if (!event.shiftKey) {
                    this._patternEditor.shiftMode = false;
                }
                this._ctrlHeld = event.ctrlKey;
                this._shiftHeld = event.shiftKey;
                this._keyboardLayout.handleKeyEvent(event, false);
            };
            this._whenPrevBarPressed = () => {
                this._doc.synth.goToPrevBar();
                this._barScrollBar.animatePlayhead();
                if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                }
            };
            this._whenNextBarPressed = () => {
                this._doc.synth.goToNextBar();
                this._barScrollBar.animatePlayhead();
                if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
                }
            };
            this.togglePlay = () => {
                if (this._doc.synth.playing) {
                    this._doc.performance.pause();
                    this.outVolumeHistoricCap = 0;
                }
                else {
                    this._doc.synth.snapToBar();
                    this._doc.performance.play();
                }
            };
            this._toggleRecord = () => {
                if (this._doc.synth.playing) {
                    this._doc.performance.pause();
                }
                else {
                    this._doc.performance.record();
                }
            };
            this._displayPatternEditor = () => {
                this._menuMode = 1;
                if (this._menuMode == 1) {
                    this._patternArea.style.display = "";
                    this._trackArea.style.display = "none";
                    this._settingsArea.style.display = "none";
                    this.whenUpdated();
                    if (window.innerWidth < window.innerHeight) {
                        this._mobilePatternButton.style.height = "100%";
                        this._mobileTrackButton.style.height = "80%";
                        this._mobileSettingsButton.style.height = "80%";
                        this._mobilePatternButton.style.width = "33vw";
                        this._mobileTrackButton.style.width = "34vw";
                        this._mobileSettingsButton.style.width = "33vw";
                        this._mobilePatternButton.style.top = "";
                        this._mobilePatternButton.style.left = "0";
                        this._mobileTrackButton.style.left = "33vw";
                        this._mobileSettingsButton.style.right = "0";
                        this._mobilePatternButton.style.bottom = "0";
                        this._mobileTrackButton.style.bottom = "0";
                        this._mobileTrackButton.style.top = "";
                        this._mobileTrackButton.style.right = "33vw";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._mobileMenu.style.height = "15vh";
                        this._mobileMenu.style.width = "100vw";
                        this._mobileMenu.style.right = "";
                        this._patternArea.style.width = "98vw";
                        this._playPauseAreaMobile.style.display = "flex";
                    }
                    else if (window.innerWidth > window.innerHeight) {
                        this._mobilePatternButton.style.width = "100%";
                        this._mobileTrackButton.style.width = "80%";
                        this._mobileSettingsButton.style.width = "80%";
                        this._mobilePatternButton.style.height = "33vh";
                        this._mobileTrackButton.style.height = "34vh";
                        this._mobileSettingsButton.style.height = "33vh";
                        this._mobilePatternButton.style.left = "";
                        this._mobileTrackButton.style.left = "";
                        this._mobilePatternButton.style.top = "0";
                        this._mobileTrackButton.style.top = "33vh";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._mobileMenu.style.width = "15vw";
                        this._mobileMenu.style.height = "100vh";
                        this._mobileMenu.style.right = "0";
                        this._playPauseAreaMobile.style.display = "flex";
                    }
                }
            };
            this._displayTrackEditor = () => {
                this._menuMode = 2;
                if (this._menuMode == 2) {
                    this._patternArea.style.display = "none";
                    this._trackArea.style.display = "";
                    this._settingsArea.style.display = "none";
                    this.whenUpdated();
                    if (window.innerWidth < window.innerHeight) {
                        this._mobilePatternButton.style.height = "80%";
                        this._mobileTrackButton.style.height = "100%";
                        this._mobileSettingsButton.style.height = "80%";
                        this._mobilePatternButton.style.width = "33vw";
                        this._mobileTrackButton.style.width = "34vw";
                        this._mobileSettingsButton.style.width = "33vw";
                        this._mobilePatternButton.style.top = "";
                        this._mobilePatternButton.style.left = "0";
                        this._mobileTrackButton.style.left = "33vw";
                        this._mobileSettingsButton.style.right = "0";
                        this._mobilePatternButton.style.bottom = "0";
                        this._mobileTrackButton.style.left = "";
                        this._mobileTrackButton.style.top = "";
                        this._mobileTrackButton.style.right = "33vw";
                        this._mobileTrackButton.style.bottom = "0";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._patternArea.style.width = "98vw";
                        this._mobileMenu.style.height = "15vh";
                        this._mobileMenu.style.width = "100vw";
                        this._playPauseAreaMobile.style.display = "none";
                    }
                    else if (window.innerWidth > window.innerHeight) {
                        this._mobilePatternButton.style.width = "80%";
                        this._mobileTrackButton.style.width = "100%";
                        this._mobileSettingsButton.style.width = "80%";
                        this._mobilePatternButton.style.height = "33vh";
                        this._mobileTrackButton.style.height = "34vh";
                        this._mobileSettingsButton.style.height = "33vh";
                        this._mobilePatternButton.style.top = "0";
                        this._mobileTrackButton.style.top = "33vh";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._mobileTrackButton.style.left = "";
                        this._mobilePatternButton.style.left = "";
                        this._mobileMenu.style.width = "15vw";
                        this._mobileMenu.style.height = "100vh";
                        this._mobileMenu.style.right = "0";
                        this._playPauseAreaMobile.style.display = "none";
                    }
                }
            };
            this._displaySettingsEditor = () => {
                this._menuMode = 3;
                const effectStuffs = document.getElementById('effectsDiv');
                const envelopeStuffs = document.getElementById('envelopesDiv');
                const instStuffs = document.getElementById('InstrumentDiv');
                if (this._menuMode == 3) {
                    this._patternArea.style.display = "none";
                    this._trackArea.style.display = "none";
                    this._settingsArea.style.display = "";
                    this.whenUpdated();
                    if (this._instSettingMode == 1) {
                        instStuffs.style.display = "";
                        effectStuffs.style.display = "none";
                        envelopeStuffs.style.display = "none";
                        console.log("Instrument Settings");
                    }
                    else if (this._instSettingMode == 2) {
                        instStuffs.style.display = "none";
                        effectStuffs.style.display = "";
                        envelopeStuffs.style.display = "none";
                        console.log("Effects Settings");
                    }
                    else if (this._instSettingMode == 3) {
                        instStuffs.style.display = "none";
                        effectStuffs.style.display = "none";
                        envelopeStuffs.style.display = "";
                        console.log("Envelopes Settings");
                    }
                    if (window.innerWidth < window.innerHeight) {
                        this._mobilePatternButton.style.height = "80%";
                        this._mobileTrackButton.style.height = "80%";
                        this._mobileSettingsButton.style.height = "100%";
                        this._mobilePatternButton.style.width = "33vw";
                        this._mobileTrackButton.style.width = "34vw";
                        this._mobileSettingsButton.style.width = "33vw";
                        this._mobilePatternButton.style.top = "";
                        this._mobilePatternButton.style.left = "0";
                        this._mobileSettingsButton.style.right = "0";
                        this._mobilePatternButton.style.bottom = "0";
                        this._mobileTrackButton.style.top = "";
                        this._mobileTrackButton.style.right = "33vw";
                        this._mobileTrackButton.style.bottom = "0";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._patternArea.style.width = "98vw";
                        this._mobileMenu.style.height = "15vh";
                        this._mobileMenu.style.width = "100vw";
                        this._playPauseAreaMobile.style.display = "none";
                    }
                    else if (window.innerWidth > window.innerHeight) {
                        this._mobilePatternButton.style.width = "80%";
                        this._mobileTrackButton.style.width = "80%";
                        this._mobileSettingsButton.style.width = "100%";
                        this._mobilePatternButton.style.height = "33vh";
                        this._mobileTrackButton.style.height = "34vh";
                        this._mobileSettingsButton.style.height = "33vh";
                        this._mobilePatternButton.style.top = "0";
                        this._mobileTrackButton.style.top = "33vh";
                        this._mobileSettingsButton.style.bottom = "0";
                        this._mobileTrackButton.style.left = "";
                        this._mobilePatternButton.style.left = "";
                        this._mobileMenu.style.width = "15vw";
                        this._mobileMenu.style.height = "100vh";
                        this._mobileMenu.style.right = "0";
                        this._playPauseAreaMobile.style.display = "none";
                    }
                }
            };
            this._animate = () => {
                this._modSliderUpdate();
                if (this._doc.prefs.displayVolumeBar) {
                    this._volumeUpdate();
                }
                this._barScrollBar.animatePlayhead();
                if (this._doc.synth.isFilterModActive(false, this._doc.channel, this._doc.getCurrentInstrument())) {
                    this._eqFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);
                }
                if (this._doc.synth.isFilterModActive(true, this._doc.channel, this._doc.getCurrentInstrument())) {
                    this._noteFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);
                }
                window.requestAnimationFrame(this._animate);
            };
            this._volumeUpdate = () => {
                this.outVolumeHistoricTimer--;
                if (this.outVolumeHistoricTimer <= 0) {
                    this.outVolumeHistoricCap -= 0.03;
                }
                if (this._doc.song.outVolumeCap > this.outVolumeHistoricCap) {
                    this.outVolumeHistoricCap = this._doc.song.outVolumeCap;
                    this.outVolumeHistoricTimer = 50;
                }
                if (this._doc.song.outVolumeCap != this.lastOutVolumeCap) {
                    this.lastOutVolumeCap = this._doc.song.outVolumeCap;
                    this._animateVolume(this._doc.song.outVolumeCap, this.outVolumeHistoricCap);
                }
            };
            this._setVolumeSlider = () => {
                if ((this._ctrlHeld || this._shiftHeld) && this._doc.synth.playing) {
                    const prevVol = this._doc.prefs.volume;
                    this._doc.prefs.volume = Math.round(Number(this._volumeSlider.input.value) * 4 / 3);
                    const changedPatterns = this._patternEditor.setModSettingsForChange(null, this);
                    const useVol = this._doc.prefs.volume;
                    window.clearTimeout(this._modRecTimeout);
                    this._modRecTimeout = window.setTimeout(() => { this._recordVolumeSlider(useVol); }, 10);
                    this._doc.recordingModulators = true;
                    this._doc.prefs.volume = prevVol;
                    this._volumeSlider.updateValue(this._doc.prefs.volume);
                    if (changedPatterns)
                        this._trackEditor.render();
                }
                else {
                    this._doc.setVolume(Number(this._volumeSlider.input.value));
                    if (this._doc.recordingModulators) {
                        this._doc.recordingModulators = false;
                        this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));
                    }
                }
            };
            this._copyInstrument = () => {
                const channel = this._doc.song.channels[this._doc.channel];
                const instrument = channel.instruments[this._doc.getCurrentInstrument()];
                const instrumentCopy = instrument.toJsonObject();
                instrumentCopy["isDrum"] = this._doc.song.getChannelIsNoise(this._doc.channel);
                window.localStorage.setItem("instrumentCopy", JSON.stringify(instrumentCopy));
                this.refocusStage();
            };
            this._pasteInstrument = () => {
                const channel = this._doc.song.channels[this._doc.channel];
                const instrument = channel.instruments[this._doc.getCurrentInstrument()];
                const instrumentCopy = JSON.parse(String(window.localStorage.getItem("instrumentCopy")));
                if (instrumentCopy != null && instrumentCopy["isDrum"] == this._doc.song.getChannelIsNoise(this._doc.channel)) {
                    this._doc.record(new ChangePasteInstrument(this._doc, instrument, instrumentCopy));
                }
                this.refocusStage();
            };
            this._exportInstruments = () => {
                this._openPrompt("exportInstrument");
            };
            this._importInstruments = () => {
                this._openPrompt("importInstrument");
            };
            this._whenSetTempo = () => {
                this._doc.record(new ChangeTempo(this._doc, -1, parseInt(this._tempoStepper.value) | 0));
            };
            this._whenSetOctave = () => {
                this._doc.record(new ChangeKeyOctave(this._doc, this._doc.song.octave, parseInt(this._octaveStepper.value) | 0));
                this._piano.forceRender();
            };
            this._whenSetScale = () => {
                if (isNaN(this._scaleSelect.value)) {
                    switch (this._scaleSelect.value) {
                        case "forceScale":
                            this._doc.selection.forceScale();
                            break;
                        case "customize":
                            this._openPrompt("customScale");
                            break;
                    }
                    this._doc.notifier.changed();
                }
                else {
                    this._doc.record(new ChangeScale(this._doc, this._scaleSelect.selectedIndex));
                }
            };
            this._whenSetKey = () => {
                if (isNaN(this._keySelect.value)) {
                    switch (this._keySelect.value) {
                        case "detectKey":
                            this._doc.record(new ChangeDetectKey(this._doc));
                            break;
                    }
                    this._doc.notifier.changed();
                }
                else {
                    this._doc.record(new ChangeKey(this._doc, Config.keys.length - 1 - this._keySelect.selectedIndex));
                }
            };
            this._whenSetRhythm = () => {
                if (isNaN(this._rhythmSelect.value)) {
                    switch (this._rhythmSelect.value) {
                        case "forceRhythm":
                            this._doc.selection.forceRhythm();
                            break;
                    }
                    this._doc.notifier.changed();
                }
                else {
                    this._doc.record(new ChangeRhythm(this._doc, this._rhythmSelect.selectedIndex));
                }
            };
            this._refocus = () => {
                var selfRef = this;
                setTimeout(function () { selfRef.mainLayer.focus(); }, 20);
            };
            this._whenSetPitchedPreset = () => {
                this._setPreset($('#pitchPresetSelect').val() + "");
            };
            this._whenSetDrumPreset = () => {
                this._setPreset($('#drumPresetSelect').val() + "");
            };
            this._whenSetFeedbackType = () => {
                this._doc.record(new ChangeFeedbackType(this._doc, this._feedbackTypeSelect.selectedIndex));
            };
            this._whenSetAlgorithm = () => {
                this._doc.record(new ChangeAlgorithm(this._doc, this._algorithmSelect.selectedIndex));
            };
            this._whenSet6OpFeedbackType = () => {
                this._doc.record(new Change6OpFeedbackType(this._doc, this._feedback6OpTypeSelect.selectedIndex));
                this._customAlgorithmCanvas.reset();
            };
            this._whenSet6OpAlgorithm = () => {
                this._doc.record(new Change6OpAlgorithm(this._doc, this._algorithm6OpSelect.selectedIndex));
                this._customAlgorithmCanvas.reset();
            };
            this._whenSelectInstrument = (event) => {
                if (event.target == this._instrumentAddButton) {
                    this._doc.record(new ChangeAddChannelInstrument(this._doc));
                }
                else if (event.target == this._instrumentRemoveButton) {
                    this._doc.record(new ChangeRemoveChannelInstrument(this._doc));
                }
                else {
                    const index = this._instrumentButtons.indexOf(event.target);
                    if (index != -1) {
                        this._doc.selection.selectInstrument(index);
                    }
                    if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                        this._piano.forceRender();
                    }
                    this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], index, ColorConfig.getChannelColor(this._doc.song, this._doc.channel));
                }
                this.refocusStage();
            };
            this._whenSetModChannel = (mod) => {
                let instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                let previouslyUnset = (instrument.modulators[mod] == 0 || Config.modulators[instrument.modulators[mod]].forSong);
                this._doc.selection.setModChannel(mod, this._modChannelBoxes[mod].selectedIndex);
                const modChannel = Math.max(0, instrument.modChannels[mod]);
                if (this._doc.song.channels[modChannel].instruments.length > 1 && previouslyUnset && this._modChannelBoxes[mod].selectedIndex >= 2) {
                    if (this._doc.song.channels[modChannel].bars[this._doc.bar] > 0) {
                        this._doc.selection.setModInstrument(mod, this._doc.song.channels[modChannel].patterns[this._doc.song.channels[modChannel].bars[this._doc.bar] - 1].instruments[0]);
                    }
                }
                this._piano.forceRender();
            };
            this._whenSetModInstrument = (mod) => {
                this._doc.selection.setModInstrument(mod, this._modInstrumentBoxes[mod].selectedIndex);
                this._piano.forceRender();
            };
            this._whenSetModSetting = (mod, invalidIndex = false) => {
                let text = "none";
                if (this._modSetBoxes[mod].selectedIndex != -1) {
                    text = this._modSetBoxes[mod].children[this._modSetBoxes[mod].selectedIndex].textContent;
                    if (invalidIndex) {
                        this._modSetBoxes[mod].selectedOptions.item(0).style.setProperty("color", "red");
                        this._modSetBoxes[mod].classList.add("invalidSetting");
                        this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].invalidModulators[mod] = true;
                    }
                    else {
                        this._modSetBoxes[mod].classList.remove("invalidSetting");
                        this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].invalidModulators[mod] = false;
                    }
                }
                if (!invalidIndex)
                    this._doc.selection.setModSetting(mod, text);
                this._piano.forceRender();
            };
            this._whenClickModTarget = (mod) => {
                if (this._modChannelBoxes[mod].selectedIndex >= 2) {
                    this._doc.selection.setChannelBar(this._modChannelBoxes[mod].selectedIndex - 2, this._doc.bar);
                }
            };
            this._whenClickJumpToModTarget = () => {
                const channelIndex = this._doc.channel;
                const instrumentIndex = this._doc.getCurrentInstrument();
                if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                    for (let modChannelIdx = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; modChannelIdx < this._doc.song.channels.length; modChannelIdx++) {
                        const modChannel = this._doc.song.channels[modChannelIdx];
                        const patternIdx = modChannel.bars[this._doc.bar];
                        if (patternIdx > 0) {
                            const modInstrumentIdx = modChannel.patterns[patternIdx - 1].instruments[0];
                            const modInstrument = modChannel.instruments[modInstrumentIdx];
                            for (let mod = 0; mod < Config.modCount; mod++) {
                                if (modInstrument.modChannels[mod] == channelIndex && (modInstrument.modInstruments[mod] == instrumentIndex || modInstrument.modInstruments[mod] >= this._doc.song.channels[channelIndex].instruments.length)) {
                                    this._doc.selection.setChannelBar(modChannelIdx, this._doc.bar);
                                    return;
                                }
                            }
                        }
                    }
                }
            };
            this._whenSetModFilter = (mod) => {
                this._doc.selection.setModFilter(mod, this._modFilterBoxes[mod].selectedIndex);
            };
            this._whenSetChipWave = () => {
                this._doc.record(new ChangeChipWave(this._doc, this._chipWaveSelect.selectedIndex));
            };
            this._whenSetRMChipWave = () => {
                this._doc.record(new ChangeRMChipWave(this._doc, this._ringModWaveSelect.selectedIndex));
            };
            this._whenSetUseChipWaveAdvancedLoopControls = () => {
                this._doc.record(new ChangeChipWaveUseAdvancedLoopControls(this._doc, this._useChipWaveAdvancedLoopControlsBox.checked ? true : false));
            };
            this._whenSetChipWaveLoopMode = () => {
                this._doc.record(new ChangeChipWaveLoopMode(this._doc, this._chipWaveLoopModeSelect.selectedIndex));
            };
            this._whenSetChipWaveLoopStart = () => {
                this._doc.record(new ChangeChipWaveLoopStart(this._doc, parseInt(this._chipWaveLoopStartStepper.value) | 0));
            };
            this._whenSetChipWaveLoopEnd = () => {
                this._doc.record(new ChangeChipWaveLoopEnd(this._doc, parseInt(this._chipWaveLoopEndStepper.value) | 0));
            };
            this._whenSetChipWaveLoopEndToEnd = () => {
                const channel = this._doc.song.channels[this._doc.channel];
                const instrument = channel.instruments[this._doc.getCurrentInstrument()];
                const chipWave = Config.rawRawChipWaves[instrument.chipWave];
                const chipWaveLength = chipWave.samples.length;
                this._doc.record(new ChangeChipWaveLoopEnd(this._doc, chipWaveLength - 1));
            };
            this._whenSetChipWaveStartOffset = () => {
                this._doc.record(new ChangeChipWaveStartOffset(this._doc, parseInt(this._chipWaveStartOffsetStepper.value) | 0));
            };
            this._whenSetChipWavePlayBackwards = () => {
                this._doc.record(new ChangeChipWavePlayBackwards(this._doc, this._chipWavePlayBackwardsBox.checked));
            };
            this._whenSetNoiseWave = () => {
                this._doc.record(new ChangeNoiseWave(this._doc, this._chipNoiseSelect.selectedIndex));
            };
            this._whenSetTransition = () => {
                this._doc.record(new ChangeTransition(this._doc, this._transitionSelect.selectedIndex));
            };
            this._whenSetEffects = () => {
                const instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                const oldValue = instrument.effects;
                const toggleFlag = Config.effectOrder[this._effectsSelect.selectedIndex - 1];
                this._doc.record(new ChangeToggleEffects(this._doc, toggleFlag, null));
                this._effectsSelect.selectedIndex = 0;
                if (instrument.effects > oldValue) {
                    this._doc.addedEffect = true;
                }
                this._doc.notifier.changed();
            };
            this._whenSetVibrato = () => {
                this._doc.record(new ChangeVibrato(this._doc, this._vibratoSelect.selectedIndex));
            };
            this._whenSetVibratoType = () => {
                this._doc.record(new ChangeVibratoType(this._doc, this._vibratoTypeSelect.selectedIndex));
            };
            this._whenSetUnison = () => {
                this._doc.record(new ChangeUnison(this._doc, this._unisonSelect.selectedIndex));
            };
            this._whenSetChord = () => {
                this._doc.record(new ChangeChord(this._doc, this._chordSelect.selectedIndex));
            };
            this._addNewEnvelope = () => {
                this._doc.record(new ChangeAddEnvelope(this._doc));
                this.refocusStage();
                this._doc.addedEnvelope = true;
            };
            this._zoomIn = () => {
                this._doc.prefs.visibleOctaves = Math.max(1, this._doc.prefs.visibleOctaves - 1);
                this._doc.prefs.save();
                this._doc.notifier.changed();
                this.refocusStage();
            };
            this._zoomOut = () => {
                this._doc.prefs.visibleOctaves = Math.min(Config.pitchOctaves, this._doc.prefs.visibleOctaves + 1);
                this._doc.prefs.save();
                this._doc.notifier.changed();
                this.refocusStage();
            };
            this._undo = () => {
                this._doc.undo();
            };
            this._redo = () => {
                this._doc.redo();
            };
            this._copy = () => {
                this._doc.selection.copy();
            };
            this._paste = () => {
                this._doc.selection.pasteNotes();
            };
            this._insertChannel = () => {
                this._doc.selection.insertChannel();
            };
            this._deleteChannel = () => {
                this._doc.selection.deleteChannel();
            };
            this._selectAll = () => {
                this._doc.selection.selectAll();
            };
            this._duplicate = () => {
                this._doc.selection.duplicatePatterns();
            };
            this._notesUp = () => {
                this._doc.selection.transpose(true, false);
            };
            this._notesDown = () => {
                this._doc.selection.transpose(false, false);
            };
            this._tempLoopBar = () => {
                const leftSel = Math.min(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
                const rightSel = Math.max(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
                if ((leftSel < this._doc.synth.loopBarStart || this._doc.synth.loopBarStart == -1)
                    || (rightSel > this._doc.synth.loopBarEnd || this._doc.synth.loopBarEnd == -1)) {
                    this._doc.synth.loopBarStart = leftSel;
                    this._doc.synth.loopBarEnd = rightSel;
                    if (!this._doc.synth.playing) {
                        this._doc.synth.snapToBar();
                        this._doc.performance.play();
                    }
                }
                else {
                    this._doc.synth.loopBarStart = -1;
                    this._doc.synth.loopBarEnd = -1;
                }
                if (this._doc.bar != Math.floor(this._doc.synth.playhead) && this._doc.synth.loopBarStart != -1) {
                    this._doc.synth.goToBar(this._doc.bar);
                    this._doc.synth.snapToBar();
                    this._doc.synth.initModFilters(this._doc.song);
                    this._doc.synth.computeLatestModValues();
                    if (this._doc.prefs.autoFollow) {
                        this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));
                    }
                }
                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);
            };
            this._goFullscreen = () => {
                this.isMobileFullscreen = !this.isMobileFullscreen;
                this._doc.notifier.changed();
            };
            this._fileMenuHandler = (event) => {
                switch (this._fileMenu.value) {
                    case "new":
                        this._doc.goBackToStart();
                        this._doc.song.restoreLimiterDefaults();
                        for (const channel of this._doc.song.channels) {
                            channel.muted = false;
                            channel.name = "";
                        }
                        this._doc.record(new ChangeSong(this._doc, ""), false, true);
                        break;
                    case "export":
                        this._openPrompt("export");
                        break;
                    case "import":
                        this._openPrompt("import");
                        break;
                    case "copyUrl":
                        this._copyTextToClipboard(new URL("#" + this._doc.song.toBase64String(), location.href).href);
                        break;
                    case "shareUrl":
                        navigator.share({ url: new URL("#" + this._doc.song.toBase64String(), location.href).href });
                        break;
                    case "shortenUrl":
                        let shortenerStrategy = "https://tinyurl.com/api-create.php?url=";
                        const localShortenerStrategy = window.localStorage.getItem("shortenerStrategySelect");
                        if (localShortenerStrategy == "isgd")
                            shortenerStrategy = "https://is.gd/create.php?format=simple&url=";
                        window.open(shortenerStrategy + encodeURIComponent(new URL("#" + this._doc.song.toBase64String(), location.href).href));
                        break;
                    case "configureShortener":
                        this._openPrompt("configureShortener");
                        break;
                    case "viewPlayer":
                        location.href = "player/#song=" + this._doc.song.toBase64String();
                        break;
                    case "copyEmbed":
                        this._copyTextToClipboard(`<iframe width="384" height="60" style="border: none;" src="${new URL("player/#song=" + this._doc.song.toBase64String(), location.href).href}"></iframe>`);
                        break;
                    case "songRecovery":
                        this._openPrompt("songRecovery");
                        break;
                    case "openTutorial":
                        this._openPrompt("tutorial");
                        break;
                    case "openUpdate":
                        this._openPrompt("newUpdate");
                        break;
                }
                this._fileMenu.selectedIndex = 0;
            };
            this._editMenuHandler = (event) => {
                switch (this._editMenu.value) {
                    case "undo":
                        this._doc.undo();
                        break;
                    case "redo":
                        this._doc.redo();
                        break;
                    case "copy":
                        this._doc.selection.copy();
                        break;
                    case "insertBars":
                        this._doc.selection.insertBars();
                        break;
                    case "deleteBars":
                        this._doc.selection.deleteBars();
                        break;
                    case "insertChannel":
                        this._doc.selection.insertChannel();
                        break;
                    case "deleteChannel":
                        this._doc.selection.deleteChannel();
                        break;
                    case "pasteNotes":
                        this._doc.selection.pasteNotes();
                        break;
                    case "pasteNumbers":
                        this._doc.selection.pasteNumbers();
                        break;
                    case "transposeUp":
                        this._doc.selection.transpose(true, false);
                        break;
                    case "transposeDown":
                        this._doc.selection.transpose(false, false);
                        break;
                    case "selectAll":
                        this._doc.selection.selectAll();
                        break;
                    case "selectChannel":
                        this._doc.selection.selectChannel();
                        break;
                    case "duplicatePatterns":
                        this._doc.selection.duplicatePatterns();
                        break;
                    case "barCount":
                        this._openPrompt("barCount");
                        break;
                    case "beatsPerBar":
                        this._openPrompt("beatsPerBar");
                        break;
                    case "moveNotesSideways":
                        this._openPrompt("moveNotesSideways");
                        break;
                    case "channelSettings":
                        this._openPrompt("channelSettings");
                        break;
                    case "limiterSettings":
                        this._openPrompt("limiterSettings");
                        break;
                    case "generateEuclideanRhythm":
                        this._openPrompt("generateEuclideanRhythm");
                        break;
                    case "addExternal":
                        this._openPrompt("addExternal");
                        break;
                    case "songTheme":
                        this._openPrompt("songTheme");
                        break;
                    case "presetsPrompt":
                        this._openPrompt("presetsPrompt");
                        break;
                }
                this._editMenu.selectedIndex = 0;
            };
            this._optionsMenuHandler = (event) => {
                switch (this._optionsMenu.value) {
                    case "autoPlay":
                        this._doc.prefs.autoPlay = !this._doc.prefs.autoPlay;
                        break;
                    case "autoFollow":
                        this._doc.prefs.autoFollow = !this._doc.prefs.autoFollow;
                        break;
                    case "enableNotePreview":
                        this._doc.prefs.enableNotePreview = !this._doc.prefs.enableNotePreview;
                        break;
                    case "showLetters":
                        this._doc.prefs.showLetters = !this._doc.prefs.showLetters;
                        break;
                    case "showFifth":
                        this._doc.prefs.showFifth = !this._doc.prefs.showFifth;
                        break;
                    case "showThird":
                        this._doc.prefs.showThird = !this._doc.prefs.showThird;
                        break;
                    case "advancedColorScheme":
                        this._doc.prefs.advancedColorScheme = !this._doc.prefs.advancedColorScheme;
                        break;
                    case "notesOutsideScale":
                        this._doc.prefs.notesOutsideScale = !this._doc.prefs.notesOutsideScale;
                        break;
                    case "setDefaultScale":
                        this._doc.prefs.defaultScale = this._doc.song.scale;
                        break;
                    case "showChannels":
                        this._doc.prefs.showChannels = !this._doc.prefs.showChannels;
                        break;
                    case "showScrollBar":
                        this._doc.prefs.showScrollBar = !this._doc.prefs.showScrollBar;
                        break;
                    case "alwaysFineNoteVol":
                        this._doc.prefs.alwaysFineNoteVol = !this._doc.prefs.alwaysFineNoteVol;
                        break;
                    case "enableChannelMuting":
                        this._doc.prefs.enableChannelMuting = !this._doc.prefs.enableChannelMuting;
                        for (const channel of this._doc.song.channels)
                            channel.muted = false;
                        this._doc.synth.loopRepeatCount = -1;
                        this._loopEditor.container.style.display = "";
                        break;
                    case "displayBrowserUrl":
                        this._doc.toggleDisplayBrowserUrl();
                        break;
                    case "displayVolumeBar":
                        this._doc.prefs.displayVolumeBar = !this._doc.prefs.displayVolumeBar;
                        break;
                    case "notesFlashWhenPlayed":
                        this._doc.prefs.notesFlashWhenPlayed = !this._doc.prefs.notesFlashWhenPlayed;
                        break;
                    case "oldModNotes":
                        this._doc.prefs.oldModNotes = !this._doc.prefs.oldModNotes;
                        break;
                    case "selectionCounter":
                        this._doc.prefs.selectionCounter = !this._doc.prefs.selectionCounter;
                        break;
                    case "layout":
                        this._openPrompt("layout");
                        break;
                    case "colorTheme":
                        this._openPrompt("theme");
                        break;
                    case "customTheme":
                        this._openPrompt("custom");
                        break;
                    case "recordingSetup":
                        this._openPrompt("recordingSetup");
                        break;
                    case "showOscilloscope":
                        this._doc.prefs.showOscilloscope = !this._doc.prefs.showOscilloscope;
                        break;
                    case "showDescription":
                        this._doc.prefs.showDescription = !this._doc.prefs.showDescription;
                        break;
                    case "showInstrumentScrollbars":
                        this._doc.prefs.showInstrumentScrollbars = !this._doc.prefs.showInstrumentScrollbars;
                        break;
                    case "showSampleLoadingStatus":
                        this._doc.prefs.showSampleLoadingStatus = !this._doc.prefs.showSampleLoadingStatus;
                        break;
                    case "closePromptByClickoff":
                        this._doc.prefs.closePromptByClickoff = !this._doc.prefs.closePromptByClickoff;
                        break;
                    case "instrumentCopyPaste":
                        this._doc.prefs.instrumentCopyPaste = !this._doc.prefs.instrumentCopyPaste;
                        break;
                    case "instrumentImportExport":
                        this._doc.prefs.instrumentImportExport = !this._doc.prefs.instrumentImportExport;
                        break;
                    case "frostedGlassBackground":
                        this._doc.prefs.frostedGlassBackground = !this._doc.prefs.frostedGlassBackground;
                        break;
                    case "displayShortcutButtons":
                        this._doc.prefs.displayShortcutButtons = !this._doc.prefs.displayShortcutButtons;
                        break;
                    case "oldMobileLayout":
                        this._doc.prefs.oldMobileLayout = !this._doc.prefs.oldMobileLayout;
                        location.reload();
                        break;
                    case "instrumentSettingsSimplifier":
                        this._doc.prefs.instrumentSettingsSimplifier = !this._doc.prefs.instrumentSettingsSimplifier;
                        break;
                }
                this._optionsMenu.selectedIndex = 0;
                this._doc.notifier.changed();
                this._doc.prefs.save();
            };
            this._customWavePresetHandler = (event) => {
                let customWaveArray = new Float32Array(64);
                let index = this._customWavePresetDrop.selectedIndex - 1;
                let maxValue = Number.MIN_VALUE;
                let minValue = Number.MAX_VALUE;
                let arrayPoint = 0;
                let arrayStep = (Config.chipWaves[index].samples.length - 1) / 64.0;
                for (let i = 0; i < 64; i++) {
                    customWaveArray[i] = (Config.chipWaves[index].samples[Math.floor(arrayPoint)] - Config.chipWaves[index].samples[(Math.floor(arrayPoint) + 1)]) / arrayStep;
                    if (customWaveArray[i] < minValue)
                        minValue = customWaveArray[i];
                    if (customWaveArray[i] > maxValue)
                        maxValue = customWaveArray[i];
                    arrayPoint += arrayStep;
                }
                for (let i = 0; i < 64; i++) {
                    customWaveArray[i] -= minValue;
                    customWaveArray[i] /= (maxValue - minValue);
                    customWaveArray[i] *= 48.0;
                    customWaveArray[i] -= 24.0;
                    customWaveArray[i] = Math.ceil(customWaveArray[i]);
                    this._customWaveDrawCanvas.newArray[i] = customWaveArray[i];
                }
                this._doc.record(new ChangeCustomWave(this._doc, customWaveArray));
                this._doc.record(new ChangeVolume(this._doc, +this._instrumentVolumeSlider.input.value, -Config.volumeRange / 2 + Math.round(Math.sqrt(Config.chipWaves[index].expression) * Config.volumeRange / 2)));
                this._customWavePresetDrop.selectedIndex = 0;
                this._doc.notifier.changed();
                this._doc.prefs.save();
            };
            this._doc.notifier.watch(this.whenUpdated);
            this._doc.modRecordingHandler = () => { this.handleModRecording(); };
            new MidiInputHandler(this._doc);
            window.addEventListener("resize", this.whenUpdated);
            window.requestAnimationFrame(this.updatePlayButton);
            window.requestAnimationFrame(this._animate);
            if (!("share" in navigator)) {
                this._fileMenu.removeChild(this._fileMenu.querySelector("[value='shareUrl']"));
            }
            this._scaleSelect.appendChild(optgroup({ label: "Edit" }, option({ value: "forceScale" }, "Snap Notes To Scale"), option({ value: "customize" }, "Edit Custom Scale")));
            this._keySelect.appendChild(optgroup({ label: "Edit" }, option({ value: "detectKey" }, "Detect Key")));
            this._rhythmSelect.appendChild(optgroup({ label: "Edit" }, option({ value: "forceRhythm" }, "Snap Notes To Rhythm")));
            this._vibratoSelect.appendChild(option({ hidden: true, value: 5 }, "custom"));
            this._unisonSelect.appendChild(option({ hidden: true, value: Config.unisons.length }, "custom"));
            this._showModSliders = new Array(Config.modulators.length);
            this._modSliderValues = new Array(Config.modulators.length);
            this._phaseModGroup.appendChild(div({ class: "selectRow", style: `color: ${ColorConfig.secondaryText}; height: 1em; margin-top: 0.5em;` }, div({ style: "margin-right: .1em; visibility: hidden;" }, 1 + "."), div({ style: "width: 3em; margin-right: .3em;", class: "tip", onclick: () => this._openPrompt("operatorFrequency") }, "Freq:"), div({ class: "tip", onclick: () => this._openPrompt("operatorVolume") }, "Volume:")));
            for (let i = 0; i < Config.operatorCount + 2; i++) {
                const operatorIndex = i;
                const operatorNumber = div({ style: "margin-right: 0px; color: " + ColorConfig.secondaryText + ";" }, i + 1 + "");
                const frequencySelect = buildOptions(select({ style: "width: 100%;", title: "Frequency" }), Config.operatorFrequencies.map(freq => freq.name));
                const amplitudeSlider = new Slider(input({ type: "range", min: "0", max: Config.operatorAmplitudeMax, value: "0", step: "1", title: "Volume" }), this._doc, (oldValue, newValue) => new ChangeOperatorAmplitude(this._doc, operatorIndex, oldValue, newValue), false);
                const waveformSelect = buildOptions(select({ style: "width: 100%;", title: "Waveform" }), Config.operatorWaves.map(wave => wave.name));
                const waveformDropdown = button({ style: "margin-left:0em; margin-right: 2px; height:1.5em; width: 8px; max-width: 10px; padding: 0px; font-size: 8px;", onclick: () => this._toggleDropdownMenu(4, i) }, "▼");
                const waveformDropdownHint = span({ class: "tip", style: "margin-left: 10px;", onclick: () => this._openPrompt("operatorWaveform") }, "Wave:");
                const waveformPulsewidthSlider = new Slider(input({ style: "margin-left: 10px; width: 85%;", type: "range", min: "0", max: Config.pwmOperatorWaves.length - 1, value: "0", step: "1", title: "Pulse Width" }), this._doc, (oldValue, newValue) => new ChangeOperatorPulseWidth(this._doc, operatorIndex, oldValue, newValue), true);
                const waveformDropdownRow = div({ class: "selectRow" }, waveformDropdownHint, waveformPulsewidthSlider.container, div({ class: "selectContainer", style: "width: 6em; margin-left: .3em;" }, waveformSelect));
                const waveformDropdownGroup = div({ class: "operatorRow" }, waveformDropdownRow);
                const row = div({ class: "selectRow" }, operatorNumber, waveformDropdown, div({ class: "selectContainer", style: "width: 3em; margin-right: .3em;" }, frequencySelect), amplitudeSlider.container);
                this._phaseModGroup.appendChild(row);
                this._operatorRows[i] = row;
                this._operatorAmplitudeSliders[i] = amplitudeSlider;
                this._operatorFrequencySelects[i] = frequencySelect;
                this._operatorDropdowns[i] = waveformDropdown;
                this._operatorWaveformHints[i] = waveformDropdownHint;
                this._operatorWaveformSelects[i] = waveformSelect;
                this._operatorWaveformPulsewidthSliders[i] = waveformPulsewidthSlider;
                this._operatorDropdownRows[i] = waveformDropdownRow;
                this._phaseModGroup.appendChild(waveformDropdownGroup);
                this._operatorDropdownGroups[i] = waveformDropdownGroup;
                this._openOperatorDropdowns[i] = false;
                waveformSelect.addEventListener("change", () => {
                    this._doc.record(new ChangeOperatorWaveform(this._doc, operatorIndex, waveformSelect.selectedIndex));
                });
                frequencySelect.addEventListener("change", () => {
                    this._doc.record(new ChangeOperatorFrequency(this._doc, operatorIndex, frequencySelect.selectedIndex));
                });
            }
            this._drumsetGroup.appendChild(div({ class: "selectRow" }, span({ class: "tip", onclick: () => this._openPrompt("drumsetEnvelope") }, "Envelope:"), span({ class: "tip", onclick: () => this._openPrompt("drumsetSpectrum") }, "Spectrum:")));
            for (let i = Config.drumCount - 1; i >= 0; i--) {
                const drumIndex = i;
                const spectrumEditor = new SpectrumEditor(this._doc, drumIndex);
                spectrumEditor.container.addEventListener("mousedown", this.refocusStage);
                this._drumsetSpectrumEditors[i] = spectrumEditor;
                const envelopeSelect = buildOptions(select({ style: "width: 100%;", title: "Filter Envelope" }), Config.envelopes.map(envelope => envelope.name));
                this._drumsetEnvelopeSelects[i] = envelopeSelect;
                envelopeSelect.addEventListener("change", () => {
                    this._doc.record(new ChangeDrumsetEnvelope(this._doc, drumIndex, envelopeSelect.selectedIndex));
                });
                const row = div({ class: "selectRow" }, div({ class: "selectContainer", style: "width: 5em; margin-right: .3em;" }, envelopeSelect), this._drumsetSpectrumEditors[i].container);
                this._drumsetGroup.appendChild(row);
            }
            this._modNameRows = [];
            this._modChannelBoxes = [];
            this._modInstrumentBoxes = [];
            this._modSetRows = [];
            this._modSetBoxes = [];
            this._modFilterRows = [];
            this._modFilterBoxes = [];
            this._modTargetIndicators = [];
            for (let mod = 0; mod < Config.modCount; mod++) {
                let modChannelBox = select({ style: "width: 100%; color: currentColor; text-overflow:ellipsis;" });
                let modInstrumentBox = select({ style: "width: 100%; color: currentColor;" });
                let modNameRow = div({ class: "operatorRow", style: "height: 1em; margin-bottom: 0.65em;" }, div({ class: "tip", style: "width: 10%; max-width: 5.4em;", id: "modChannelText" + mod, onclick: () => this._openPrompt("modChannel") }, "Ch:"), div({ class: "selectContainer", style: 'width: 35%;' }, modChannelBox), div({ class: "tip", style: "width: 1.2em; margin-left: 0.8em;", id: "modInstrumentText" + mod, onclick: () => this._openPrompt("modInstrument") }, "Ins:"), div({ class: "selectContainer", style: "width: 10%;" }, modInstrumentBox));
                let modSetBox = select();
                let modFilterBox = select();
                let modSetRow = div({ class: "selectRow", id: "modSettingText" + mod, style: "margin-bottom: 0.9em; color: currentColor;" }, span({ class: "tip", onclick: () => this._openPrompt("modSet") }, "Setting: "), span({ class: "tip", style: "font-size:x-small;", onclick: () => this._openPrompt("modSetInfo" + mod) }, "?"), div({ class: "selectContainer" }, modSetBox));
                let modFilterRow = div({ class: "selectRow", id: "modFilterText" + mod, style: "margin-bottom: 0.9em; color: currentColor;" }, span({ class: "tip", onclick: () => this._openPrompt("modFilter" + mod) }, "Target: "), div({ class: "selectContainer" }, modFilterBox));
                let modTarget = SVG.svg({ style: "transform: translate(0px, 1px);", width: "1.5em", height: "1em", viewBox: "0 0 200 200" }, [
                    SVG.path({ d: "M90 155 l0 -45 -45 0 c-25 0 -45 -4 -45 -10 0 -5 20 -10 45 -10 l45 0 0 -45 c0 -25 5 -45 10 -45 6 0 10 20 10 45 l0 45 45 0 c25 0 45 5 45 10 0 6 -20 10 -45 10 l -45 0 0 45 c0 25 -4 45 -10 45 -5 0 -10 -20 -10 -45z" }),
                    SVG.path({ d: "M42 158 c-15 -15 -16 -38 -2 -38 6 0 10 7 10 15 0 8 7 15 15 15 8 0 15 5 15 10 0 14 -23 13 -38 -2z" }),
                    SVG.path({ d: "M120 160 c0 -5 7 -10 15 -10 8 0 15 -7 15 -15 0 -8 5 -15 10 -15 14 0 13 23 -2 38 -15 15 -38 16 -38 2z" }),
                    SVG.path({ d: "M32 58 c3 -23 48 -40 48 -19 0 6 -7 11 -15 11 -8 0 -15 7 -15 15 0 8 -5 15 -11 15 -6 0 -9 -10 -7 -22z" }),
                    SVG.path({ d: "M150 65 c0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -10 0 -14 23 -13 38 2 15 15 16 38 2 38 -5 0 -10 -7 -10 -15z" })
                ]);
                this._modNameRows.push(modNameRow);
                this._modChannelBoxes.push(modChannelBox);
                this._modInstrumentBoxes.push(modInstrumentBox);
                this._modSetRows.push(modSetRow);
                this._modSetBoxes.push(modSetBox);
                this._modFilterRows.push(modFilterRow);
                this._modFilterBoxes.push(modFilterBox);
                this._modTargetIndicators.push(modTarget);
                this._modulatorGroup.appendChild(div({ style: "margin: 3px 0; font-weight: bold; margin-bottom: 0.7em; text-align: center; color: " + ColorConfig.secondaryText + "; background: " + ColorConfig.uiWidgetBackground + ";" }, ["Modulator " + (mod + 1), modTarget]));
                this._modulatorGroup.appendChild(modNameRow);
                this._modulatorGroup.appendChild(modSetRow);
                this._modulatorGroup.appendChild(modFilterRow);
            }
            this._pitchShiftSlider.container.style.setProperty("transform", "translate(0px, 3px)");
            this._pitchShiftSlider.container.style.setProperty("width", "100%");
            this._fileMenu.addEventListener("change", this._fileMenuHandler);
            this._editMenu.addEventListener("change", this._editMenuHandler);
            this._optionsMenu.addEventListener("change", this._optionsMenuHandler);
            this._customWavePresetDrop.addEventListener("change", this._customWavePresetHandler);
            this._tempoStepper.addEventListener("change", this._whenSetTempo);
            this._scaleSelect.addEventListener("change", this._whenSetScale);
            this._keySelect.addEventListener("change", this._whenSetKey);
            this._octaveStepper.addEventListener("change", this._whenSetOctave);
            this._rhythmSelect.addEventListener("change", this._whenSetRhythm);
            this._algorithmSelect.addEventListener("change", this._whenSetAlgorithm);
            this._instrumentsButtonBar.addEventListener("click", this._whenSelectInstrument);
            this._feedbackTypeSelect.addEventListener("change", this._whenSetFeedbackType);
            this._algorithm6OpSelect.addEventListener("change", this._whenSet6OpAlgorithm);
            this._feedback6OpTypeSelect.addEventListener("change", this._whenSet6OpFeedbackType);
            this._chipWaveSelect.addEventListener("change", this._whenSetChipWave);
            this._ringModWaveSelect.addEventListener("change", this._whenSetRMChipWave);
            this._useChipWaveAdvancedLoopControlsBox.addEventListener("input", this._whenSetUseChipWaveAdvancedLoopControls);
            this._chipWaveLoopModeSelect.addEventListener("change", this._whenSetChipWaveLoopMode);
            this._chipWaveLoopStartStepper.addEventListener("change", this._whenSetChipWaveLoopStart);
            this._chipWaveLoopEndStepper.addEventListener("change", this._whenSetChipWaveLoopEnd);
            this._setChipWaveLoopEndToEndButton.addEventListener("click", this._whenSetChipWaveLoopEndToEnd);
            this._chipWaveStartOffsetStepper.addEventListener("change", this._whenSetChipWaveStartOffset);
            this._chipWavePlayBackwardsBox.addEventListener("input", this._whenSetChipWavePlayBackwards);
            this._sampleLoadingStatusContainer.addEventListener("click", this._whenSampleLoadingStatusClicked);
            this._chipNoiseSelect.addEventListener("change", this._whenSetNoiseWave);
            this._transitionSelect.addEventListener("change", this._whenSetTransition);
            this._effectsSelect.addEventListener("change", this._whenSetEffects);
            this._unisonSelect.addEventListener("change", this._whenSetUnison);
            this._chordSelect.addEventListener("change", this._whenSetChord);
            this._vibratoSelect.addEventListener("change", this._whenSetVibrato);
            this._vibratoTypeSelect.addEventListener("change", this._whenSetVibratoType);
            this._playButton.addEventListener("click", this.togglePlay);
            this._pauseButton.addEventListener("click", this.togglePlay);
            this._mobilePlayButton.addEventListener("click", this.togglePlay);
            this._mobilePauseButton.addEventListener("click", this.togglePlay);
            this._mobilePatternButton.addEventListener("click", this._displayPatternEditor);
            this._mobileTrackButton.addEventListener("click", this._displayTrackEditor);
            this._mobileSettingsButton.addEventListener("click", this._displaySettingsEditor);
            this._muteEditor._loopButtonInput.addEventListener("click", this._loopTypeEvent);
            this._recordButton.addEventListener("click", this._toggleRecord);
            this._stopButton.addEventListener("click", this._toggleRecord);
            this._recordButton.addEventListener("contextmenu", (event) => {
                if (event.ctrlKey) {
                    event.preventDefault();
                    this._toggleRecord();
                }
            });
            this._stopButton.addEventListener("contextmenu", (event) => {
                if (event.ctrlKey) {
                    event.preventDefault();
                    this._toggleRecord();
                }
            });
            this._prevBarButton.addEventListener("click", this._whenPrevBarPressed);
            this._nextBarButton.addEventListener("click", this._whenNextBarPressed);
            this._mobilePrevBarButton.addEventListener("click", this._whenPrevBarPressed);
            this._mobileNextBarButton.addEventListener("click", this._whenNextBarPressed);
            this._volumeSlider.input.addEventListener("input", this._setVolumeSlider);
            this._zoomInButton.addEventListener("click", this._zoomIn);
            this._zoomOutButton.addEventListener("click", this._zoomOut);
            this._undoButton.addEventListener("click", this._undo);
            this._redoButton.addEventListener("click", this._redo);
            this._copyPatternButton.addEventListener("click", this._copy);
            this._pastePatternButton.addEventListener("click", this._paste);
            this._insertChannelButton.addEventListener("click", this._insertChannel);
            this._deleteChannelButton.addEventListener("click", this._deleteChannel);
            this._selectAllButton.addEventListener("click", this._selectAll);
            this._duplicateButton.addEventListener("click", this._duplicate);
            this._notesUpButton.addEventListener("click", this._notesUp);
            this._notesDownButton.addEventListener("click", this._notesDown);
            this._loopBarButton.addEventListener("click", this._tempLoopBar);
            this._fullscreenButton.addEventListener("click", this._goFullscreen);
            this._patternArea.addEventListener("mousedown", this._refocusStageNotEditing);
            this._trackArea.addEventListener("mousedown", this.refocusStage);
            this._volumeSlider.container.style.setProperty("flex-grow", "1");
            this._volumeSlider.container.style.setProperty("display", "flex");
            this._volumeBarContainer.style.setProperty("flex-grow", "1");
            this._volumeBarContainer.style.setProperty("display", "flex");
            this._volumeSlider.container.style.setProperty("--mod-color", ColorConfig.multiplicativeModSlider);
            this._volumeSlider.container.style.setProperty("--mod-border-radius", "50%");
            this._instrumentVolumeSlider.container.style.setProperty("--mod-color", ColorConfig.multiplicativeModSlider);
            this._instrumentVolumeSlider.container.style.setProperty("--mod-border-radius", "50%");
            this._feedbackAmplitudeSlider.container.style.setProperty("--mod-color", ColorConfig.multiplicativeModSlider);
            this._feedbackAmplitudeSlider.container.style.setProperty("--mod-border-radius", "50%");
            for (let i = 0; i < Config.operatorCount + 2; i++) {
                this._operatorAmplitudeSliders[i].container.style.setProperty("--mod-color", ColorConfig.multiplicativeModSlider);
                this._operatorAmplitudeSliders[i].container.style.setProperty("--mod-border-radius", "50%");
            }
            let thisRef = this;
            for (let mod = 0; mod < Config.modCount; mod++) {
                this._modChannelBoxes[mod].addEventListener("change", function () { thisRef._whenSetModChannel(mod); });
                this._modInstrumentBoxes[mod].addEventListener("change", function () { thisRef._whenSetModInstrument(mod); });
                this._modSetBoxes[mod].addEventListener("change", function () { thisRef._whenSetModSetting(mod); });
                this._modFilterBoxes[mod].addEventListener("change", function () { thisRef._whenSetModFilter(mod); });
                this._modTargetIndicators[mod].addEventListener("click", function () { thisRef._whenClickModTarget(mod); });
            }
            this._jumpToModIndicator.addEventListener("click", function () { thisRef._whenClickJumpToModTarget(); });
            this._patternArea.addEventListener("mousedown", this.refocusStage);
            this._fadeInOutEditor.container.addEventListener("mousedown", this.refocusStage);
            this._spectrumEditor.container.addEventListener("mousedown", this.refocusStage);
            this._eqFilterEditor.container.addEventListener("mousedown", this.refocusStage);
            this._noteFilterEditor.container.addEventListener("mousedown", this.refocusStage);
            this._harmonicsEditor.container.addEventListener("mousedown", this.refocusStage);
            this._tempoStepper.addEventListener("keydown", this._tempoStepperCaptureNumberKeys, false);
            this._addEnvelopeButton.addEventListener("click", this._addNewEnvelope);
            this._patternArea.addEventListener("contextmenu", this._disableCtrlContextMenu);
            this._trackArea.addEventListener("contextmenu", this._disableCtrlContextMenu);
            this.mainLayer.addEventListener("keydown", this._whenKeyPressed);
            this.mainLayer.addEventListener("keyup", this._whenKeyReleased);
            this.mainLayer.addEventListener("focusin", this._onFocusIn);
            this._instrumentCopyButton.addEventListener("click", this._copyInstrument.bind(this));
            this._instrumentPasteButton.addEventListener("click", this._pasteInstrument.bind(this));
            this._instrumentExportButton.addEventListener("click", this._exportInstruments.bind(this));
            this._instrumentImportButton.addEventListener("click", this._importInstruments.bind(this));
            sampleLoadEvents.addEventListener("sampleloaded", this._updateSampleLoadingBar.bind(this));
            this._instrumentVolumeSliderInputBox.addEventListener("input", () => { this._doc.record(new ChangeVolume(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].volume, Math.min(25.0, Math.max(-25.0, Math.round(+this._instrumentVolumeSliderInputBox.value))))); });
            this._panSliderInputBox.addEventListener("input", () => { this._doc.record(new ChangePan(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].pan, Math.min(100.0, Math.max(0.0, Math.round(+this._panSliderInputBox.value))))); });
            this._pwmSliderInputBox.addEventListener("input", () => { this._doc.record(new ChangePulseWidth(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].pulseWidth, Math.min(Config.pulseWidthRange, Math.max(1.0, Math.round(+this._pwmSliderInputBox.value))))); });
            this._detuneSliderInputBox.addEventListener("input", () => { this._doc.record(new ChangeDetune(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].detune, Math.min(Config.detuneMax - Config.detuneCenter, Math.max(Config.detuneMin - Config.detuneCenter, Math.round(+this._detuneSliderInputBox.value))))); });
            this._unisonVoicesInputBox.addEventListener("input", () => { this._doc.record(new ChangeUnisonVoices(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].unisonVoices, Math.min(Config.unisonVoicesMax, Math.max(Config.unisonVoicesMin, Math.round(+this._unisonVoicesInputBox.value))))); });
            this._unisonSpreadInputBox.addEventListener("input", () => { this._doc.record(new ChangeUnisonSpread(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].unisonSpread, Math.min(Config.unisonSpreadMax, Math.max(Config.unisonSpreadMin, +this._unisonSpreadInputBox.value)))); });
            this._unisonOffsetInputBox.addEventListener("input", () => { this._doc.record(new ChangeUnisonOffset(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].unisonOffset, Math.min(Config.unisonOffsetMax, Math.max(Config.unisonOffsetMin, +this._unisonOffsetInputBox.value)))); });
            this._unisonExpressionInputBox.addEventListener("input", () => { this._doc.record(new ChangeUnisonExpression(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].unisonExpression, Math.min(Config.unisonExpressionMax, Math.max(Config.unisonExpressionMin, +this._unisonExpressionInputBox.value)))); });
            this._unisonSignInputBox.addEventListener("input", () => { this._doc.record(new ChangeUnisonSign(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].unisonSign, Math.min(Config.unisonSignMax, Math.max(Config.unisonSignMin, +this._unisonSignInputBox.value)))); });
            this._customWaveDraw.addEventListener("input", () => { this._doc.record(new ChangeCustomWave(this._doc, this._customWaveDrawCanvas.newArray)); });
            this._twoNoteArpBox.addEventListener("input", () => { this._doc.record(new ChangeFastTwoNoteArp(this._doc, this._twoNoteArpBox.checked)); });
            this._clicklessTransitionBox.addEventListener("input", () => { this._doc.record(new ChangeClicklessTransition(this._doc, this._clicklessTransitionBox.checked)); });
            this._aliasingBox.addEventListener("input", () => { this._doc.record(new ChangeAliasing(this._doc, this._aliasingBox.checked)); });
            this._discreteEnvelopeBox.addEventListener("input", () => { this._doc.record(new ChangeDiscreteEnvelope(this._doc, this._discreteEnvelopeBox.checked)); });
            this._promptContainer.addEventListener("click", (event) => {
                if (this._doc.prefs.closePromptByClickoff === true) {
                    if (this.prompt != null && this.prompt.gotMouseUp === true)
                        return;
                    if (event.target == this._promptContainer) {
                        this._doc.undo();
                    }
                }
            });
            this._trackAndMuteContainer.addEventListener("scroll", this._onTrackAreaScroll, { capture: false, passive: true });
            if (isMobile) {
                const autoPlayOption = this._optionsMenu.querySelector("[value=autoPlay]");
                autoPlayOption.disabled = true;
                autoPlayOption.setAttribute("hidden", "");
                const instOption = this._optionsMenu.querySelector("[value=instrumentSettingsSimplifier]");
                instOption.disabled = true;
                instOption.setAttribute("hidden", "");
            }
            else {
                const oldMobileLayoutOption = this._optionsMenu.querySelector("[value=oldMobileLayout]");
                oldMobileLayoutOption.disabled = true;
                oldMobileLayoutOption.setAttribute("hidden", "");
            }
            if (window.screen.availWidth < 710) {
                const layoutOption = this._optionsMenu.querySelector("[value=layout]");
                layoutOption.disabled = true;
                layoutOption.setAttribute("hidden", "");
                const MobileButtonOption = this._optionsMenu.querySelector("[value=displayShortcutButtons]");
                MobileButtonOption.disabled = true;
                MobileButtonOption.setAttribute("hidden", "");
                if (this._doc.prefs.oldMobileLayout == false) {
                    const showDescOption = this._optionsMenu.querySelector("[value=showDescription]");
                    showDescOption.disabled = true;
                    showDescOption.setAttribute("hidden", "");
                }
            }
        }
        _updateSampleLoadingBar(_e) {
            const e = _e;
            const percent = (e.totalSamples === 0
                ? 0
                : Math.floor((e.samplesLoaded / e.totalSamples) * 100));
            this._sampleLoadingBar.style.width = `${percent}%`;
            if (e.totalSamples != 0) {
                this._sampleLoadingBarContainer.style.backgroundColor = "var(--indicator-secondary)";
            }
            else {
                this._sampleLoadingBarContainer.style.backgroundColor = "var(--empty-sample-bar, var(--indicator-secondary))";
            }
        }
        _toggleAlgorithmCanvas(e) {
            if (this._customAlgorithmCanvas.mode != "feedback") {
                this._customAlgorithmCanvas.mode = "feedback";
                e.target.textContent = "A";
                this._algorithmCanvasSwitch.value = "feedback";
            }
            else {
                this._customAlgorithmCanvas.mode = "algorithm";
                e.target.textContent = "F";
            }
            this._customAlgorithmCanvas.redrawCanvas();
        }
        _toggleDropdownMenu(dropdown, submenu = 0) {
            let target = this._vibratoDropdown;
            let group = this._vibratoDropdownGroup;
            switch (dropdown) {
                case 7:
                    target = this._envelopeDropdown;
                    this._openEnvelopeDropdown = this._openEnvelopeDropdown ? false : true;
                    group = this._envelopeDropdownGroup;
                    break;
                case 0:
                    target = this._vibratoDropdown;
                    this._openVibratoDropdown = this._openVibratoDropdown ? false : true;
                    group = this._vibratoDropdownGroup;
                    break;
                case 1:
                    target = this._panDropdown;
                    this._openPanDropdown = this._openPanDropdown ? false : true;
                    group = this._panDropdownGroup;
                    break;
                case 2:
                    target = this._chordDropdown;
                    this._openChordDropdown = this._openChordDropdown ? false : true;
                    group = this._chordDropdownGroup;
                    break;
                case 3:
                    target = this._transitionDropdown;
                    this._openTransitionDropdown = this._openTransitionDropdown ? false : true;
                    group = this._transitionDropdownGroup;
                    break;
                case 4:
                    target = this._operatorDropdowns[submenu];
                    this._openOperatorDropdowns[submenu] = this._openOperatorDropdowns[submenu] ? false : true;
                    group = this._operatorDropdownGroups[submenu];
                    break;
                case 5:
                    target = this._pulseWidthDropdown;
                    this._openPulseWidthDropdown = this._openPulseWidthDropdown ? false : true;
                    group = this._pulseWidthDropdownGroup;
                    break;
                case 6:
                    target = this._unisonDropdown;
                    this._openUnisonDropdown = this._openUnisonDropdown ? false : true;
                    group = this._unisonDropdownGroup;
                    break;
            }
            if (target.textContent == "▼") {
                let instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];
                target.textContent = "▲";
                if (group != this._chordDropdownGroup) {
                    group.style.display = "";
                }
                else if (instrument.chord == Config.chords.dictionary["arpeggio"].index) {
                    group.style.display = "";
                }
                for (let i = 0; i < group.children.length; i++) {
                    setTimeout(() => {
                        group.children[i].style.animationDelay = '0.17s';
                        group.children[i].style.opacity = '1';
                    });
                }
            }
            else {
                for (let i = 0; i < group.children.length; i++) {
                    group.children[i].style.animationDelay = '0s';
                    group.children[i].style.opacity = '0';
                }
                target.textContent = "▼";
                group.style.display = "none";
            }
        }
        _modSliderUpdate() {
            if (!this._doc.synth.playing) {
                this._hasActiveModSliders = false;
                for (let setting = 0; setting < Config.modulators.length; setting++) {
                    if (this._showModSliders[setting] == true) {
                        this._showModSliders[setting] = false;
                        this._newShowModSliders[setting] = false;
                        let slider = this.getSliderForModSetting(setting);
                        if (slider != null) {
                            slider.container.classList.remove("modSlider");
                        }
                    }
                }
            }
            else {
                let instrument = this._doc.getCurrentInstrument();
                const anyModActive = this._doc.synth.isAnyModActive(this._doc.channel, instrument);
                if (anyModActive) {
                    let instrument = this._doc.getCurrentInstrument();
                    function updateModSlider(editor, slider, setting, channel, instrument) {
                        if (editor._doc.synth.isModActive(setting, channel, instrument)) {
                            let currentVal = (editor._doc.synth.getModValue(setting, channel, instrument, false) - Config.modulators[setting].convertRealFactor) / Config.modulators[setting].maxRawVol;
                            if (Config.modulators[setting].invertSliderIndicator == true) {
                                currentVal = 1 - currentVal;
                            }
                            if (currentVal != editor._modSliderValues[setting]) {
                                editor._modSliderValues[setting] = currentVal;
                                slider.container.style.setProperty("--mod-position", (currentVal * 96.0 + 2.0) + "%");
                            }
                            return true;
                        }
                        return false;
                    }
                    for (let setting = 0; setting < Config.modulators.length; setting++) {
                        this._newShowModSliders[setting] = this._showModSliders[setting];
                        let slider = this.getSliderForModSetting(setting);
                        if (slider != null) {
                            this._newShowModSliders[setting] = updateModSlider(this, slider, setting, this._doc.channel, instrument);
                        }
                    }
                }
                else if (this._hasActiveModSliders) {
                    for (let setting = 0; setting < Config.modulators.length; setting++) {
                        this._newShowModSliders[setting] = false;
                    }
                }
                if (anyModActive || this._hasActiveModSliders) {
                    let anySliderActive = false;
                    for (let setting = 0; setting < Config.modulators.length; setting++) {
                        if (this._newShowModSliders[setting] != this._showModSliders[setting]) {
                            this._showModSliders[setting] = this._newShowModSliders[setting];
                            let slider = this.getSliderForModSetting(setting);
                            if (slider != null) {
                                if (this._showModSliders[setting] == true) {
                                    slider.container.classList.add("modSlider");
                                }
                                else {
                                    slider.container.classList.remove("modSlider");
                                }
                            }
                        }
                        if (this._newShowModSliders[setting] == true)
                            anySliderActive = true;
                    }
                    this._hasActiveModSliders = anySliderActive;
                }
            }
        }
        getSliderForModSetting(setting) {
            switch (setting) {
                case Config.modulators.dictionary["pan"].index:
                    return this._panSlider;
                case Config.modulators.dictionary["detune"].index:
                    return this._detuneSlider;
                case Config.modulators.dictionary["fm slider 1"].index:
                    return this._operatorAmplitudeSliders[0];
                case Config.modulators.dictionary["fm slider 2"].index:
                    return this._operatorAmplitudeSliders[1];
                case Config.modulators.dictionary["fm slider 3"].index:
                    return this._operatorAmplitudeSliders[2];
                case Config.modulators.dictionary["fm slider 4"].index:
                    return this._operatorAmplitudeSliders[3];
                case Config.modulators.dictionary["fm feedback"].index:
                    return this._feedbackAmplitudeSlider;
                case Config.modulators.dictionary["pulse width"].index:
                    return this._pulseWidthSlider;
                case Config.modulators.dictionary["decimal offset"].index:
                    return this._decimalOffsetSlider;
                case Config.modulators.dictionary["reverb"].index:
                    return this._reverbSlider;
                case Config.modulators.dictionary["distortion"].index:
                    return this._distortionSlider;
                case Config.modulators.dictionary["ring modulation"].index:
                    return this._ringModSlider;
                case Config.modulators.dictionary["ring mod hertz"].index:
                    return this._ringModHzSlider;
                case Config.modulators.dictionary["note volume"].index:
                    if (!this._showModSliders[Config.modulators.dictionary["mix volume"].index])
                        return this._instrumentVolumeSlider;
                    return null;
                case Config.modulators.dictionary["mix volume"].index:
                    return this._instrumentVolumeSlider;
                case Config.modulators.dictionary["vibrato depth"].index:
                    return this._vibratoDepthSlider;
                case Config.modulators.dictionary["vibrato speed"].index:
                    return this._vibratoSpeedSlider;
                case Config.modulators.dictionary["vibrato delay"].index:
                    return this._vibratoDelaySlider;
                case Config.modulators.dictionary["arp speed"].index:
                    return this._arpeggioSpeedSlider;
                case Config.modulators.dictionary["pan delay"].index:
                    return this._panDelaySlider;
                case Config.modulators.dictionary["tempo"].index:
                    return this._tempoSlider;
                case Config.modulators.dictionary["song volume"].index:
                    return this._volumeSlider;
                case Config.modulators.dictionary["eq filt cut"].index:
                    return this._eqFilterSimpleCutSlider;
                case Config.modulators.dictionary["eq filt peak"].index:
                    return this._eqFilterSimplePeakSlider;
                case Config.modulators.dictionary["note filt cut"].index:
                    return this._noteFilterSimpleCutSlider;
                case Config.modulators.dictionary["note filt peak"].index:
                    return this._noteFilterSimplePeakSlider;
                case Config.modulators.dictionary["bit crush"].index:
                    return this._bitcrusherQuantizationSlider;
                case Config.modulators.dictionary["freq crush"].index:
                    return this._bitcrusherFreqSlider;
                case Config.modulators.dictionary["pitch shift"].index:
                    return this._pitchShiftSlider;
                case Config.modulators.dictionary["chorus"].index:
                    return this._chorusSlider;
                case Config.modulators.dictionary["echo"].index:
                    return this._echoSustainSlider;
                case Config.modulators.dictionary["echo delay"].index:
                    return this._echoDelaySlider;
                case Config.modulators.dictionary["sustain"].index:
                    return this._stringSustainSlider;
                case Config.modulators.dictionary["fm slider 5"].index:
                    return this._operatorAmplitudeSliders[4];
                case Config.modulators.dictionary["fm slider 6"].index:
                    return this._operatorAmplitudeSliders[5];
                case Config.modulators.dictionary["envelope speed"].index:
                    return this._envelopeSpeedSlider;
                case Config.modulators.dictionary["dynamism"].index:
                    return this._supersawDynamismSlider;
                case Config.modulators.dictionary["spread"].index:
                    return this._supersawSpreadSlider;
                case Config.modulators.dictionary["saw shape"].index:
                    return this._supersawShapeSlider;
                case Config.modulators.dictionary["song panning"].index:
                    return this._panSlider;
                case Config.modulators.dictionary["phaser"].index:
                    return this._phaserMixSlider;
                case Config.modulators.dictionary["phaser frequency"].index:
                    return this._phaserFreqSlider;
                case Config.modulators.dictionary["phaser feedback"].index:
                    return this._phaserFeedbackSlider;
                case Config.modulators.dictionary["phaser stages"].index:
                    return this._phaserStagesSlider;
                default:
                    return null;
            }
        }
        _openPrompt(promptName) {
            this._doc.openPrompt(promptName);
            this._setPrompt(promptName);
        }
        _setPrompt(promptName) {
            if (this._currentPromptName == promptName)
                return;
            this._currentPromptName = promptName;
            if (this.prompt) {
                if (this._wasPlaying && !(this.prompt instanceof TipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomScalePrompt || this.prompt instanceof CustomChipPrompt || this.prompt instanceof CustomFilterPrompt || this.prompt instanceof VisualLoopControlsPrompt || this.prompt instanceof SustainPrompt)) {
                    this._doc.performance.play();
                }
                this._wasPlaying = false;
                this._promptContainer.style.display = "none";
                this._promptContainerBG.style.display = "none";
                this._promptContainer.removeChild(this.prompt.container);
                this.prompt.cleanUp();
                this.prompt = null;
                this.refocusStage();
            }
            if (promptName) {
                switch (promptName) {
                    case "export":
                        this.prompt = new ImportPrompt(this._doc);
                        break;
                    case "import":
                        this.prompt = new ImportPrompt(this._doc);
                        break;
                    case "songRecovery":
                        this.prompt = new SongRecoveryPrompt(this._doc);
                        break;
                    case "barCount":
                        this.prompt = new SongDurationPrompt(this._doc);
                        break;
                    case "beatsPerBar":
                        this.prompt = new BeatsPerBarPrompt(this._doc);
                        break;
                    case "moveNotesSideways":
                        this.prompt = new MoveNotesSidewaysPrompt(this._doc);
                        break;
                    case "channelSettings":
                        this.prompt = new ChannelSettingsPrompt(this._doc);
                        break;
                    case "limiterSettings":
                        this.prompt = new LimiterPrompt(this._doc, this);
                        break;
                    case "customScale":
                        this.prompt = new CustomScalePrompt(this._doc);
                        break;
                    case "customChipSettings":
                        this.prompt = new CustomChipPrompt(this._doc, this);
                        break;
                    case "customEQFilterSettings":
                        this.prompt = new CustomFilterPrompt(this._doc, this, false);
                        break;
                    case "customNoteFilterSettings":
                        this.prompt = new CustomFilterPrompt(this._doc, this, true);
                        break;
                    case "theme":
                        this.prompt = new ThemePrompt(this._doc);
                        break;
                    case "tutorial":
                        this.prompt = new TutorialPrompt(this._doc);
                        break;
                    case "newUpdate":
                        this.prompt = new UpdatePrompt(this._doc);
                        break;
                    case "custom":
                        this.prompt = new CustomPrompt(this._doc, this._patternEditor, this._trackArea, document.getElementById("beepboxEditorContainer"));
                        break;
                    case "layout":
                        this.prompt = new LayoutPrompt(this._doc);
                        break;
                    case "recordingSetup":
                        this.prompt = new RecordingSetupPrompt(this._doc);
                        break;
                    case "exportInstrument":
                        this.prompt = new InstrumentExportPrompt(this._doc);
                        break;
                    case "importInstrument":
                        this.prompt = new InstrumentImportPrompt(this._doc);
                        break;
                    case "stringSustain":
                        this.prompt = new SustainPrompt(this._doc);
                        break;
                    case "addExternal":
                        this.prompt = new AddSamplesPrompt(this._doc);
                        break;
                    case "songTheme":
                        this.prompt = new SetThemePrompt(this._doc);
                        break;
                    case "generateEuclideanRhythm":
                        this.prompt = new EuclideanRhythmPrompt(this._doc);
                        break;
                    case "custom":
                        break;
                    case "visualLoopControls":
                        this.prompt = new VisualLoopControlsPrompt(this._doc, this);
                        break;
                    case "sampleLoadingStatus":
                        this.prompt = new SampleLoadingStatusPrompt(this._doc);
                        break;
                    case "configureShortener":
                        this.prompt = new ShortenerConfigPrompt(this._doc);
                        break;
                    case "presetsPrompt":
                        this.prompt = new PresetPrompt(this._doc);
                        break;
                    default:
                        this.prompt = new TipPrompt(this._doc, promptName);
                        break;
                }
                if (this.prompt) {
                    if (!(this.prompt instanceof TipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomChipPrompt || this.prompt instanceof CustomFilterPrompt || this.prompt instanceof VisualLoopControlsPrompt || this.prompt instanceof SustainPrompt)) {
                        this._wasPlaying = this._doc.synth.playing;
                        this._doc.performance.pause();
                    }
                    this._promptContainer.style.display = "";
                    if (this._doc.prefs.frostedGlassBackground == true) {
                        this._promptContainerBG.style.display = "";
                        this._promptContainerBG.style.backgroundColor = "rgba(0,0,0, 0)";
                        this._promptContainerBG.style.backdropFilter = "brightness(0.9) blur(14px)";
                        this._promptContainerBG.style.opacity = "1";
                    }
                    else {
                        this._promptContainerBG.style.display = "";
                        this._promptContainerBG.style.backgroundColor = "var(--editor-background)";
                        this._promptContainerBG.style.backdropFilter = "";
                        this._promptContainerBG.style.opacity = "0.5";
                    }
                    this._promptContainer.appendChild(this.prompt.container);
                    document.body.appendChild(this._promptContainerBG);
                }
            }
        }
        changeBarScrollPos(offset) {
            this._barScrollBar.changePos(offset);
        }
        handleModRecording() {
            window.clearTimeout(this._modRecTimeout);
            const lastChange = this._doc.checkLastChange();
            if ((this._ctrlHeld || this._shiftHeld) && lastChange != null && this._doc.synth.playing) {
                const changedPatterns = this._patternEditor.setModSettingsForChange(lastChange, this);
                if (this._doc.continuingModRecordingChange != null) {
                    this._modRecTimeout = window.setTimeout(() => { this.handleModRecording(); }, 10);
                    this._doc.recordingModulators = true;
                    if (changedPatterns)
                        this._trackEditor.render();
                }
            }
            else if (this._doc.recordingModulators) {
                this._doc.recordingModulators = false;
                this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));
            }
        }
        _renderInstrumentBar(channel, instrumentIndex, colors) {
            if (this._doc.song.layeredInstruments || this._doc.song.patternInstruments) {
                this._instrumentsButtonRow.style.display = "";
                this._instrumentsButtonBar.style.setProperty("--text-color-lit", colors.primaryNote);
                this._instrumentsButtonBar.style.setProperty("--text-color-dim", colors.secondaryNote);
                this._instrumentsButtonBar.style.setProperty("--background-color-lit", colors.primaryChannel);
                this._instrumentsButtonBar.style.setProperty("--background-color-dim", colors.secondaryChannel);
                const maxInstrumentsPerChannel = this._doc.song.getMaxInstrumentsPerChannel();
                while (this._instrumentButtons.length < channel.instruments.length) {
                    const instrumentButton = button(String(this._instrumentButtons.length + 1));
                    this._instrumentButtons.push(instrumentButton);
                    this._instrumentsButtonBar.insertBefore(instrumentButton, this._instrumentRemoveButton);
                }
                for (let i = this._renderedInstrumentCount; i < channel.instruments.length; i++) {
                    this._instrumentButtons[i].style.display = "";
                }
                for (let i = channel.instruments.length; i < this._renderedInstrumentCount; i++) {
                    this._instrumentButtons[i].style.display = "none";
                }
                this._renderedInstrumentCount = channel.instruments.length;
                while (this._instrumentButtons.length > maxInstrumentsPerChannel) {
                    this._instrumentsButtonBar.removeChild(this._instrumentButtons.pop());
                }
                this._instrumentRemoveButton.style.display = (channel.instruments.length > Config.instrumentCountMin) ? "" : "none";
                this._instrumentAddButton.style.display = (channel.instruments.length < maxInstrumentsPerChannel) ? "" : "none";
                if (channel.instruments.length < maxInstrumentsPerChannel) {
                    this._instrumentRemoveButton.classList.remove("last-button");
                }
                else {
                    this._instrumentRemoveButton.classList.add("last-button");
                }
                if (channel.instruments.length > 1) {
                    if (this._highlightedInstrumentIndex != instrumentIndex) {
                        const oldButton = this._instrumentButtons[this._highlightedInstrumentIndex];
                        if (oldButton != null)
                            oldButton.classList.remove("selected-instrument");
                        const newButton = this._instrumentButtons[instrumentIndex];
                        newButton.classList.add("selected-instrument");
                        this._highlightedInstrumentIndex = instrumentIndex;
                    }
                }
                else {
                    const oldButton = this._instrumentButtons[this._highlightedInstrumentIndex];
                    if (oldButton != null)
                        oldButton.classList.remove("selected-instrument");
                    this._highlightedInstrumentIndex = -1;
                }
                if (this._doc.song.layeredInstruments && this._doc.song.patternInstruments && (this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {
                    for (let i = 0; i < channel.instruments.length; i++) {
                        if (this._doc.recentPatternInstruments[this._doc.channel].indexOf(i) != -1) {
                            this._instrumentButtons[i].classList.remove("deactivated");
                        }
                        else {
                            this._instrumentButtons[i].classList.add("deactivated");
                        }
                    }
                    this._deactivatedInstruments = true;
                }
                else if (this._deactivatedInstruments || (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {
                    for (let i = 0; i < channel.instruments.length; i++) {
                        this._instrumentButtons[i].classList.remove("deactivated");
                    }
                    this._deactivatedInstruments = false;
                }
                if ((this._doc.song.layeredInstruments && this._doc.song.patternInstruments) && channel.instruments.length > 1 && (this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {
                    for (let i = 0; i < channel.instruments.length; i++) {
                        this._instrumentButtons[i].classList.remove("no-underline");
                    }
                }
                else {
                    for (let i = 0; i < channel.instruments.length; i++) {
                        this._instrumentButtons[i].classList.add("no-underline");
                    }
                }
            }
            else {
                this._instrumentsButtonRow.style.display = "none";
            }
        }
        _usageCheck(channelIndex, instrumentIndex) {
            var instrumentUsed = false;
            var patternUsed = false;
            var modUsed = false;
            const channel = this._doc.song.channels[channelIndex];
            if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                for (let modChannelIdx = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; modChannelIdx < this._doc.song.channels.length; modChannelIdx++) {
                    const modChannel = this._doc.song.channels[modChannelIdx];
                    const patternIdx = modChannel.bars[this._doc.bar];
                    if (patternIdx > 0) {
                        const modInstrumentIdx = modChannel.patterns[patternIdx - 1].instruments[0];
                        const modInstrument = modChannel.instruments[modInstrumentIdx];
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            if (modInstrument.modChannels[mod] == channelIndex && (modInstrument.modInstruments[mod] == instrumentIndex || modInstrument.modInstruments[mod] >= channel.instruments.length)) {
                                modUsed = true;
                            }
                        }
                    }
                }
            }
            let lowestSelX = Math.min(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
            let highestSelX = Math.max(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);
            let lowestSelY = Math.min(this._doc.selection.boxSelectionY0, this._doc.selection.boxSelectionY1);
            let highestSelY = Math.max(this._doc.selection.boxSelectionY0, this._doc.selection.boxSelectionY1);
            if (channel.bars[this._doc.bar] != 0) {
                for (let i = 0; i < this._doc.song.barCount; i++) {
                    if (channel.bars[i] == channel.bars[this._doc.bar] && i != this._doc.bar &&
                        (i < lowestSelX || i > highestSelX || this._doc.channel < lowestSelY || this._doc.channel > highestSelY)) {
                        patternUsed = true;
                        i = this._doc.song.barCount;
                    }
                }
            }
            for (let i = 0; i < this._doc.song.barCount; i++) {
                if (channel.bars[i] != 0 && channel.bars[i] != channel.bars[this._doc.bar] &&
                    channel.patterns[channel.bars[i] - 1].instruments.includes(instrumentIndex) && i != this._doc.bar &&
                    (i < lowestSelX || i > highestSelX || this._doc.channel < lowestSelY || this._doc.channel > highestSelY)) {
                    instrumentUsed = true;
                    i = this._doc.song.barCount;
                }
            }
            if (patternUsed) {
                this._usedPatternIndicator.style.setProperty("fill", ColorConfig.indicatorPrimary);
                this.patternUsed = true;
            }
            else {
                this._usedPatternIndicator.style.setProperty("fill", ColorConfig.indicatorSecondary);
                this.patternUsed = false;
            }
            if (instrumentUsed) {
                this._usedInstrumentIndicator.style.setProperty("fill", ColorConfig.indicatorPrimary);
            }
            else {
                this._usedInstrumentIndicator.style.setProperty("fill", ColorConfig.indicatorSecondary);
            }
            if (modUsed) {
                this._jumpToModIndicator.style.setProperty("display", "");
                this._jumpToModIndicator.style.setProperty("fill", ColorConfig.indicatorPrimary);
                this._jumpToModIndicator.classList.add("modTarget");
            }
            else if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                this._jumpToModIndicator.style.setProperty("display", "");
                this._jumpToModIndicator.style.setProperty("fill", ColorConfig.indicatorSecondary);
                this._jumpToModIndicator.classList.remove("modTarget");
            }
            else {
                this._jumpToModIndicator.style.setProperty("display", "none");
            }
        }
        _copyTextToClipboard(text) {
            let nav;
            nav = navigator;
            if (nav.clipboard && nav.clipboard.writeText) {
                nav.clipboard.writeText(text).catch(() => {
                    window.prompt("Copy to clipboard:", text);
                });
                return;
            }
            const textField = document.createElement("textarea");
            textField.textContent = text;
            document.body.appendChild(textField);
            textField.select();
            const succeeded = document.execCommand("copy");
            textField.remove();
            this.refocusStage();
            if (!succeeded)
                window.prompt("Copy this:", text);
        }
        _animateVolume(outVolumeCap, historicOutCap) {
            this._outVolumeBar.setAttribute("width", "" + Math.min(144, outVolumeCap * 144));
            this._outVolumeCap.setAttribute("x", "" + (8 + Math.min(144, historicOutCap * 144)));
        }
        _recordVolumeSlider(useVol) {
            if ((this._ctrlHeld || this._shiftHeld) && this._doc.synth.playing) {
                const prevVol = this._doc.prefs.volume;
                this._doc.prefs.volume = useVol;
                this._patternEditor.setModSettingsForChange(null, this);
                window.clearTimeout(this._modRecTimeout);
                this._modRecTimeout = window.setTimeout(() => { this._recordVolumeSlider(useVol); }, 10);
                this._doc.recordingModulators = true;
                this._doc.prefs.volume = prevVol;
                this._volumeSlider.updateValue(this._doc.prefs.volume);
            }
            else {
                this._doc.setVolume(Number(this._volumeSlider.input.value));
                if (this._doc.recordingModulators) {
                    this._doc.recordingModulators = false;
                    this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));
                }
            }
        }
        _switchEQFilterType(toSimple) {
            const channel = this._doc.song.channels[this._doc.channel];
            const instrument = channel.instruments[this._doc.getCurrentInstrument()];
            if (instrument.eqFilterType != toSimple) {
                this._doc.record(new ChangeEQFilterType(this._doc, instrument, toSimple));
            }
        }
        _switchNoteFilterType(toSimple) {
            const channel = this._doc.song.channels[this._doc.channel];
            const instrument = channel.instruments[this._doc.getCurrentInstrument()];
            if (instrument.noteFilterType != toSimple) {
                this._doc.record(new ChangeNoteFilterType(this._doc, instrument, toSimple));
            }
        }
        _randomPreset() {
            const isNoise = this._doc.song.getChannelIsNoise(this._doc.channel);
            this._doc.record(new ChangePreset(this._doc, pickRandomPresetValue(isNoise)));
        }
        _randomGenerated() {
            this._doc.record(new ChangeRandomGeneratedInstrument(this._doc));
        }
        _setPreset(preset) {
            if (isNaN(preset)) {
                switch (preset) {
                    case "copyInstrument":
                        this._copyInstrument();
                        break;
                    case "pasteInstrument":
                        this._pasteInstrument();
                        break;
                    case "randomPreset":
                        this._randomPreset();
                        break;
                    case "randomGenerated":
                        this._randomGenerated();
                        break;
                }
                this._doc.notifier.changed();
            }
            else {
                this._doc.record(new ChangePreset(this._doc, parseInt(preset)));
            }
        }
    }
    SongEditor._styleElement = document.head.appendChild(HTML.style({ type: "text/css" }));
    SongEditor._setLoopIcon = {
        "1": `
        .songLoopButton::before {
              mask-image: var(--loop-within-bar-symbol);
              -webkit-mask-image: var(--loop-within-bar-symbol);
            }
        `,
        "2": `
        .songLoopButton::before {
            mask-image: var(--loop-full-song-symbol);
            -webkit-mask-image: var(--loop-full-song-symbol);
          }
        `,
        "3": `
        .songLoopButton::before {
            mask-image: var(--dont-loop-symbol);
            -webkit-mask-image: var(--dont-loop-symbol);
          }
        `,
    };

    class SongPerformance {
        constructor(_doc) {
            this._doc = _doc;
            this._channelIsDrum = false;
            this._channelOctave = -1;
            this._songKey = -1;
            this._pitchesAreTemporary = false;
            this._bassPitchesAreTemporary = false;
            this._recentlyAddedPitches = [];
            this._recentlyAddedBassPitches = [];
            this._songLengthWhenRecordingStarted = -1;
            this._playheadPart = -1;
            this._bassPlayheadPart = -1;
            this._playheadPattern = null;
            this._bassPlayheadPattern = null;
            this._pitchesChanged = false;
            this._bassPitchesChanged = false;
            this._lastNote = null;
            this._lastBassNote = null;
            this._recordingChange = null;
            this._onAnimationFrame = () => {
                window.requestAnimationFrame(this._onAnimationFrame);
                if (this._doc.synth.recording) {
                    let dirty = this._updateRecordedNotes();
                    dirty = this._updateRecordedBassNotes() ? true : dirty;
                    if (dirty) {
                        this._doc.notifier.notifyWatchers();
                    }
                }
            };
            this._documentChanged = () => {
                const isDrum = this._doc.song.getChannelIsNoise(this._doc.channel);
                const octave = this._doc.song.channels[this._doc.channel].octave;
                if (this._doc.synth.liveInputChannel != this._doc.channel || this._doc.synth.liveBassInputChannel != this._getBassOffsetChannel() || this._channelIsDrum != isDrum || this._channelOctave != octave || this._songKey != this._doc.song.key) {
                    this._doc.synth.liveInputChannel = this._doc.channel;
                    this._doc.synth.liveBassInputChannel = this._getBassOffsetChannel();
                    this._channelIsDrum = isDrum;
                    this._channelOctave = octave;
                    this._songKey = this._doc.song.key;
                    this.clearAllPitches();
                    this.clearAllBassPitches();
                }
                this._doc.synth.liveInputInstruments = this._doc.recentPatternInstruments[this._doc.channel];
                this._doc.synth.liveBassInputInstruments = this._doc.recentPatternInstruments[this._doc.synth.liveBassInputChannel];
            };
            this._doc.notifier.watch(this._documentChanged);
            this._documentChanged();
            window.requestAnimationFrame(this._onAnimationFrame);
        }
        play() {
            this._doc.synth.play();
            this._doc.synth.enableMetronome = false;
            this._doc.synth.countInMetronome = false;
            this._doc.synth.maintainLiveInput();
        }
        pause() {
            this.clearAllPitches();
            this.clearAllBassPitches();
            if (this._recordingChange != null) {
                if (this._doc.song.barCount > this._songLengthWhenRecordingStarted && !this._lastBarHasPatterns()) {
                    new ChangeDeleteBars(this._doc, this._doc.song.barCount - 1, 1);
                    new ChangeChannelBar(this._doc, this._doc.channel, this._doc.song.barCount - 1);
                }
                if (!this._recordingChange.isNoop()) {
                    this._doc.record(this._recordingChange);
                    this._recordingChange = null;
                }
                this._lastNote = null;
            }
            this._doc.synth.pause();
            this._doc.synth.resetEffects();
            this._doc.synth.enableMetronome = false;
            this._doc.synth.countInMetronome = false;
            if (this._doc.prefs.autoFollow) {
                this._doc.synth.goToBar(this._doc.bar);
            }
            this._doc.synth.snapToBar();
        }
        record() {
            this._doc.synth.snapToBar();
            const playheadBar = Math.floor(this._doc.synth.playhead);
            if (playheadBar != this._doc.bar) {
                new ChangeChannelBar(this._doc, this._doc.channel, playheadBar);
            }
            if (this._pitchesAreTemporary) {
                this.clearAllPitches();
                this._pitchesAreTemporary = false;
            }
            if (this._bassPitchesAreTemporary) {
                this.clearAllBassPitches();
                this._bassPitchesAreTemporary = false;
            }
            this._doc.synth.enableMetronome = this._doc.prefs.metronomeWhileRecording;
            this._doc.synth.countInMetronome = this._doc.prefs.metronomeCountIn;
            this._doc.synth.startRecording();
            this._doc.synth.maintainLiveInput();
            this._songLengthWhenRecordingStarted = this._doc.song.barCount;
            this._playheadPart = this._getCurrentPlayheadPart();
            this._bassPlayheadPart = this._getCurrentPlayheadPart();
            this._playheadPattern = null;
            this._bassPlayheadPattern = null;
            this._pitchesChanged = false;
            this._bassPitchesChanged = false;
            this._lastNote = null;
            this._lastBassNote = null;
            this._recentlyAddedPitches.length = 0;
            this._recentlyAddedBassPitches.length = 0;
            this._recordingChange = new ChangeGroup();
            this._doc.setProspectiveChange(this._recordingChange);
        }
        abortRecording() {
            this._recordingChange = null;
            this.pause();
        }
        pitchesAreTemporary() {
            return this._pitchesAreTemporary;
        }
        bassPitchesAreTemporary() {
            return this._bassPitchesAreTemporary;
        }
        _getBassOffsetChannel() {
            if (this._doc.channel >= this._doc.song.pitchChannelCount)
                return this._doc.channel;
            return Math.max(0, Math.min(this._doc.song.pitchChannelCount - 1, this._doc.channel + this._doc.prefs.bassOffset));
        }
        _getMinDivision() {
            if (this._doc.prefs.snapRecordedNotesToRhythm) {
                return Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat;
            }
            else {
                return 1;
            }
        }
        _getCurrentPlayheadPart() {
            const currentPart = this._doc.synth.playhead * this._doc.song.beatsPerBar * Config.partsPerBeat;
            if (this._doc.prefs.snapRecordedNotesToRhythm) {
                const minDivision = this._getMinDivision();
                return Math.round(currentPart / minDivision) * minDivision;
            }
            return Math.round(currentPart);
        }
        _lastBarHasPatterns() {
            for (let channelIndex = 0; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {
                if (this._doc.song.channels[channelIndex].bars[this._doc.song.barCount - 1] != 0)
                    return true;
            }
            return false;
        }
        _updateRecordedNotes() {
            if (this._recordingChange == null)
                return false;
            if (!this._doc.lastChangeWas(this._recordingChange)) {
                this.abortRecording();
                return false;
            }
            if (this._doc.synth.countInMetronome) {
                this._recentlyAddedPitches.length = 0;
                this._pitchesChanged = false;
                return false;
            }
            const partsPerBar = this._doc.song.beatsPerBar * Config.partsPerBeat;
            const oldPart = this._playheadPart % partsPerBar;
            const oldBar = Math.floor(this._playheadPart / partsPerBar);
            const oldPlayheadPart = this._playheadPart;
            this._playheadPart = this._getCurrentPlayheadPart();
            const newPart = this._playheadPart % partsPerBar;
            const newBar = Math.floor(this._playheadPart / partsPerBar);
            if (oldPart == newPart && oldBar == newBar)
                return false;
            if (this._playheadPart < oldPlayheadPart) {
                this._lastNote = null;
                this._playheadPattern = null;
                return false;
            }
            let dirty = false;
            for (let bar = oldBar; bar <= newBar; bar++) {
                if (bar != oldBar) {
                    this._playheadPattern = null;
                }
                const startPart = (bar == oldBar) ? oldPart : 0;
                const endPart = (bar == newBar) ? newPart : partsPerBar;
                if (startPart == endPart)
                    break;
                if (this._lastNote != null && !this._pitchesChanged && startPart > 0 && this._doc.synth.liveInputPitches.length > 0) {
                    this._recordingChange.append(new ChangePinTime(this._doc, this._lastNote, 1, endPart, this._lastNote.continuesLastPattern));
                    this._doc.currentPatternIsDirty = true;
                }
                else {
                    if (this._lastNote != null) {
                        this._lastNote = null;
                    }
                    let noteStartPart = startPart;
                    let noteEndPart = endPart;
                    while (noteStartPart < endPart) {
                        let addedAlreadyReleasedPitch = false;
                        if (this._recentlyAddedPitches.length > 0 || this._doc.synth.liveInputPitches.length > 0) {
                            if (this._playheadPattern == null) {
                                this._doc.selection.erasePatternInBar(this._recordingChange, this._doc.synth.liveInputChannel, bar);
                                this._recordingChange.append(new ChangeEnsurePatternExists(this._doc, this._doc.synth.liveInputChannel, bar));
                                this._playheadPattern = this._doc.song.getPattern(this._doc.synth.liveInputChannel, bar);
                            }
                            if (this._playheadPattern == null)
                                throw new Error();
                            this._lastNote = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.synth.liveInputChannel));
                            this._lastNote.continuesLastPattern = (noteStartPart == 0 && !this._pitchesChanged);
                            this._lastNote.pitches.length = 0;
                            while (this._recentlyAddedPitches.length > 0) {
                                if (this._lastNote.pitches.length >= Config.maxChordSize)
                                    break;
                                const recentPitch = this._recentlyAddedPitches.shift();
                                if (this._doc.synth.liveInputPitches.indexOf(recentPitch) == -1) {
                                    this._lastNote.pitches.push(recentPitch);
                                    addedAlreadyReleasedPitch = true;
                                }
                            }
                            for (let i = 0; i < this._doc.synth.liveInputPitches.length; i++) {
                                if (this._lastNote.pitches.length >= Config.maxChordSize)
                                    break;
                                this._lastNote.pitches.push(this._doc.synth.liveInputPitches[i]);
                            }
                            this._recordingChange.append(new ChangeNoteAdded(this._doc, this._playheadPattern, this._lastNote, this._playheadPattern.notes.length));
                            if (addedAlreadyReleasedPitch) {
                                noteEndPart = noteStartPart + this._getMinDivision();
                                new ChangeNoteLength(this._doc, this._lastNote, this._lastNote.start, noteEndPart);
                                this._lastNote = null;
                            }
                            dirty = true;
                        }
                        this._pitchesChanged = addedAlreadyReleasedPitch;
                        noteStartPart = noteEndPart;
                        noteEndPart = endPart;
                    }
                }
                if (bar == this._doc.song.barCount - 1) {
                    if (this._lastBarHasPatterns()) {
                        new ChangeInsertBars(this._doc, this._doc.song.barCount, 1);
                        this._doc.bar--;
                        dirty = true;
                    }
                }
            }
            return dirty;
        }
        _updateRecordedBassNotes() {
            if (this._recordingChange == null)
                return false;
            if (!this._doc.lastChangeWas(this._recordingChange)) {
                this.abortRecording();
                return false;
            }
            if (this._doc.synth.countInMetronome) {
                this._recentlyAddedBassPitches.length = 0;
                this._bassPitchesChanged = false;
                return false;
            }
            const partsPerBar = this._doc.song.beatsPerBar * Config.partsPerBeat;
            const oldPart = this._bassPlayheadPart % partsPerBar;
            const oldBar = Math.floor(this._bassPlayheadPart / partsPerBar);
            const oldPlayheadPart = this._bassPlayheadPart;
            this._bassPlayheadPart = this._getCurrentPlayheadPart();
            const newPart = this._bassPlayheadPart % partsPerBar;
            const newBar = Math.floor(this._bassPlayheadPart / partsPerBar);
            if (oldPart == newPart && oldBar == newBar)
                return false;
            if (this._bassPlayheadPart < oldPlayheadPart) {
                this._lastBassNote = null;
                this._bassPlayheadPattern = null;
                return false;
            }
            let dirty = false;
            for (let bar = oldBar; bar <= newBar; bar++) {
                if (bar != oldBar) {
                    this._bassPlayheadPattern = null;
                }
                const startPart = (bar == oldBar) ? oldPart : 0;
                const endPart = (bar == newBar) ? newPart : partsPerBar;
                if (startPart == endPart)
                    break;
                if (this._lastBassNote != null && !this._bassPitchesChanged && startPart > 0 && this._doc.synth.liveBassInputPitches.length > 0) {
                    this._recordingChange.append(new ChangePinTime(this._doc, this._lastBassNote, 1, endPart, this._lastBassNote.continuesLastPattern));
                    this._doc.currentPatternIsDirty = true;
                }
                else {
                    if (this._lastBassNote != null) {
                        this._lastBassNote = null;
                    }
                    let noteStartPart = startPart;
                    let noteEndPart = endPart;
                    while (noteStartPart < endPart) {
                        let addedAlreadyReleasedPitch = false;
                        if (this._recentlyAddedBassPitches.length > 0 || this._doc.synth.liveBassInputPitches.length > 0) {
                            if (this._bassPlayheadPattern == null) {
                                this._doc.selection.erasePatternInBar(this._recordingChange, this._doc.synth.liveBassInputChannel, bar);
                                this._recordingChange.append(new ChangeEnsurePatternExists(this._doc, this._doc.synth.liveBassInputChannel, bar));
                                this._bassPlayheadPattern = this._doc.song.getPattern(this._doc.synth.liveBassInputChannel, bar);
                            }
                            if (this._bassPlayheadPattern == null)
                                throw new Error();
                            this._lastBassNote = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.synth.liveBassInputChannel));
                            this._lastBassNote.continuesLastPattern = (noteStartPart == 0 && !this._bassPitchesChanged);
                            this._lastBassNote.pitches.length = 0;
                            while (this._recentlyAddedBassPitches.length > 0) {
                                if (this._lastBassNote.pitches.length >= Config.maxChordSize)
                                    break;
                                const recentPitch = this._recentlyAddedBassPitches.shift();
                                if (this._doc.synth.liveBassInputPitches.indexOf(recentPitch) == -1) {
                                    this._lastBassNote.pitches.push(recentPitch);
                                    addedAlreadyReleasedPitch = true;
                                }
                            }
                            for (let i = 0; i < this._doc.synth.liveBassInputPitches.length; i++) {
                                if (this._lastBassNote.pitches.length >= Config.maxChordSize)
                                    break;
                                this._lastBassNote.pitches.push(this._doc.synth.liveBassInputPitches[i]);
                            }
                            this._recordingChange.append(new ChangeNoteAdded(this._doc, this._bassPlayheadPattern, this._lastBassNote, this._bassPlayheadPattern.notes.length));
                            if (addedAlreadyReleasedPitch) {
                                noteEndPart = noteStartPart + this._getMinDivision();
                                new ChangeNoteLength(this._doc, this._lastBassNote, this._lastBassNote.start, noteEndPart);
                                this._lastBassNote = null;
                            }
                            dirty = true;
                        }
                        this._bassPitchesChanged = addedAlreadyReleasedPitch;
                        noteStartPart = noteEndPart;
                        noteEndPart = endPart;
                    }
                }
                if (bar == this._doc.song.barCount - 1) {
                    if (this._lastBarHasPatterns()) {
                        new ChangeInsertBars(this._doc, this._doc.song.barCount, 1);
                        this._doc.bar--;
                        dirty = true;
                    }
                }
            }
            return dirty;
        }
        setTemporaryPitches(pitches, duration) {
            this._updateRecordedNotes();
            for (let i = 0; i < pitches.length; i++) {
                this._doc.synth.liveInputPitches[i] = pitches[i];
            }
            this._doc.synth.liveInputPitches.length = Math.min(pitches.length, Config.maxChordSize);
            this._doc.synth.liveInputDuration = duration;
            this._doc.synth.liveInputStarted = true;
            this._pitchesAreTemporary = true;
            this._pitchesChanged = true;
        }
        setTemporaryBassPitches(pitches, duration) {
            this._updateRecordedBassNotes();
            for (let i = 0; i < pitches.length; i++) {
                this._doc.synth.liveBassInputPitches[i] = pitches[i];
            }
            this._doc.synth.liveBassInputPitches.length = Math.min(pitches.length, Config.maxChordSize);
            this._doc.synth.liveBassInputDuration = duration;
            this._doc.synth.liveBassInputStarted = true;
            this._bassPitchesAreTemporary = true;
            this._bassPitchesChanged = true;
        }
        addPerformedPitch(pitch) {
            this._doc.synth.maintainLiveInput();
            if (pitch > Piano.getBassCutoffPitch(this._doc) || this._getBassOffsetChannel() == this._doc.channel) {
                this._updateRecordedNotes();
                if (this._pitchesAreTemporary) {
                    this.clearAllPitches();
                    this._pitchesAreTemporary = false;
                }
                if (this._doc.prefs.ignorePerformedNotesNotInScale && !Config.scales[this._doc.song.scale].flags[pitch % Config.pitchesPerOctave]) {
                    return;
                }
                if (this._doc.synth.liveInputPitches.indexOf(pitch) == -1) {
                    this._doc.synth.liveInputPitches.push(pitch);
                    this._pitchesChanged = true;
                    while (this._doc.synth.liveInputPitches.length > Config.maxChordSize) {
                        this._doc.synth.liveInputPitches.shift();
                    }
                    this._doc.synth.liveInputDuration = Number.MAX_SAFE_INTEGER;
                    if (this._recordingChange != null) {
                        const recentIndex = this._recentlyAddedPitches.indexOf(pitch);
                        if (recentIndex != -1) {
                            this._recentlyAddedPitches.splice(recentIndex, 1);
                        }
                        this._recentlyAddedPitches.push(pitch);
                        while (this._recentlyAddedPitches.length > Config.maxChordSize * 4) {
                            this._recentlyAddedPitches.shift();
                        }
                    }
                }
            }
            else {
                this._updateRecordedBassNotes();
                if (this._bassPitchesAreTemporary) {
                    this.clearAllBassPitches();
                    this._bassPitchesAreTemporary = false;
                }
                if (this._doc.prefs.ignorePerformedNotesNotInScale && !Config.scales[this._doc.song.scale].flags[pitch % Config.pitchesPerOctave]) {
                    return;
                }
                if (this._doc.synth.liveBassInputPitches.indexOf(pitch) == -1) {
                    this._doc.synth.liveBassInputPitches.push(pitch);
                    this._bassPitchesChanged = true;
                    while (this._doc.synth.liveBassInputPitches.length > Config.maxChordSize) {
                        this._doc.synth.liveBassInputPitches.shift();
                    }
                    this._doc.synth.liveBassInputDuration = Number.MAX_SAFE_INTEGER;
                    if (this._recordingChange != null) {
                        const recentIndex = this._recentlyAddedPitches.indexOf(pitch);
                        if (recentIndex != -1) {
                            this._recentlyAddedBassPitches.splice(recentIndex, 1);
                        }
                        this._recentlyAddedBassPitches.push(pitch);
                        while (this._recentlyAddedBassPitches.length > Config.maxChordSize * 4) {
                            this._recentlyAddedBassPitches.shift();
                        }
                    }
                }
            }
        }
        removePerformedPitch(pitch) {
            if (pitch > Piano.getBassCutoffPitch(this._doc) || this._getBassOffsetChannel() == this._doc.channel) {
                this._updateRecordedNotes();
                for (let i = 0; i < this._doc.synth.liveInputPitches.length; i++) {
                    if (this._doc.synth.liveInputPitches[i] == pitch) {
                        this._doc.synth.liveInputPitches.splice(i, 1);
                        this._pitchesChanged = true;
                        i--;
                    }
                }
            }
            else {
                this._updateRecordedBassNotes();
                for (let i = 0; i < this._doc.synth.liveBassInputPitches.length; i++) {
                    if (this._doc.synth.liveBassInputPitches[i] == pitch) {
                        this._doc.synth.liveBassInputPitches.splice(i, 1);
                        this._bassPitchesChanged = true;
                        i--;
                    }
                }
            }
        }
        clearAllPitches() {
            this._updateRecordedNotes();
            this._doc.synth.liveInputPitches.length = 0;
            this._pitchesChanged = true;
        }
        clearAllBassPitches() {
            this._updateRecordedBassNotes();
            this._doc.synth.liveBassInputPitches.length = 0;
            this._bassPitchesChanged = true;
        }
    }

    class Selection {
        constructor(_doc) {
            this._doc = _doc;
            this.boxSelectionX0 = 0;
            this.boxSelectionY0 = 0;
            this.boxSelectionX1 = 0;
            this.boxSelectionY1 = 0;
            this.digits = "";
            this.instrumentDigits = "";
            this.patternSelectionStart = 0;
            this.patternSelectionEnd = 0;
            this.patternSelectionActive = false;
            this._changeTranspose = null;
            this._changeTrack = null;
            this._changeInstrument = null;
            this._changeReorder = null;
        }
        toJSON() {
            return {
                "x0": this.boxSelectionX0,
                "x1": this.boxSelectionX1,
                "y0": this.boxSelectionY0,
                "y1": this.boxSelectionY1,
                "start": this.patternSelectionStart,
                "end": this.patternSelectionEnd,
            };
        }
        fromJSON(json) {
            if (json == null)
                return;
            this.boxSelectionX0 = +json["x0"];
            this.boxSelectionX1 = +json["x1"];
            this.boxSelectionY0 = +json["y0"];
            this.boxSelectionY1 = +json["y1"];
            this.patternSelectionStart = +json["start"];
            this.patternSelectionEnd = +json["end"];
            this.digits = "";
            this.instrumentDigits = "";
            this.patternSelectionActive = this.patternSelectionStart < this.patternSelectionEnd;
        }
        selectionUpdated() {
            this._doc.notifier.changed();
            this.digits = "";
            this.instrumentDigits = "";
        }
        get boxSelectionBar() {
            return Math.min(this.boxSelectionX0, this.boxSelectionX1);
        }
        get boxSelectionChannel() {
            return Math.min(this.boxSelectionY0, this.boxSelectionY1);
        }
        get boxSelectionWidth() {
            return Math.abs(this.boxSelectionX0 - this.boxSelectionX1) + 1;
        }
        get boxSelectionHeight() {
            return Math.abs(this.boxSelectionY0 - this.boxSelectionY1) + 1;
        }
        get boxSelectionActive() {
            return this.boxSelectionWidth > 1 || this.boxSelectionHeight > 1;
        }
        scrollToSelectedPattern() {
            this._doc.barScrollPos = Math.min(this._doc.bar, Math.max(this._doc.bar - (this._doc.trackVisibleBars - 1), this._doc.barScrollPos));
            this._doc.channelScrollPos = Math.min(this._doc.channel, Math.max(this._doc.channel - (this._doc.trackVisibleChannels - 1), this._doc.channelScrollPos));
        }
        scrollToEndOfSelection() {
            this._doc.barScrollPos = Math.min(this.boxSelectionX1, Math.max(this.boxSelectionX1 - (this._doc.trackVisibleBars - 1), this._doc.barScrollPos));
            this._doc.channelScrollPos = Math.min(this.boxSelectionY1, Math.max(this.boxSelectionY1 - (this._doc.trackVisibleChannels - 1), this._doc.channelScrollPos));
        }
        setChannelBar(channelIndex, bar) {
            if (channelIndex == this._doc.channel && bar == this._doc.bar)
                return;
            const canReplaceLastChange = this._doc.lastChangeWas(this._changeTrack);
            this._changeTrack = new ChangeGroup();
            this._changeTrack.append(new ChangeChannelBar(this._doc, channelIndex, bar));
            const pattern = this._doc.getCurrentPattern(0);
            if (pattern != null) {
                if (pattern.instruments.indexOf(this._doc.viewedInstrument[this._doc.channel]) < 0) {
                    this._doc.viewedInstrument[this._doc.channel] = pattern.instruments[0];
                }
            }
            if (!this._doc.hasRedoHistory()) {
                this._doc.record(this._changeTrack, canReplaceLastChange);
            }
            this.selectionUpdated();
        }
        setPattern(pattern) {
            this._doc.record(new ChangePatternNumbers(this._doc, pattern, this.boxSelectionBar, this.boxSelectionChannel, this.boxSelectionWidth, this.boxSelectionHeight));
        }
        nextDigit(digit, forInstrument, forRhythms) {
            if (forRhythms) {
                if (digit == "3") {
                    this._doc.record(new ChangeRhythm(this._doc, 0));
                }
                else if (digit == "4") {
                    this._doc.record(new ChangeRhythm(this._doc, 1));
                }
                else if (digit == "6") {
                    this._doc.record(new ChangeRhythm(this._doc, 2));
                }
                else if (digit == "8") {
                    this._doc.record(new ChangeRhythm(this._doc, 3));
                }
                else if (digit == "0" || digit == "1") {
                    this._doc.record(new ChangeRhythm(this._doc, 4));
                }
            }
            else if (forInstrument) {
                if (digit == "0")
                    digit = "10";
                this.instrumentDigits += digit;
                var parsed = parseInt(this.instrumentDigits);
                if (parsed != 0 && parsed <= this._doc.song.channels[this._doc.channel].instruments.length) {
                    this.selectInstrument(parsed - 1);
                    return;
                }
                this.instrumentDigits = digit;
                parsed = parseInt(this.instrumentDigits);
                if (parsed != 0 && parsed <= this._doc.song.channels[this._doc.channel].instruments.length) {
                    this.selectInstrument(parsed - 1);
                    return;
                }
                this.instrumentDigits = "";
            }
            else {
                this.digits += digit;
                let parsed = parseInt(this.digits);
                if (parsed <= this._doc.song.patternsPerChannel) {
                    this.setPattern(parsed);
                    return;
                }
                this.digits = digit;
                parsed = parseInt(this.digits);
                if (parsed <= this._doc.song.patternsPerChannel) {
                    this.setPattern(parsed);
                    return;
                }
                this.digits = "";
            }
        }
        setModChannel(mod, index) {
            this._doc.record(new ChangeModChannel(this._doc, mod, index));
        }
        setModInstrument(mod, instrument) {
            this._doc.record(new ChangeModInstrument(this._doc, mod, instrument));
        }
        setModSetting(mod, text) {
            this._doc.record(new ChangeModSetting(this._doc, mod, text));
        }
        setModFilter(mod, type) {
            this._doc.record(new ChangeModFilter(this._doc, mod, type));
        }
        insertBars() {
            this._doc.record(new ChangeInsertBars(this._doc, this.boxSelectionBar + this.boxSelectionWidth, this.boxSelectionWidth));
            const width = this.boxSelectionWidth;
            this.boxSelectionX0 += width;
            this.boxSelectionX1 += width;
        }
        insertChannel() {
            const group = new ChangeGroup();
            const insertIndex = this.boxSelectionChannel + this.boxSelectionHeight;
            const isNoise = this._doc.song.getChannelIsNoise(insertIndex - 1);
            const isMod = this._doc.song.getChannelIsMod(insertIndex - 1);
            group.append(new ChangeAddChannel(this._doc, insertIndex, isNoise, isMod));
            if (!group.isNoop()) {
                this.boxSelectionY0 = this.boxSelectionY1 = insertIndex;
                group.append(new ChangeChannelBar(this._doc, insertIndex, this._doc.bar));
                this._doc.record(group);
            }
        }
        deleteBars() {
            const group = new ChangeGroup();
            if (this._doc.selection.patternSelectionActive) {
                if (this.boxSelectionActive) {
                    group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
                }
                for (const channelIndex of this._eachSelectedChannel()) {
                    for (const pattern of this._eachSelectedPattern(channelIndex)) {
                        group.append(new ChangeNoteTruncate(this._doc, pattern, this._doc.selection.patternSelectionStart, this._doc.selection.patternSelectionEnd));
                    }
                }
                group.append(new ChangePatternSelection(this._doc, 0, 0));
            }
            else {
                group.append(new ChangeDeleteBars(this._doc, this.boxSelectionBar, this.boxSelectionWidth));
                const width = this.boxSelectionWidth;
                this.boxSelectionX0 = Math.max(0, this.boxSelectionX0 - width);
                this.boxSelectionX1 = Math.max(0, this.boxSelectionX1 - width);
            }
            this._doc.record(group);
        }
        deleteChannel() {
            this._doc.record(new ChangeRemoveChannel(this._doc, this.boxSelectionChannel, this.boxSelectionChannel + this.boxSelectionHeight - 1));
            this.boxSelectionY0 = this.boxSelectionY1 = this._doc.channel;
            ColorConfig.resetColors();
        }
        *_eachSelectedChannel() {
            for (let channelIndex = this.boxSelectionChannel; channelIndex < this.boxSelectionChannel + this.boxSelectionHeight; channelIndex++) {
                yield channelIndex;
            }
        }
        *_eachSelectedBar() {
            for (let bar = this.boxSelectionBar; bar < this.boxSelectionBar + this.boxSelectionWidth; bar++) {
                yield bar;
            }
        }
        *_eachSelectedPattern(channelIndex) {
            const handledPatterns = {};
            for (const bar of this._eachSelectedBar()) {
                const currentPatternIndex = this._doc.song.channels[channelIndex].bars[bar];
                if (currentPatternIndex == 0)
                    continue;
                if (handledPatterns[String(currentPatternIndex)])
                    continue;
                handledPatterns[String(currentPatternIndex)] = true;
                const pattern = this._doc.song.getPattern(channelIndex, bar);
                if (pattern == null)
                    throw new Error();
                yield pattern;
            }
        }
        _parseCopiedInstrumentArray(patternCopy, channelIndex) {
            const instruments = Array.from(patternCopy["instruments"]).map(i => i >>> 0);
            discardInvalidPatternInstruments(instruments, this._doc.song, channelIndex);
            return instruments;
        }
        _patternIndexIsUnused(channelIndex, patternIndex) {
            for (let i = 0; i < this._doc.song.barCount; i++) {
                if (this._doc.song.channels[channelIndex].bars[i] == patternIndex) {
                    return false;
                }
            }
            return true;
        }
        copy() {
            const channels = [];
            for (const channelIndex of this._eachSelectedChannel()) {
                const patterns = {};
                const bars = [];
                for (const bar of this._eachSelectedBar()) {
                    const patternNumber = this._doc.song.channels[channelIndex].bars[bar];
                    bars.push(patternNumber);
                    if (patterns[String(patternNumber)] == undefined) {
                        const pattern = this._doc.song.getPattern(channelIndex, bar);
                        let instruments = this._doc.recentPatternInstruments[channelIndex];
                        let notes = [];
                        if (pattern != null) {
                            instruments = pattern.instruments.concat();
                            if (this.patternSelectionActive) {
                                for (const note of pattern.cloneNotes()) {
                                    if (note.end <= this.patternSelectionStart)
                                        continue;
                                    if (note.start >= this.patternSelectionEnd)
                                        continue;
                                    note.start -= this.patternSelectionStart;
                                    note.end -= this.patternSelectionStart;
                                    if (note.start < 0 || note.end > this.patternSelectionEnd - this.patternSelectionStart) {
                                        new ChangeNoteLength(null, note, Math.max(note.start, 0), Math.min(this.patternSelectionEnd - this.patternSelectionStart, note.end));
                                    }
                                    notes.push(note);
                                }
                            }
                            else {
                                notes = pattern.notes;
                            }
                        }
                        patterns[String(patternNumber)] = { "instruments": instruments, "notes": notes };
                    }
                }
                const channelCopy = {
                    "isNoise": this._doc.song.getChannelIsNoise(channelIndex),
                    "isMod": this._doc.song.getChannelIsMod(channelIndex),
                    "patterns": patterns,
                    "bars": bars,
                };
                channels.push(channelCopy);
            }
            const selectionCopy = {
                "partDuration": this.patternSelectionActive ? this.patternSelectionEnd - this.patternSelectionStart : this._doc.song.beatsPerBar * Config.partsPerBeat,
                "channels": channels,
            };
            window.localStorage.setItem("selectionCopy", JSON.stringify(selectionCopy));
            new ChangePatternSelection(this._doc, 0, 0);
        }
        _remapToNoisePitches(oldPitches) {
            let newPitches = oldPitches.slice();
            newPitches.sort(function (a, b) { return a - b; });
            let lowestPitch = newPitches[0] % Config.drumCount;
            const numberOfPitches = newPitches.length;
            let highestPitch = lowestPitch + (numberOfPitches - 1);
            while (highestPitch >= Config.drumCount) {
                lowestPitch--;
                highestPitch--;
            }
            for (let notePitchIndex = 0; notePitchIndex < newPitches.length; notePitchIndex++) {
                newPitches[notePitchIndex] = notePitchIndex + lowestPitch;
            }
            return newPitches;
        }
        _convertCopiedPitchNotesToNoiseNotes(oldNotes) {
            let newNotes = [];
            for (let noteIndex = 0; noteIndex < oldNotes.length; noteIndex++) {
                const oldNote = oldNotes[noteIndex];
                const newNotePitches = this._remapToNoisePitches(oldNote["pitches"].slice());
                const oldNotePins = oldNote.pins;
                let newNotePins = [];
                for (let notePinIndex = 0; notePinIndex < oldNotePins.length; notePinIndex++) {
                    const oldPin = oldNotePins[notePinIndex];
                    newNotePins.push({
                        interval: oldPin.interval,
                        time: oldPin.time,
                        size: oldPin.size,
                    });
                }
                const newNoteStart = oldNote["start"];
                const newNoteEnd = oldNote["end"];
                const newNoteContinuesLastPattern = oldNote["continuesLastPattern"];
                const newNote = new Note(0, newNoteStart, newNoteEnd, 0, false);
                newNote.pitches = newNotePitches;
                newNote.pins = newNotePins;
                newNote.continuesLastPattern = newNoteContinuesLastPattern;
                newNotes.push(newNote);
            }
            return newNotes;
        }
        cutNotes() {
            const group = new ChangeGroup();
            const channelIndex = this.boxSelectionChannel;
            const barIndex = this.boxSelectionBar;
            const cutHeight = this.boxSelectionHeight;
            const cutWidth = this.boxSelectionWidth;
            this.copy();
            for (let channel = channelIndex; channel < channelIndex + cutHeight; channel++) {
                for (let bar = barIndex; bar < barIndex + cutWidth; bar++) {
                    const patternNumber = this._doc.song.channels[channel].bars[bar];
                    if (patternNumber != 0) {
                        const pattern = this._doc.song.channels[channel].patterns[patternNumber - 1];
                        group.append(new ChangeNoteTruncate(this._doc, pattern, 0, Config.partsPerBeat * this._doc.song.beatsPerBar));
                    }
                }
            }
            this._doc.record(group);
        }
        pasteNotes() {
            const selectionCopy = JSON.parse(String(window.localStorage.getItem("selectionCopy")));
            if (selectionCopy == null)
                return;
            const channelCopies = selectionCopy["channels"] || [];
            const copiedPartDuration = selectionCopy["partDuration"] >>> 0;
            const group = new ChangeGroup();
            const fillSelection = (this.boxSelectionWidth > 1 || this.boxSelectionHeight > 1);
            const pasteHeight = fillSelection ? this.boxSelectionHeight : Math.min(channelCopies.length, this._doc.song.getChannelCount() - this.boxSelectionChannel);
            for (let pasteChannel = 0; pasteChannel < pasteHeight; pasteChannel++) {
                const channelCopy = channelCopies[pasteChannel % channelCopies.length];
                const channelIndex = this.boxSelectionChannel + pasteChannel;
                const channelIsNoise = this._doc.song.getChannelIsNoise(channelIndex);
                const isNoise = !!channelCopy["isNoise"];
                const isMod = !!channelCopy["isMod"];
                const isPitch = !isNoise && !isMod;
                const patternCopies = channelCopy["patterns"] || {};
                const copiedBars = channelCopy["bars"] || [];
                if (copiedBars.length == 0)
                    continue;
                if (isNoise && this._doc.song.getChannelIsMod(channelIndex))
                    continue;
                if (isMod != this._doc.song.getChannelIsMod(channelIndex))
                    continue;
                const pasteWidth = fillSelection ? this.boxSelectionWidth : Math.min(copiedBars.length, this._doc.song.barCount - this.boxSelectionBar);
                if (!fillSelection && copiedBars.length == 1 && channelCopies.length == 1) {
                    const copiedPatternIndex = copiedBars[0] >>> 0;
                    const bar = this.boxSelectionBar;
                    const currentPatternIndex = this._doc.song.channels[channelIndex].bars[bar];
                    if (copiedPatternIndex == 0 && currentPatternIndex == 0)
                        continue;
                    const patternCopy = patternCopies[String(copiedPatternIndex)];
                    const instrumentsCopy = this._parseCopiedInstrumentArray(patternCopy, channelIndex);
                    let pastedNotes = patternCopy["notes"];
                    if (isPitch && channelIsNoise) {
                        pastedNotes = this._convertCopiedPitchNotesToNoiseNotes(pastedNotes);
                    }
                    if (currentPatternIndex == 0) {
                        const existingPattern = this._doc.song.channels[channelIndex].patterns[copiedPatternIndex - 1];
                        if (existingPattern != undefined &&
                            !this.patternSelectionActive &&
                            ((comparePatternNotes(pastedNotes, existingPattern.notes) && patternsContainSameInstruments(instrumentsCopy, existingPattern.instruments)) ||
                                this._patternIndexIsUnused(channelIndex, copiedPatternIndex))) {
                            group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));
                        }
                        else {
                            group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));
                        }
                    }
                    const pattern = this._doc.song.getPattern(channelIndex, bar);
                    if (pattern == null)
                        throw new Error();
                    group.append(new ChangePaste(this._doc, pattern, pastedNotes, this.patternSelectionActive ? this.patternSelectionStart : 0, this.patternSelectionActive ? this.patternSelectionEnd : Config.partsPerBeat * this._doc.song.beatsPerBar, copiedPartDuration));
                    if (currentPatternIndex == 0 || patternCopy.notes.length == 0 || channelIndex >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                        this.selectInstrument(instrumentsCopy[0]);
                        group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));
                    }
                }
                else if (this.patternSelectionActive) {
                    const reusablePatterns = {};
                    const usedPatterns = {};
                    group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, pasteWidth, this.boxSelectionChannel, pasteHeight));
                    for (let pasteBar = 0; pasteBar < pasteWidth; pasteBar++) {
                        const bar = this.boxSelectionBar + pasteBar;
                        const copiedPatternIndex = copiedBars[pasteBar % copiedBars.length] >>> 0;
                        const currentPatternIndex = this._doc.song.channels[channelIndex].bars[bar];
                        const reusedIndex = [copiedPatternIndex, currentPatternIndex].join(",");
                        if (copiedPatternIndex == 0 && currentPatternIndex == 0)
                            continue;
                        if (reusablePatterns[reusedIndex] != undefined) {
                            group.append(new ChangePatternNumbers(this._doc, reusablePatterns[reusedIndex], bar, channelIndex, 1, 1));
                            continue;
                        }
                        if (currentPatternIndex == 0) {
                            group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));
                            const patternCopy = patternCopies[String(copiedPatternIndex)];
                            const instrumentsCopy = this._parseCopiedInstrumentArray(patternCopy, channelIndex);
                            const pattern = this._doc.song.getPattern(channelIndex, bar);
                            group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));
                        }
                        else {
                            const pattern = this._doc.song.getPattern(channelIndex, bar);
                            if (pattern == null)
                                throw new Error();
                            if (!usedPatterns[String(currentPatternIndex)]) {
                                usedPatterns[String(currentPatternIndex)] = true;
                            }
                            else {
                                group.append(new ChangePatternNumbers(this._doc, 0, bar, channelIndex, 1, 1));
                                group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));
                                const newPattern = this._doc.song.getPattern(channelIndex, bar);
                                if (newPattern == null)
                                    throw new Error();
                                for (const note of pattern.cloneNotes()) {
                                    if (isPitch && channelIsNoise) {
                                        note.pitches = this._remapToNoisePitches(note.pitches);
                                    }
                                    group.append(new ChangeNoteAdded(this._doc, newPattern, note, newPattern.notes.length, false));
                                }
                            }
                        }
                        const pattern = this._doc.song.getPattern(channelIndex, bar);
                        if (pattern == null)
                            throw new Error();
                        if (copiedPatternIndex == 0) {
                            group.append(new ChangeNoteTruncate(this._doc, pattern, this.patternSelectionStart, this.patternSelectionEnd));
                        }
                        else {
                            const patternCopy = patternCopies[String(copiedPatternIndex)];
                            let pastedNotes = patternCopy["notes"];
                            if (isPitch && channelIsNoise) {
                                pastedNotes = this._convertCopiedPitchNotesToNoiseNotes(pastedNotes);
                            }
                            group.append(new ChangePaste(this._doc, pattern, pastedNotes, this.patternSelectionStart, this.patternSelectionEnd, copiedPartDuration));
                        }
                        reusablePatterns[reusedIndex] = this._doc.song.channels[channelIndex].bars[bar];
                    }
                }
                else {
                    for (let pasteBar = 0; pasteBar < pasteWidth; pasteBar++) {
                        this.erasePatternInBar(group, channelIndex, this.boxSelectionBar + pasteBar);
                    }
                    const reusablePatterns = {};
                    for (let pasteBar = 0; pasteBar < pasteWidth; pasteBar++) {
                        const bar = this.boxSelectionBar + pasteBar;
                        const copiedPatternIndex = copiedBars[pasteBar % copiedBars.length] >>> 0;
                        const reusedIndex = String(copiedPatternIndex);
                        if (copiedPatternIndex == 0)
                            continue;
                        if (reusablePatterns[reusedIndex] != undefined) {
                            group.append(new ChangePatternNumbers(this._doc, reusablePatterns[reusedIndex], bar, channelIndex, 1, 1));
                            continue;
                        }
                        const patternCopy = patternCopies[String(copiedPatternIndex)];
                        const instrumentsCopy = this._parseCopiedInstrumentArray(patternCopy, channelIndex);
                        const existingPattern = this._doc.song.channels[channelIndex].patterns[copiedPatternIndex - 1];
                        let pastedNotes = patternCopy["notes"];
                        if (isPitch && channelIsNoise) {
                            pastedNotes = this._convertCopiedPitchNotesToNoiseNotes(pastedNotes);
                        }
                        if (existingPattern != undefined &&
                            copiedPartDuration == Config.partsPerBeat * this._doc.song.beatsPerBar &&
                            comparePatternNotes(pastedNotes, existingPattern.notes) &&
                            patternsContainSameInstruments(instrumentsCopy, existingPattern.instruments)) {
                            group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));
                        }
                        else {
                            if (existingPattern != undefined && this._patternIndexIsUnused(channelIndex, copiedPatternIndex)) {
                                group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));
                            }
                            else {
                                group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));
                            }
                            const pattern = this._doc.song.getPattern(channelIndex, bar);
                            if (pattern == null)
                                throw new Error();
                            group.append(new ChangePaste(this._doc, pattern, pastedNotes, this.patternSelectionActive ? this.patternSelectionStart : 0, this.patternSelectionActive ? this.patternSelectionEnd : Config.partsPerBeat * this._doc.song.beatsPerBar, copiedPartDuration));
                            group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));
                        }
                        reusablePatterns[reusedIndex] = this._doc.song.channels[channelIndex].bars[bar];
                    }
                }
            }
            this._doc.record(group);
        }
        erasePatternInBar(group, channelIndex, bar) {
            const removedPattern = this._doc.song.channels[channelIndex].bars[bar];
            if (removedPattern != 0) {
                group.append(new ChangePatternNumbers(this._doc, 0, bar, channelIndex, 1, 1));
                if (this._patternIndexIsUnused(channelIndex, removedPattern)) {
                    this._doc.song.channels[channelIndex].patterns[removedPattern - 1].notes.length = 0;
                }
            }
        }
        pasteNumbers() {
            const selectionCopy = JSON.parse(String(window.localStorage.getItem("selectionCopy")));
            if (selectionCopy == null)
                return;
            const channelCopies = selectionCopy["channels"] || [];
            const group = new ChangeGroup();
            const fillSelection = this.boxSelectionActive;
            const pasteHeight = fillSelection ? this.boxSelectionHeight : Math.min(channelCopies.length, this._doc.song.getChannelCount() - this.boxSelectionChannel);
            for (let pasteChannel = 0; pasteChannel < pasteHeight; pasteChannel++) {
                const channelCopy = channelCopies[pasteChannel % channelCopies.length];
                const channelIndex = this.boxSelectionChannel + pasteChannel;
                const copiedBars = channelCopy["bars"] || [];
                if (copiedBars.length == 0)
                    continue;
                const pasteWidth = fillSelection ? this.boxSelectionWidth : Math.min(copiedBars.length, this._doc.song.barCount - this.boxSelectionBar);
                for (let pasteBar = 0; pasteBar < pasteWidth; pasteBar++) {
                    const copiedPatternIndex = copiedBars[pasteBar % copiedBars.length] >>> 0;
                    const bar = this.boxSelectionBar + pasteBar;
                    if (copiedPatternIndex > this._doc.song.patternsPerChannel) {
                        group.append(new ChangePatternsPerChannel(this._doc, copiedPatternIndex));
                    }
                    group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));
                }
            }
            this._doc.record(group);
        }
        selectAll() {
            new ChangePatternSelection(this._doc, 0, 0);
            if (this.boxSelectionBar == 0 &&
                this.boxSelectionChannel == 0 &&
                this.boxSelectionWidth == this._doc.song.barCount &&
                this.boxSelectionHeight == this._doc.song.getChannelCount()) {
                this.setTrackSelection(this._doc.bar, this._doc.bar, this._doc.channel, this._doc.channel);
            }
            else {
                this.setTrackSelection(0, this._doc.song.barCount - 1, 0, this._doc.song.getChannelCount() - 1);
            }
            this.selectionUpdated();
        }
        selectChannel() {
            new ChangePatternSelection(this._doc, 0, 0);
            if (this.boxSelectionBar == 0 && this.boxSelectionWidth == this._doc.song.barCount) {
                this.setTrackSelection(this._doc.bar, this._doc.bar, this.boxSelectionY0, this.boxSelectionY1);
            }
            else {
                this.setTrackSelection(0, this._doc.song.barCount - 1, this.boxSelectionY0, this.boxSelectionY1);
            }
            this.selectionUpdated();
        }
        duplicatePatterns() {
            this._doc.record(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
        }
        muteChannels(allChannels) {
            if (allChannels) {
                let anyMuted = false;
                for (let channelIndex = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {
                    if (this._doc.song.channels[channelIndex].muted) {
                        anyMuted = true;
                        break;
                    }
                }
                for (let channelIndex = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {
                    this._doc.song.channels[channelIndex].muted = !anyMuted;
                }
            }
            else {
                let anyUnmuted = false;
                for (const channelIndex of this._eachSelectedChannel()) {
                    if (!this._doc.song.channels[channelIndex].muted) {
                        anyUnmuted = true;
                        break;
                    }
                }
                for (const channelIndex of this._eachSelectedChannel()) {
                    this._doc.song.channels[channelIndex].muted = anyUnmuted;
                }
            }
            this._doc.notifier.changed();
        }
        invertMuteChannels() {
            if (this.boxSelectionHeight == 1) {
                for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                    if (this._doc.song.channels[channelIndex].muted == true) {
                        this._doc.song.channels[channelIndex].muted = false;
                    }
                    else {
                        this._doc.song.channels[channelIndex].muted = true;
                    }
                }
            }
            else {
                for (let channelIndex = 0; channelIndex < this.boxSelectionHeight; channelIndex++) {
                    if (this._doc.song.channels[channelIndex + this.boxSelectionChannel].muted == true) {
                        this._doc.song.channels[channelIndex + this.boxSelectionChannel].muted = false;
                    }
                    else {
                        this._doc.song.channels[channelIndex + this.boxSelectionChannel].muted = true;
                    }
                }
            }
            this._doc.notifier.changed();
        }
        soloChannels(invert) {
            let alreadySoloed = true;
            if (this.boxSelectionChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                const currentChannel = this._doc.song.channels[this.boxSelectionChannel];
                const bar = currentChannel.bars[this._doc.bar] - 1;
                const modInstrument = (bar >= 0) ? currentChannel.instruments[currentChannel.patterns[bar].instruments[0]] : currentChannel.instruments[this._doc.viewedInstrument[this.boxSelectionChannel]];
                const soloPattern = [];
                let matchesSoloPattern = !invert;
                for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                    soloPattern[channelIndex] = false;
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        if (modInstrument.modChannels[mod] == channelIndex) {
                            soloPattern[channelIndex] = true;
                        }
                    }
                }
                for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                    if (this._doc.song.channels[channelIndex].muted == soloPattern[channelIndex]) {
                        matchesSoloPattern = invert;
                        break;
                    }
                }
                for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                    if (matchesSoloPattern) {
                        this._doc.song.channels[channelIndex].muted = false;
                    }
                    else {
                        this._doc.song.channels[channelIndex].muted = !soloPattern[channelIndex];
                    }
                }
            }
            else {
                for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                    const shouldBeMuted = (channelIndex < this.boxSelectionChannel || channelIndex >= this.boxSelectionChannel + this.boxSelectionHeight) ? !invert : invert;
                    if (this._doc.song.channels[channelIndex].muted != shouldBeMuted) {
                        alreadySoloed = false;
                        break;
                    }
                }
                if (alreadySoloed) {
                    for (let channelIndex = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {
                        this._doc.song.channels[channelIndex].muted = false;
                    }
                }
                else {
                    for (let channelIndex = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {
                        this._doc.song.channels[channelIndex].muted = (channelIndex < this.boxSelectionChannel || channelIndex >= this.boxSelectionChannel + this.boxSelectionHeight) ? !invert : invert;
                    }
                }
            }
            this._doc.notifier.changed();
        }
        forceRhythm() {
            const group = new ChangeGroup();
            if (this.boxSelectionActive) {
                group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
            }
            for (const channelIndex of this._eachSelectedChannel()) {
                for (const pattern of this._eachSelectedPattern(channelIndex)) {
                    group.append(new ChangePatternRhythm(this._doc, pattern));
                }
            }
            this._doc.record(group);
        }
        forceScale() {
            const group = new ChangeGroup();
            if (this.boxSelectionActive) {
                group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
            }
            const scaleFlags = [true, false, false, false, false, false, false, false, false, false, false, false];
            for (const channelIndex of this._eachSelectedChannel()) {
                if (this._doc.song.getChannelIsNoise(channelIndex) || this._doc.song.getChannelIsMod(channelIndex))
                    continue;
                for (const pattern of this._eachSelectedPattern(channelIndex)) {
                    unionOfUsedNotes(pattern, scaleFlags);
                }
            }
            const scaleMap = generateScaleMap(scaleFlags, this._doc.song.scale, this._doc.song.scaleCustom);
            for (const channelIndex of this._eachSelectedChannel()) {
                if (this._doc.song.getChannelIsNoise(channelIndex) || this._doc.song.getChannelIsMod(channelIndex))
                    continue;
                for (const pattern of this._eachSelectedPattern(channelIndex)) {
                    group.append(new ChangePatternScale(this._doc, pattern, scaleMap));
                }
            }
            this._doc.record(group);
        }
        setTrackSelection(newX0, newX1, newY0, newY1) {
            const canReplaceLastChange = true;
            this._changeTrack = new ChangeGroup();
            this._changeTrack.append(new ChangeTrackSelection(this._doc, newX0, newX1, newY0, newY1));
            this._doc.record(this._changeTrack, canReplaceLastChange);
        }
        transpose(upward, octave) {
            const canReplaceLastChange = this._doc.lastChangeWas(this._changeTranspose);
            this._changeTranspose = new ChangeGroup();
            if (this.boxSelectionActive) {
                this._changeTranspose.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
            }
            for (const channelIndex of this._eachSelectedChannel()) {
                if (channelIndex >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)
                    continue;
                for (const pattern of this._eachSelectedPattern(channelIndex)) {
                    this._changeTranspose.append(new ChangeTranspose(this._doc, channelIndex, pattern, upward, this._doc.prefs.notesOutsideScale, octave));
                }
            }
            this._doc.record(this._changeTranspose, canReplaceLastChange);
        }
        swapChannels(offset) {
            const possibleSectionBoundaries = [
                this._doc.song.pitchChannelCount,
                this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount,
                this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount + this._doc.song.modChannelCount,
                this._doc.song.getChannelCount(),
            ];
            let channelSectionMin = 0;
            let channelSectionMax = 0;
            for (const nextBoundary of possibleSectionBoundaries) {
                if ((this.boxSelectionChannel < nextBoundary && offset < 0) || (this.boxSelectionChannel + this.boxSelectionHeight <= nextBoundary)) {
                    channelSectionMax = nextBoundary - 1;
                    break;
                }
                channelSectionMin = nextBoundary;
            }
            const newSelectionMin = Math.max(this.boxSelectionChannel, channelSectionMin);
            const newSelectionMax = Math.min(this.boxSelectionChannel + this.boxSelectionHeight - 1, channelSectionMax);
            offset = Math.max(offset, channelSectionMin - newSelectionMin);
            offset = Math.min(offset, channelSectionMax - newSelectionMax);
            if (offset != 0) {
                const canReplaceLastChange = this._doc.lastChangeWas(this._changeReorder);
                this._changeReorder = new ChangeGroup();
                this.boxSelectionY0 = newSelectionMin + offset;
                this.boxSelectionY1 = newSelectionMax + offset;
                this._changeReorder.append(new ChangeChannelOrder(this._doc, newSelectionMin, newSelectionMax, offset));
                this._changeReorder.append(new ChangeChannelBar(this._doc, Math.max(this.boxSelectionY0, Math.min(this.boxSelectionY1, this._doc.channel + offset)), this._doc.bar));
                this.selectionUpdated();
                this._doc.record(this._changeReorder, canReplaceLastChange);
            }
        }
        selectInstrument(instrument) {
            if (this._doc.viewedInstrument[this._doc.channel] == instrument) {
                if (this._doc.song.layeredInstruments && this._doc.song.patternInstruments && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {
                    const canReplaceLastChange = this._doc.lastChangeWas(this._changeInstrument);
                    this._changeInstrument = new ChangeGroup();
                    const instruments = this._doc.recentPatternInstruments[this._doc.channel];
                    this._doc.notifier.changed();
                    if (instruments.indexOf(instrument) == -1) {
                        instruments.push(instrument);
                        const maxLayers = this._doc.song.getMaxInstrumentsPerPattern(this._doc.channel);
                        if (instruments.length > maxLayers) {
                            instruments.splice(0, instruments.length - maxLayers);
                        }
                    }
                    else {
                        instruments.splice(instruments.indexOf(instrument), 1);
                        if (instruments.length == 0)
                            instruments[0] = 0;
                    }
                    if (this.boxSelectionActive) {
                        this._changeInstrument.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
                    }
                    for (const channelIndex of this._eachSelectedChannel()) {
                        for (const pattern of this._eachSelectedPattern(channelIndex)) {
                            this._changeInstrument.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instruments, pattern));
                        }
                    }
                    if (!this._changeInstrument.isNoop())
                        this._doc.record(this._changeInstrument, canReplaceLastChange);
                }
            }
            else {
                const canReplaceLastChange = this._doc.lastChangeWas(this._changeInstrument);
                this._changeInstrument = new ChangeGroup();
                this._changeInstrument.append(new ChangeViewInstrument(this._doc, instrument));
                if (!(this._doc.song.layeredInstruments && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) && this._doc.song.patternInstruments) {
                    if (this.boxSelectionActive) {
                        this._changeInstrument.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));
                    }
                    const instruments = [instrument];
                    for (const channelIndex of this._eachSelectedChannel()) {
                        for (const pattern of this._eachSelectedPattern(channelIndex)) {
                            this._changeInstrument.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instruments, pattern));
                        }
                    }
                    this._doc.record(this._changeInstrument, canReplaceLastChange);
                }
                else if (!this._doc.hasRedoHistory()) {
                    this._doc.record(this._changeInstrument, canReplaceLastChange);
                }
            }
        }
        resetBoxSelection() {
            this.boxSelectionX0 = this.boxSelectionX1 = this._doc.bar;
            this.boxSelectionY0 = this.boxSelectionY1 = this._doc.channel;
        }
    }

    class Preferences {
        constructor() {
            this.volume = 75;
            this.visibleOctaves = Preferences.defaultVisibleOctaves;
            this.reload();
        }
        reload() {
            this.autoPlay = window.localStorage.getItem("autoPlay") == "true";
            this.autoFollow = window.localStorage.getItem("autoFollow") != "false";
            this.enableNotePreview = window.localStorage.getItem("enableNotePreview") != "false";
            this.showFifth = window.localStorage.getItem("showFifth") == "true";
            this.showThird = window.localStorage.getItem("showThird") == "true";
            this.advancedColorScheme = window.localStorage.getItem("advancedColorScheme") == "true";
            this.notesOutsideScale = window.localStorage.getItem("notesOutsideScale") == "true";
            this.showLetters = window.localStorage.getItem("showLetters") == "true";
            this.showChannels = window.localStorage.getItem("showChannels") == "true";
            this.showScrollBar = window.localStorage.getItem("showScrollBar") == "true";
            this.alwaysFineNoteVol = window.localStorage.getItem("alwaysFineNoteVol") == "true";
            this.displayVolumeBar = window.localStorage.getItem("displayVolumeBar") == "true";
            this.instrumentCopyPaste = window.localStorage.getItem("instrumentCopyPaste") == "true";
            this.instrumentImportExport = window.localStorage.getItem("instrumentImportExport") == "true";
            this.enableChannelMuting = window.localStorage.getItem("enableChannelMuting") == "true";
            this.displayBrowserUrl = window.localStorage.getItem("displayBrowserUrl") != "false";
            this.pressControlForShortcuts = window.localStorage.getItem("pressControlForShortcuts") == "true";
            this.enableMidi = window.localStorage.getItem("enableMidi") != "false";
            this.showRecordButton = window.localStorage.getItem("showRecordButton") == "true";
            this.snapRecordedNotesToRhythm = window.localStorage.getItem("snapRecordedNotesToRhythm") == "true";
            this.ignorePerformedNotesNotInScale = window.localStorage.getItem("ignorePerformedNotesNotInScale") == "true";
            this.metronomeCountIn = window.localStorage.getItem("metronomeCountIn") != "false";
            this.metronomeWhileRecording = window.localStorage.getItem("metronomeWhileRecording") != "false";
            this.showOscilloscope = window.localStorage.getItem("showOscilloscope") != "false";
            this.showSampleLoadingStatus = window.localStorage.getItem("showSampleLoadingStatus") != "false";
            this.showDescription = window.localStorage.getItem("showDescription") != "false";
            this.notesFlashWhenPlayed = window.localStorage.getItem("notesFlashWhenPlayed") != "false";
            this.showInstrumentScrollbars = window.localStorage.getItem("showInstrumentScrollbars") == "true";
            this.closePromptByClickoff = window.localStorage.getItem("closePromptByClickoff") != "false";
            this.frostedGlassBackground = window.localStorage.getItem("frostedGlassBackground") == "true";
            this.displayShortcutButtons = window.localStorage.getItem("displayShortcutButtons") != "false";
            this.instrumentSettingsSimplifier = window.localStorage.getItem("instrumentSettingsSimplifier") == "true";
            this.oldMobileLayout = window.localStorage.getItem("oldMobileLayout") == "true";
            this.oldModNotes = window.localStorage.getItem("oldModNotes") == "true";
            this.selectionCounter = window.localStorage.getItem("selectionCounter") != "false";
            this.keyboardLayout = window.localStorage.getItem("keyboardLayout") || "wickiHayden";
            this.bassOffset = (+window.localStorage.getItem("bassOffset")) || 0;
            this.layout = window.localStorage.getItem("layout") || "small";
            this.colorTheme = window.localStorage.getItem("colorTheme") || "AbyssBox Classic";
            this.customTheme = window.localStorage.getItem("customTheme");
            this.customTheme2 = window.localStorage.getItem("customTheme2");
            this.visibleOctaves = (window.localStorage.getItem("visibleOctaves") >>> 0) || Preferences.defaultVisibleOctaves;
            const defaultScale = Config.scales.dictionary[window.localStorage.getItem("defaultScale")];
            this.defaultScale = (defaultScale != undefined) ? defaultScale.index : 0;
            if (window.localStorage.getItem("volume") != null) {
                this.volume = Math.min(window.localStorage.getItem("volume") >>> 0, 75);
            }
            if (window.localStorage.getItem("fullScreen") != null) {
                if (window.localStorage.getItem("fullScreen") == "true")
                    this.layout = "long";
                window.localStorage.removeItem("fullScreen");
            }
            this.customFont = window.localStorage.getItem("customFontName") || "none";
            this.customBG = window.localStorage.getItem("backgroundName") || "none";
            this.customIcons = window.localStorage.getItem("customIconsName") || "none";
            this.customBorder = window.localStorage.getItem("customBorderName") || "none";
            this.customCursor = window.localStorage.getItem("customIconsName") || "none";
        }
        save() {
            window.localStorage.setItem("autoPlay", this.autoPlay ? "true" : "false");
            window.localStorage.setItem("autoFollow", this.autoFollow ? "true" : "false");
            window.localStorage.setItem("enableNotePreview", this.enableNotePreview ? "true" : "false");
            window.localStorage.setItem("showFifth", this.showFifth ? "true" : "false");
            window.localStorage.setItem("showThird", this.showThird ? "true" : "false");
            window.localStorage.setItem("advancedColorScheme", this.advancedColorScheme ? "true" : "false");
            window.localStorage.setItem("notesOutsideScale", this.notesOutsideScale ? "true" : "false");
            window.localStorage.setItem("defaultScale", Config.scales[this.defaultScale].name);
            window.localStorage.setItem("showLetters", this.showLetters ? "true" : "false");
            window.localStorage.setItem("showChannels", this.showChannels ? "true" : "false");
            window.localStorage.setItem("showScrollBar", this.showScrollBar ? "true" : "false");
            window.localStorage.setItem("alwaysFineNoteVol", this.alwaysFineNoteVol ? "true" : "false");
            window.localStorage.setItem("displayVolumeBar", this.displayVolumeBar ? "true" : "false");
            window.localStorage.setItem("enableChannelMuting", this.enableChannelMuting ? "true" : "false");
            window.localStorage.setItem("instrumentCopyPaste", this.instrumentCopyPaste ? "true" : "false");
            window.localStorage.setItem("instrumentImportExport", this.instrumentImportExport ? "true" : "false");
            window.localStorage.setItem("displayBrowserUrl", this.displayBrowserUrl ? "true" : "false");
            window.localStorage.setItem("pressControlForShortcuts", this.pressControlForShortcuts ? "true" : "false");
            window.localStorage.setItem("enableMidi", this.enableMidi ? "true" : "false");
            window.localStorage.setItem("showRecordButton", this.showRecordButton ? "true" : "false");
            window.localStorage.setItem("snapRecordedNotesToRhythm", this.snapRecordedNotesToRhythm ? "true" : "false");
            window.localStorage.setItem("ignorePerformedNotesNotInScale", this.ignorePerformedNotesNotInScale ? "true" : "false");
            window.localStorage.setItem("metronomeCountIn", this.metronomeCountIn ? "true" : "false");
            window.localStorage.setItem("metronomeWhileRecording", this.metronomeWhileRecording ? "true" : "false");
            window.localStorage.setItem("showOscilloscope", this.showOscilloscope ? "true" : "false");
            window.localStorage.setItem("showSampleLoadingStatus", this.showSampleLoadingStatus ? "true" : "false");
            window.localStorage.setItem("showDescription", this.showDescription ? "true" : "false");
            window.localStorage.setItem("showInstrumentScrollbars", this.showInstrumentScrollbars ? "true" : "false");
            window.localStorage.setItem("notesFlashWhenPlayed", this.notesFlashWhenPlayed ? "true" : "false");
            window.localStorage.setItem("selectionCounter", this.selectionCounter ? "true" : "false");
            window.localStorage.setItem("keyboardLayout", this.keyboardLayout);
            window.localStorage.setItem("bassOffset", String(this.bassOffset));
            window.localStorage.setItem("layout", this.layout);
            window.localStorage.setItem("colorTheme", this.colorTheme);
            window.localStorage.setItem("customTheme", this.customTheme);
            window.localStorage.setItem("customFontName", this.customFont);
            window.localStorage.setItem("backgroundName", this.customBG);
            window.localStorage.setItem("customIconsName", this.customIcons);
            window.localStorage.setItem("customBorderName", this.customBorder);
            window.localStorage.setItem("customCursorName", this.customCursor);
            window.localStorage.setItem("customTheme2", this.customTheme2);
            window.localStorage.setItem("volume", String(this.volume));
            window.localStorage.setItem("visibleOctaves", String(this.visibleOctaves));
            window.localStorage.setItem("closePromptByClickoff", this.closePromptByClickoff ? "true" : "false");
            window.localStorage.setItem("frostedGlassBackground", this.frostedGlassBackground ? "true" : "false");
            window.localStorage.setItem("displayShortcutButtons", this.displayShortcutButtons ? "true" : "false");
            window.localStorage.setItem("oldMobileLayout", this.oldMobileLayout ? "true" : "false");
            window.localStorage.setItem("oldModNotes", this.oldModNotes ? "true" : "false");
            window.localStorage.setItem("instrumentSettingsSimplifier", this.instrumentSettingsSimplifier ? "true" : "false");
        }
    }
    Preferences.defaultVisibleOctaves = 3;

    class ChangeNotifier {
        constructor() {
            this._watchers = [];
            this._dirty = false;
        }
        watch(watcher) {
            if (this._watchers.indexOf(watcher) == -1) {
                this._watchers.push(watcher);
            }
        }
        unwatch(watcher) {
            const index = this._watchers.indexOf(watcher);
            if (index != -1) {
                this._watchers.splice(index, 1);
            }
        }
        changed() {
            this._dirty = true;
        }
        notifyWatchers() {
            if (!this._dirty)
                return;
            this._dirty = false;
            for (const watcher of this._watchers.concat()) {
                watcher();
            }
        }
    }

    class SongDocument {
        constructor() {
            this.notifier = new ChangeNotifier();
            this.selection = new Selection(this);
            this.prefs = new Preferences();
            this.channel = 0;
            this.muteEditorChannel = 0;
            this.bar = 0;
            this.recentPatternInstruments = [];
            this.viewedInstrument = [];
            this.recordingModulators = false;
            this.continuingModRecordingChange = null;
            this.trackVisibleBars = 16;
            this.trackVisibleChannels = 4;
            this.barScrollPos = 0;
            this.channelScrollPos = 0;
            this.prompt = null;
            this.addedEffect = false;
            this.addedEnvelope = false;
            this.currentPatternIsDirty = false;
            this._recovery = new SongRecovery();
            this._recentChange = null;
            this._sequenceNumber = 0;
            this._lastSequenceNumber = 0;
            this._stateShouldBePushed = false;
            this._recordedNewSong = false;
            this._waitingToUpdateState = false;
            this._whenHistoryStateChanged = () => {
                if (this.synth.recording) {
                    this.performance.abortRecording();
                }
                if (window.history.state == null && window.location.hash != "") {
                    this._sequenceNumber++;
                    this._resetSongRecoveryUid();
                    const state = { canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: null, selection: this.selection.toJSON() };
                    try {
                        new ChangeSong(this, this._getHash());
                    }
                    catch (error) {
                        errorAlert(error);
                    }
                    this.prompt = state.prompt;
                    if (this.prefs.displayBrowserUrl) {
                        this._replaceState(state, this.song.toBase64String());
                    }
                    else {
                        this._pushState(state, this.song.toBase64String());
                    }
                    this.forgetLastChange();
                    this.notifier.notifyWatchers();
                    this.synth.pause();
                    this.synth.goToBar(0);
                    return;
                }
                const state = this._getHistoryState();
                if (state == null)
                    throw new Error("History state is null.");
                if (state.sequenceNumber == this._sequenceNumber)
                    return;
                this.bar = state.bar;
                this.channel = state.channel;
                this.viewedInstrument[this.channel] = state.instrument;
                this._sequenceNumber = state.sequenceNumber;
                this.prompt = state.prompt;
                try {
                    new ChangeSong(this, this._getHash());
                }
                catch (error) {
                    errorAlert(error);
                }
                this._recoveryUid = state.recoveryUid;
                this.selection.fromJSON(state.selection);
                this.forgetLastChange();
                this.notifier.notifyWatchers();
            };
            this._cleanDocument = () => {
                this.notifier.notifyWatchers();
            };
            this._cleanDocumentIfNotRecordingMods = () => {
                if (!this.recordingModulators)
                    this.notifier.notifyWatchers();
                else {
                    this.modRecordingHandler();
                }
            };
            this._validateDocState = () => {
                const channelCount = this.song.getChannelCount();
                for (let i = this.recentPatternInstruments.length; i < channelCount; i++) {
                    this.recentPatternInstruments[i] = [0];
                }
                this.recentPatternInstruments.length = channelCount;
                for (let i = 0; i < channelCount; i++) {
                    if (i == this.channel) {
                        if (this.song.patternInstruments) {
                            const pattern = this.song.getPattern(this.channel, this.bar);
                            if (pattern != null) {
                                this.recentPatternInstruments[i] = pattern.instruments.concat();
                            }
                        }
                        else {
                            const channel = this.song.channels[this.channel];
                            for (let j = 0; j < channel.instruments.length; j++) {
                                this.recentPatternInstruments[i][j] = j;
                            }
                            this.recentPatternInstruments[i].length = channel.instruments.length;
                        }
                    }
                    discardInvalidPatternInstruments(this.recentPatternInstruments[i], this.song, i);
                }
                for (let i = this.viewedInstrument.length; i < channelCount; i++) {
                    this.viewedInstrument[i] = 0;
                }
                this.viewedInstrument.length = channelCount;
                for (let i = 0; i < channelCount; i++) {
                    if (this.song.patternInstruments && !this.song.layeredInstruments && i == this.channel) {
                        const pattern = this.song.getPattern(this.channel, this.bar);
                        if (pattern != null) {
                            this.viewedInstrument[i] = pattern.instruments[0];
                        }
                    }
                    this.viewedInstrument[i] = Math.min(this.viewedInstrument[i] | 0, this.song.channels[i].instruments.length - 1);
                }
                const highlightedPattern = this.getCurrentPattern();
                if (highlightedPattern != null && this.song.patternInstruments) {
                    this.recentPatternInstruments[this.channel] = highlightedPattern.instruments.concat();
                }
                if ((!this.synth.playing && (this.bar < this.selection.boxSelectionBar || this.selection.boxSelectionBar + this.selection.boxSelectionWidth <= this.bar)) ||
                    this.channel < this.selection.boxSelectionChannel ||
                    this.selection.boxSelectionChannel + this.selection.boxSelectionHeight <= this.channel ||
                    this.song.barCount < this.selection.boxSelectionBar + this.selection.boxSelectionWidth ||
                    channelCount < this.selection.boxSelectionChannel + this.selection.boxSelectionHeight ||
                    (this.selection.boxSelectionWidth == 1 && this.selection.boxSelectionHeight == 1)) {
                    this.selection.resetBoxSelection();
                }
                this.barScrollPos = Math.max(0, Math.min(this.song.barCount - this.trackVisibleBars, this.barScrollPos));
                this.channelScrollPos = Math.max(0, Math.min(this.song.getChannelCount() - this.trackVisibleChannels, this.channelScrollPos));
            };
            this._updateHistoryState = () => {
                this._waitingToUpdateState = false;
                let hash;
                try {
                    hash = this.song.toBase64String();
                }
                catch (error) {
                    errorAlert(error);
                    return;
                }
                if (this._stateShouldBePushed)
                    this._sequenceNumber++;
                if (this._recordedNewSong) {
                    this._resetSongRecoveryUid();
                }
                else {
                    this._recovery.saveVersion(this._recoveryUid, this.song.title, hash);
                }
                let state = { canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: this.prompt, selection: this.selection.toJSON() };
                if (this._stateShouldBePushed) {
                    this._pushState(state, hash);
                }
                else {
                    this._replaceState(state, hash);
                }
                this._stateShouldBePushed = false;
                this._recordedNewSong = false;
            };
            this.notifier.watch(this._validateDocState);
            Layout.setLayout(this.prefs.layout);
            if (window.sessionStorage.getItem("currentUndoIndex") == null) {
                window.sessionStorage.setItem("currentUndoIndex", "0");
                window.sessionStorage.setItem("oldestUndoIndex", "0");
                window.sessionStorage.setItem("newestUndoIndex", "0");
            }
            let songString = window.location.hash;
            if (songString == "") {
                songString = this._getHash();
            }
            try {
                this.song = new Song(songString);
                if (songString == "" || songString == undefined) {
                    setDefaultInstruments(this.song);
                    this.song.scale = this.prefs.defaultScale;
                }
            }
            catch (error) {
                errorAlert(error);
            }
            songString = this.song.toBase64String();
            this.synth = new Synth(this.song);
            this.synth.volume = this._calcVolume();
            this.synth.anticipatePoorPerformance = isMobile;
            document.addEventListener('visibilitychange', e => {
                if (document.visibilityState === 'visible') {
                    if (this.song.setSongTheme == "none") {
                        if (window.localStorage.getItem("colorTheme") != null) {
                            if (window.localStorage.getItem("colorTheme") != ColorConfig.currentSetTheme) {
                                ColorConfig.setTheme(String(window.localStorage.getItem("colorTheme")));
                                if (window.localStorage.getItem("colorTheme") == "custom") {
                                    CustomThemeBases.setFont(String(window.localStorage.getItem("customFontName")));
                                    CustomThemeBases.setBackground(String(window.localStorage.getItem("customBackground")));
                                    CustomThemeBases.setIcons(String(window.localStorage.getItem("customIconsName")));
                                    CustomThemeBases.setBorder(String(window.localStorage.getItem("customBorderName")));
                                    CustomThemeBases.setCursor(String(window.localStorage.getItem("customCursorName")));
                                }
                                else {
                                    CustomThemeBases.setFont("none");
                                    CustomThemeBases.setBackground("none");
                                    CustomThemeBases.setIcons("none");
                                    CustomThemeBases.setBorder("none");
                                    CustomThemeBases.setCursor("none");
                                }
                            }
                        }
                    }
                }
            });
            if (this.song.setSongTheme == "none") {
                ColorConfig.setTheme(this.prefs.colorTheme);
                if (window.localStorage.getItem("colorTheme") == "custom") {
                    CustomThemeBases.setFont(this.prefs.customFont);
                    CustomThemeBases.setBackground(this.prefs.customBG);
                    CustomThemeBases.setIcons(this.prefs.customIcons);
                    CustomThemeBases.setBorder(this.prefs.customBorder);
                    CustomThemeBases.setCursor(this.prefs.customCursor);
                }
            }
            else {
                ColorConfig.setTheme(this.song.setSongTheme);
            }
            let state = this._getHistoryState();
            if (state == null) {
                state = { canUndo: false, sequenceNumber: 0, bar: 0, channel: 0, instrument: 0, recoveryUid: generateUid(), prompt: null, selection: this.selection.toJSON() };
            }
            if (state.recoveryUid == undefined)
                state.recoveryUid = generateUid();
            this._replaceState(state, songString);
            window.addEventListener("hashchange", this._whenHistoryStateChanged);
            window.addEventListener("popstate", this._whenHistoryStateChanged);
            this.bar = state.bar | 0;
            this.channel = state.channel | 0;
            for (let i = 0; i <= this.channel; i++)
                this.viewedInstrument[i] = 0;
            this.viewedInstrument[this.channel] = state.instrument | 0;
            this._recoveryUid = state.recoveryUid;
            this.prompt = state.prompt;
            this.selection.fromJSON(state.selection);
            this.selection.scrollToSelectedPattern();
            for (const eventName of ["change", "click", "keyup", "mousedown", "mouseup", "touchstart", "touchmove", "touchend", "touchcancel"]) {
                window.addEventListener(eventName, this._cleanDocument);
            }
            for (const eventName of ["keydown", "input", "mousemove"]) {
                window.addEventListener(eventName, this._cleanDocumentIfNotRecordingMods);
            }
            this._validateDocState();
            this.performance = new SongPerformance(this);
        }
        toggleDisplayBrowserUrl() {
            const state = this._getHistoryState();
            if (state == null)
                throw new Error("History state is null.");
            this.prefs.displayBrowserUrl = !this.prefs.displayBrowserUrl;
            this._replaceState(state, this.song.toBase64String());
        }
        _getHistoryState() {
            if (this.prefs.displayBrowserUrl) {
                return window.history.state;
            }
            else {
                const json = JSON.parse(window.sessionStorage.getItem(window.sessionStorage.getItem("currentUndoIndex")));
                return json == null ? null : json.state;
            }
        }
        _getHash() {
            if (this.prefs.displayBrowserUrl) {
                return window.location.hash;
            }
            else {
                const json = JSON.parse(window.sessionStorage.getItem(window.sessionStorage.getItem("currentUndoIndex")));
                return json == null ? "" : json.hash;
            }
        }
        _replaceState(state, hash) {
            if (this.prefs.displayBrowserUrl) {
                window.history.replaceState(state, "", "#" + hash);
            }
            else {
                window.sessionStorage.setItem(window.sessionStorage.getItem("currentUndoIndex") || "0", JSON.stringify({ state, hash }));
                window.history.replaceState(null, "", location.pathname);
            }
        }
        _pushState(state, hash) {
            if (this.prefs.displayBrowserUrl) {
                window.history.pushState(state, "", "#" + hash);
            }
            else {
                let currentIndex = Number(window.sessionStorage.getItem("currentUndoIndex"));
                let oldestIndex = Number(window.sessionStorage.getItem("oldestUndoIndex"));
                currentIndex = (currentIndex + 1) % SongDocument._maximumUndoHistory;
                window.sessionStorage.setItem("currentUndoIndex", String(currentIndex));
                window.sessionStorage.setItem("newestUndoIndex", String(currentIndex));
                if (currentIndex == oldestIndex) {
                    oldestIndex = (oldestIndex + 1) % SongDocument._maximumUndoHistory;
                    window.sessionStorage.setItem("oldestUndoIndex", String(oldestIndex));
                }
                window.sessionStorage.setItem(String(currentIndex), JSON.stringify({ state, hash }));
                window.history.replaceState(null, "", location.pathname);
            }
            this._lastSequenceNumber = state.sequenceNumber;
        }
        hasRedoHistory() {
            return this._lastSequenceNumber > this._sequenceNumber;
        }
        _forward() {
            if (this.prefs.displayBrowserUrl) {
                window.history.forward();
            }
            else {
                let currentIndex = Number(window.sessionStorage.getItem("currentUndoIndex"));
                let newestIndex = Number(window.sessionStorage.getItem("newestUndoIndex"));
                if (currentIndex != newestIndex) {
                    currentIndex = (currentIndex + 1) % SongDocument._maximumUndoHistory;
                    window.sessionStorage.setItem("currentUndoIndex", String(currentIndex));
                    setTimeout(this._whenHistoryStateChanged);
                }
            }
        }
        _back() {
            if (this.prefs.displayBrowserUrl) {
                window.history.back();
            }
            else {
                let currentIndex = Number(window.sessionStorage.getItem("currentUndoIndex"));
                let oldestIndex = Number(window.sessionStorage.getItem("oldestUndoIndex"));
                if (currentIndex != oldestIndex) {
                    currentIndex = (currentIndex + SongDocument._maximumUndoHistory - 1) % SongDocument._maximumUndoHistory;
                    window.sessionStorage.setItem("currentUndoIndex", String(currentIndex));
                    setTimeout(this._whenHistoryStateChanged);
                }
            }
        }
        record(change, replace = false, newSong = false) {
            if (change.isNoop()) {
                this._recentChange = null;
                if (replace)
                    this._back();
            }
            else {
                change.commit();
                this._recentChange = change;
                this._stateShouldBePushed = this._stateShouldBePushed || !replace;
                this._recordedNewSong = this._recordedNewSong || newSong;
                if (!this._waitingToUpdateState) {
                    window.requestAnimationFrame(this._updateHistoryState);
                    this._waitingToUpdateState = true;
                }
            }
        }
        _resetSongRecoveryUid() {
            this._recoveryUid = generateUid();
        }
        openPrompt(prompt) {
            this.prompt = prompt;
            const hash = this.song.toBase64String();
            this._sequenceNumber++;
            const state = { canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: this.prompt, selection: this.selection.toJSON() };
            this._pushState(state, hash);
        }
        undo() {
            const state = this._getHistoryState();
            if (state == null || state.canUndo)
                this._back();
        }
        redo() {
            this._forward();
        }
        setProspectiveChange(change) {
            this._recentChange = change;
        }
        forgetLastChange() {
            this._recentChange = null;
        }
        checkLastChange() {
            return this._recentChange;
        }
        lastChangeWas(change) {
            return change != null && change == this._recentChange;
        }
        goBackToStart() {
            this.bar = 0;
            this.channel = 0;
            this.barScrollPos = 0;
            this.channelScrollPos = 0;
            this.synth.snapToStart();
            this.notifier.changed();
        }
        setVolume(val) {
            this.prefs.volume = val;
            this.prefs.save();
            this.synth.volume = this._calcVolume();
        }
        _calcVolume() {
            return Math.min(1.0, Math.pow(this.prefs.volume / 50.0, 0.5)) * Math.pow(2.0, (this.prefs.volume - 75.0) / 25.0);
        }
        getCurrentPattern(barOffset = 0) {
            return this.song.getPattern(this.channel, this.bar + barOffset);
        }
        getCurrentInstrument(barOffset = 0) {
            if (barOffset == 0) {
                return this.viewedInstrument[this.channel];
            }
            else {
                const pattern = this.getCurrentPattern(barOffset);
                return pattern == null ? 0 : pattern.instruments[0];
            }
        }
        getMobileLayout() {
            return (this.prefs.layout == "wide") ? window.innerWidth <= 1000 : window.innerWidth <= 710;
        }
        getBarWidth() {
            return (!this.getMobileLayout() && this.prefs.enableChannelMuting && (!this.getFullScreen() || this.prefs.layout == "wide")) ? 30 : 32;
        }
        getChannelHeight() {
            const squashed = this.getMobileLayout() || this.song.getChannelCount() > 4 || (this.song.barCount > this.trackVisibleBars && this.song.getChannelCount() > 3);
            const megaSquashed = !this.getMobileLayout() && (((this.prefs.layout != "wide") && this.song.getChannelCount() > 11) || this.song.getChannelCount() > 22);
            return megaSquashed ? 23 : (squashed ? 27 : 32);
        }
        getFullScreen() {
            return !this.getMobileLayout() && (this.prefs.layout != "small");
        }
        getVisibleOctaveCount() {
            return this.getFullScreen() ? this.prefs.visibleOctaves : Preferences.defaultVisibleOctaves;
        }
        getVisiblePitchCount() {
            return this.getVisibleOctaveCount() * Config.pitchesPerOctave + 1;
        }
        getBaseVisibleOctave(channel) {
            const visibleOctaveCount = this.getVisibleOctaveCount();
            return Math.max(0, Math.min(Config.pitchOctaves - visibleOctaveCount, Math.ceil(this.song.channels[channel].octave - visibleOctaveCount * 0.5)));
        }
    }
    SongDocument._maximumUndoHistory = 300;

    const doc = new SongDocument();
    const editor = new SongEditor(doc);
    const beepboxEditorContainer = document.getElementById("beepboxEditorContainer");
    beepboxEditorContainer.appendChild(editor.mainLayer);
    editor.whenUpdated();
    editor.mainLayer.className += " load";
    editor.mainLayer.getElementsByClassName("pattern-area")[0].className += " load";
    editor.mainLayer.getElementsByClassName("settings-area")[0].className += " load";
    editor.mainLayer.getElementsByClassName("editor-song-settings")[0].className += " load";
    editor.mainLayer.getElementsByClassName("instrument-settings-area")[0].className += " load";
    editor.mainLayer.getElementsByClassName("trackAndMuteContainer")[0].className += " load";
    editor.mainLayer.getElementsByClassName("barScrollBar")[0].className += " load";
    $('#pitchPresetSelect').select2({ dropdownAutoWidth: true });
    $('#drumPresetSelect').select2({ dropdownAutoWidth: true });
    $("body").on('click', '.select2-container--open .select2-results__group', function () {
        $(this).siblings().toggle();
    });
    $("#pitchPresetSelect").on('select2:open', function () {
        $('.select2-dropdown--below').css('opacity', 0);
        $('.select2-dropdown').css('opacity', 1);
        $('#pitchPresetSelect');
        setTimeout(() => {
            let groups = $('.select2-container--open .select2-results__group');
            let options = $('.select2-container--open .select2-results__option');
            $.each(groups, (index, v) => {
                $(v).siblings().hide();
                $(v)[0].setAttribute("style", "color: " + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + ";");
            });
            $.each(options, (index, v) => {
                $(v)[0].setAttribute("style", "color: " + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + ";");
            });
            for (var i = 0; i < totalPresets.length; i++) {
                if (setPresets.includes(totalPresets[i]) && totalPresets.includes(totalPresets[i])) {
                    $(".select2-results__option[aria-label='" + totalPresets[i] + " ▾']").css("display", "unset");
                }
                else {
                    $(".select2-results__option[aria-label='" + totalPresets[i] + " ▾']").css("display", "none");
                }
            }
            $('.select2-dropdown--below').css('opacity', 1);
        }, 0);
    });
    $("#drumPresetSelect").on('select2:open', function () {
        $('.select2-dropdown--below').css('opacity', 0);
        $('.select2-dropdown').css('opacity', 1);
        $('#drumPresetSelect');
        setTimeout(() => {
            let groups = $('.select2-container--open .select2-results__group');
            let options = $('.select2-container--open .select2-results__option');
            $.each(groups, (index, v) => {
                $(v).siblings().hide();
                $(v)[0].setAttribute("style", "color: " + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + ";");
            });
            $.each(options, (index, v) => {
                $(v)[0].setAttribute("style", "color: " + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + ";");
            });
            $('.select2-dropdown--below').css('opacity', 1);
        }, 0);
    });
    $('#pitchPresetSelect').on("change", editor._whenSetPitchedPreset);
    $('#pitchPresetSelect').on("select2:close", editor._refocus);
    $('#drumPresetSelect').on("change", editor._whenSetDrumPreset);
    $('#drumPresetSelect').on("select2:close", editor._refocus);
    editor.mainLayer.focus();
    if (!isMobile && doc.prefs.autoPlay) {
        function autoplay() {
            if (!document.hidden) {
                doc.synth.play();
                editor.updatePlayButton();
                window.removeEventListener("visibilitychange", autoplay);
            }
        }
        if (document.hidden) {
            window.addEventListener("visibilitychange", autoplay);
        }
        else {
            window.setTimeout(autoplay);
        }
    }
    if ("scrollRestoration" in history)
        history.scrollRestoration = "manual";
    editor.updatePlayButton();
    if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/service_worker.js", { updateViaCache: "all", scope: "/" }).catch(() => { });
    }

    exports.ChangePreset = ChangePreset;
    exports.Channel = Channel;
    exports.ColorConfig = ColorConfig;
    exports.Config = Config;
    exports.EditorConfig = EditorConfig;
    exports.ExportPrompt = ExportPrompt;
    exports.Instrument = Instrument;
    exports.Note = Note;
    exports.Pattern = Pattern;
    exports.Song = Song;
    exports.SongDocument = SongDocument;
    exports.SongEditor = SongEditor;
    exports.Synth = Synth;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=beepbox_editor.js.map
